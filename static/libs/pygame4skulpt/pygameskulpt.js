Sk.builtinFiles.files['src/lib/pygame/display.js'] = "var $builtinmodule = function (name) {\n    var mod = {};\n    mod.init = new Sk.builtin.func(function () {\n        mod.__is_initialized = true;\n        return Sk.builtin.none.none$;\n    });\n    mod.quit = new Sk.builtin.func(function () {\n        mod.__is_initialized = false;\n        return Sk.builtin.none.none$;\n    });\n    mod.get_init = new Sk.builtin.func(function () {\n        if (mod.__is_initialized) {\n            return Sk.ffi.remapToPy(true);\n        }\n        return Sk.ffi.remapToPy(false);\n    });\n    mod.set_mode = new Sk.builtin.func(function (size, flags) {\n        var f = 0;\n        if (flags !== undefined) {\n            f = Sk.ffi.remapToJs(flags);\n        }\n        if (f & PygameLib.constants.FULLSCREEN) {\n            mod.surface = Sk.misceval.callsim(PygameLib.SurfaceType, size, Sk.ffi.remapToPy(0x1100));\n        } else {\n            mod.surface = Sk.misceval.callsim(PygameLib.SurfaceType, size, Sk.ffi.remapToPy(0x1000));\n        }\n        const w = skulptGetIndex(size, 0);\n        const h = skulptGetIndex(size, 1);\n        Sk.console.handlePygameResize(w, h);\n\n        PygameLib.surface = mod.surface;\n        return mod.surface;\n    });\n    mod.set_mode.co_name = new Sk.builtins['str']('set_mode');\n    mod.set_mode.co_varnames = ['size', 'flags'];\n\n    mod.get_surface = new Sk.builtin.func(function () {\n        return PygameLib.surface;\n    });\n    mod.update = new Sk.builtin.func(function (rectangle) {\n        Sk.misceval.callsim(mod.surface.update, mod.surface, rectangle);\n    });\n    mod.flip = new Sk.builtin.func(function () {\n        Sk.misceval.callsim(mod.surface.update, mod.surface, undefined);\n    });\n    mod.set_caption = new Sk.builtin.func(function (caption) {\n        PygameLib.caption = Sk.ffi.remapToJs(caption);\n        if (Sk.title_container) {\n            Sk.title_container.innerText = PygameLib.caption;\n        }\n    });\n    mod.get_caption = new Sk.builtin.func(function () {\n        return Sk.ffi.remapToPy(PygameLib.caption);\n    });\n    mod.get_active = new Sk.builtin.func(function () {\n        return Sk.ffi.remapToPy(document.hasFocus());\n    });\n    return mod;\n};\n";
Sk.builtinFiles.files['src/lib/pygame/draw.js'] = "function skulptGetIndex(obj, index) {\n    return Sk.ffi.remapToJs(Sk.abstr.objectGetItem(obj, new Sk.builtin.int_(index)));\n}\n\nvar $builtinmodule = function (name) {\n    mod = {};\n    mod.rect = new Sk.builtin.func(draw_rect);\n    mod.polygon = new Sk.builtin.func(draw_polygon);\n    mod.circle = new Sk.builtin.func(draw_circle);\n    mod.ellipse = new Sk.builtin.func(draw_ellipse);\n    mod.arc = new Sk.builtin.func(draw_arc);\n    mod.line = new Sk.builtin.func(draw_line);\n    mod.lines = new Sk.builtin.func(draw_lines);\n    mod.aaline = new Sk.builtin.func(draw_aaline);\n    mod.aalines = new Sk.builtin.func(draw_aalines);\n    return mod;\n};\n\n//returns Rect object used as bounding box for drawing functions\nvar bbox = function (min_h, max_h, min_w, max_w) {\n    var width = max_w - min_w;\n    var height = max_h - min_h;\n    var top = min_h;\n    var left = min_w;\n    t = new Sk.builtin.tuple([left, top]);\n    return PygameLib.make_rect(left, top, width, height);\n};\n\nfunction rgbaColorFromPygame(color_js) {\n    return 'rgba(' + color_js[0] + ', ' + color_js[1] + ', ' + color_js[2] + ', ' + color_js[3] + ')';\n}\n\n//pygame.draw.rect()\n//rect(Surface, color, Rect, width=0) -> Rect\nvar draw_rect = function (surface, color, rect, width = 0) {\n    var ctx = surface.context2d;\n    var color_js = PygameLib.extract_color(color);\n    var width_js = Sk.ffi.remapToJs(width);\n\n    var left = skulptGetIndex(rect, 0);\n    var top = skulptGetIndex(rect, 1);\n    var w = skulptGetIndex(rect, 2);\n    var h = skulptGetIndex(rect, 3);\n\n    if (width_js) {\n        ctx.lineWidth = width_js;\n        ctx.strokeStyle = rgbaColorFromPygame(color_js);\n        ctx.strokeRect(left, top, w, h);\n    } else {\n        ctx.fillStyle = rgbaColorFromPygame(color_js);\n        ctx.fillRect(left, top, w, h);\n    }\n\n    return PygameLib.make_rect(left, top, w, h);\n};\n\n//pygame.draw.polygon()\n//polygon(Surface, color, pointlist, width=0) -> Rect\nvar draw_polygon = function (surface, color, pointlist, width = 0) {\n    return draw_lines(surface, color, true, pointlist, width);\n};\n\n//pygame.draw.circle()\n//circle(Surface, color, pos, radius, width=0) -> Rect\nvar draw_circle = function (surface, color, pos, radius, width = 0) {\n    var ctx = surface.context2d;\n    var width_js = Sk.ffi.remapToJs(width);\n    let x = skulptGetIndex(pos, 0);\n    let y = skulptGetIndex(pos, 1);\n    var rad = Sk.ffi.remapToJs(radius);\n    var color_js = PygameLib.extract_color(color);\n    ctx.beginPath();\n    ctx.arc(x, y, rad, 0, 2 * Math.PI);\n    if (width_js) {\n        ctx.lineWidth = width_js;\n        ctx.strokeStyle = rgbaColorFromPygame(color_js);\n        ctx.stroke();\n    } else {\n        ctx.fillStyle = rgbaColorFromPygame(color_js);\n        ctx.fill();\n    }\n\n    return bbox(x - rad, y + rad, x - rad, y + rad);\n};\n\n//pygame.draw.arc()\n//arc(Surface, color, Rect, start_angle, stop_angle, width=1) -> Rect\nvar draw_arc = function (surface, color, rect, start_angle, stop_angle, width = 0) {\n    return draw_oval(surface, color, rect, start_angle, stop_angle, width, false);\n};\n\n//pygame.draw.arg()\n//ellipse(Surface, color, Rect, width=0) -> Rect\nvar draw_ellipse = function (surface, color, rect, width = 0) {\n    return draw_oval(surface, color, rect, 0, 2 * Math.PI, width, true);\n};\n\n//help function\nvar draw_oval = function (surface, color, rect, start_angle, stop_angle, width, ellipse = false) {\n    var ctx = surface.context2d;\n    var width_js = Sk.ffi.remapToJs(width);\n    var color_js = PygameLib.extract_color(color);\n\n    var left = skulptGetIndex(rect, 0);\n    var top = skulptGetIndex(rect, 1);\n    var w = skulptGetIndex(rect, 2);\n    var h = skulptGetIndex(rect, 3);\n\n    var angles = [0, 0];\n    angles[0] = Sk.ffi.remapToJs(start_angle);\n    angles[1] = Sk.ffi.remapToJs(stop_angle);\n    var centerX = left + w / 2;\n    var centerY = top + h / 2;\n\n    ctx.beginPath();\n\n    ctx.ellipse(centerX, centerY, w / 2, h / 2, 0, -angles[0], -angles[1], true);\n\n    if (width_js) {\n        ctx.lineWidth = width_js;\n        ctx.strokeStyle = rgbaColorFromPygame(color_js);\n        ctx.stroke();\n    } else if (ellipse) {\n        ctx.fillStyle = rgbaColorFromPygame(color_js);\n        ctx.fill();\n    }\n\n    return PygameLib.make_rect(left, top, w, h);\n};\n\n//pygame.draw.line()\n//line(Surface, color, start_pos, end_pos, width=1) -> Rect\nvar draw_line = function (surface, color, start_pos, end_pos, width = 1) {\n    const width_js = Sk.ffi.remapToJs(width);\n    const ax = skulptGetIndex(start_pos, 0);\n    const ay = skulptGetIndex(start_pos, 1);\n    const bx = skulptGetIndex(end_pos, 0);\n    const by = skulptGetIndex(end_pos, 1);\n    let points;\n    if (Math.abs(ax - bx) <= Math.abs(ay - by)) {\n        points = new Sk.builtin.list([new Sk.builtin.tuple([ax - width_js / 2, ay]),\n                                      new Sk.builtin.tuple([ax + width_js / 2, ay]),\n                                      new Sk.builtin.tuple([bx + width_js / 2, by]),\n                                      new Sk.builtin.tuple([bx - width_js / 2, by])]);\n    }\n    else {\n        points = new Sk.builtin.list([new Sk.builtin.tuple([ax, ay - width_js / 2]),\n                                      new Sk.builtin.tuple([ax, ay + width_js / 2]),\n                                      new Sk.builtin.tuple([bx, by + width_js / 2]),\n                                      new Sk.builtin.tuple([bx, by - width_js / 2])]);\n    }\n    draw_polygon(surface, color, points);\n    const left = Math.min(ax, bx);\n    const right = Math.max(ax, bx);\n    const top = Math.min(ay, by);\n    const bot = Math.max(ay, by);\n    return bbox(top, bot, left, right);\n};\n\n//pygame.draw.lines()\n//lines(Surface, color, closed, pointlist, width=1) -> Rect\nvar draw_lines = function (surface, color, closed, pointlist, width = 1) {\n    var width_js = Sk.ffi.remapToJs(width);\n    var closed_js = Sk.ffi.remapToJs(closed);\n    var color_js = PygameLib.extract_color(color);\n    var ctx = surface.context2d;\n\n    const iter = Sk.abstr.iter(pointlist);\n    const first = Sk.abstr.iternext(iter, false);\n\n    let min_w, min_h, max_h, max_w;\n    const extend = (x, y) => {\n        min_w = Math.min(min_w, x);\n        max_w = Math.max(max_w, x);\n        min_h = Math.min(min_h, y);\n        max_h = Math.max(max_h, y);\n    }\n    const initializeSize = (x, y) => {\n        min_w = x;\n        max_w = x;\n        min_h = y;\n        max_h = y;\n    }\n    if (!width_js) {\n        ctx.beginPath();\n        ctx.lineWidth = width_js;\n        initializeSize(skulptGetIndex(first, 0), skulptGetIndex(first, 1));\n        ctx.moveTo(min_w, min_h);\n\n        Sk.misceval.iterFor(iter, function (point) {\n            const x = skulptGetIndex(point, 0);\n            const y = skulptGetIndex(point, 1);\n            ctx.lineTo(x, y);\n            extend(x, y);\n        });\n\n        if (closed_js) {\n            ctx.closePath();\n        }\n        console.log(\"W\", width_js);\n    } else {\n        let cx =skulptGetIndex(first, 0);\n        let cy =skulptGetIndex(first, 1);\n        initializeSize(cx, cy);\n        Sk.misceval.iterFor(iter, function (point) {\n            const nx = skulptGetIndex(point, 0);\n            const ny = skulptGetIndex(point, 1);\n            draw_line(surface, color, new Sk.builtin.tuple([cx, cy]), new Sk.builtin.tuple([nx, ny]), width);\n            extend(nx, ny);\n            cx = nx;\n            cy = ny;\n        });\n        console.log(\"L\", width_js, min_h, max_h, min_w, max_w);\n        return bbox(min_h, max_h, min_w, max_w);\n    }\n\n    if (width_js) {\n        ctx.strokeStyle = rgbaColorFromPygame(color_js);\n        ctx.stroke();\n    } else {\n        ctx.fillStyle = rgbaColorFromPygame(color_js);\n        ctx.fill();\n    }\n    console.log(\"A\", width_js, min_h, max_h, min_w, max_w);\n    return bbox(min_h, max_h, min_w, max_w);\n};\n\n//pygame.draw.aaline()\n//aaline(Surface, color, startpos, endpos, blend=1) -> Rect\nvar draw_aaline = function (surface, color, startpos, endpos, blend = 1) {\n    return draw_line(surface, color, startpos, endpos);\n};\n\n//pygame.draw.aalines()\n//aalines(Surface, color, closed, pointlist, blend=1) -> Rect\nvar draw_aalines = function (surface, color, closed, pointlist, blend = 1) {\n    return draw_lines(surface, color, closed, pointlist);\n};\n";
Sk.builtinFiles.files['src/lib/pygame/event.js'] = "var $builtinmodule = function (name) {\n    var mod = {};\n    mod.get = new Sk.builtin.func(get_event);\n    mod.EventType = Sk.misceval.buildClass(mod, event_EventType_f, \"EventType\", []);\n    PygameLib.EventType = mod.EventType;\n    mod.Event = new Sk.builtin.func(function (type, dict) {\n        return Sk.misceval.callsim(mod.EventType, type, dict)\n    });\n\n    mod.wait = new Sk.builtin.func(function () {\n        return new Sk.misceval.promiseToSuspension(new Promise(function (resolve) {\n            var f = function () {\n                if (PygameLib.eventQueue.length) {\n                    var event = PygameLib.eventQueue.splice(0, 1)[0];\n                    var type = Sk.ffi.remapToPy(event[0]);\n                    var dictjs = event[1];\n                    kvs = [];\n                    for (k in dictjs) {\n                        kvs.push(Sk.ffi.remapToPy(k));\n                        kvs.push(Sk.ffi.remapToPy(dictjs[k]));\n                    }\n                    var dict = new Sk.builtin.dict(kvs);\n                    var e = Sk.misceval.callsim(PygameLib.EventType, type, dict);\n                    resolve(e);\n                }\n                else\n                    Sk.setTimeout(f, 10);\n            };\n\n            Sk.setTimeout(f, 10);\n        }));\n    });\n    return mod;\n};\n\n//pygame.event module\n//pygame.event.get()\n//get() -> Eventlist\n//get(type) -> Eventlist\n//get(typelist) -> Eventlist\nvar get_event = function (types) {\n    Sk.builtin.pyCheckArgs('get_event', arguments, 0, 1, false, false);\n    var list = [];\n    var t, d;\n    var types_js = types ? Sk.ffi.remapToJs(types) : [];\n    var queue = types ? (Sk.abstr.typeName(types) === \"list\" ?\n            PygameLib.eventQueue.filter(e => types_js.includes(e[0]))\n            : PygameLib.eventQueue.filter(e => e[0] === types_js))\n        : PygameLib.eventQueue;\n\n    for (var i = 0; i < queue.length; i++) {\n        var event = queue[i];\n        var type = Sk.ffi.remapToPy(event[0]);\n        var dictjs = event[1];\n        kvs = [];\n        for (k in dictjs) {\n            kvs.push(Sk.ffi.remapToPy(k));\n            kvs.push(Sk.ffi.remapToPy(dictjs[k]));\n        }\n        var dict = new Sk.builtin.dict(kvs);\n        var e = Sk.misceval.callsim(PygameLib.EventType, type, dict);\n        list.push(e);\n    }\n    queue.splice(0);\n\n    return new Sk.builtin.list(list);\n}\n\nfunction event_EventType_f($gbl, $loc) {\n    $loc.__init__ = new Sk.builtin.func(function (self, type, dict) {\n        Sk.builtin.pyCheckArgs('__init__', arguments, 2, 3, false, false);\n        dict = dict || new Sk.builtin.dict();\n        Sk.abstr.sattr(self, Sk.builtin.str.$dict, dict, false);\n        Sk.abstr.sattr(self, new Sk.builtin.str('type'), type, false);\n        dictjs = Sk.ffi.remapToJs(dict);\n        for (k in dictjs) {\n            Sk.abstr.sattr(self, new Sk.builtin.str(k), Sk.ffi.remapToPy(dictjs[k]), false);\n        }\n        return Sk.builtin.none.none$;\n    });\n    $loc.__init__.co_name = new Sk.builtins['str']('__init__');\n    $loc.__init__.co_varnames = ['self', 'type', 'dict'];\n\n    $loc.__repr__ = new Sk.builtin.func(function (self) {\n        var dict = Sk.ffi.remapToJs(Sk.abstr.gattr(self, Sk.builtin.str.$dict, false));\n        var type = Sk.ffi.remapToJs(Sk.abstr.gattr(self, new Sk.builtin.str('type'), false));\n        return Sk.ffi.remapToPy('<Event(' + type + ' ' + dict + ')>');\n    });\n    $loc.__repr__.co_name = new Sk.builtins['str']('__repr__');\n    $loc.__repr__.co_varnames = ['self'];\n\n}\n";
Sk.builtinFiles.files['src/lib/pygame/font.js'] = "const NAME_STR = new Sk.builtin.str('name');\nconst SZ_STR = new Sk.builtin.str('sz');\nconst BOLD_STR = new Sk.builtin.str('bold');\nconst ITALIC_STR = new Sk.builtin.str('italic');\nconst UNDERLINE_STR = new Sk.builtin.str('underline');\n\n$builtinmodule = function (name) {\n    mod = {};\n    mod.__is_initialized = false;\n    mod.Font = Sk.misceval.buildClass(mod, font_Font, \"FontType\", []);\n    PygameLib.FontType = mod.Font;\n    mod.SysFont = new Sk.builtin.func(function (name, size, bold, italic) {\n        var font = Sk.misceval.callsim(PygameLib.FontType, name, size);\n        Sk.abstr.sattr(font, NAME_STR, name, false);\n        Sk.abstr.sattr(font, SZ_STR, size, false);\n        if (bold === undefined) {\n            Sk.abstr.sattr(font, BOLD_STR, Sk.ffi.remapToPy(false), false);\n        } else {\n            Sk.abstr.sattr(font, BOLD_STR, bold, false);\n        }\n        if (italic === undefined) {\n            Sk.abstr.sattr(font, ITALIC_STR, Sk.ffi.remapToPy(false), false);\n        } else {\n            Sk.abstr.sattr(font, ITALIC_STR, italic, false);\n        }\n        Sk.abstr.sattr(font, UNDERLINE_STR, Sk.ffi.remapToPy(false), false);\n        return font;\n    });\n    mod.init = new Sk.builtin.func(function () {\n        mod.__is_initialized = true;\n    });\n    mod.quit = new Sk.builtin.func(function () {\n        mod.__is_initialized = false;\n    });\n    mod.get_init = new Sk.builtin.func(function () {\n        if (mod.__is_initialized) {\n            return Sk.ffi.remapToPy(true);\n        }\n        return Sk.ffi.remapToPy(false);\n    });\n    mod.get_default_font = new Sk.builtin.func(function () {\n        return Sk.ffi.remapToPy('arial');\n    });\n    mod.get_fonts = new Sk.builtin.func(function () {\n        return Sk.ffi.remapToPy(fonts_osx);\n    });\n    mod.match_font = new Sk.builtin.func(function () {\n        return Sk.builtin.none.none$;\n    });\n    return mod;\n};\n\nfunction font_Font($gbl, $loc) {\n    $loc.__init__ = new Sk.builtin.func(function (self, filename, size) {\n        Sk.abstr.sattr(self, NAME_STR, name, false);\n        Sk.abstr.sattr(self, SZ_STR, size, false);\n        Sk.abstr.sattr(self, BOLD_STR, Sk.ffi.remapToPy(false), false);\n        Sk.abstr.sattr(self, ITALIC_STR, Sk.ffi.remapToPy(false), false);\n        Sk.abstr.sattr(self, UNDERLINE_STR, Sk.ffi.remapToPy(false), false);\n        return Sk.builtin.none.none$;\n    });\n    $loc.render = new Sk.builtin.func(renderFont, $gbl);\n    $loc.render.co_name = new Sk.builtins['str']('render');\n    $loc.render.co_varnames = ['self', 'text', 'antialias', 'color', 'background'];\n    $loc.render.$defaults = [Sk.builtin.none.none$];\n\n    $loc.size = new Sk.builtin.func(fontSize, $gbl);\n    $loc.size.co_name = new Sk.builtins['str']('size');\n\n    $loc.set_underline = new Sk.builtin.func(function (self, bool) {\n        Sk.abstr.sattr(self, UNDERLINE_STR, bool, false);\n    }, $gbl);\n    $loc.get_underline = new Sk.builtin.func(function (self) {\n        return Sk.abstr.gattr(self, UNDERLINE_STR, false);\n    }, $gbl);\n\n    $loc.set_italic = new Sk.builtin.func(function (self, bool) {\n        Sk.abstr.sattr(self, ITALIC_STR, bool, false);\n    }, $gbl);\n    $loc.get_italic = new Sk.builtin.func(function (self) {\n        return Sk.abstr.gattr(self, ITALIC_STR, false);\n    }, $gbl);\n\n    $loc.set_bold = new Sk.builtin.func(function (self, bool) {\n        Sk.abstr.sattr(self, BOLD_STR, bool, false);\n    }, $gbl);\n    $loc.get_bold = new Sk.builtin.func(function (self) {\n        return Sk.abstr.gattr(self, BOLD_STR, false);\n    }, $gbl);\n}\n\nfunction fontSize(self, text) {\n    var msg = Sk.ffi.remapToJs(text);\n    var h = 1.01 * Sk.ffi.remapToJs(Sk.abstr.gattr(self, SZ_STR, false));\n    var fontName = Sk.ffi.remapToJs(Sk.abstr.gattr(self, NAME_STR, false));\n    fontName = \"\" + h + \"px \" + fontName;\n    var bold = Sk.ffi.remapToJs(Sk.abstr.gattr(self, BOLD_STR, false));\n    if (bold) {\n        fontName = 'bold ' + fontName;\n    }\n    var italic = Sk.ffi.remapToJs(Sk.abstr.gattr(self, ITALIC_STR, false));\n    if (italic) {\n        fontName = 'italic ' + fontName;\n    }\n    var w = 300;\n\n    // Create a dummy canvas in order to exploit its measureText() method\n    var t = new Sk.builtin.tuple([w, h]);\n    var s = Sk.misceval.callsim(PygameLib.SurfaceType, t);\n    var ctx = s.offscreen_canvas.getContext(\"2d\");\n    ctx.font = fontName;\n    return new Sk.builtin.tuple([ctx.measureText(msg).width, h]);\n}\n\nfunction renderFont(self, text, antialias, color, background) {\n    var msg = Sk.ffi.remapToJs(text);\n    var STRETCH_CONST = 1.1;\n    var h = STRETCH_CONST * Sk.ffi.remapToJs(Sk.abstr.gattr(self, SZ_STR, false));\n    var fontName = Sk.ffi.remapToJs(Sk.abstr.gattr(self, NAME_STR, false));\n    fontName = \"\" + h + \"px \" + fontName;\n    var bold = Sk.ffi.remapToJs(Sk.abstr.gattr(self, BOLD_STR, false));\n    if (bold) {\n        fontName = 'bold ' + fontName;\n    }\n    var italic = Sk.ffi.remapToJs(Sk.abstr.gattr(self, ITALIC_STR, false));\n    if (italic) {\n        fontName = 'italic ' + fontName;\n    }\n    var underline = Sk.ffi.remapToJs(Sk.abstr.gattr(self, UNDERLINE_STR, false));\n\n    var w = 300;\n\n    // Create a dummy canvas in order to exploit its measureText() method\n    var t = new Sk.builtin.tuple([w, h]);\n    var s = Sk.misceval.callsim(PygameLib.SurfaceType, t);\n    var ctx = s.offscreen_canvas.getContext(\"2d\");\n    ctx.font = fontName;\n    w = ctx.measureText(msg).width;\n    console.log(w, h);\n    t = new Sk.builtin.tuple([w, h]);\n\n    s = Sk.misceval.callsim(PygameLib.SurfaceType, t);\n    ctx = s.offscreen_canvas.getContext(\"2d\");\n    if (background !== undefined) {\n        var background_js = PygameLib.extract_color(background);\n        ctx.fillStyle = 'rgba(' + background_js[0] + ', ' + background_js[1] + ', ' + background_js[2] + ', '\n            + background_js[3] + ')';\n        ctx.fillRect(0, 0, s.offscreen_canvas.width, s.offscreen_canvas.height);\n    }\n    ctx.font = fontName;\n    var color_js = PygameLib.extract_color(color);\n    ctx.fillStyle = 'rgba(' + color_js[0] + ', ' + color_js[1] + ', ' + color_js[2] + ', ' + color_js[3] + ')';\n    ctx.fillText(msg, 0, 1 / STRETCH_CONST * h);\n    if (underline) {\n        ctx.strokeStyle = 'rgba(' + color_js[0] + ', ' + color_js[1] + ', ' + color_js[2] + ', ' + color_js[3] + ')';\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.moveTo(0, h - 1);\n        ctx.lineTo(w, h - 1);\n        ctx.stroke();\n    }\n    return s;\n}\n\nvar fonts_osx = ['applecoloremojiui', 'cochin', 'raanana', 'franklingothicmedium', 'signpainter', 'iowanoldstyle', 'corbel', 'avenir', 'birchstd', 'bitstreamverasansmono', 'sfcompacttext', 'albayan', 'applesdgothicneo', 'damascus', 'malayalammn', 'kohinoortelugu', 'minionpro', 'estrangelomidyat', 'lucidagrandeui', 'hiraginokakugothicpro', 'diwankufi', 'calibri', 'arialnarrow', 'applesdgothicneoi', 'gillsans', 'stixsizefoursym', 'adobehebrew', 'farisi', 'ptsanscaption', 'hiraginomarugothicpron', 'avenirnextcondensed', 'couriernew', 'myriadhebrew', 'hiraginominchopron', 'laomn', 'estrangeloantioch', 'damascuspua', 'hiraginosans', 'avenirnext', 'gohatibebzemen', 'altarikhpua', 'arial', 'itfdevanagari', 'hiraginokakugothicstd', 'adobegaramondpro', 'oratorstd', 'kozukagothicpro', 'skia', 'chaparralpro', 'sfnsdisplaycondensed', 'geezapro', 'lithospro', 'heitisc', 'gujaratimt', 'corsivahebrew', 'hoeflertext', 'athelas', 'lucidagrande', 'timesnewroman', 'decotypenaskhpua', 'webdings', 'inaimathi', 'myriadarabic', 'lettergothicstd', 'kozukagothicpr6n', 'lucidasansunicode', 'geezaprointerface', 'kozukaminchopr6n', 'luminari', 'helveticaneue', 'kailasa', 'helvetica', 'systemfont', 'shreedevanagari714', 'gillsansmt', 'applebraille', 'adobedevanagari', 'krungthep', 'stixgeneral', 'verdana', 'sfcompactdisplay', 'baskerville', 'sertomalankara', 'rockwell', 'newpeninimmt', 'malayalamsangammn', 'palatinolinotype', 'mspmincho', 'euphemiaucas', 'gurmukhisangammn', 'ptsansnarrow', 'trattatello', 'consolas', 'mishafigold', 'arialhebrewscholar', 'pingfangtc', 'symbol', 'ptserif', 'ayuthaya', 'notonastaliqurduui', 'stixintegralsd', 'kohinoordevanagari', 'sertomardin', 'notonastaliqurdu', 'stixnonunicode', 'adobekaitistd', 'pingfangsc', 'pingfanghk', 'stencilstd', 'trebuchetms', 'heititc', 'times', 'kohinoorbangla', 'marlett', 'seravek', 'tamilmn', 'andalemono', 'kufistandardgkpua', 'estrangelotalada', 'meiryo', 'banglasangammn', 'adobeheitistd', 'alnilepua', 'cambria', 'sukhumvitset', 'msmincho', 'marion', 'cooperstd', 'brushscriptmt', 'charter', 'comicsansms', 'sinhalasangammn', 'mingliuhkscs', 'palatino', 'arialroundedmtbold', 'estrangeloquenneshrin', 'ptsans', 'kefa', 'chalkboard', 'arabicuidisplay', 'laosangammn', 'impact', 'luxisans', 'menlo', 'bigcaslon', 'simhei', 'helveticaneuedeskinterface', 'myriadpro', 'snellroundhand', 'stixintegralsup', 'bitstreamverasans', 'arialhebrewdeskinterface', 'adobesongstd', 'stixsizeonesym', 'adobefanheitistd', 'superclarendon', 'sfcompactrounded', 'chalkboardse', 'muna', 'perpetua', 'hiraginokakugothicinterface', 'dinalternate', 'adobenaskh', 'stixintegralssm', 'tahoma', 'luxiserif', 'sertojerusalemoutline', 'telugusangammn', 'arabicuitext', 'sfnstextcondensed', 'adobemingstd', 'twcenmt', 'ptserifcaption', 'kannadasangammn', 'candara', 'americantypewriter', 'msreferencesansserif', 'papyrus', 'hiraginokakugothicpron', 'mishafi', 'futura', 'estrangeloedessa', 'sinhalamn', 'kozukaminchopro', 'albayanpua', 'adobecaslonpro', 'gujaratisangammn', 'trajanpro', 'constantia', 'myanmarsangammn', 'copperplate', 'teamviewer12', 'lucidaconsole', 'chalkduster', 'microsoftyibaiti', 'khmersangammn', 'songtitc', 'microsofttaile', 'bodoni72smallcaps', 'itfdevanagarimarathi', 'hiraginokakugothicstdn', 'oriyamn', 'georgia', 'pmingliuextb', 'nadeempua', 'tektonpro', 'applesymbols', 'markerfelt', 'nuevastd', 'songtisc', 'herculanum', 'optima', 'kufistandardgk', 'ptmono', 'bodoni72', 'adobearabic', 'giddyupstd', 'luximono', 'applechancery', 'khmermn', 'arialunicodems', 'bitstreamveraserif', 'eastsyriacadiabene', 'mspgothic', 'mingliu', 'bodoni72oldstyle', 'devanagarimt', 'sertobatnan', 'aquakana', 'hiraginosansgbinterface', 'mshtakan', 'msgothic', 'blackoakstd', 'bradleyhand', 'estrangelonisibin', 'prestigeelitestd', 'wingdings3', 'wingdings2', 'myanmarmn', 'sertokharput', 'stixsizefivesym', 'gurmukhimn', 'kannadamn', 'munapua', 'devanagarisangammn', 'wingdings', 'dincondensed', 'nadeem', 'sanapua', 'thonburi', 'applemyungjo', 'arialhebrew', 'beirutpua', 'baghdadpua', 'gurmukhimt', 'savoyeletcc', 'geezapropua', 'zapfino', 'telugumn', 'banglamn', 'waseem', 'arialblack', 'sertourhoy', 'charlemagnestd', 'microsoftsansserif', 'gulim', 'savoyelet', 'decotypenaskh', 'batang', 'stsong', 'ocrastd', 'franklingothicbook', 'didot', 'applegothic', 'altarikh', 'adobefangsongstd', 'stixvariants', 'zapfdingbats', 'hiraginosansgb', 'farah', 'baghdad', 'gb18030bitmap', 'kokonor', 'sertojerusalem', 'silom', 'estrangeloturabdin', 'bookshelfsymbol7', 'noteworthy', 'stixsizetwosym', 'oriyasangammn', 'tamilsangammn', 'alnile', 'phosphate', 'cambriamath', 'sana', 'stixintegralsupd', 'simsun', 'sathu', 'estrangelonisibinoutline', 'mingliuextb', 'simsunextb', 'beirut', 'farahpua', 'brushscriptstd', 'eastsyriacctesiphon', 'diwankufipua', 'rosewoodstd', 'mongolianbaiti', 'diwanthuluth', 'stixintegralsupsm', 'gabriola', 'mingliuhkscsextb', 'adobemyungjostd', 'msreferencespecialty', 'keyboard', 'microsofthimalaya', 'mesquitestd', 'poplarstd', 'hiraginomarugothicpro', 'hiraginominchopro', 'hobostd', 'stixsizethreesym', 'bodoniornaments', 'lastresort', 'pmingliu', 'applecoloremoji', 'plantagenetcherokee', 'adobegothicstd'];\n";
Sk.builtinFiles.files['src/lib/pygame/image.js'] = "var $builtinmodule = function (name) {\n    mod = {};\n\n    const DEFAULT_PROXY_FUNCTION = (proxyValue) => function (str) {\n        url = document.createElement(\"a\");\n        url.href = str;\n        if (window.location.host !== url.host) {\n            return proxyValue + \"/\" + str;\n        }\n        return str;\n    }\n\n    if (Sk.cachedEmoji === undefined) {\n        Sk.cachedEmoji = {};\n    }\n\n    mod.load = new Sk.builtin.func(function (filename) {\n        const fileobj = Sk.ffi.remapToJs(filename);\n        console.log(fileobj);\n        let svgMode = false;\n        if (!Sk.builtin.checkString(filename)) {\n            // Better hope it's an SVG dictionary!\n            svgMode = true;\n        }\n\n        let proxy;\n        if (svgMode && typeof (Sk.emojiProxy) === \"function\") {\n            proxy = Sk.emojiProxy;\n        } else if (svgMode && Sk.emojiProxy) {\n            proxy = DEFAULT_PROXY_FUNCTION(Sk.emojiProxy);\n        } else if (typeof (Sk.imageProxy) === \"function\") {\n            proxy = Sk.imageProxy;\n        } else {\n            proxy = DEFAULT_PROXY_FUNCTION(Sk.imageProxy);\n        }\n\n        let w, h, r, newW, newH, t;\n        if (svgMode) {\n            w = Math.ceil(fileobj['width'] * fileobj['scale_x']);\n            h = Math.ceil(fileobj['height'] * fileobj['scale_y']);\n            r = -fileobj['angle'] * Math.PI / 180;\n            newW = Math.ceil(w * Math.abs(Math.cos(r)) + h * Math.abs(Math.sin(r)));\n            newH = Math.ceil(w * Math.abs(Math.sin(r)) + h * Math.abs(Math.cos(r)));\n            t = new Sk.builtin.tuple([new Sk.builtin.int_(w), new Sk.builtin.int_(h)]);\n        }\n\n        const fullPath = proxy(svgMode ? fileobj['code'] : fileobj);\n        console.log(\"FullPath\", fullPath, Sk.cachedEmoji);\n        if (svgMode && fullPath in Sk.cachedEmoji) {\n            var img = Sk.cachedEmoji[fullPath];\n            img.setAttribute('width', w);\n            img.setAttribute('height', h);\n            console.log(\"Now drawing it at\", w, h);\n            var s = Sk.misceval.callsim(PygameLib.SurfaceType, t);\n            var ctx = s.offscreen_canvas.getContext(\"2d\");\n            //const old = Sk.cachedEmoji[fullPath].offscreen_canvas;\n            // Sk.cachedEmoji[fullPath] = Sk.misceval.callsim(PygameLib.SurfaceType, t);\n            // Sk.cachedEmoji[fullPath].offscreen_canvas.getContext(\"2d\").drawImage(img, 0, 0);\n            ctx.drawImage(img, 0, 0);\n            /*ctx.beginPath();\n            ctx.rect(0, 0, 49, 49);\n            const g = Math.round(Math.random()*255);\n            const b = Math.round(Math.random()*255);\n            ctx.fillStyle = `rgba(255, ${g}, ${b})`;\n            ctx.fill();*/\n            return s;\n        }\n        /*return new Sk.misceval.promiseToSuspension(new Promise(function (resolve) {\n            var t = new Sk.builtin.tuple([new Sk.builtin.int_(50), new Sk.builtin.int_(50)]);\n            var s = Sk.misceval.callsim(PygameLib.SurfaceType, t);\n            var ctx = s.offscreen_canvas.getContext(\"2d\");\n            ctx.beginPath();\n            ctx.rect(0, 0, 49, 49);\n            const g = Math.round(Math.random()*255);\n            const b = Math.round(Math.random()*255);\n            ctx.fillStyle = `rgba(255, ${g}, ${b})`;\n            ctx.fill();\n            console.log(\"LOCKON HERE\");\n            resolve(s);\n            return Sk.builtin.none.none$;\n        }));*/\n        return new Sk.misceval.promiseToSuspension(new Promise(function (resolve) {\n            var img = new Image();\n            img.crossOrigin = \"anonymous\";\n            img.src = fullPath;\n            img.onload = function () {\n                if (svgMode) {\n                    console.log(img, img.src, fileobj['width'], fileobj['height'], newW, newH);\n                    //img.style.transform = `scale(${fileobj['flip_x']}${fileobj['scale_x']}, ${fileobj['flip_y']}${fileobj['scale_y']})`;\n                    img.setAttribute('width', w);\n                    img.setAttribute('height', h);\n                    //console.log(fileobj, img);\n                    var s = Sk.misceval.callsim(PygameLib.SurfaceType, t);\n                    var ctx = s.offscreen_canvas.getContext(\"2d\");\n                    Sk.cachedEmoji[fullPath] = img;\n                    /*ctx.save();\n                    ctx.translate(newW / 2, newH / 2);\n                    ctx.rotate(r);\n                    ctx.translate(-w / 2, -h / 2);*/\n                    ctx.drawImage(img, 0, 0);\n                    resolve(s);\n                    //ctx.restore();\n                } else {\n                    const t = new Sk.builtin.tuple([img.width, img.height]);\n                    const s = Sk.misceval.callsim(PygameLib.SurfaceType, t);\n                    const ctx = s.offscreen_canvas.getContext(\"2d\");\n                    ctx.drawImage(img, 0, 0);\n                    resolve(s);\n                }\n            };\n            img.onerror = function () {\n                throw new Sk.builtin.RuntimeError(\"Image does not exist.\");\n            }\n        }));\n    });\n    mod.get_extended = new Sk.builtin.func(function () {\n        return Sk.ffi.remapToPy(false);\n    });\n    mod.save = new Sk.builtin.func(function (surf, filename) {\n        var fname = 'surface';\n        if (filename !== undefined) {\n            fname = Sk.ffi.remapToJs(filename);\n        }\n        // https://stackoverflow.com/a/34707543\n        saveAsPNG(surf.offscreen_canvas, fname);\n\n        function saveAsPNG(image, filename) { // No IE <11 support. Chrome URL bug for large images may crash\n            var anchorElement, event, blob;\n\n            function image2Canvas(image) {  // converts an image to canvas\n                function createCanvas(width, height) {  // creates a canvas of width height\n                    var can = document.createElement(\"canvas\");\n                    can.width = width;\n                    can.height = height;\n                    return can;\n                };\n                var newImage = canvas(img.width, img.height); // create new image\n                newImage.ctx = newImage.getContext(\"2d\");  // get image context\n                newImage.ctx.drawImage(image, 0, 0); // draw the image onto the canvas\n                return newImage;  // return the new image\n            }\n\n            if (image.toDataURL === undefined) {    // does the image have the toDataURL function\n                image = image2Canvas(image);  // No then convert to canvas\n            }\n            // if msToBlob and msSaveBlob then use them to save. IE >= 10\n            // As suggested by Kaiido\n            if (image.msToBlob !== undefined && navigator.msSaveBlob !== undefined) {\n                blob = image.msToBlob();\n                navigator.msSaveBlob(blob, filename + \".png\");\n                return;\n            }\n            anchorElement = document.createElement('a');  // Create a download link\n            anchorElement.href = image.toDataURL();   // attach the image data URL\n            // check for download attribute\n            if (anchorElement.download !== undefined) {\n                anchorElement.download = filename + \".png\";  // set the download filename\n                if (typeof MouseEvent === \"function\") {   // does the browser support the object MouseEvent\n                    event = new MouseEvent(   // yes create a new mouse click event\n                        \"click\", {\n                            view: window,\n                            bubbles: true,\n                            cancelable: true,\n                            ctrlKey: false,\n                            altKey: false,\n                            shiftKey: false,\n                            metaKey: false,\n                            button: 0,\n                            buttons: 1,\n                        }\n                    );\n                    anchorElement.dispatchEvent(event); // simulate a click on the download link.\n                } else if (anchorElement.fireEvent) {    // if no MouseEvent object try fireEvent\n                    anchorElement.fireEvent(\"onclick\");\n                }\n            }\n        }\n    });\n    return mod;\n};\n";
Sk.builtinFiles.files['src/lib/pygame/key.js'] = "var $builtinmodule = function (name) {\n    mod = {};\n    mod.set_repeat = new Sk.builtin.func(function (delay, interval) {\n        if (delay !== undefined) {\n            PygameLib.repeatKeys = true;\n        } else {\n            PygameLib.repeatKeys = false;\n        }\n    });\n    mod.get_repeat = new Sk.builtin.func(function () {\n        if (PygameLib.repeatKeys) {\n            return new Sk.builtin.tuple([1, 1]);\n        } else {\n            return new Sk.builtin.tuple([0, 0]);\n        }\n    });\n    mod.get_focused = new Sk.builtin.func(function () {\n        return Sk.ffi.remapToPy(document.hasFocus());\n    });\n    mod.get_pressed = new Sk.builtin.func(function () {\n        var pressed = new Array(PygameLib.constants.K_LAST+1).fill(false);\n        for(var key = 0; key< pressed.length; key ++) {\n            if(PygameLib.pressedKeys[key])\n                pressed[key] = true\n        }\n        return Sk.ffi.remapToPy(pressed);\n    });\n    mod.get_mods = new Sk.builtin.func(function () {\n        var mask = 0;\n        for (var i = 0; i < PygameLib.eventQueue.length; i++) {\n            for (var j = 0; j < keyboardModifierKeys.length; j++) {\n                if (PygameLib.eventQueue[i][1].key === keyboardModifierKeys[j]) {\n                    mask &= 1 << j;\n                }\n            }\n        }\n        return Sk.ffi.remapToPy(mask);\n    });\n    mod.set_mods = new Sk.builtin.func(function (m) {\n        var mask = Sk.ffi.remapToJs(m);\n        for (var i = 0; i < keyboardModifierKeys.length; i++) {\n            if (mask & (1 << i)) {\n                PygameLib.eventQueue.unshift([PygameLib.constants.KEYDOWN, {key: keyboardModifierKeys[i]}]);\n            }\n        }\n\n    });\n    // mod.name =\n    mod[\"name_$rw$\"] = new Sk.builtin.func(function (idx) {\n        var i = Sk.ffi.remapToJs(idx);\n        if (i < 0 || i >= 323) {\n            return Sk.ffi.remapToPy(\"unknown key\");\n        }\n        return Sk.ffi.remapToPy(keyToName[i]);\n    });\n    mod[\"key_code\"] = new Sk.builtin.func(function (idx) {\n        var i = Sk.ffi.remapToJs(idx);\n        let index = keyToName.indexOf(i);\n        if (index === -1) {\n            return Sk.ffi.remapToPy(\"unknown key\");\n        }\n        return Sk.ffi.remapToPy(index);\n    });\n\n    return mod;\n};\n\nkeyToName = ['unknown key', 'unknown key', 'unknown key', 'unknown key', 'unknown key', 'unknown key',\n    'unknown key', 'unknown key', 'backspace', 'tab', 'unknown key', 'unknown key', 'clear', 'return', 'unknown key',\n    'unknown key', 'unknown key', 'unknown key', 'unknown key', 'pause', 'unknown key', 'unknown key', 'unknown key',\n    'unknown key', 'unknown key', 'unknown key', 'unknown key', 'escape', 'unknown key', 'unknown key', 'unknown key',\n    'unknown key', 'space', '!', '\"', '#', '$', 'unknown key', '&', \"'\", '(', ')', '*', '+', ',', '-', '.', '/', '0',\n    '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?', '@', 'unknown key', 'unknown key',\n    'unknown key', 'unknown key', 'unknown key', 'unknown key', 'unknown key', 'unknown key', 'unknown key',\n    'unknown key', 'unknown key', 'unknown key', 'unknown key', 'unknown key', 'unknown key', 'unknown key',\n    'unknown key', 'unknown key', 'unknown key', 'unknown key', 'unknown key', 'unknown key', 'unknown key',\n    'unknown key', 'unknown key', 'unknown key', '[', '\\\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',\n    'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'unknown key',\n    'unknown key', 'unknown key', 'unknown key', 'delete', 'unknown key', 'unknown key', 'unknown key', 'unknown key',\n    'unknown key', 'unknown key', 'unknown key', 'unknown key', 'unknown key', 'unknown key', 'unknown key',\n    'unknown key', 'unknown key', 'unknown key', 'unknown key', 'unknown key', 'unknown key', 'unknown key',\n    'unknown key', 'unknown key', 'unknown key', 'unknown key', 'unknown key', 'unknown key', 'unknown key',\n    'unknown key', 'unknown key', 'unknown key', 'unknown key', 'unknown key', 'unknown key', 'unknown key',\n    'world 0', 'world 1', 'world 2', 'world 3', 'world 4', 'world 5', 'world 6', 'world 7', 'world 8', 'world 9',\n    'world 10', 'world 11', 'world 12', 'world 13', 'world 14', 'world 15', 'world 16', 'world 17', 'world 18',\n    'world 19', 'world 20', 'world 21', 'world 22', 'world 23', 'world 24', 'world 25', 'world 26', 'world 27',\n    'world 28', 'world 29', 'world 30', 'world 31', 'world 32', 'world 33', 'world 34', 'world 35', 'world 36',\n    'world 37', 'world 38', 'world 39', 'world 40', 'world 41', 'world 42', 'world 43', 'world 44', 'world 45',\n    'world 46', 'world 47', 'world 48', 'world 49', 'world 50', 'world 51', 'world 52', 'world 53', 'world 54',\n    'world 55', 'world 56', 'world 57', 'world 58', 'world 59', 'world 60', 'world 61', 'world 62', 'world 63',\n    'world 64', 'world 65', 'world 66', 'world 67', 'world 68', 'world 69', 'world 70', 'world 71', 'world 72',\n    'world 73', 'world 74', 'world 75', 'world 76', 'world 77', 'world 78', 'world 79', 'world 80', 'world 81',\n    'world 82', 'world 83', 'world 84', 'world 85', 'world 86', 'world 87', 'world 88', 'world 89', 'world 90',\n    'world 91', 'world 92', 'world 93', 'world 94', 'world 95', '[0]', '[1]', '[2]', '[3]', '[4]', '[5]', '[6]',\n    '[7]', '[8]', '[9]', '[.]', '[/]', '[*]', '[-]', '[+]', 'enter', 'equals', 'up', 'down', 'right', 'left', 'insert',\n    'home', 'end', 'page up', 'page down', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'f10', 'f11', 'f12',\n    'f13', 'f14', 'f15', 'unknown key', 'unknown key', 'unknown key', 'numlock', 'caps lock', 'scroll lock',\n    'right shift', 'left shift', 'right ctrl', 'left ctrl', 'right alt', 'left alt', 'right meta', 'left meta',\n    'left super', 'right super', 'alt gr', 'compose', 'help', 'print screen', 'sys req', 'break', 'menu', 'power',\n    'euro', 'undo', 'unknown key'];\nvar keyboardModifierKeys = [PygameLib.constants.K_LSHIFT, PygameLib.constants.K_RSHIFT, 0, 0, 0, 0,\n    PygameLib.constants.K_LCTRL, PygameLib.constants.K_RCTRL, PygameLib.constants.K_LALT, PygameLib.constants.K_RALT,\n    PygameLib.constants.K_LMETA, PygameLib.constants.K_RMETA, 0, PygameLib.constants.K_CAPSLOCK,\n    PygameLib.constants.K_NUMLOCK, PygameLib.constants.K_MODE];\n    ";
Sk.builtinFiles.files['src/lib/pygame/mouse.js'] = "var $builtinmodule = function (name) {\n    mod = {};\n    mod.get_pressed = new Sk.builtin.func(function () {\n        return Sk.ffi.remapToPy(PygameLib.mouseData[\"button\"]);\n    });\n    mod.get_pos = new Sk.builtin.func(function () {\n        return Sk.ffi.remapToPy(PygameLib.mouseData[\"pos\"]);\n    });\n    mod.get_rel = new Sk.builtin.func(function () {\n        return Sk.ffi.remapToPy(PygameLib.mouseData[\"rel\"]);\n    });\n    mod.set_pos = new Sk.builtin.func(function (x, y) {\n        if (Sk.abstr.typeName(x) === \"tuple\" && y === undefined) {\n            var xy = Sk.ffi.remapToJs(x);\n            x = xy[0];\n            y = xy[1];\n        } else if (Sk.abstr.typeName(x) === \"int\" && Sk.abstr.typeName(y) === \"int\") {\n            x = Sk.ffi.remapToJs(x);\n            y = Sk.ffi.remapToJs(y);\n        } else {\n            throw new Sk.builtin.TypeError(\"invalid position argument for set_pos\");\n        }\n        PygameLib.mouseData[\"pos\"] = [x, y];\n    });\n    mod.set_visible = new Sk.builtin.func(function (b) {\n        if (Sk.ffi.remapToJs(b)) {\n            document.body.style.cursor = '';\n        } else {\n            document.body.style.cursor = 'none';\n        }\n    });\n    mod.get_focused = new Sk.builtin.func(function () {\n        return Sk.ffi.remapToPy(document.hasFocus());\n    });\n    mod.set_cursor = new Sk.builtin.func(function () {\n        throw new Sk.builtin.NotImplementedError(\"Not yet implemented\");\n    });\n    mod.get_cursor = new Sk.builtin.func(function () {\n        throw new Sk.builtin.NotImplementedError(\"Not yet implemented\");\n    });\n    return mod;\n};\n";
Sk.builtinFiles.files['src/lib/pygame/sprite.js'] = "var $builtinmodule = function (name) {\r\n    var mod = {};\r\n\r\n    //sprite.Sprite\r\n    //function sprite_Sprite_f($gbl, $loc) {\r\n    //Sprite(*groups) -> Sprite\r\n    $loc.__init__ = new Sk.builtin.func(function (self, groups) {\r\n        Sk.builtin.pyCheckArgs('__init__', arguments, 2, 2, false, false);\r\n        //Sk.abstr.sattr(self, )\r\n\r\n        if (Sk.abstr.typeName(a) === \"tuple\" && Sk.abstr.typeName(b) === \"tuple\") {\r\n            if (c !== undefined || d !== undefined) {\r\n                throw new Sk.builtin.RuntimeError(\"Expected 2 tuples or 4 ints as input\");\r\n            }\r\n            var a_js = Sk.ffi.remapToJs(a);\r\n            var b_js = Sk.ffi.remapToJs(b);\r\n            Sk.abstr.sattr(self, LEFT_STR, Sk.ffi.remapToPy(a_js[0]), false);\r\n            Sk.abstr.sattr(self, TOP_STR, Sk.ffi.remapToPy(a_js[1]), false);\r\n            Sk.abstr.sattr(self, WIDTH_STR, Sk.ffi.remapToPy(b_js[0]), false);\r\n            Sk.abstr.sattr(self, HEIGHT_STR, Sk.ffi.remapToPy(b_js[1]), false);\r\n        } else if ((Sk.abstr.typeName(a) === \"int\" || Sk.abstr.typeName(a) === \"float\") &&\r\n            (Sk.abstr.typeName(b) === \"int\" || Sk.abstr.typeName(b) === \"float\") &&\r\n            (Sk.abstr.typeName(c) === \"int\" || Sk.abstr.typeName(c) === \"float\") &&\r\n            (Sk.abstr.typeName(d) === \"int\" || Sk.abstr.typeName(d) === \"float\")) {\r\n            Sk.abstr.sattr(self, LEFT_STR, a, false);\r\n            Sk.abstr.sattr(self, TOP_STR, b, false);\r\n            Sk.abstr.sattr(self, WIDTH_STR, c, false);\r\n            Sk.abstr.sattr(self, HEIGHT_STR, d, false);\r\n        }\r\n        return Sk.builtin.none.none$;\r\n    });\r\n    $loc.__init__.co_name = new Sk.builtins['str']('__init__');\r\n    $loc.__init__.co_varnames = ['self', 'left', 'top', 'width', 'heght'];\r\n\r\n    mod.Sprite = Sk.misceval.buildClass(mod, sprite_Sprite_f, \"Sprite\", []);\r\n    PygameLib.Sprite = mod.Sprite;\r\n    /*mod.Sprite = new Sk.builtin.func(function (type, dict) {\r\n        return Sk.misceval.callsim(mod.Sprite, type, dict)\r\n    });*/\r\n\r\n    return mod;\r\n};";
Sk.builtinFiles.files['src/lib/pygame/time.js'] = "const PREVTIME_STR = new Sk.builtin.str(\"prevTime\");\nconst GETTIME_STR = new Sk.builtin.str(\"getTime\");\nconst RAWTIME_STR = new Sk.builtin.str(\"rawTime\");\nconst FPSARRAY_STR = new Sk.builtin.str(\"fpsArray\");\nconst FPSIDX_STR = new Sk.builtin.str(\"fpsIdx\");\n\nvar $builtinmodule = function (name) {\n    mod = {};\n    mod.wait = new Sk.builtin.func(function (amount) {\n        var t_m = Sk.importModule(\"time\", false, true);\n        var sec = Sk.ffi.remapToJs(amount) / 1000;\n        return Sk.misceval.callsimOrSuspend(t_m.$d['sleep'], Sk.ffi.remapToPy(sec));\n    });\n\n    mod.get_ticks = new Sk.builtin.func(function () {\n        return Sk.ffi.remapToPy(new Date() - PygameLib.initial_time);\n    });\n    mod.delay = new Sk.builtin.func(function (amount) {\n        var t_m = Sk.importModule(\"time\", false, false);\n        var sec = Sk.ffi.remapToJs(amount) / 1000;\n        return Sk.misceval.callsimOrSuspend(t_m.$d['sleep'], Sk.ffi.remapToPy(sec));\n    });\n    mod.set_timer = new Sk.builtin.func(function (eventid, milliseconds) {\n        var event = Sk.ffi.remapToJs(eventid);\n        var ms = Sk.ffi.remapToJs(milliseconds);\n        if (PygameLib.eventTimer[event]) {\n            clearInterval(PygameLib.eventTimer[event].timer);\n        }\n        else {\n            PygameLib.eventTimer[event] = {};\n            PygameLib.eventTimer[event].f = function () {\n                var e = [event, {}];\n                PygameLib.eventQueue.unshift(e);\n            }\n        }\n        if (ms) {\n            PygameLib.eventTimer[event].timer = setInterval(PygameLib.eventTimer[event].f, ms);\n        }\n        return mod;\n    });\n\n    mod.Clock = Sk.misceval.buildClass(mod, time_Clock, 'Clock', []);\n    PygameLib.ClockType = mod.Clock;\n    return mod;\n};\n\nfunction time_Clock($gbl, $loc) {\n    $loc.__init__ = new Sk.builtin.func(function (self) {\n        Sk.abstr.sattr(self, PREVTIME_STR, Sk.builtin.none.none$, false);\n        Sk.abstr.sattr(self, GETTIME_STR, Sk.builtin.none.none$, false);\n        Sk.abstr.sattr(self, RAWTIME_STR, Sk.ffi.remapToPy(0), false);\n        Sk.abstr.sattr(self, FPSARRAY_STR, Sk.ffi.remapToPy([]), false);\n        Sk.abstr.sattr(self, FPSIDX_STR, Sk.ffi.remapToPy(0));\n        return Sk.builtin.none.none$;\n    }, $gbl);\n    $loc.__init__.co_name = new Sk.builtins['str']('__init__');\n\n    $loc.tick = new Sk.builtin.func(function (self, framerate) {\n\n        var currTime = Date.now();\n        var mills = 0;\n        if (Sk.ffi.remapToJs(Sk.abstr.gattr(self, PREVTIME_STR, false)) !== null) {\n            var prevTime = Sk.ffi.remapToJs(Sk.abstr.gattr(self, PREVTIME_STR, false));\n            mills = (currTime - prevTime);\n        }\n        Sk.abstr.sattr(self, PREVTIME_STR, Sk.ffi.remapToPy(currTime), false);\n        Sk.abstr.sattr(self, GETTIME_STR, Sk.ffi.remapToPy(mills), false);\n        var arr = Sk.ffi.remapToJs(Sk.abstr.gattr(self, FPSARRAY_STR, false));\n        var idx = Sk.ffi.remapToJs(Sk.abstr.gattr(self, FPSIDX_STR, false));\n        if (arr.length < 10) {\n            arr.push(mills);\n        } else {\n            arr[idx] = mills;\n        }\n        idx = (idx + 1) % 10;\n        Sk.abstr.sattr(self, FPSARRAY_STR, Sk.ffi.remapToPy(arr), false);\n        Sk.abstr.sattr(self, FPSIDX_STR, Sk.ffi.remapToPy(idx), false);\n        if (framerate !== undefined) {\n            var timeout = 1000 / Sk.ffi.remapToJs(framerate);\n            return new Sk.misceval.promiseToSuspension(\n                new Promise(function (resolve) {\n                    var f = function () {\n                        Sk.abstr.sattr(self, RAWTIME_STR, Sk.ffi.remapToPy(Date.now() - currTime), false);\n                        resolve(mills);\n                    };\n\n                    if (PygameLib.running) {\n                        Sk.setTimeout(f, timeout);\n                    }\n                }));\n        }\n        Sk.abstr.sattr(self, RAWTIME_STR, Sk.ffi.remapToPy(Date.now() - currTime), false);\n        return Sk.ffi.remapToPy(mills);\n    }, $gbl);\n    $loc.tick.co_name = new Sk.builtins['str']('tick');\n    $loc.tick.co_varnames = ['framerate'];\n    $loc.tick.$defaults = [Sk.ffi.remapToPy(0)];\n\n    $loc.tick_busy_loop = new Sk.builtin.func(function (self, framerate) {\n        var currTime = Date.now();\n        var mills = 0;\n        if (Sk.ffi.remapToJs(Sk.abstr.gattr(self, PREVTIME_STR, false)) !== null) {\n            var prevTime = Sk.ffi.remapToJs(Sk.abstr.gattr(self, PREVTIME_STR, false));\n            mills = (currTime - prevTime);\n        }\n        Sk.abstr.sattr(self, PREVTIME_STR, Sk.ffi.remapToPy(currTime), false);\n        Sk.abstr.sattr(self, GETTIME_STR, Sk.ffi.remapToPy(mills), false);\n\n        if (framerate !== undefined) {\n            var timeout = 1000 / Sk.ffi.remapToJs(framerate);\n            return new Sk.misceval.promiseToSuspension(\n                new Promise(function (resolve) {\n                    var f = function () {\n                        Sk.abstr.sattr(self, RAWTIME_STR, Sk.ffi.remapToPy(Date.now() - currTime), false);\n                        resolve(mills);\n                    };\n                    if (PygameLib.running) {\n                        Sk.setTimeout(f, timeout);\n                    }\n                }));\n        }\n        Sk.abstr.sattr(self, RAWTIME_STR, Sk.ffi.remapToPy(Date.now() - currTime), false);\n        return Sk.ffi.remapToPy(mills);\n    }, $gbl);\n    $loc.tick_busy_loop.co_name = new Sk.builtins['str']('tick_busy_loop');\n    $loc.tick_busy_loop.co_varnames = ['framerate'];\n    $loc.tick_busy_loop.$defaults = [Sk.ffi.remapToPy(0)];\n\n    $loc.get_time = new Sk.builtin.func(function (self) {\n        return Sk.abstr.gattr(self, GETTIME_STR, false);\n    });\n    $loc.get_time.co_name = new Sk.builtins['str']('get_time');\n\n    $loc.get_rawtime = new Sk.builtin.func(function (self) {\n        return Sk.abstr.gattr(self, RAWTIME_STR, false);\n    });\n    $loc.get_rawtime.co_name = new Sk.builtins['str']('get_rawtime');\n\n    $loc.get_fps = new Sk.builtin.func(function (self) {\n        var arr = Sk.ffi.remapToJs(Sk.abstr.gattr(self, FPSARRAY_STR, false));\n        if (arr.length < 10 || arr[0] === 0) {\n            return Sk.ffi.remapToPy(0);\n        }\n        var sum = 0;\n        for (var i = 0; i < 10; i++) {\n            sum += arr[i];\n        }\n        return Sk.ffi.remapToPy(sum / 10);\n    });\n}\n\ntime_Clock.co_name = new Sk.builtins['str']('Clock');\n";
Sk.builtinFiles.files['src/lib/pygame/transform.js'] = "var $builtinmodule = function (name) {\n    mod = {};\n    mod.flip = new Sk.builtin.func(function (surf, xbool, ybool) {\n        if (Sk.abstr.typeName(surf) !== \"Surface\" && Sk.abstr.typeName(surf) !== \"DesignerSurface\") {\n            throw new Sk.builtin.TypeError(\"Wrong arguments\");\n        }\n        if (Sk.abstr.typeName(xbool) !== \"bool\" || Sk.abstr.typeName(ybool) !== \"bool\") {\n            throw new Sk.builtin.TypeError(\"Wrong arguments\");\n        }\n        var t = new Sk.builtin.tuple([surf.width, surf.height]);\n        var ret = Sk.misceval.callsim(PygameLib.SurfaceType, t);\n        ret.context2d.save();\n        var xb = Sk.ffi.remapToJs(xbool);\n        var xflip = xb ? -1 : 1;\n        var yb = Sk.ffi.remapToJs(ybool);\n        var yflip = yb ? -1 : 1;\n        ret.context2d.scale(xflip, yflip);\n        ret.context2d.drawImage(surf.offscreen_canvas, -surf.width, 0, surf.width, surf.height);\n        ret.context2d.restore();\n        return ret;\n    });\n\n    function scale(surf, size, dest) {\n        //if (Sk.builtin.isinstance(surf, PygameLib.SurfaceType)) {\n        if (Sk.abstr.typeName(surf) !== \"Surface\" && Sk.abstr.typeName(surf) !== \"DesignerSurface\") {\n            throw new Sk.builtin.TypeError(\"Wrong arguments; first needs to be a Surface\");\n        }\n        if (Sk.abstr.typeName(size) !== \"tuple\") {\n            throw new Sk.builtin.TypeError(\"Wrong arguments; second needs to be a tuple\");\n        }\n        var sz = Sk.ffi.remapToJs(size);\n        var w = Math.round(sz[0]);\n        var h = Math.round(sz[1]);\n        if (w === 0 || h === 0) {\n            if (dest !== undefined && dest !== Sk.builtin.none.none$) {\n                dest.context2d.drawImage(surf.offscreen_canvas, 0, 0);\n            }\n            return surf;\n        }\n        var t = new Sk.builtin.tuple([Sk.ffi.remapToPy(w), Sk.ffi.remapToPy(h)]);\n        var xs = w / surf.width;\n        var ys = h / surf.height;\n        var ret = Sk.misceval.callsim(PygameLib.SurfaceType, t);\n        ret.context2d.save();\n        ret.context2d.scale(xs, ys);\n        ret.context2d.drawImage(surf.offscreen_canvas, 0, 0);\n        ret.context2d.restore();\n        //fillWhite(ret.context2d, w, h);\n        if (dest !== undefined && dest !== Sk.builtin.none.none$) {\n            dest.context2d.drawImage(ret.offscreen_canvas, 0, 0);\n        }\n        return ret;\n    }\n\n    mod.scale = new Sk.builtin.func(scale);\n    mod.smoothscale = new Sk.builtin.func(scale);\n    mod.rotate = new Sk.builtin.func(function (surf, angle) {\n        if (Sk.abstr.typeName(surf) !== \"Surface\" && Sk.abstr.typeName(surf) !== \"DesignerSurface\") {\n            throw new Sk.builtin.TypeError(\"Wrong arguments\");\n        }\n        var a = Sk.ffi.remapToJs(angle);\n        var w = surf.width;\n        var h = surf.height;\n        const r = -a * Math.PI / 180;\n        const newW = w*Math.abs(Math.cos(r)) + h*Math.abs(Math.sin(r));\n        const newH = w*Math.abs(Math.sin(r)) + h*Math.abs(Math.cos(r));\n        var t = new Sk.builtin.tuple([new Sk.builtin.float_(newW),\n            new Sk.builtin.float_(newH)]);\n        var ret = Sk.misceval.callsim(PygameLib.SurfaceType, t);\n        ret.context2d.save();\n        ret.context2d.translate(newW / 2, newH / 2);\n        ret.context2d.rotate(r);\n        ret.context2d.translate(-w / 2, -h / 2);\n        ret.context2d.drawImage(surf.offscreen_canvas, 0, 0);\n        ret.context2d.restore();\n        return ret;\n    });\n    mod.rotozoom = new Sk.builtin.func(function (surf, angle, sc) {\n        if (Sk.abstr.typeName(surf) !== \"Surface\" && Sk.abstr.typeName(surf) !== \"DesignerSurface\") {\n            throw new Sk.builtin.TypeError(\"Wrong arguments\");\n        }\n        var scale = Sk.ffi.remapToJs(sc);\n        var a = Sk.ffi.remapToJs(angle);\n        var w = surf.width;\n        var h = surf.height;\n        var t = new Sk.builtin.tuple([2 * scale * w, 2 * scale * h]);\n        var ret = Sk.misceval.callsim(PygameLib.SurfaceType, t);\n        ret.context2d.save();\n        ret.context2d.scale(scale, scale);\n        w *= scale;\n        h *= scale;\n        ret.context2d.translate(w / 2, h / 2);\n        ret.context2d.rotate(-a * Math.PI / 180);\n        ret.context2d.translate(-w / 2, -h / 2);\n        ret.context2d.drawImage(surf.offscreen_canvas, 0, 0);\n        ret.context2d.restore();\n        return ret;\n    });\n    mod.scale2x = new Sk.builtin.func(function (surf, dest) {\n        if (Sk.abstr.typeName(surf) !== \"Surface\" && Sk.abstr.typeName(surf) !== \"DesignerSurface\") {\n            throw new Sk.builtin.TypeError(\"Wrong arguments\");\n        }\n        var w = surf.width;\n        var h = surf.height;\n        var t = new Sk.builtin.tuple([2 * w, 2 * h]);\n        var ret = Sk.misceval.callsim(PygameLib.SurfaceType, t);\n        ret.context2d.save();\n        ret.context2d.scale(2, 2);\n        ret.context2d.drawImage(surf.offscreen_canvas, 0, 0);\n        ret.context2d.restore();\n        if (dest !== undefined && dest !== Sk.builtin.none.none$) {\n            dest.context2d.drawImage(ret.offscreen_canvas, 0, 0);\n        }\n        return ret;\n    });\n    mod.chop = new Sk.builtin.func(function (surf, rect) {\n        if (Sk.abstr.typeName(surf) !== \"Surface\" && Sk.abstr.typeName(surf) !== \"DesignerSurface\") {\n            throw new Sk.builtin.TypeError(\"Wrong arguments\");\n        }\n        if (Sk.abstr.typeName(rect) !== \"Rect\") {\n            throw new Sk.builtin.TypeError(\"Wrong arguments\");\n        }\n        var rr = PygameLib.extract_rect(rect);\n        var x1 = rr[0];\n        var y1 = rr[1];\n        var x2 = rr[0] + rr[2];\n        var y2 = rr[1] + rr[3];\n        var w = surf.width;\n        var h = surf.height;\n        var rw = w - x2;\n        var rh = h - y2;\n        var t = new Sk.builtin.tuple([w, h]);\n        var ret = Sk.misceval.callsim(PygameLib.SurfaceType, t);\n        ret.context2d.drawImage(surf.offscreen_canvas, 0, 0, x1, y1, 0, 0, x1, y1);\n        ret.context2d.drawImage(surf.offscreen_canvas, 0, y2, x1, rh, 0, y1, x1, rh);\n        ret.context2d.drawImage(surf.offscreen_canvas, x2, 0, rw, y1, x1, 0, rw, y1);\n        ret.context2d.drawImage(surf.offscreen_canvas, x2, y2, rw, rh, x1, y1, rw, rh);\n        return ret;\n    });\n    return mod;\n};\n";
Sk.builtinFiles.files['src/lib/pygame/version.js'] = "var $builtinmodule = function (name) {\n    mod = {};\n    mod.ver = Sk.ffi.remapToPy(\"1.9.3\");\n    mod.vernum = new Sk.builtin.tuple([Sk.ffi.remapToPy(1), Sk.ffi.remapToPy(9), Sk.ffi.remapToPy(3)]);\n    mod.rev = new Sk.builtin.str(\"\");\n    return mod;\n};\n";
Sk.builtinFiles.files['src/lib/pygame/__init__.js'] = "function makeCoordinate(x, y) {\n    return new Sk.builtin.tuple([Sk.ffi.remapToPy(x), Sk.ffi.remapToPy(y)]);\n}\n\n//pygame.Rect\nfunction rect_type_f($gbl, $loc) {\n    //Rect(Surface, color, Rect, width=0) -> Rect\n    //Rect((left, top), (width, height)) -> Rect\n    $loc.__init__ = new Sk.builtin.func(function (self, a, b, c, d) {\n        Sk.builtin.pyCheckArgs('__init__', arguments, 2, 5, false, false);\n        if (arguments.length === 5) {\n            Sk.abstr.sattr(self, LEFT_STR, a, false);\n            Sk.abstr.sattr(self, TOP_STR, b, false);\n            Sk.abstr.sattr(self, WIDTH_STR, c, false);\n            Sk.abstr.sattr(self, HEIGHT_STR, d, false);\n        } else if (arguments.length === 3) {\n            Sk.abstr.sattr(self, LEFT_STR, Sk.abstr.objectGetItem(a, new Sk.builtin.int_(0)), false);\n            Sk.abstr.sattr(self, TOP_STR, Sk.abstr.objectGetItem(a, new Sk.builtin.int_(1)), false);\n            Sk.abstr.sattr(self, WIDTH_STR, Sk.abstr.objectGetItem(b, new Sk.builtin.int_(0)), false);\n            Sk.abstr.sattr(self, HEIGHT_STR, Sk.abstr.objectGetItem(b, new Sk.builtin.int_(1)), false);\n        } else if (arguments.length === 2) {\n            // TODO: Support 'rect' attribute\n            Sk.abstr.sattr(self, LEFT_STR, Sk.abstr.objectGetItem(a, new Sk.builtin.int_(0)), false);\n            Sk.abstr.sattr(self, TOP_STR, Sk.abstr.objectGetItem(a, new Sk.builtin.int_(1)), false);\n            Sk.abstr.sattr(self, WIDTH_STR, Sk.abstr.objectGetItem(a, new Sk.builtin.int_(2)), false);\n            Sk.abstr.sattr(self, HEIGHT_STR, Sk.abstr.objectGetItem(a, new Sk.builtin.int_(3)), false);\n        } else {\n            throw new Sk.builtin.RuntimeError(\"Unknown Rect format with \"+arguments.length+\" arguments.\")\n        }\n        return Sk.builtin.none.none$;\n    });\n    $loc.__init__.co_name = new Sk.builtins['str']('__init__');\n    $loc.__init__.co_varnames = ['self', 'left', 'top', 'width', 'heght'];\n\n    $loc.__repr__ = new Sk.builtin.func(function (self) {\n        var left = Sk.ffi.remapToJs(Sk.abstr.gattr(self, LEFT_STR, false));\n        var top = Sk.ffi.remapToJs(Sk.abstr.gattr(self, TOP_STR, false));\n        var width = Sk.ffi.remapToJs(Sk.abstr.gattr(self, WIDTH_STR, false));\n        var height = Sk.ffi.remapToJs(Sk.abstr.gattr(self, HEIGHT_STR, false));\n        return Sk.ffi.remapToPy('<Rect(' + left + ', ' + top + ', ' + width + ', ' + height + ')>');\n    });\n    $loc.__repr__.co_name = new Sk.builtins['str']('__repr__');\n    $loc.__repr__.co_varnames = ['self'];\n\n    $loc.__getitem__ = new Sk.builtin.func(function (self, index) {\n        switch (Sk.ffi.remapToJs(index)) {\n            case 0: return Sk.abstr.gattr(self, LEFT_STR, false);\n            case 1: return Sk.abstr.gattr(self, TOP_STR, false);\n            case 2: return Sk.abstr.gattr(self, WIDTH_STR, false);\n            case 3: return Sk.abstr.gattr(self, HEIGHT_STR, false);\n        }\n    });\n\n    $loc.copy = new Sk.builtin.func(function (self) {\n        var left = Sk.ffi.remapToJs(Sk.abstr.gattr(self, LEFT_STR, false));\n        var top = Sk.ffi.remapToJs(Sk.abstr.gattr(self, TOP_STR, false));\n        var width = Sk.ffi.remapToJs(Sk.abstr.gattr(self, WIDTH_STR, false));\n        var height = Sk.ffi.remapToJs(Sk.abstr.gattr(self, HEIGHT_STR, false));\n        return PygameLib.make_rect(left, top, width, height);\n    }, $gbl);\n    // https://github.com/pygame/pygame/blob/master/src_c/rect.c\n    var x_getter = new Sk.builtin.func(function (self) {\n        return Sk.abstr.gattr(self, LEFT_STR, false);\n    });\n    var x_setter = new Sk.builtin.func(function (self, val) {\n        Sk.abstr.sattr(self, LEFT_STR, val, false);\n    });\n    $loc.x = Sk.misceval.callsimOrSuspend(Sk.builtins.property, x_getter, x_setter);\n\n    var y_getter = new Sk.builtin.func(function (self) {\n        return Sk.abstr.gattr(self, TOP_STR, false);\n    });\n    var y_setter = new Sk.builtin.func(function (self, val) {\n\n        Sk.abstr.sattr(self, TOP_STR, val, false);\n    });\n    $loc.y = Sk.misceval.callsimOrSuspend(Sk.builtins.property, y_getter, y_setter);\n\n    function get_top(self) {\n        return Sk.ffi.remapToJs(Sk.abstr.gattr(self, TOP_STR, false));\n    }\n\n    function get_height(self) {\n        return Sk.ffi.remapToJs(Sk.abstr.gattr(self, HEIGHT_STR, false));\n    }\n\n    function get_bottom(self) {\n        return get_top(self) + get_height(self);\n    }\n\n    function get_left(self) {\n        return Sk.ffi.remapToJs(Sk.abstr.gattr(self, LEFT_STR, false));\n    }\n\n    function get_width(self) {\n        return Sk.ffi.remapToJs(Sk.abstr.gattr(self, WIDTH_STR, false));\n    }\n\n    function get_right(self) {\n        return get_left(self) + get_width(self);\n    }\n\n    function get_centerx(self) {\n        return get_left(self) + Math.floor(get_width(self) / 2);\n    }\n\n    function get_centery(self) {\n        return get_top(self) + Math.floor(get_height(self) / 2);\n    }\n\n    function set_top(self, t) {\n        Sk.abstr.sattr(self, TOP_STR, Sk.ffi.remapToPy(t), false);\n    }\n\n    function set_height(self, h) {\n        Sk.abstr.sattr(self, HEIGHT_STR, Sk.ffi.remapToPy(h), false);\n    }\n\n    function set_bottom(self, b) {\n        set_top(self, b - get_height(self));\n    }\n\n    function set_left(self, l) {\n        Sk.abstr.sattr(self, LEFT_STR, Sk.ffi.remapToPy(l), false);\n    }\n\n    function set_width(self, w) {\n        Sk.abstr.sattr(self, WIDTH_STR, Sk.ffi.remapToPy(w), false);\n    }\n\n    function set_right(self, r) {\n        set_left(self, r - get_width(self));\n    }\n\n    function set_centerx(self, cx) {\n        set_left(self, cx - Math.floor(get_width(self) / 2));\n    }\n\n    function set_centery(self, cy) {\n        set_top(self, cy - Math.floor(get_height(self) / 2));\n    }\n\n    var bottom_getter = new Sk.builtin.func(function (self) {\n        return Sk.ffi.remapToPy(get_bottom(self));\n    });\n    var bottom_setter = new Sk.builtin.func(function (self, val) {\n        set_bottom(self, Sk.ffi.remapToJs(val));\n    });\n    $loc.bottom = Sk.misceval.callsimOrSuspend(Sk.builtins.property, bottom_getter, bottom_setter);\n\n    var right_getter = new Sk.builtin.func(function (self) {\n        return Sk.ffi.remapToPy(get_right(self));\n    });\n    var right_setter = new Sk.builtin.func(function (self, val) {\n        set_right(self, Sk.ffi.remapToJs(val));\n    });\n    $loc.right = Sk.misceval.callsimOrSuspend(Sk.builtins.property, right_getter, right_setter);\n\n    var topleft_getter = new Sk.builtin.func(function (self) {\n\n        return makeCoordinate(get_top(self), get_left(self));\n    });\n    var topleft_setter = new Sk.builtin.func(function (self, val) {\n        var tl = Sk.ffi.remapToJs(val);\n        set_top(self, tl[0]);\n        set_left(self, tl[1]);\n    });\n    $loc.topleft = Sk.misceval.callsimOrSuspend(Sk.builtins.property, topleft_getter, topleft_setter);\n\n    var bottomleft_getter = new Sk.builtin.func(function (self) {\n        return makeCoordinate(get_bottom(self), get_left(self));\n    });\n    var bottomleft_setter = new Sk.builtin.func(function (self, val) {\n        var bl = Sk.ffi.remapToJs(val);\n        set_bottom(self, bl[0]);\n        set_left(self, bl[1]);\n    });\n    $loc.bottomleft = Sk.misceval.callsimOrSuspend(Sk.builtins.property, bottomleft_getter, bottomleft_setter);\n\n    var topright_getter = new Sk.builtin.func(function (self) {\n        return makeCoordinate(get_top(self), get_right(self));\n    });\n    var topright_setter = new Sk.builtin.func(function (self, val) {\n        var tr = Sk.ffi.remapToJs(val);\n        set_top(self, tr[0]);\n        set_right(self, tr[1]);\n    });\n    $loc.topright = Sk.misceval.callsimOrSuspend(Sk.builtins.property, topright_getter, topright_setter);\n\n    var bottomright_getter = new Sk.builtin.func(function (self) {\n        return makeCoordinate(get_bottom(self), Sk.ffi.remapToPy(get_right(self)));\n    });\n    var bottomright_setter = new Sk.builtin.func(function (self, val) {\n        var br = Sk.ffi.remapToJs(val);\n        set_bottom(self, br[0]);\n        set_right(self, br[1]);\n    });\n    $loc.bottomright = Sk.misceval.callsimOrSuspend(Sk.builtins.property, bottomright_getter, bottomright_setter);\n\n    var midtop_getter = new Sk.builtin.func(function (self) {\n        return makeCoordinate(get_left(self) + Math.floor(get_width(self) / 2), get_top(self));\n    });\n    var midtop_setter = new Sk.builtin.func(function (self, val) {\n        var mt = Sk.ffi.remapToJs(val);\n        set_left(self, mt[0] - Math.floor(get_width(self) / 2));\n        set_top(self, mt[1]);\n    });\n    $loc.midtop = Sk.misceval.callsimOrSuspend(Sk.builtins.property, midtop_getter, midtop_setter);\n\n    var midbottom_getter = new Sk.builtin.func(function (self) {\n        return makeCoordinate(get_centerx(self), get_bottom(self))\n    });\n    var midbottom_setter = new Sk.builtin.func(function (self, val) {\n        var mb = Sk.ffi.remapToJs(val);\n        set_centerx(self, mb[0]);\n        set_bottom(self, mb[1]);\n    });\n    $loc.midbottom = Sk.misceval.callsimOrSuspend(Sk.builtins.property, midbottom_getter, midbottom_setter);\n\n    var midleft_getter = new Sk.builtin.func(function (self) {\n        return makeCoordinate(get_left(self), get_centery(self));\n    });\n    var midleft_setter = new Sk.builtin.func(function (self, val) {\n        var lm = Sk.ffi.remapToJs(val);\n        set_left(self, lm[0]);\n        set_centery(self, lm[1]);\n    });\n    $loc.midleft = Sk.misceval.callsimOrSuspend(Sk.builtins.property, midleft_getter, midleft_setter);\n\n    var midright_getter = new Sk.builtin.func(function (self) {\n        return makeCoordinate(get_right(self), get_centery(self));\n    });\n    var midright_setter = new Sk.builtin.func(function (self, val) {\n        var rm = Sk.ffi.remapToJs(val);\n        set_right(self, rm[0]);\n        set_centery(self, rm[1]);\n    });\n    $loc.midright = Sk.misceval.callsimOrSuspend(Sk.builtins.property, midright_getter, midright_setter);\n\n    var center_getter = new Sk.builtin.func(function (self) {\n        return makeCoordinate(get_centerx(self), get_centery(self));\n    });\n    var center_setter = new Sk.builtin.func(function (self, val) {\n        var c = Sk.ffi.remapToJs(val);\n        set_centerx(self, c[0]);\n        set_centery(self, c[1]);\n    });\n    $loc.center = Sk.misceval.callsimOrSuspend(Sk.builtins.property, center_getter, center_setter);\n\n    var centerx_getter = new Sk.builtin.func(function (self) {\n        return Sk.ffi.remapToPy(get_centerx(self));\n    });\n    var centerx_setter = new Sk.builtin.func(function (self, val) {\n        set_centerx(self, Sk.ffi.remapToJs(val));\n    });\n    $loc.centerx = Sk.misceval.callsimOrSuspend(Sk.builtins.property, centerx_getter, centerx_setter);\n\n    var centery_getter = new Sk.builtin.func(function (self) {\n        return Sk.ffi.remapToPy(get_centery(self));\n    });\n    var centery_setter = new Sk.builtin.func(function (self) {\n        set_centery(self, Sk.ffi.remapToPy(val));\n    });\n    $loc.centery = Sk.misceval.callsimOrSuspend(Sk.builtins.property, centery_getter, centery_setter);\n\n    var size_getter = new Sk.builtin.func(function (self) {\n        return makeCoordinate(get_width(self), get_height(self));\n    });\n    var size_setter = new Sk.builtin.func(function (self, val) {\n        var s = Sk.ffi.remapToJs(val);\n        set_width(self, s[0]);\n        set_height(self, s[1]);\n    });\n    $loc.size = Sk.misceval.callsimOrSuspend(Sk.builtins.property, size_getter, size_setter);\n\n    var w_getter = new Sk.builtin.func(function (self) {\n        return Sk.ffi.remapToPy(get_width(self));\n    });\n    var w_setter = new Sk.builtin.func(function (self, val) {\n        set_width(self, Sk.ffi.remapToJs(val));\n    });\n    $loc.w = Sk.misceval.callsimOrSuspend(Sk.builtins.property, w_getter, w_setter);\n\n    var h_getter = new Sk.builtin.func(function (self) {\n        return Sk.ffi.remapToPy(get_height(self));\n    });\n    var h_setter = new Sk.builtin.func(function (self, val) {\n        set_height(self, Sk.ffi.remapToJs(val));\n    });\n    $loc.h = Sk.misceval.callsimOrSuspend(Sk.builtins.property, h_getter, h_setter);\n\n    $loc.move = new Sk.builtin.func(function (self, x, y) {\n        var newLeft = get_left(self) + Sk.ffi.remapToJs(x);\n        var newTop = get_top(self) + Sk.ffi.remapToJs(y);\n        return PygameLib.make_rect(newLeft, newTop, get_width(self), get_height(self));\n    });\n    $loc.move_ip = new Sk.builtin.func(function (self, x, y) {\n        set_left(self, get_left(self) + Sk.ffi.remapToJs(x));\n        set_top(self, get_top(self) + Sk.ffi.remapToJs(y));\n        return Sk.builtin.none.none$;\n    });\n    $loc.inflate = new Sk.builtin.func(function (self, x, y) {\n        x = Sk.ffi.remapToJs(x);\n        y = Sk.ffi.remapToJs(y);\n        var newLeft = get_left(self) - Math.floor(x / 2);\n        var newTop = get_top(self) - Math.floor(y / 2);\n        return PygameLib.make_rect(newLeft, newTop, get_width(self)+x, get_height(self)+y);\n    });\n    $loc.inflate_ip = new Sk.builtin.func(function (self, x, y) {\n        x = Sk.ffi.remapToJs(x);\n        y = Sk.ffi.remapToJs(y);\n        var newLeft = get_left(self) - Math.floor(x / 2);\n        var newTop = get_top(self) - Math.floor(y / 2);\n        set_left(self, newLeft);\n        set_top(self, newTop);\n        set_width(self, get_width(self) + x);\n        set_height(self, get_height(self) + y);\n    });\n    $loc.clamp = new Sk.builtin.func(function (self, argrect) {\n        var argx = get_left(argrect);\n        var argy = get_top(argrect);\n        var argw = get_width(argrect);\n        var argh = get_height(argrect);\n        var selfx = get_left(self);\n        var selfy = get_top(self);\n        var selfw = get_width(self);\n        var selfh = get_height(self);\n        var x, y;\n        if (selfw >= argw) {\n            x = argx + argw / 2 - selfw / 2;\n        }\n        else if (selfx < argx) {\n\n            x = argx;\n        }\n        else if (selfx + selfw > argx + argw) {\n            x = argx + argw - selfw;\n        }\n        else {\n            x = selfx;\n        }\n\n        if (selfh >= argh) {\n            y = argy + argh / 2 - selfh / 2;\n        }\n        else if (selfy < argy) {\n            y = argy;\n        }\n        else if (selfy + selfh > argy + argh) {\n            y = argy + argh - selfh;\n        }\n        else {\n            y = selfy;\n        }\n        return PygameLib.make_rect(x, y, selfw, selfh);\n    });\n    $loc.clamp_ip = new Sk.builtin.func(function (self, argrect) {\n        var argx = get_left(argrect);\n        var argy = get_top(argrect);\n        var argw = get_width(argrect);\n        var argh = get_height(argrect);\n        var selfx = get_left(self);\n        var selfy = get_top(self);\n        var selfw = get_width(self);\n        var selfh = get_height(self);\n        var x, y;\n        if (selfw >= argw) {\n            x = argx + argw / 2 - selfw / 2;\n        }\n        else if (selfx < argx) {\n\n            x = argx;\n        }\n        else if (selfx + selfw > argx + argw) {\n            x = argx + argw - selfw;\n        }\n        else {\n            x = selfx;\n        }\n\n        if (selfh >= argh) {\n            y = argy + argh / 2 - selfh / 2;\n        }\n        else if (selfy < argy) {\n            y = argy;\n        }\n        else if (selfy + selfh > argy + argh) {\n            y = argy + argh - selfh;\n        }\n        else {\n            y = selfy;\n        }\n        set_left(self, x);\n        set_top(self, y);\n    });\n    $loc.clip = new Sk.builtin.func(function (self, argrect) {\n        if (Sk.abstr.typeName(argrect) !== \"Rect\") {\n            throw new Sk.builtin.TypeError(\"Argument must be rect style object\");\n        }\n        var argx = get_left(argrect);\n        var argy = get_top(argrect);\n        var argw = get_width(argrect);\n        var argh = get_height(argrect);\n        var selfx = get_left(self);\n        var selfy = get_top(self);\n        var selfw = get_width(self);\n        var selfh = get_height(self);\n        var x, y, w, h;\n        /* Left */\n        if ((selfx >= argx) && (selfx < (argx + argw))) {\n            x = selfx;\n        }\n        else if ((argx >= selfx) && (argx < (selfx + selfw))) {\n            x = argx;\n        }\n        else {\n            return PygameLib.make_rect(selfx, selfy, 0, 0);\n        }\n        /* Right */\n        if (((selfx + selfw) > argx) && ((selfx + selfw) <= (argx + argw))) {\n            w = (selfx + selfw) - x;\n        }\n        else if (((argx + argw) > selfx) && ((argx + argw) <= (selfx + selfw))) {\n            w = (argx + argw) - x;\n        }\n        else {\n            return PygameLib.make_rect(selfx, selfy, 0, 0);\n        }\n        /* Top */\n        if ((selfy >= argy) && (selfy < (argy + argh))) {\n            y = selfy;\n        } else if ((argy >= selfy) && (argy < (selfy + selfh))) {\n            y = argy;\n        } else {\n            return PygameLib.make_rect(selfx, selfy, 0, 0);\n        }\n        /* Bottom */\n        if (((selfy + selfh) > argy) && ((selfy + selfh) <= (argy + argh))) {\n            h = (selfy + selfh) - y;\n        } else if (((argy + argh) > selfy) && ((argy + argh) <= (selfy + selfh))) {\n            h = (argy + argh) - y;\n        } else {\n            return PygameLib.make_rect(selfx, selfy, 0, 0);\n        }\n        return PygameLib.make_rect(x, y, w, h);\n    });\n    $loc.union = new Sk.builtin.func(function (self, argrect) {\n        var argx = get_left(argrect);\n        var argy = get_top(argrect);\n        var argw = get_width(argrect);\n        var argh = get_height(argrect);\n        var selfx = get_left(self);\n        var selfy = get_top(self);\n        var selfw = get_width(self);\n        var selfh = get_height(self);\n        var x, y, w, h;\n        x = Math.min(argx, selfx);\n        y = Math.min(argy, selfy);\n        w = Math.max(selfx + selfw, argx + argw) - x;\n        h = Math.max(selfy + selfh, argy + argh) - y;\n        return PygameLib.make_rect(x, y, w, h);\n    });\n    $loc.union_ip = new Sk.builtin.func(function (self, argrect) {\n        var argx = get_left(argrect);\n        var argy = get_top(argrect);\n        var argw = get_width(argrect);\n        var argh = get_height(argrect);\n        var selfx = get_left(self);\n        var selfy = get_top(self);\n        var selfw = get_width(self);\n        var selfh = get_height(self);\n        var x, y, w, h;\n        x = Math.min(argx, selfx);\n        y = Math.min(argy, selfy);\n        w = Math.max(selfx + selfw, argx + argw) - x;\n        h = Math.max(selfy + selfh, argy + argh) - y;\n        set_left(self, x);\n        set_top(self, y);\n        set_width(self, w);\n        set_height(self, h);\n    });\n    $loc.unionall = new Sk.builtin.func(function (self, list) {\n        var l = get_left(self);\n        var t = get_top(self);\n        var r = l + get_width(self);\n        var b = t + get_height(self);\n        for (var i = 0; i < list.v.length; i++) {\n            l = Math.min(l, get_left(list.v[i]));\n            t = Math.min(t, get_top(list.v[i]));\n            r = Math.max(r, get_right(list.v[i]));\n            b = Math.max(b, get_bottom(list.v[i]));\n        }\n        return PygameLib.make_rect(l, t, r-l, b-t);\n    });\n    $loc.unionall_ip = new Sk.builtin.func(function (self, list) {\n        var l = get_left(self);\n        var t = get_top(self);\n        var r = l + get_width(self);\n        var b = t + get_height(self);\n        for (var i = 0; i < list.v.length; i++) {\n            l = Math.min(l, get_left(list.v[i]));\n            t = Math.min(t, get_top(list.v[i]));\n            r = Math.max(r, get_right(list.v[i]));\n            b = Math.max(b, get_bottom(list.v[i]));\n        }\n        set_left(self, l);\n        set_top(self, t);\n        set_width(self, r - l);\n        set_height(self, b - t);\n    });\n    $loc.fit = new Sk.builtin.func(function (self, argrect) {\n        var argx = get_left(argrect);\n        var argy = get_top(argrect);\n        var argw = get_width(argrect);\n        var argh = get_height(argrect);\n        var selfx = get_left(self);\n        var selfy = get_top(self);\n        var selfw = get_width(self);\n        var selfh = get_height(self);\n        var x, y, w, h;\n        var xratio, yratio, maxratio;\n        xratio = selfw / argw;\n        yratio = selfh / argh;\n        maxratio = (xratio > yratio) ? xratio : yratio;\n\n        w = Math.round(selfw / maxratio);\n        h = Math.round(selfh / maxratio);\n\n        x = argx + Math.floor((argw - w) / 2);\n        y = argy + Math.floor((argh - h) / 2);\n        return PygameLib.make_rect(x, y, w, h);\n    });\n    $loc.normalize = new Sk.builtin.func(function (self) {\n        var selfx = get_left(self);\n        var selfy = get_top(self);\n        var selfw = get_width(self);\n        var selfh = get_height(self);\n        if (selfw < 0) {\n            selfx += selfw;\n            selfw = -selfw;\n        }\n        if (selfh < 0) {\n            selfy += selfh;\n            selfh = -selfh;\n        }\n        set_left(self, selfx);\n        set_width(self, selfw);\n        set_top(self, selfy);\n        set_height(self, selfh);\n    });\n    $loc.contains = new Sk.builtin.func(function (self, argrect) {\n        var argx = get_left(argrect);\n        var argy = get_top(argrect);\n        var argw = get_width(argrect);\n        var argh = get_height(argrect);\n        var selfx = get_left(self);\n        var selfy = get_top(self);\n        var selfw = get_width(self);\n        var selfh = get_height(self);\n        var contained = (selfx <= argx) && (selfy <= argy) &&\n            (selfx + selfw >= argx + argw) &&\n            (selfy + selfh >= argy + argh) &&\n            (selfx + selfw > argx) &&\n            (selfy + selfh > argy);\n        return Sk.ffi.remapToPy(contained);\n    });\n    $loc.collidepoint = new Sk.builtin.func(function (self, x, y) {\n        if (Sk.abstr.typeName(x) === \"tuple\" && y === undefined) {\n            var xy = Sk.ffi.remapToJs(x);\n            x = xy[0];\n            y = xy[1];\n        } else if (Sk.abstr.typeName(x) === \"int\" && Sk.abstr.typeName(y) === \"int\") {\n            x = Sk.ffi.remapToJs(x);\n            y = Sk.ffi.remapToJs(y);\n        } else {\n            throw new Sk.builtin.TypeError(\"argument must contain two numbers\");\n        }\n        var selfx = get_left(self);\n        var selfy = get_top(self);\n        var selfw = get_width(self);\n        var selfh = get_height(self);\n        var inside = x >= selfx && x < selfx + selfw &&\n            y >= selfy && y < selfy + selfh;\n        return Sk.ffi.remapToPy(inside);\n    });\n\n    function do_rects_intersect(self, argrect) {\n        var argx = get_left(argrect);\n        var argy = get_top(argrect);\n        var argw = get_width(argrect);\n        var argh = get_height(argrect);\n        var selfx = get_left(self);\n        var selfy = get_top(self);\n        var selfw = get_width(self);\n        var selfh = get_height(self);\n        return (selfx < argx + argw && selfy < argy + argh &&\n            selfx + selfw > argx && selfy + selfh > argy);\n    }\n\n    $loc.colliderect = new Sk.builtin.func(function (self, argrect) {\n        if (Sk.abstr.typeName(argrect) !== \"Rect\") {\n            throw new Sk.builtin.TypeError(\"Argument must be rect style object\");\n        }\n        return Sk.ffi.remapToPy(do_rects_intersect(self, argrect))\n    });\n    $loc.collidelist = new Sk.builtin.func(function (self, list) {\n        if (Sk.abstr.typeName(list) !== \"list\") {\n            throw new Sk.builtin.TypeError(\"Argument must be a sequence of rectstyle objects.\");\n        }\n        var ret = -1;\n        for (var i = 0; i < list.v.length; i++) {\n            if (Sk.abstr.typeName(list.v[i]) !== \"Rect\") {\n                throw new Sk.builtin.TypeError(\"Argument must be a sequence of rectstyle objects.\");\n            }\n            if (do_rects_intersect(self, list.v[i])) {\n                ret = i;\n                break;\n            }\n        }\n        return Sk.ffi.remapToPy(ret);\n    });\n    $loc.collidelistall = new Sk.builtin.func(function (self, list) {\n        if (Sk.abstr.typeName(list) !== \"list\") {\n            throw new Sk.builtin.TypeError(\"Argument must be a sequence of rectstyle objects.\");\n        }\n        var ret = [];\n        for (var i = 0; i < list.v.length; i++) {\n            if (Sk.abstr.typeName(list.v[i]) !== \"Rect\") {\n                throw new Sk.builtin.TypeError(\"Argument must be a sequence of rectstyle objects.\");\n            }\n            if (do_rects_intersect(self, list.v[i])) {\n                ret.push(i);\n            }\n        }\n        return Sk.ffi.remapToPy(ret);\n    });\n};\n\nconst R_STR = new Sk.builtin.str('r');\nconst G_STR = new Sk.builtin.str('g');\nconst B_STR = new Sk.builtin.str('b');\nconst A_STR = new Sk.builtin.str('a');\nconst LEFT_STR = new Sk.builtin.str('left');\nconst TOP_STR = new Sk.builtin.str('top');\nconst WIDTH_STR = new Sk.builtin.str('width');\nconst HEIGHT_STR = new Sk.builtin.str('height');\n\n\n// Queue interface for the frontend\nSk.insertEvent = function (eventName) {\n    var e = [];\n    switch (eventName) {\n        case \"left\":\n            e = [PygameLib.constants.KEYDOWN, { key: PygameLib.constants.K_LEFT, unicode: \"\", mod: 0 }];\n            break;\n        case \"right\":\n            e = [PygameLib.constants.KEYDOWN, { key: PygameLib.constants.K_RIGHT, unicode: \"\", mod: 0 }];\n            break;\n        case \"up\":\n            e = [PygameLib.constants.KEYDOWN, { key: PygameLib.constants.K_UP, unicode: \"\", mod: 0 }];\n            break;\n        case \"down\":\n            e = [PygameLib.constants.KEYDOWN, { key: PygameLib.constants.K_DOWN, unicode: \"\", mod: 0 }];\n            break;\n        case \"quit\":\n            e = [PygameLib.constants.QUIT, { key: PygameLib.constants.K_ESCAPE, unicode: \"\", mod: 0 }];\n            break;\n    }\n    PygameLib.eventQueue.unshift(e);\n};\n\nvar PygameLib = {};\nSk.pygameData = {};\n\nPygameLib.running = false;\nPygameLib.caption = \"pygame window\";\n\nPygameLib.extract_color = function (color) {\n    var color_js = [0, 0, 0, 0];\n    if (Sk.abstr.typeName(color) === \"Color\") {\n        color_js[0] = Sk.ffi.remapToJs(Sk.abstr.gattr(color, R_STR, false));\n        color_js[1] = Sk.ffi.remapToJs(Sk.abstr.gattr(color, G_STR, false));\n        color_js[2] = Sk.ffi.remapToJs(Sk.abstr.gattr(color, B_STR, false));\n        color_js[3] = Sk.ffi.remapToJs(Sk.abstr.gattr(color, A_STR, false));\n    } else {\n        color_js = Sk.ffi.remapToJs(color);\n        if (color_js.length === 3) color_js.push(255);\n    }\n    color_js[3] = color_js[3]/255;\n    return color_js;\n};\n\nPygameLib.extract_rect = function (rect) {\n    var rect_js = [0, 0, 0, 0];\n    if (Sk.abstr.typeName(rect) === \"Rect\") {\n        rect_js[0] = Sk.ffi.remapToJs(Sk.abstr.gattr(rect, LEFT_STR, false));\n        rect_js[1] = Sk.ffi.remapToJs(Sk.abstr.gattr(rect, TOP_STR, false));\n        rect_js[2] = Sk.ffi.remapToJs(Sk.abstr.gattr(rect, WIDTH_STR, false));\n        rect_js[3] = Sk.ffi.remapToJs(Sk.abstr.gattr(rect, HEIGHT_STR, false));\n    } else {\n        rect_js = Sk.ffi.remapToJs(rect);\n    }\n    return rect_js;\n};\n\nPygameLib.make_rect = function(a, b, c, d) {\n    const t = new Sk.builtin.tuple([Sk.ffi.remapToPy(a),\n                                       Sk.ffi.remapToPy(b),\n                                       Sk.ffi.remapToPy(c),\n                                       Sk.ffi.remapToPy(d),])\n    return Sk.misceval.callsim(PygameLib.RectType, t);\n};\n\nvar createKeyboardEvent = function (event) {\n    var e;\n    var keyPGConstant;\n    if (event.type === \"keyup\") {\n        keyPGConstant = PygameLib.constants.KEYUP;\n    } else if (event.type === \"keydown\") {\n        keyPGConstant = PygameLib.constants.KEYDOWN;\n    }\n    var keyId = event.which;\n    // TODO: Support proper left/right handling\n    // event.location === KeyboardEvent.DOM_KEY_LOCATION_LEFT\n    const c = PygameLib.constants;\n    var mod = c.KMOD_NONE +\n        (c.KMOD_LSHIFT + c.KMOD_RSHIFT + c.KMOD_SHIFT) * event.shiftKey +\n        (c.KMOD_LCTRL + c.KMOD_RCTRL + c.KMOD_CTRL) * event.ctrlKey +\n        (c.KMOD_LALT + c.KMOD_RALT + c.KMOD_ALT) * event.altKey +\n        (c.KMOD_LMETA + c.KMOD_RMETA + c.KMOD_META) * event.metaKey;\n\n    switch (event.which) {\n        case 27:\n            return [PygameLib.constants.QUIT, { key: PygameLib.constants.K_ESCAPE, unicode: \"\", mod: mod }];\n        case 37:\n            return [keyPGConstant, { key: PygameLib.constants.K_LEFT, unicode: \"\", mod: mod }];\n        case 38:\n            return [keyPGConstant, { key: PygameLib.constants.K_UP, unicode: \"\", mod: mod }];\n        case 39:\n            return [keyPGConstant, { key: PygameLib.constants.K_RIGHT, unicode: \"\", mod: mod }];\n        case 40:\n            return [keyPGConstant, { key: PygameLib.constants.K_DOWN, unicode: \"\", mod: mod }];\n        default:\n            var difference = 0;\n            if ((event.which <= 90) && (event.which >= 65))\n                difference = 32;\n            return [keyPGConstant, { key: (event.which + difference), unicode: event.key, mod: mod}];\n    }\n};\n\nfunction keyEventListener(event) {\n    var e = createKeyboardEvent(event);\n    if(e[0] === PygameLib.constants.KEYDOWN)\n        PygameLib.pressedKeys[e[1].key] = true\n    else if ((e[0] === PygameLib.constants.KEYUP))\n        delete PygameLib.pressedKeys[e[1].key]\n    if (PygameLib.eventQueue) {\n        if (PygameLib.repeatKeys) {\n            PygameLib.eventQueue.unshift(e);\n        } else {\n            if (!('repeat' in event) || !event.repeat) { // Pygame considers autorepeat is turnd of by default\n                PygameLib.eventQueue.unshift(e);\n            }\n        }\n\n    }\n    if (PygameLib.running) event.preventDefault();\n    return false;\n}\n\n\n// constants\nPygameLib.constants = {\n    'ACTIVEEVENT': 1,\n    'ANYFORMAT': 268435456,\n    'ASYNCBLIT': 4,\n    'AUDIO_S16': 32784,\n    'AUDIO_S16LSB': 32784,\n    'AUDIO_S16MSB': 36880,\n    'AUDIO_S16SYS': 32784,\n    'AUDIO_S8': 32776,\n    'AUDIO_U16': 16,\n    'AUDIO_U16LSB': 16,\n    'AUDIO_U16MSB': 4112,\n    'AUDIO_U16SYS': 16,\n    'AUDIO_U8': 8,\n    'AUDIODEVICEADDED': 4352,\n    'AUDIODEVICEREMOVED': 4353,\n    'BIG_ENDIAN': 4321,\n    'BLEND_ADD': 1,\n    'BLEND_MAX': 5,\n    'BLEND_MIN': 4,\n    'BLEND_MULT': 3,\n    'BLEND_PREMULTIPLIED': 17,\n    'BLEND_RGBA_ADD': 6,\n    'BLEND_RGBA_MAX': 16,\n    'BLEND_RGBA_MIN': 9,\n    'BLEND_RGBA_MULT': 8,\n    'BLEND_RGBA_SUB': 7,\n    'BLEND_RGB_ADD': 1,\n    'BLEND_RGB_MAX': 5,\n    'BLEND_RGB_MIN': 4,\n    'BLEND_RGB_MULT': 3,\n    'BLEND_RGB_SUB': 2,\n    'BLEND_SUB': 2,\n    'BUTTON_X1': 6,\n    'BUTTON_X2': 7,\n    'DOUBLEBUF': 1073741824,\n    'FINGERMOTION': 1794,\n    'FINGERDOWN': 1792,\n    'FINGERUP': 1793,\n    'FULLSCREEN': -2147483648,\n    'GL_ACCELERATED_VISUAL': 15,\n    'GL_ACCUM_ALPHA_SIZE': 11,\n    'GL_ACCUM_BLUE_SIZE': 10,\n    'GL_ACCUM_GREEN_SIZE': 9,\n    'GL_ACCUM_RED_SIZE': 8,\n    'GL_ALPHA_SIZE': 3,\n    'GL_BLUE_SIZE': 2,\n    'GL_BUFFER_SIZE': 4,\n    'GL_DEPTH_SIZE': 6,\n    'GL_DOUBLEBUFFER': 5,\n    'GL_GREEN_SIZE': 1,\n    'GL_MULTISAMPLEBUFFERS': 13,\n    'GL_MULTISAMPLESAMPLES': 14,\n    'GL_RED_SIZE': 0,\n    'GL_STENCIL_SIZE': 7,\n    'GL_STEREO': 12,\n    'GL_SWAP_CONTROL': 16,\n    'HAT_CENTERED': 0,\n    'HAT_DOWN': 4,\n    'HAT_LEFT': 8,\n    'HAT_LEFTDOWN': 12,\n    'HAT_LEFTUP': 9,\n    'HAT_RIGHT': 2,\n    'HAT_RIGHTDOWN': 6,\n    'HAT_RIGHTUP': 3,\n    'HAT_UP': 1,\n    'HAVE_NEWBUF': 1,\n    'HWACCEL': 256,\n    'HWPALETTE': 536870912,\n    'HWSURFACE': 1,\n    'IYUV_OVERLAY': 1448433993,\n    'JOYAXISMOTION': 7,\n    'JOYBALLMOTION': 8,\n    'JOYBUTTONDOWN': 10,\n    'JOYBUTTONUP': 11,\n    'JOYHATMOTION': 9,\n    'KEYDOWN': 2,\n    'KEYUP': 3,\n    'KMOD_ALT': 768,\n    'KMOD_CAPS': 8192,\n    'KMOD_CTRL': 192,\n    'KMOD_LALT': 256,\n    'KMOD_LCTRL': 64,\n    'KMOD_LMETA': 1024,\n    'KMOD_LSHIFT': 1,\n    'KMOD_META': 3072,\n    'KMOD_MODE': 16384,\n    'KMOD_NONE': 0,\n    'KMOD_NUM': 4096,\n    'KMOD_RALT': 512,\n    'KMOD_RCTRL': 128,\n    'KMOD_RMETA': 2048,\n    'KMOD_RSHIFT': 2,\n    'KMOD_SHIFT': 3,\n    'K_0': 48,\n    'K_1': 49,\n    'K_2': 50,\n    'K_3': 51,\n    'K_4': 52,\n    'K_5': 53,\n    'K_6': 54,\n    'K_7': 55,\n    'K_8': 56,\n    'K_9': 57,\n    'K_AMPERSAND': 38,\n    'K_ASTERISK': 42,\n    'K_AT': 64,\n    'K_BACKQUOTE': 96,\n    'K_BACKSLASH': 92,\n    'K_BACKSPACE': 8,\n    'K_BREAK': 318,\n    'K_CAPSLOCK': 301,\n    'K_CARET': 94,\n    'K_CLEAR': 12,\n    'K_COLON': 58,\n    'K_COMMA': 44,\n    'K_DELETE': 127,\n    'K_DOLLAR': 36,\n    'K_DOWN': 274,\n    'K_END': 279,\n    'K_EQUALS': 61,\n    'K_ESCAPE': 27,\n    'K_EURO': 321,\n    'K_EXCLAIM': 33,\n    'K_F1': 282,\n    'K_F10': 291,\n    'K_F11': 292,\n    'K_F12': 293,\n    'K_F13': 294,\n    'K_F14': 295,\n    'K_F15': 296,\n    'K_F2': 283,\n    'K_F3': 284,\n    'K_F4': 285,\n    'K_F5': 286,\n    'K_F6': 287,\n    'K_F7': 288,\n    'K_F8': 289,\n    'K_F9': 290,\n    'K_FIRST': 0,\n    'K_GREATER': 62,\n    'K_HASH': 35,\n    'K_HELP': 315,\n    'K_HOME': 278,\n    'K_INSERT': 277,\n    'K_KP0': 256,\n    'K_KP1': 257,\n    'K_KP2': 258,\n    'K_KP3': 259,\n    'K_KP4': 260,\n    'K_KP5': 261,\n    'K_KP6': 262,\n    'K_KP7': 263,\n    'K_KP8': 264,\n    'K_KP9': 265,\n    'K_KP_DIVIDE': 267,\n    'K_KP_ENTER': 271,\n    'K_KP_EQUALS': 272,\n    'K_KP_MINUS': 269,\n    'K_KP_MULTIPLY': 268,\n    'K_KP_PERIOD': 266,\n    'K_KP_PLUS': 270,\n    'K_LALT': 308,\n    'K_LAST': 323,\n    'K_LCTRL': 306,\n    'K_LEFT': 276,\n    'K_LEFTBRACKET': 91,\n    'K_LEFTPAREN': 40,\n    'K_LESS': 60,\n    'K_LMETA': 310,\n    'K_LSHIFT': 304,\n    'K_LSUPER': 311,\n    'K_MENU': 319,\n    'K_MINUS': 45,\n    'K_MODE': 313,\n    'K_NUMLOCK': 300,\n    'K_PAGEDOWN': 281,\n    'K_PAGEUP': 280,\n    'K_PAUSE': 19,\n    'K_PERIOD': 46,\n    'K_PLUS': 43,\n    'K_POWER': 320,\n    'K_PRINT': 316,\n    'K_QUESTION': 63,\n    'K_QUOTE': 39,\n    'K_QUOTEDBL': 34,\n    'K_RALT': 307,\n    'K_RCTRL': 305,\n    'K_RETURN': 13,\n    'K_RIGHT': 275,\n    'K_RIGHTBRACKET': 93,\n    'K_RIGHTPAREN': 41,\n    'K_RMETA': 309,\n    'K_RSHIFT': 303,\n    'K_RSUPER': 312,\n    'K_SCROLLOCK': 302,\n    'K_SEMICOLON': 59,\n    'K_SLASH': 47,\n    'K_SPACE': 32,\n    'K_SYSREQ': 317,\n    'K_TAB': 9,\n    'K_UNDERSCORE': 95,\n    'K_UNKNOWN': 0,\n    'K_UP': 273,\n    'K_a': 97,\n    'K_b': 98,\n    'K_c': 99,\n    'K_d': 100,\n    'K_e': 101,\n    'K_f': 102,\n    'K_g': 103,\n    'K_h': 104,\n    'K_i': 105,\n    'K_j': 106,\n    'K_k': 107,\n    'K_l': 108,\n    'K_m': 109,\n    'K_n': 110,\n    'K_o': 111,\n    'K_p': 112,\n    'K_q': 113,\n    'K_r': 114,\n    'K_s': 115,\n    'K_t': 116,\n    'K_u': 117,\n    'K_v': 118,\n    'K_w': 119,\n    'K_x': 120,\n    'K_y': 121,\n    'K_z': 122,\n    'LIL_ENDIAN': 1234,\n    'MOUSEBUTTONDOWN': 5,\n    'MOUSEBUTTONUP': 6,\n    'MOUSEMOTION': 4,\n    'MOUSEWHEEL': 1027,\n    'MULTIGESTURE': 2050,\n\n    'NOEVENT': 0,\n    'NOFRAME': 32,\n    'NUMEVENTS': 32,\n    'OPENGL': 2,\n    'OPENGLBLIT': 10,\n    'PREALLOC': 16777216,\n    'QUIT': 12,\n    'RESIZABLE': 16,\n    'RLEACCEL': 16384,\n    'RLEACCELOK': 8192,\n    'SCRAP_BMP': 'image/bmp',\n    'SCRAP_CLIPBOARD': 0,\n    'SCRAP_PBM': 'image/pbm',\n    'SCRAP_PPM': 'image/ppm',\n    'SCRAP_SELECTION': 1,\n    'SCRAP_TEXT': 'text/plain',\n    'SRCALPHA': 65536,\n    'SRCCOLORKEY': 4096,\n    'SWSURFACE': 0,\n    'SYSWMEVENT': 13,\n    'TEXTEDITING': 770,\n    'TEXTINPUT': 771,\n    'TIMER_RESOLUTION': 10,\n    'USEREVENT': 24,\n    'USEREVENT_DROPFILE': 4096,\n    'UYVY_OVERLAY': 1498831189,\n    'VIDEOEXPOSE': 17,\n    'VIDEORESIZE': 16,\n    'YUY2_OVERLAY': 844715353,\n    'YV12_OVERLAY': 842094169,\n    'YVYU_OVERLAY': 1431918169,\n\n}\n\nPygameLib.Colors = {\n    'gray17': [43, 43, 43, 255],\n    'gold': [255, 215, 0, 255],\n    'gray10': [26, 26, 26, 255],\n    'yellow': [255, 255, 0, 255],\n    'gray11': [28, 28, 28, 255],\n    'grey61': [156, 156, 156, 255],\n    'grey60': [153, 153, 153, 255],\n    'darkseagreen': [143, 188, 143, 255],\n    'grey62': [158, 158, 158, 255],\n    'grey65': [166, 166, 166, 255],\n    'gray12': [31, 31, 31, 255],\n    'grey67': [171, 171, 171, 255],\n    'grey66': [168, 168, 168, 255],\n    'grey69': [176, 176, 176, 255],\n    'gray21': [54, 54, 54, 255],\n    'lightsalmon4': [139, 87, 66, 255],\n    'lightsalmon2': [238, 149, 114, 255],\n    'lightsalmon3': [205, 129, 98, 255],\n    'lightsalmon1': [255, 160, 122, 255],\n    'gray32': [82, 82, 82, 255],\n    'green4': [0, 139, 0, 255],\n    'gray30': [77, 77, 77, 255],\n    'gray31': [79, 79, 79, 255],\n    'green1': [0, 255, 0, 255],\n    'gray37': [94, 94, 94, 255],\n    'green3': [0, 205, 0, 255],\n    'green2': [0, 238, 0, 255],\n    'darkslategray1': [151, 255, 255, 255],\n    'darkslategray2': [141, 238, 238, 255],\n    'darkslategray3': [121, 205, 205, 255],\n    'aquamarine1': [127, 255, 212, 255],\n    'aquamarine3': [102, 205, 170, 255],\n    'aquamarine2': [118, 238, 198, 255],\n    'papayawhip': [255, 239, 213, 255],\n    'black': [0, 0, 0, 255],\n    'darkorange3': [205, 102, 0, 255],\n    'oldlace': [253, 245, 230, 255],\n    'lightgoldenrod4': [139, 129, 76, 255],\n    'gray90': [229, 229, 229, 255],\n    'orchid1': [255, 131, 250, 255],\n    'orchid2': [238, 122, 233, 255],\n    'orchid3': [205, 105, 201, 255],\n    'grey68': [173, 173, 173, 255],\n    'brown': [165, 42, 42, 255],\n    'purple2': [145, 44, 238, 255],\n    'gray80': [204, 204, 204, 255],\n    'antiquewhite3': [205, 192, 176, 255],\n    'antiquewhite2': [238, 223, 204, 255],\n    'antiquewhite1': [255, 239, 219, 255],\n    'palevioletred3': [205, 104, 137, 255],\n    'hotpink': [255, 105, 180, 255],\n    'lightcyan': [224, 255, 255, 255],\n    'coral3': [205, 91, 69, 255],\n    'gray8': [20, 20, 20, 255],\n    'gray9': [23, 23, 23, 255],\n    'grey32': [82, 82, 82, 255],\n    'bisque4': [139, 125, 107, 255],\n    'cyan': [0, 255, 255, 255],\n    'gray0': [0, 0, 0, 255],\n    'gray1': [3, 3, 3, 255],\n    'gray6': [15, 15, 15, 255],\n    'bisque1': [255, 228, 196, 255],\n    'bisque2': [238, 213, 183, 255],\n    'bisque3': [205, 183, 158, 255],\n    'skyblue': [135, 206, 235, 255],\n    'gray': [190, 190, 190, 255],\n    'darkturquoise': [0, 206, 209, 255],\n    'rosybrown4': [139, 105, 105, 255],\n    'deepskyblue3': [0, 154, 205, 255],\n    'grey63': [161, 161, 161, 255],\n    'indianred1': [255, 106, 106, 255],\n    'grey78': [199, 199, 199, 255],\n    'lightpink': [255, 182, 193, 255],\n    'gray88': [224, 224, 224, 255],\n    'gray22': [56, 56, 56, 255],\n    'red': [255, 0, 0, 255],\n    'grey11': [28, 28, 28, 255],\n    'lemonchiffon3': [205, 201, 165, 255],\n    'lemonchiffon2': [238, 233, 191, 255],\n    'lemonchiffon1': [255, 250, 205, 255],\n    'indianred3': [205, 85, 85, 255],\n    'violetred1': [255, 62, 150, 255],\n    'plum2': [238, 174, 238, 255],\n    'plum1': [255, 187, 255, 255],\n    'lemonchiffon4': [139, 137, 112, 255],\n    'gray99': [252, 252, 252, 255],\n    'grey13': [33, 33, 33, 255],\n    'grey55': [140, 140, 140, 255],\n    'darkcyan': [0, 139, 139, 255],\n    'chocolate4': [139, 69, 19, 255],\n    'lightgoldenrodyellow': [250, 250, 210, 255],\n    'gray54': [138, 138, 138, 255],\n    'lavender': [230, 230, 250, 255],\n    'chartreuse3': [102, 205, 0, 255],\n    'chartreuse2': [118, 238, 0, 255],\n    'chartreuse1': [127, 255, 0, 255],\n    'grey48': [122, 122, 122, 255],\n    'grey16': [41, 41, 41, 255],\n    'thistle': [216, 191, 216, 255],\n    'chartreuse4': [69, 139, 0, 255],\n    'darkorchid4': [104, 34, 139, 255],\n    'grey42': [107, 107, 107, 255],\n    'grey41': [105, 105, 105, 255],\n    'grey17': [43, 43, 43, 255],\n    'dimgrey': [105, 105, 105, 255],\n    'dodgerblue4': [16, 78, 139, 255],\n    'darkorchid2': [178, 58, 238, 255],\n    'darkorchid3': [154, 50, 205, 255],\n    'blue': [0, 0, 255, 255],\n    'rosybrown2': [238, 180, 180, 255],\n    'honeydew': [240, 255, 240, 255],\n    'gray18': [46, 46, 46, 255],\n    'cornflowerblue': [100, 149, 237, 255],\n    'grey91': [232, 232, 232, 255],\n    'gray14': [36, 36, 36, 255],\n    'gray15': [38, 38, 38, 255],\n    'gray16': [41, 41, 41, 255],\n    'maroon4': [139, 28, 98, 255],\n    'maroon3': [205, 41, 144, 255],\n    'maroon2': [238, 48, 167, 255],\n    'maroon1': [255, 52, 179, 255],\n    'gray13': [33, 33, 33, 255],\n    'gold3': [205, 173, 0, 255],\n    'gold2': [238, 201, 0, 255],\n    'gold1': [255, 215, 0, 255],\n    'grey79': [201, 201, 201, 255],\n    'palevioletred1': [255, 130, 171, 255],\n    'palevioletred2': [238, 121, 159, 255],\n    'gold4': [139, 117, 0, 255],\n    'gray41': [105, 105, 105, 255],\n    'gray84': [214, 214, 214, 255],\n    'mediumpurple': [147, 112, 219, 255],\n    'rosybrown1': [255, 193, 193, 255],\n    'lightblue2': [178, 223, 238, 255],\n    'lightblue3': [154, 192, 205, 255],\n    'grey57': [145, 145, 145, 255],\n    'lightblue1': [191, 239, 255, 255],\n    'lightblue4': [104, 131, 139, 255],\n    'gray33': [84, 84, 84, 255],\n    'skyblue4': [74, 112, 139, 255],\n    'grey97': [247, 247, 247, 255],\n    'skyblue1': [135, 206, 255, 255],\n    'gray27': [69, 69, 69, 255],\n    'skyblue3': [108, 166, 205, 255],\n    'skyblue2': [126, 192, 238, 255],\n    'lavenderblush1': [255, 240, 245, 255],\n    'darkgrey': [169, 169, 169, 255],\n    'lavenderblush3': [205, 193, 197, 255],\n    'darkslategrey': [47, 79, 79, 255],\n    'lavenderblush4': [139, 131, 134, 255],\n    'deeppink4': [139, 10, 80, 255],\n    'grey99': [252, 252, 252, 255],\n    'gray36': [92, 92, 92, 255],\n    'coral4': [139, 62, 47, 255],\n    'magenta3': [205, 0, 205, 255],\n    'lightskyblue4': [96, 123, 139, 255],\n    'mediumturquoise': [72, 209, 204, 255],\n    'gray34': [87, 87, 87, 255],\n    'floralwhite': [255, 250, 240, 255],\n    'grey39': [99, 99, 99, 255],\n    'grey36': [92, 92, 92, 255],\n    'grey37': [94, 94, 94, 255],\n    'grey34': [87, 87, 87, 255],\n    'gray26': [66, 66, 66, 255],\n    'royalblue2': [67, 110, 238, 255],\n    'grey33': [84, 84, 84, 255],\n    'turquoise1': [0, 245, 255, 255],\n    'grey31': [79, 79, 79, 255],\n    'steelblue1': [99, 184, 255, 255],\n    'sienna4': [139, 71, 38, 255],\n    'steelblue3': [79, 148, 205, 255],\n    'lavenderblush2': [238, 224, 229, 255],\n    'sienna1': [255, 130, 71, 255],\n    'steelblue4': [54, 100, 139, 255],\n    'sienna3': [205, 104, 57, 255],\n    'aquamarine4': [69, 139, 116, 255],\n    'lightyellow1': [255, 255, 224, 255],\n    'lightyellow2': [238, 238, 209, 255],\n    'lightsteelblue': [176, 196, 222, 255],\n    'lightyellow4': [139, 139, 122, 255],\n    'magenta2': [238, 0, 238, 255],\n    'lightskyblue1': [176, 226, 255, 255],\n    'lightgoldenrod': [238, 221, 130, 255],\n    'magenta4': [139, 0, 139, 255],\n    'gray87': [222, 222, 222, 255],\n    'greenyellow': [173, 255, 47, 255],\n    'navajowhite4': [139, 121, 94, 255],\n    'darkslategray4': [82, 139, 139, 255],\n    'olivedrab': [107, 142, 35, 255],\n    'navajowhite1': [255, 222, 173, 255],\n    'navajowhite2': [238, 207, 161, 255],\n    'darkgoldenrod1': [255, 185, 15, 255],\n    'sienna': [160, 82, 45, 255],\n    'blue1': [0, 0, 255, 255],\n    'yellow1': [255, 255, 0, 255],\n    'gray61': [156, 156, 156, 255],\n    'magenta1': [255, 0, 255, 255],\n    'grey52': [133, 133, 133, 255],\n    'orangered4': [139, 37, 0, 255],\n    'palegreen': [152, 251, 152, 255],\n    'gray86': [219, 219, 219, 255],\n    'grey80': [204, 204, 204, 255],\n    'seashell': [255, 245, 238, 255],\n    'royalblue': [65, 105, 225, 255],\n    'firebrick3': [205, 38, 38, 255],\n    'blue4': [0, 0, 139, 255],\n    'peru': [205, 133, 63, 255],\n    'gray60': [153, 153, 153, 255],\n    'aquamarine': [127, 255, 212, 255],\n    'grey53': [135, 135, 135, 255],\n    'tan4': [139, 90, 43, 255],\n    'darkgoldenrod': [184, 134, 11, 255],\n    'tan2': [238, 154, 73, 255],\n    'tan1': [255, 165, 79, 255],\n    'darkslategray': [47, 79, 79, 255],\n    'royalblue3': [58, 95, 205, 255],\n    'red2': [238, 0, 0, 255],\n    'red1': [255, 0, 0, 255],\n    'dodgerblue': [30, 144, 255, 255],\n    'violetred4': [139, 34, 82, 255],\n    'lightyellow': [255, 255, 224, 255],\n    'paleturquoise1': [187, 255, 255, 255],\n    'firebrick2': [238, 44, 44, 255],\n    'mediumaquamarine': [102, 205, 170, 255],\n    'lemonchiffon': [255, 250, 205, 255],\n    'chocolate': [210, 105, 30, 255],\n    'orchid4': [139, 71, 137, 255],\n    'maroon': [176, 48, 96, 255],\n    'gray38': [97, 97, 97, 255],\n    'darkorange4': [139, 69, 0, 255],\n    'mintcream': [245, 255, 250, 255],\n    'darkorange1': [255, 127, 0, 255],\n    'antiquewhite': [250, 235, 215, 255],\n    'darkorange2': [238, 118, 0, 255],\n    'grey18': [46, 46, 46, 255],\n    'grey19': [48, 48, 48, 255],\n    'grey38': [97, 97, 97, 255],\n    'moccasin': [255, 228, 181, 255],\n    'grey10': [26, 26, 26, 255],\n    'chocolate1': [255, 127, 36, 255],\n    'chocolate2': [238, 118, 33, 255],\n    'chocolate3': [205, 102, 29, 255],\n    'saddlebrown': [139, 69, 19, 255],\n    'grey15': [38, 38, 38, 255],\n    'darkslateblue': [72, 61, 139, 255],\n    'lightskyblue': [135, 206, 250, 255],\n    'gray69': [176, 176, 176, 255],\n    'gray68': [173, 173, 173, 255],\n    'deeppink': [255, 20, 147, 255],\n    'gray65': [166, 166, 166, 255],\n    'gray64': [163, 163, 163, 255],\n    'gray67': [171, 171, 171, 255],\n    'gray66': [168, 168, 168, 255],\n    'gray25': [64, 64, 64, 255],\n    'coral': [255, 127, 80, 255],\n    'gray63': [161, 161, 161, 255],\n    'gray62': [158, 158, 158, 255],\n    'goldenrod4': [139, 105, 20, 255],\n    'grey35': [89, 89, 89, 255],\n    'gray89': [227, 227, 227, 255],\n    'goldenrod1': [255, 193, 37, 255],\n    'goldenrod2': [238, 180, 34, 255],\n    'goldenrod3': [205, 155, 29, 255],\n    'springgreen1': [0, 255, 127, 255],\n    'springgreen2': [0, 238, 118, 255],\n    'springgreen3': [0, 205, 102, 255],\n    'springgreen4': [0, 139, 69, 255],\n    'mistyrose1': [255, 228, 225, 255],\n    'sandybrown': [244, 164, 96, 255],\n    'grey30': [77, 77, 77, 255],\n    'seashell2': [238, 229, 222, 255],\n    'seashell3': [205, 197, 191, 255],\n    'tan': [210, 180, 140, 255],\n    'seashell1': [255, 245, 238, 255],\n    'mistyrose3': [205, 183, 181, 255],\n    'magenta': [255, 0, 255, 255],\n    'pink': [255, 192, 203, 255],\n    'ivory2': [238, 238, 224, 255],\n    'ivory1': [255, 255, 240, 255],\n    'lightcyan2': [209, 238, 238, 255],\n    'mediumseagreen': [60, 179, 113, 255],\n    'ivory4': [139, 139, 131, 255],\n    'darkorange': [255, 140, 0, 255],\n    'powderblue': [176, 224, 230, 255],\n    'dodgerblue1': [30, 144, 255, 255],\n    'gray95': [242, 242, 242, 255],\n    'firebrick1': [255, 48, 48, 255],\n    'gray7': [18, 18, 18, 255],\n    'mistyrose4': [139, 125, 123, 255],\n    'tomato': [255, 99, 71, 255],\n    'indianred2': [238, 99, 99, 255],\n    'steelblue2': [92, 172, 238, 255],\n    'gray100': [255, 255, 255, 255],\n    'seashell4': [139, 134, 130, 255],\n    'grey89': [227, 227, 227, 255],\n    'grey88': [224, 224, 224, 255],\n    'grey87': [222, 222, 222, 255],\n    'grey86': [219, 219, 219, 255],\n    'grey85': [217, 217, 217, 255],\n    'grey84': [214, 214, 214, 255],\n    'midnightblue': [25, 25, 112, 255],\n    'grey82': [209, 209, 209, 255],\n    'grey81': [207, 207, 207, 255],\n    'yellow3': [205, 205, 0, 255],\n    'ivory3': [205, 205, 193, 255],\n    'grey22': [56, 56, 56, 255],\n    'gray85': [217, 217, 217, 255],\n    'violetred3': [205, 50, 120, 255],\n    'dodgerblue2': [28, 134, 238, 255],\n    'gray42': [107, 107, 107, 255],\n    'sienna2': [238, 121, 66, 255],\n    'grey72': [184, 184, 184, 255],\n    'grey73': [186, 186, 186, 255],\n    'grey70': [179, 179, 179, 255],\n    'palevioletred': [219, 112, 147, 255],\n    'lightslategray': [119, 136, 153, 255],\n    'grey77': [196, 196, 196, 255],\n    'grey74': [189, 189, 189, 255],\n    'slategray1': [198, 226, 255, 255],\n    'pink1': [255, 181, 197, 255],\n    'mediumpurple1': [171, 130, 255, 255],\n    'pink3': [205, 145, 158, 255],\n    'antiquewhite4': [139, 131, 120, 255],\n    'lightpink1': [255, 174, 185, 255],\n    'honeydew2': [224, 238, 224, 255],\n    'khaki4': [139, 134, 78, 255],\n    'darkolivegreen4': [110, 139, 61, 255],\n    'gray45': [115, 115, 115, 255],\n    'slategray3': [159, 182, 205, 255],\n    'darkolivegreen1': [202, 255, 112, 255],\n    'khaki1': [255, 246, 143, 255],\n    'khaki2': [238, 230, 133, 255],\n    'khaki3': [205, 198, 115, 255],\n    'lavenderblush': [255, 240, 245, 255],\n    'honeydew4': [131, 139, 131, 255],\n    'salmon3': [205, 112, 84, 255],\n    'salmon2': [238, 130, 98, 255],\n    'gray92': [235, 235, 235, 255],\n    'salmon4': [139, 76, 57, 255],\n    'gray49': [125, 125, 125, 255],\n    'gray48': [122, 122, 122, 255],\n    'linen': [250, 240, 230, 255],\n    'burlywood1': [255, 211, 155, 255],\n    'green': [0, 255, 0, 255],\n    'gray47': [120, 120, 120, 255],\n    'blueviolet': [138, 43, 226, 255],\n    'brown2': [238, 59, 59, 255],\n    'brown3': [205, 51, 51, 255],\n    'peachpuff': [255, 218, 185, 255],\n    'brown4': [139, 35, 35, 255],\n    'firebrick4': [139, 26, 26, 255],\n    'azure1': [240, 255, 255, 255],\n    'azure3': [193, 205, 205, 255],\n    'azure2': [224, 238, 238, 255],\n    'azure4': [131, 139, 139, 255],\n    'tomato4': [139, 54, 38, 255],\n    'orange4': [139, 90, 0, 255],\n    'firebrick': [178, 34, 34, 255],\n    'indianred': [205, 92, 92, 255],\n    'orange1': [255, 165, 0, 255],\n    'orange3': [205, 133, 0, 255],\n    'orange2': [238, 154, 0, 255],\n    'darkolivegreen': [85, 107, 47, 255],\n    'gray2': [5, 5, 5, 255],\n    'slategrey': [112, 128, 144, 255],\n    'gray81': [207, 207, 207, 255],\n    'darkred': [139, 0, 0, 255],\n    'gray3': [8, 8, 8, 255],\n    'lightsteelblue1': [202, 225, 255, 255],\n    'lightsteelblue2': [188, 210, 238, 255],\n    'lightsteelblue3': [162, 181, 205, 255],\n    'lightsteelblue4': [110, 123, 139, 255],\n    'tomato3': [205, 79, 57, 255],\n    'gray43': [110, 110, 110, 255],\n    'darkgoldenrod4': [139, 101, 8, 255],\n    'grey50': [127, 127, 127, 255],\n    'yellow4': [139, 139, 0, 255],\n    'mediumorchid': [186, 85, 211, 255],\n    'yellow2': [238, 238, 0, 255],\n    'darkgoldenrod2': [238, 173, 14, 255],\n    'darkgoldenrod3': [205, 149, 12, 255],\n    'chartreuse': [127, 255, 0, 255],\n    'mediumblue': [0, 0, 205, 255],\n    'gray4': [10, 10, 10, 255],\n    'springgreen': [0, 255, 127, 255],\n    'orange': [255, 165, 0, 255],\n    'gray5': [13, 13, 13, 255],\n    'lightsalmon': [255, 160, 122, 255],\n    'gray19': [48, 48, 48, 255],\n    'turquoise': [64, 224, 208, 255],\n    'lightseagreen': [32, 178, 170, 255],\n    'grey8': [20, 20, 20, 255],\n    'grey9': [23, 23, 23, 255],\n    'grey6': [15, 15, 15, 255],\n    'grey7': [18, 18, 18, 255],\n    'grey4': [10, 10, 10, 255],\n    'grey5': [13, 13, 13, 255],\n    'grey2': [5, 5, 5, 255],\n    'grey3': [8, 8, 8, 255],\n    'grey0': [0, 0, 0, 255],\n    'grey1': [3, 3, 3, 255],\n    'gray50': [127, 127, 127, 255],\n    'goldenrod': [218, 165, 32, 255],\n    'grey58': [148, 148, 148, 255],\n    'grey59': [150, 150, 150, 255],\n    'gray51': [130, 130, 130, 255],\n    'grey54': [138, 138, 138, 255],\n    'mediumorchid4': [122, 55, 139, 255],\n    'grey56': [143, 143, 143, 255],\n    'navajowhite3': [205, 179, 139, 255],\n    'mediumorchid1': [224, 102, 255, 255],\n    'grey51': [130, 130, 130, 255],\n    'mediumorchid3': [180, 82, 205, 255],\n    'mediumorchid2': [209, 95, 238, 255],\n    'cyan2': [0, 238, 238, 255],\n    'cyan3': [0, 205, 205, 255],\n    'gray23': [59, 59, 59, 255],\n    'cyan1': [0, 255, 255, 255],\n    'darkgreen': [0, 100, 0, 255],\n    'gray24': [61, 61, 61, 255],\n    'cyan4': [0, 139, 139, 255],\n    'darkviolet': [148, 0, 211, 255],\n    'peachpuff4': [139, 119, 101, 255],\n    'gray28': [71, 71, 71, 255],\n    'slateblue4': [71, 60, 139, 255],\n    'slateblue3': [105, 89, 205, 255],\n    'peachpuff1': [255, 218, 185, 255],\n    'peachpuff2': [238, 203, 173, 255],\n    'peachpuff3': [205, 175, 149, 255],\n    'gray29': [74, 74, 74, 255],\n    'paleturquoise': [175, 238, 238, 255],\n    'darkgray': [169, 169, 169, 255],\n    'grey25': [64, 64, 64, 255],\n    'darkmagenta': [139, 0, 139, 255],\n    'palegoldenrod': [238, 232, 170, 255],\n    'grey64': [163, 163, 163, 255],\n    'grey12': [31, 31, 31, 255],\n    'deeppink3': [205, 16, 118, 255],\n    'gray79': [201, 201, 201, 255],\n    'gray83': [212, 212, 212, 255],\n    'deeppink2': [238, 18, 137, 255],\n    'burlywood4': [139, 115, 85, 255],\n    'palevioletred4': [139, 71, 93, 255],\n    'deeppink1': [255, 20, 147, 255],\n    'slateblue2': [122, 103, 238, 255],\n    'grey46': [117, 117, 117, 255],\n    'royalblue4': [39, 64, 139, 255],\n    'yellowgreen': [154, 205, 50, 255],\n    'royalblue1': [72, 118, 255, 255],\n    'slateblue1': [131, 111, 255, 255],\n    'lightgoldenrod3': [205, 190, 112, 255],\n    'lightgoldenrod2': [238, 220, 130, 255],\n    'navy': [0, 0, 128, 255],\n    'orchid': [218, 112, 214, 255],\n    'ghostwhite': [248, 248, 255, 255],\n    'purple': [160, 32, 240, 255],\n    'darkkhaki': [189, 183, 107, 255],\n    'grey45': [115, 115, 115, 255],\n    'gray94': [240, 240, 240, 255],\n    'wheat4': [139, 126, 102, 255],\n    'gray96': [245, 245, 245, 255],\n    'gray97': [247, 247, 247, 255],\n    'wheat1': [255, 231, 186, 255],\n    'gray91': [232, 232, 232, 255],\n    'wheat3': [205, 186, 150, 255],\n    'wheat2': [238, 216, 174, 255],\n    'indianred4': [139, 58, 58, 255],\n    'coral2': [238, 106, 80, 255],\n    'coral1': [255, 114, 86, 255],\n    'violetred': [208, 32, 144, 255],\n    'rosybrown3': [205, 155, 155, 255],\n    'deepskyblue2': [0, 178, 238, 255],\n    'deepskyblue1': [0, 191, 255, 255],\n    'bisque': [255, 228, 196, 255],\n    'grey49': [125, 125, 125, 255],\n    'khaki': [240, 230, 140, 255],\n    'wheat': [245, 222, 179, 255],\n    'lightslateblue': [132, 112, 255, 255],\n    'mediumpurple3': [137, 104, 205, 255],\n    'gray55': [140, 140, 140, 255],\n    'deepskyblue': [0, 191, 255, 255],\n    'gray98': [250, 250, 250, 255],\n    'steelblue': [70, 130, 180, 255],\n    'aliceblue': [240, 248, 255, 255],\n    'lightskyblue2': [164, 211, 238, 255],\n    'lightskyblue3': [141, 182, 205, 255],\n    'lightslategrey': [119, 136, 153, 255],\n    'blue3': [0, 0, 205, 255],\n    'blue2': [0, 0, 238, 255],\n    'gainsboro': [220, 220, 220, 255],\n    'grey76': [194, 194, 194, 255],\n    'purple3': [125, 38, 205, 255],\n    'plum4': [139, 102, 139, 255],\n    'gray56': [143, 143, 143, 255],\n    'plum3': [205, 150, 205, 255],\n    'plum': [221, 160, 221, 255],\n    'lightgrey': [211, 211, 211, 255],\n    'mediumslateblue': [123, 104, 238, 255],\n    'mistyrose': [255, 228, 225, 255],\n    'lightcyan1': [224, 255, 255, 255],\n    'grey71': [181, 181, 181, 255],\n    'darksalmon': [233, 150, 122, 255],\n    'beige': [245, 245, 220, 255],\n    'grey24': [61, 61, 61, 255],\n    'azure': [240, 255, 255, 255],\n    'honeydew1': [240, 255, 240, 255],\n    'slategray2': [185, 211, 238, 255],\n    'dodgerblue3': [24, 116, 205, 255],\n    'slategray4': [108, 123, 139, 255],\n    'grey27': [69, 69, 69, 255],\n    'lightcyan3': [180, 205, 205, 255],\n    'cornsilk': [255, 248, 220, 255],\n    'tomato1': [255, 99, 71, 255],\n    'gray57': [145, 145, 145, 255],\n    'mediumvioletred': [199, 21, 133, 255],\n    'tomato2': [238, 92, 66, 255],\n    'snow4': [139, 137, 137, 255],\n    'grey75': [191, 191, 191, 255],\n    'snow2': [238, 233, 233, 255],\n    'snow3': [205, 201, 201, 255],\n    'snow1': [255, 250, 250, 255],\n    'grey23': [59, 59, 59, 255],\n    'cornsilk3': [205, 200, 177, 255],\n    'lightcoral': [240, 128, 128, 255],\n    'orangered': [255, 69, 0, 255],\n    'navajowhite': [255, 222, 173, 255],\n    'mediumpurple2': [159, 121, 238, 255],\n    'slategray': [112, 128, 144, 255],\n    'pink2': [238, 169, 184, 255],\n    'grey29': [74, 74, 74, 255],\n    'grey28': [71, 71, 71, 255],\n    'gray82': [209, 209, 209, 255],\n    'burlywood': [222, 184, 135, 255],\n    'mediumpurple4': [93, 71, 139, 255],\n    'mediumspringgreen': [0, 250, 154, 255],\n    'grey26': [66, 66, 66, 255],\n    'grey21': [54, 54, 54, 255],\n    'grey20': [51, 51, 51, 255],\n    'blanchedalmond': [255, 235, 205, 255],\n    'pink4': [139, 99, 108, 255],\n    'gray78': [199, 199, 199, 255],\n    'tan3': [205, 133, 63, 255],\n    'gray76': [194, 194, 194, 255],\n    'gray77': [196, 196, 196, 255],\n    'white': [255, 255, 255, 255],\n    'gray75': [191, 191, 191, 255],\n    'gray72': [184, 184, 184, 255],\n    'gray73': [186, 186, 186, 255],\n    'gray70': [179, 179, 179, 255],\n    'gray71': [181, 181, 181, 255],\n    'lightgray': [211, 211, 211, 255],\n    'ivory': [255, 255, 240, 255],\n    'gray46': [117, 117, 117, 255],\n    'gray74': [189, 189, 189, 255],\n    'lightyellow3': [205, 205, 180, 255],\n    'lightpink2': [238, 162, 173, 255],\n    'lightpink3': [205, 140, 149, 255],\n    'paleturquoise4': [102, 139, 139, 255],\n    'lightpink4': [139, 95, 101, 255],\n    'paleturquoise3': [150, 205, 205, 255],\n    'seagreen4': [46, 139, 87, 255],\n    'seagreen3': [67, 205, 128, 255],\n    'seagreen2': [78, 238, 148, 255],\n    'seagreen1': [84, 255, 159, 255],\n    'paleturquoise2': [174, 238, 238, 255],\n    'gray52': [133, 133, 133, 255],\n    'cornsilk4': [139, 136, 120, 255],\n    'cornsilk2': [238, 232, 205, 255],\n    'darkolivegreen3': [162, 205, 90, 255],\n    'cornsilk1': [255, 248, 220, 255],\n    'limegreen': [50, 205, 50, 255],\n    'darkolivegreen2': [188, 238, 104, 255],\n    'grey': [190, 190, 190, 255],\n    'violetred2': [238, 58, 140, 255],\n    'salmon1': [255, 140, 105, 255],\n    'grey92': [235, 235, 235, 255],\n    'grey93': [237, 237, 237, 255],\n    'grey94': [240, 240, 240, 255],\n    'grey95': [242, 242, 242, 255],\n    'grey96': [245, 245, 245, 255],\n    'grey83': [212, 212, 212, 255],\n    'grey98': [250, 250, 250, 255],\n    'lightgoldenrod1': [255, 236, 139, 255],\n    'palegreen1': [154, 255, 154, 255],\n    'red3': [205, 0, 0, 255],\n    'palegreen3': [124, 205, 124, 255],\n    'palegreen2': [144, 238, 144, 255],\n    'palegreen4': [84, 139, 84, 255],\n    'cadetblue': [95, 158, 160, 255],\n    'violet': [238, 130, 238, 255],\n    'mistyrose2': [238, 213, 210, 255],\n    'slateblue': [106, 90, 205, 255],\n    'grey43': [110, 110, 110, 255],\n    'grey90': [229, 229, 229, 255],\n    'gray35': [89, 89, 89, 255],\n    'turquoise3': [0, 197, 205, 255],\n    'turquoise2': [0, 229, 238, 255],\n    'burlywood3': [205, 170, 125, 255],\n    'burlywood2': [238, 197, 145, 255],\n    'lightcyan4': [122, 139, 139, 255],\n    'rosybrown': [188, 143, 143, 255],\n    'turquoise4': [0, 134, 139, 255],\n    'whitesmoke': [245, 245, 245, 255],\n    'lightblue': [173, 216, 230, 255],\n    'grey40': [102, 102, 102, 255],\n    'gray40': [102, 102, 102, 255],\n    'honeydew3': [193, 205, 193, 255],\n    'dimgray': [105, 105, 105, 255],\n    'grey47': [120, 120, 120, 255],\n    'seagreen': [46, 139, 87, 255],\n    'red4': [139, 0, 0, 255],\n    'grey14': [36, 36, 36, 255],\n    'snow': [255, 250, 250, 255],\n    'darkorchid1': [191, 62, 255, 255],\n    'gray58': [148, 148, 148, 255],\n    'gray59': [150, 150, 150, 255],\n    'cadetblue4': [83, 134, 139, 255],\n    'cadetblue3': [122, 197, 205, 255],\n    'cadetblue2': [142, 229, 238, 255],\n    'cadetblue1': [152, 245, 255, 255],\n    'olivedrab4': [105, 139, 34, 255],\n    'purple4': [85, 26, 139, 255],\n    'gray20': [51, 51, 51, 255],\n    'grey44': [112, 112, 112, 255],\n    'purple1': [155, 48, 255, 255],\n    'olivedrab1': [192, 255, 62, 255],\n    'olivedrab2': [179, 238, 58, 255],\n    'olivedrab3': [154, 205, 50, 255],\n    'orangered3': [205, 55, 0, 255],\n    'orangered2': [238, 64, 0, 255],\n    'orangered1': [255, 69, 0, 255],\n    'darkorchid': [153, 50, 204, 255],\n    'thistle3': [205, 181, 205, 255],\n    'thistle2': [238, 210, 238, 255],\n    'thistle1': [255, 225, 255, 255],\n    'salmon': [250, 128, 114, 255],\n    'gray93': [237, 237, 237, 255],\n    'thistle4': [139, 123, 139, 255],\n    'gray39': [99, 99, 99, 255],\n    'lawngreen': [124, 252, 0, 255],\n    'hotpink3': [205, 96, 144, 255],\n    'hotpink2': [238, 106, 167, 255],\n    'hotpink1': [255, 110, 180, 255],\n    'lightgreen': [144, 238, 144, 255],\n    'hotpink4': [139, 58, 98, 255],\n    'darkseagreen4': [105, 139, 105, 255],\n    'darkseagreen3': [155, 205, 155, 255],\n    'darkseagreen2': [180, 238, 180, 255],\n    'darkseagreen1': [193, 255, 193, 255],\n    'deepskyblue4': [0, 104, 139, 255],\n    'gray44': [112, 112, 112, 255],\n    'navyblue': [0, 0, 128, 255],\n    'darkblue': [0, 0, 139, 255],\n    'forestgreen': [34, 139, 34, 255],\n    'gray53': [135, 135, 135, 255],\n    'grey100': [255, 255, 255, 255],\n    'brown1': [255, 64, 64, 255],\n};\n\nvar $builtinmodule = function (name) {\n    var mod = {};\n    for (k in PygameLib.constants) {\n        mod[k] = Sk.ffi.remapToPy(PygameLib.constants[k]);\n    }\n\n    mod.init = new Sk.builtin.func(pygame_init);\n    mod.Surface = Sk.misceval.buildClass(mod, surface$1, 'Surface', []);\n    PygameLib.SurfaceType = mod.Surface;\n    mod.Color = Sk.misceval.buildClass(mod, color_type_f, 'Color', []);\n    PygameLib.ColorType = mod.Color;\n    mod.Rect = Sk.misceval.buildClass(mod, rect_type_f, 'Rect', []);\n    PygameLib.RectType = mod.Rect;\n    mod.quit = new Sk.builtin.func(function () {\n        PygameLib.running = false;\n        pygameCleanup(Sk.pygameData.mainSurface,{\n            mouse: mouseEventListener,\n            key: keyEventListener\n        });\n        if (Sk.quitHandler) {\n            Sk.quitHandler();\n        }\n    });\n    mod.error = new Sk.builtin.func(function (description) {\n        if (Sk.abstr.typeName(description) !== \"str\") {\n            throw new Sk.builtin.TypeError(\"Error description should be a string\");\n        }\n        mod.lastError = description;\n        return new Sk.builtin.RuntimeError(description);\n    });\n    mod.get_error = new Sk.builtin.func(function () {\n        throw new Sk.builtin.NotImplementedError(\"Not yet implemented\");\n    });\n    mod.set_error = new Sk.builtin.func(function () {\n        throw new Sk.builtin.NotImplementedError(\"Not yet implemented\");\n    });\n    mod.get_sdl_version = new Sk.builtin.func(function () {\n        return new Sk.builtin.tuple([1, 2, 15])\n    });\n    mod.get_sdl_byteorder = new Sk.builtin.func(function () {\n        return Sk.ffi.remapToPy(PygameLib.constants.LIL_ENDIAN);\n    });\n    mod.register_quit = new Sk.builtin.func(function () {\n        throw new Sk.builtin.NotImplementedError(\"Not yet implemented\");\n    });\n    mod.encode_string = new Sk.builtin.func(function () {\n        throw new Sk.builtin.NotImplementedError(\"Not yet implemented\");\n    });\n    mod.encode_file_path = new Sk.builtin.func(function () {\n        throw new Sk.builtin.NotImplementedError(\"Not yet implemented\");\n    });\n    return mod;\n};\n\n// pygame module\nfunction pygame_init() {\n    // ovo je mi ne izgleda najelegantnije, ali jo\u0161 nisam na\u0161ao lep\u0161i na\u010din\n    var display_m = Sk.importModule(\"pygame.display\", false, false);\n    var event_m = Sk.importModule(\"pygame.event\", false, false);\n    var draw_m = Sk.importModule(\"pygame.draw\", false, false);\n    var pygame_m = Sk.importModule(\"pygame\", false, false);\n    var time_m = Sk.importModule(\"pygame.time\", false, false);\n    var image_m = Sk.importModule(\"pygame.image\", false, false);\n    var font_m = Sk.importModule(\"pygame.font\", false, false);\n    var key_m = Sk.importModule(\"pygame.key\", false, false);\n    var version_m = Sk.importModule(\"pygame.version\", false, false);\n    var mouse_m = Sk.importModule(\"pygame.mouse\", false, false);\n    var transform_m = Sk.importModule(\"pygame.transform\", false, false);\n    PygameLib.initial_time = new Date();\n    pygame_m.$d['display'] = display_m.$d['display'];\n    pygame_m.$d['event'] = display_m.$d['event'];\n    pygame_m.$d['draw'] = display_m.$d['draw'];\n    pygame_m.$d['image'] = display_m.$d['image'];\n    delete PygameLib.eventQueue;\n    delete PygameLib.eventTimer;\n    PygameLib.eventQueue = [];\n    PygameLib.pressedKeys = {}\n    PygameLib.eventTimer = {};\n    PygameLib.running = true;\n    PygameLib.repeatKeys = false;\n    PygameLib.mouseData = { \"button\": [0, 0, 0], \"pos\": [0, 0], \"rel\": [0, 0] };\n}\n\nvar mouseEventListener = function (event) {\n\n    var totalOffsetX = 0;\n    var totalOffsetY = 0;\n    var canvasX = 0;\n    var canvasY = 0;\n    var currentElement = this;\n    do {\n        totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;\n        totalOffsetY += currentElement.offsetTop - currentElement.scrollTop;\n    }\n    while (currentElement = currentElement.offsetParent)\n\n    canvasX = event.clientX - totalOffsetX;\n    canvasY = event.clientY - totalOffsetY;\n\n    var button = event.button;\n    if (event.type === \"mousedown\") {\n        var e = [PygameLib.constants.MOUSEBUTTONDOWN,\n            {\n                key: PygameLib.constants.MOUSEBUTTONDOWN,\n                pos: [canvasX, canvasY],\n                button: button + 1\n            }];\n        PygameLib.mouseData[\"button\"][button] = 1;\n    } else if (event.type === \"mouseup\") {\n        var e = [PygameLib.constants.MOUSEBUTTONUP,\n            {\n                key: PygameLib.constants.MOUSEBUTTONUP,\n                pos: [canvasX, canvasY],\n                button: button + 1 \n            }];\n        PygameLib.mouseData[\"button\"][button] = 0;\n    } else if (event.type === \"mousemove\") {\n        var leftButton = 0;\n        var rightButton = 0;\n        var middleButton = 0;\n        if (event.buttons & (1 << 0)) {\n            leftButton = 1;\n        }\n        if (event.buttons & (1 << 1)) {\n            rightButton = 1;\n        }\n        if (event.buttons & (1 << 2)) {\n            middleButton = 1;\n        }\n        var e = [PygameLib.constants.MOUSEMOTION,\n        {\n            key: PygameLib.constants.MOUSEMOTION,\n            pos: [canvasX, canvasY],\n            rel: [event.movementX, event.movementY],\n            buttons: [leftButton, middleButton, rightButton]\n        }];\n        PygameLib.mouseData[\"pos\"] = [canvasX, canvasY];\n        PygameLib.mouseData[\"rel\"] = [event.movementX, event.movementY];\n    }\n    PygameLib.eventQueue.unshift(e);\n};\n\nvar exitEventListener = function(event) {\n    if (PygameLib.eventQueue) {\n        var e = [PygameLib.constants.QUIT];\n        PygameLib.eventQueue.unshift(e);\n    }\n}\n\nvar pygameCleanup = function $cleanup(self, listeners) {\n    if (self) {\n        self.main_canvas.removeEventListener('mousedown', listeners.mouse);\n        self.main_canvas.removeEventListener('mouseup', listeners.mouse);\n        self.main_canvas.removeEventListener('mousemove', listeners.mouse);\n        self.exitButton.disabled = true;\n        self.exitButton.style.backgroundColor = 'gray';\n        self.exitButton.style.borderColor = 'darkgray';\n    }\n    window.removeEventListener(\"keydown\", listeners.key);\n    window.removeEventListener(\"keyup\", listeners.key);\n    PygameLib.running = false;\n}\n\n// First two are unused from pygame\nconst FLAG_FULLSCREEN = 0x100;\nconst FLAG_MAIN = 0x1000;\n\n// Surface((width, height))\nvar GLOBAL_SURFACE_IDS = 0;\nvar init$1 = function $__init__123$(self, size, flags, depth, masks) {\n    Sk.builtin.pyCheckArgs('__init__', arguments, 2, 5, false, false);\n    var tuple_js = Sk.ffi.remapToJs(size);\n    self._id = GLOBAL_SURFACE_IDS;\n    GLOBAL_SURFACE_IDS += 1;\n    self.width = Math.round(tuple_js[0]);\n    self.height = Math.round(tuple_js[1]);\n\n    flags = Sk.ffi.remapToJs(flags);\n    const main = (flags & FLAG_MAIN) === FLAG_MAIN;\n    const fullscreen = (flags & FLAG_FULLSCREEN) === FLAG_FULLSCREEN;\n\n    if (!main) {\n        self.main_canvas = document.createElement(\"canvas\");\n    } else {\n        let consoleLine = Sk.console.pygame(size, fullscreen, self);\n        self.main_canvas = consoleLine.canvas;\n        Sk.pygameData.mainSurface = self;\n        if (!consoleLine.initialized) {\n            self.title = document.createElement(\"div\");\n            self.title.classList.add(\"pygame-title-bar\");\n            // Need to add 2 pixels for 1-pixel border\n            self.title.style.width = (2+self.width)+\"px\";\n            // Exit button\n            self.exitButton = document.createElement(\"button\");\n            self.exitButton.innerHTML = \"&times;\";\n            self.exitButton.classList.add(\"pygame-title-exit\");\n            self.exitButton.addEventListener('click', exitEventListener);\n            // Title\n            self.title.appendChild(self.exitButton);\n            self.titleText = document.createElement(\"span\");\n            self.titleText.innerText = PygameLib.caption;\n            Sk.title_container = self.titleText;\n            self.title.appendChild(self.titleText);\n            consoleLine.html.prepend(self.title);\n            self.main_canvas.addEventListener('mousedown', mouseEventListener);\n            self.main_canvas.addEventListener('mouseup', mouseEventListener);\n            self.main_canvas.addEventListener('mousemove', mouseEventListener);\n            window.addEventListener(\"keydown\", keyEventListener);\n            window.addEventListener(\"keyup\", keyEventListener);\n            consoleLine.finalize(pygameCleanup, {\n                mouse: mouseEventListener,\n                key: keyEventListener\n            })\n            PygameLib.StopPygame = exitEventListener;\n        }\n\n        // TODO: Add in title bar, with exit/stop button\n\n        /*if (fullscreen) {\n            self.width = window.innerWidth;\n            self.height = window.innerHeight;\n            self.main_canvas.style[\"z-index\"] = \"100\";\n            self.main_canvas.style[\"position\"] = \"absolute\";\n            self.main_canvas.style[\"top\"] = \"0\";\n            self.main_canvas.style[\"left\"] = \"0\";\n            document.body.appendChild(self.main_canvas);\n            window.onresize = function (event) {\n                self.width = window.innerWidth;\n                self.height = window.innerHeight;\n                self.main_canvas.width = self.width;\n                self.main_canvas.height = self.height;\n                self.main_context.drawImage(self.offscreen_canvas, 0, 0);\n                self.offscreen_canvas.width = self.width;\n                self.offscreen_canvas.height = self.height;\n                self.context2d.drawImage(self.main_canvas, 0, 0);\n            };\n        } */\n    }\n    self.main_canvas.width = self.width;\n    self.main_canvas.height = self.height;\n    self.main_context = self.main_canvas.getContext(\"2d\");\n\n    self.offscreen_canvas = document.createElement('canvas');\n    self.context2d = self.offscreen_canvas.getContext(\"2d\");\n\n    self.offscreen_canvas.width = self.width;\n    self.offscreen_canvas.height = self.height;\n    self.main_canvas.setAttribute('width', self.width);\n    self.main_canvas.setAttribute('height', self.height);\n\n\n    if (main) {\n        self.main_canvas.setAttribute('style', \"border: 1px solid darkgray;\");\n        fillWhite(self.main_context, self.main_canvas.width, self.main_canvas.height);\n        fillWhite(self.context2d, self.width, self.height);\n    } else {\n        fillBlack(self.main_context, self.main_canvas.width, self.main_canvas.height);\n        fillBlack(self.context2d, self.width, self.height);\n    }\n\n    return Sk.builtin.none.none$;\n\n};\n\nfunction fillBlack(ctx, w, h) {\n    ctx.beginPath();\n    ctx.rect(0, 0, w - 1, h - 1);\n    ctx.fillStyle = \"rgba(255, 255, 255, 0.0)\";\n    ctx.fill();\n}\n\nfunction fillWhite(ctx, w, h) {\n    ctx.beginPath();\n    ctx.rect(0, 0, w - 1, h - 1);\n    ctx.fillStyle = \"rgba(255, 255, 255, 0.0)\";\n    ctx.fill();\n}\n\ninit$1.co_name = new Sk.builtins['str']('__init__');\ninit$1.co_varnames = ['self', 'size', 'flags', 'depth', 'masks'];\ninit$1.$defaults = [new Sk.builtin.int_(0), new Sk.builtin.int_(0), Sk.builtin.none.none$];\n\nvar repr$1 = function $__repr__123$(self) {\n    var width = Sk.ffi.remapToJs(self.width);\n    var height = Sk.ffi.remapToJs(self.height);\n\n    return Sk.ffi.remapToPy('<Surface(' + width + 'x' + height + 'x32 SW)>');\n};\nrepr$1.co_name = new Sk.builtins['str']('__repr__');\nrepr$1.co_varnames = ['self'];\n\nfunction get_height(self) {\n    Sk.builtin.pyCheckArgs('get_height', arguments, 1, 1, false, false);\n    return Sk.ffi.remapToPy(self.height);\n}\n\nget_height.co_name = new Sk.builtins['str']('get_height');\nget_height.co_varnames = ['self'];\n\nfunction get_width(self) {\n    Sk.builtin.pyCheckArgs('get_width', arguments, 1, 1, false, false);\n    return Sk.ffi.remapToPy(self.width);\n}\n\nget_width.co_name = new Sk.builtins['str']('get_width');\nget_width.co_varnames = ['self'];\n\nfunction get_size(self) {\n    Sk.builtin.pyCheckArgs('get_size', arguments, 1, 1, false, false);\n    return new Sk.builtin.tuple([new Sk.builtin.int_(self.width),\n        new Sk.builtin.int_(self.height)]);\n}\n\nget_size.co_name = new Sk.builtins['str']('get_size');\nget_size.co_varnames = ['self'];\n\nfunction get_flags() {\n    Sk.builtin.pyCheckArgs('get_flags', arguments, 1, 1, false, false);\n    return new Sk.builtin.int_(0);\n}\n\nget_flags.co_name = new Sk.builtins['str']('get_flags');\nget_flags.co_varnames = ['self'];\n\nfunction update(self, rectangle) {\n    // rectangle could be list, single, or missing\n    //self.main_canvas.width = self.offscreen_canvas.width;\n    //self.main_canvas.height = self.offscreen_canvas.height;\n    if (rectangle === undefined) {\n        self.main_context.drawImage(self.offscreen_canvas, 0, 0);\n        return Sk.builtin.none.none$;\n    } else if (Sk.misceval.isTrue(Sk.builtin.isinstance(rectangle, PygameLib.RectType))) {\n        rectangle = new Sk.builtin.list([rectangle]);\n    }\n    // TODO: Make this access the list correctly\n    for (let i=0, l= rectangle.v.length; i < l; i+=1) {\n        // TODO: Profile this, optimizable hot loop?\n        let left = Sk.builtin.getattr(rectangle.v[i], LEFT_STR).v;\n        let top = Sk.builtin.getattr(rectangle.v[i], TOP_STR).v;\n        let width = Sk.builtin.getattr(rectangle.v[i], WIDTH_STR).v;\n        let height = Sk.builtin.getattr(rectangle.v[i], HEIGHT_STR).v;\n        self.main_context.drawImage(self.offscreen_canvas,\n            left, top, width, height, left, top, width, height);\n    }\n    return Sk.builtin.none.none$;\n}\n\nupdate.co_name = new Sk.builtins['str']('update');\nupdate.co_varnames = ['self', 'rectangle'];\n\nfunction blit(self, source, dest, area, flags) {\n    var x = Sk.ffi.remapToJs(Sk.abstr.objectGetItem(dest, new Sk.builtin.int_(0)));\n    var y = Sk.ffi.remapToJs(Sk.abstr.objectGetItem(dest, new Sk.builtin.int_(1)));\n    if (source.offscreen_canvas.width > 0 && source.offscreen_canvas.height > 0) {\n        self.context2d.drawImage(source.offscreen_canvas, x, y);\n    }\n    return PygameLib.make_rect(x, y, source.offscreen_canvas.width, source.offscreen_canvas.height);\n}\n\nfunction convert(self) {\n    return self;\n}\n\nvar surface$1 = function $Surface$class_outer(gbl, loc) {\n    loc.__init__ = new Sk.builtins.function(init$1, gbl);\n    loc.__repr__ = new Sk.builtins.function(repr$1, gbl);\n    loc.fill = new Sk.builtin.func(function (self, color) {\n        var ctx = self.context2d;\n        var color_js = PygameLib.extract_color(color);\n        ctx.fillStyle = 'rgba(' + color_js[0] + ', ' + color_js[1] + ', ' + color_js[2] + ', ' + color_js[3] + ')';\n        ctx.fillRect(0, 0, self.width, self.height);\n    });\n    loc.blit = new Sk.builtins.function(blit, gbl);\n    loc.convert = new Sk.builtins.function(convert, gbl);\n    loc.convert_alpha = new Sk.builtins.function(convert, gbl);\n    loc.update = new Sk.builtins.function(update, gbl);\n    loc.get_width = new Sk.builtins.function(get_width, gbl);\n    loc.get_height = new Sk.builtins.function(get_height, gbl);\n    loc.get_size = new Sk.builtins.function(get_size, gbl);\n    loc.get_flags = new Sk.builtins.function(get_flags, gbl);\n    loc.set_alpha = new Sk.builtins.function(function (self) {\n        // TODO: Finish support for changing alpha of all pixels\n    }, gbl);\n    loc.copy = new Sk.builtin.func(function (self) {\n        var size = new Sk.builtin.tuple([self.offscreen_canvas.width, self.offscreen_canvas.width]);\n        var ret = Sk.misceval.callsim(PygameLib.SurfaceType, size);\n        ret.offscreen_canvas.width = self.offscreen_canvas.width;\n        ret.offscreen_canvas.height = self.offscreen_canvas.height;\n        ret.context2d.drawImage(self.offscreen_canvas, 0, 0);\n        return ret;\n    });\n    loc.subsurface = new Sk.builtins.function(function (self, area) {\n        // TODO: Implement this properly so it's a reference inside of something else?\n        // TODO: Further need to make sure that we are actually accessing using getitem or index whatever\n        var x = Sk.ffi.remapToJs(Sk.abstr.objectGetItem(area, new Sk.builtin.int_(0)));\n        var y = Sk.ffi.remapToJs(Sk.abstr.objectGetItem(area, new Sk.builtin.int_(1)));\n        var w = Sk.ffi.remapToJs(Sk.abstr.objectGetItem(area, new Sk.builtin.int_(2)));\n        var h = Sk.ffi.remapToJs(Sk.abstr.objectGetItem(area, new Sk.builtin.int_(3)));\n        var size = new Sk.builtin.tuple([w, h]);\n        var ret = Sk.misceval.callsim(PygameLib.SurfaceType, size);\n        //fillWhite(ret.context2d, w, h);\n        ret.offscreen_canvas.width = w;\n        ret.offscreen_canvas.height = h;\n        ret.context2d.drawImage(self.offscreen_canvas, x, y, w, h, 0, 0, w, h);\n        return ret;\n    }, gbl);\n    loc.scroll = new Sk.builtin.func(function (self, dx, dy) {\n        var x = Sk.ffi.remapToJs(dx);\n        var y = Sk.ffi.remapToJs(dy);\n        self.context2d.drawImage(self.offscreen_canvas, x, y);\n        return Sk.builtin.none.none$;\n    });\n    loc.get_at = new Sk.builtin.func(function (self, coordinates) {\n        if (Sk.abstr.typeName(coordinates) !== \"tuple\") {\n            throw new Sk.builtin.TypeError(\"argument must be a pair\");\n        }\n        var x = Sk.ffi.remapToJs(coordinates.v[0]);\n        var y = Sk.ffi.remapToJs(coordinates.v[1]);\n        var data = self.context2d.getImageData(x, y, 1, 1).data;\n        return new Sk.builtin.tuple([data[0], data[1], data[2], data[3]]);\n    });\n    loc.set_at = new Sk.builtin.func(function (self, coordinates, clr) {\n        if (Sk.abstr.typeName(coordinates) !== \"tuple\") {\n            throw new Sk.builtin.TypeError(\"the first argument must be a pair\");\n        }\n        if (Sk.abstr.typeName(clr) !== \"Color\") {\n            throw new Sk.builtin.TypeError(\"the second argument must be a Pygame color\");\n        }\n        var rgba = PygameLib.extract_color(clr);\n        self.context2d.fillStyle = \"rgba(\" + rgba[0] + \",\" + rgba[1] + \",\" + rgba[2] + \",\" + (rgba[3]) + \")\";\n        var x = Sk.ffi.remapToJs(coordinates.v[0]);\n        var y = Sk.ffi.remapToJs(coordinates.v[1]);\n        self.context2d.fillRect(x, y, 1, 1);\n    });\n    loc.get_rect = new Sk.builtin.func(function (self) {\n        return PygameLib.make_rect(0, 0, self.offscreen_canvas.width, self.offscreen_canvas.height);\n    });\n    loc.get_bounding_rect = new Sk.builtin.func(function (self) {\n        return PygameLib.make_rect(0, 0, self.offscreen_canvas.width, self.offscreen_canvas.height);\n    })\n};\n\nsurface$1.co_name = new Sk.builtins['str']('Surface');\n\n//pygame.Color\nfunction color_type_f($gbl, $loc) {\n    // https://gist.github.com/mjackson/5311256\n    $loc.__init__ = new Sk.builtin.func(function (self, r, g, b, a) {\n        Sk.builtin.pyCheckArgs('__init__', arguments, 2, 5, false, false);\n        var r_js = Sk.ffi.remapToJs(r);\n        if (typeof (r_js) == 'string') {\n            var color_name = r_js;\n            r = Sk.ffi.remapToPy(PygameLib.Colors[color_name][0]);\n            g = Sk.ffi.remapToPy(PygameLib.Colors[color_name][1]);\n            b = Sk.ffi.remapToPy(PygameLib.Colors[color_name][2]);\n            a = Sk.ffi.remapToPy(PygameLib.Colors[color_name][3]);\n        }\n        Sk.abstr.sattr(self, R_STR, r, false);\n        Sk.abstr.sattr(self, G_STR, g, false);\n        Sk.abstr.sattr(self, B_STR, b, false);\n        Sk.abstr.sattr(self, A_STR, a, false);\n        Sk.abstr.sattr(self, Sk.builtin.str.$len, Sk.ffi.remapToPy(4), false);\n        return Sk.builtin.none.none$;\n    });\n    $loc.__init__.co_name = new Sk.builtins['str']('__init__');\n    $loc.__init__.co_varnames = ['self', 'r', 'g', 'b', 'a'];\n\n    $loc.__repr__ = new Sk.builtin.func(function (self) {\n        var r = Sk.ffi.remapToJs(Sk.abstr.gattr(self, R_STR, false));\n        var g = Sk.ffi.remapToJs(Sk.abstr.gattr(self, G_STR, false));\n        var b = Sk.ffi.remapToJs(Sk.abstr.gattr(self, B_STR, false));\n        var a = Sk.ffi.remapToJs(Sk.abstr.gattr(self, A_STR, false));\n        return Sk.ffi.remapToPy('<Color(' + r + ', ' + g + ', ' + b + ', ' + a + ')>');\n    });\n    $loc.__repr__.co_name = new Sk.builtins['str']('__repr__');\n    $loc.__repr__.co_varnames = ['self'];\n\n    var cmy_getter = new Sk.builtin.func(function (self) {\n        var r = Sk.ffi.remapToJs(Sk.abstr.gattr(self, R_STR, false));\n        var g = Sk.ffi.remapToJs(Sk.abstr.gattr(self, G_STR, false));\n        var b = Sk.ffi.remapToJs(Sk.abstr.gattr(self, B_STR, false));\n        return new Sk.builtin.tuple([1.0 - r / 255, 1.0 - g / 255, 1.0 - b / 255]);\n    });\n    var cmy_setter = new Sk.builtin.func(function (self, val) {\n        var cmy = Sk.ffi.remapToJs(val);\n        Sk.abstr.sattr(self, R_STR, Sk.ffi.remapToPy(255 - cmy[0] * 255), false);\n        Sk.abstr.sattr(self, G_STR, Sk.ffi.remapToPy(255 - cmy[1] * 255), false);\n        Sk.abstr.sattr(self, B_STR, Sk.ffi.remapToPy(255 - cmy[2] * 255), false);\n    });\n    // this is a way of creating an equivalent of property()\n    $loc.cmy = Sk.misceval.callsimOrSuspend(Sk.builtins.property, cmy_getter, cmy_setter);\n\n    var hsva_getter = new Sk.builtin.func(function (self) {\n        // https://stackoverflow.com/a/8023734\n        var rr, gg, bb,\n            r = Sk.ffi.remapToJs(Sk.abstr.gattr(self, R_STR, false)) / 255,\n            g = Sk.ffi.remapToJs(Sk.abstr.gattr(self, G_STR, false)) / 255,\n            b = Sk.ffi.remapToJs(Sk.abstr.gattr(self, B_STR, false)) / 255,\n            h, s,\n            v = Math.max(r, g, b),\n            diff = v - Math.min(r, g, b),\n            diffc = function (c) {\n                return (v - c) / 6 / diff + 1 / 2;\n            };\n\n        if (diff == 0) {\n            h = s = 0;\n        } else {\n            s = diff / v;\n            rr = diffc(r);\n            gg = diffc(g);\n            bb = diffc(b);\n\n            if (r === v) {\n                h = bb - gg;\n            } else if (g === v) {\n                h = (1 / 3) + rr - bb;\n            } else if (b === v) {\n                h = (2 / 3) + gg - rr;\n            }\n            if (h < 0) {\n                h += 1;\n            } else if (h > 1) {\n                h -= 1;\n            }\n        }\n        var a = Sk.ffi.remapToJs(Sk.abstr.gattr(self, A_STR, false));\n        a = Math.round(a / 255 * 100);\n        return new Sk.builtin.tuple([Math.round(h * 360), Math.round(s * 100), Math.round(v * 100), a]);\n    });\n    var hsva_setter = new Sk.builtin.func(function (self, val) {\n        // https://stackoverflow.com/a/17243070\n        var r, g, b, i, f, p, q, t;\n        var hsva = Sk.ffi.remapToJs(val);\n        var h = hsva[0] / 360;\n        var s = hsva[1] / 100;\n        var v = hsva[2] / 100;\n        i = Math.floor(h * 6);\n        f = h * 6 - i;\n        p = v * (1 - s);\n        q = v * (1 - f * s);\n        t = v * (1 - (1 - f) * s);\n        switch (i % 6) {\n            case 0:\n                r = v, g = t, b = p;\n                break;\n            case 1:\n                r = q, g = v, b = p;\n                break;\n            case 2:\n                r = p, g = v, b = t;\n                break;\n            case 3:\n                r = p, g = q, b = v;\n                break;\n            case 4:\n                r = t, g = p, b = v;\n                break;\n            case 5:\n                r = v, g = p, b = q;\n                break;\n        }\n        Sk.abstr.sattr(self, R_STR, Sk.ffi.remapToPy(Math.round(r * 255)), false);\n        Sk.abstr.sattr(self, G_STR, Sk.ffi.remapToPy(Math.round(g * 255)), false);\n        Sk.abstr.sattr(self, B_STR, Sk.ffi.remapToPy(Math.round(b * 255)), false);\n        Sk.abstr.sattr(self, A_STR, Sk.ffi.remapToPy(Math.round(hsva[3] / 100 * 255)), false);\n    });\n    $loc.hsva = Sk.misceval.callsimOrSuspend(Sk.builtins.property, hsva_getter, hsva_setter);\n\n    var hsla_getter = new Sk.builtin.func(function (self) {\n        var r = Sk.ffi.remapToJs(Sk.abstr.gattr(self, R_STR, false));\n        var g = Sk.ffi.remapToJs(Sk.abstr.gattr(self, G_STR, false));\n        var b = Sk.ffi.remapToJs(Sk.abstr.gattr(self, B_STR, false));\n        var a = Sk.ffi.remapToJs(Sk.abstr.gattr(self, A_STR, false));\n        r /= 255;\n        g /= 255;\n        b /= 255;\n        a /= 255;\n\n        var max = Math.max(r, g, b), min = Math.min(r, g, b);\n        var h, s, l = (max + min) / 2;\n\n        if (max == min) {\n            h = s = 0; // achromatic\n        } else {\n            var d = max - min;\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n            switch (max) {\n                case r:\n                    h = (g - b) / d + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / d + 2;\n                    break;\n                case b:\n                    h = (r - g) / d + 4;\n                    break;\n            }\n\n            h /= 6;\n        }\n        h *= 360;\n        s *= 100;\n        l *= 100;\n        a *= 100;\n        return new Sk.builtin.tuple([h, s, l, a]);\n    });\n    var hsla_setter = new Sk.builtin.func(function (self, val) {\n        var hsla = Sk.ffi.remapToJs(val);\n        var h = hsla[0] / 360;\n        var s = hsla[1] / 100;\n        var l = hsla[2] / 100;\n        var a = hsla[3] / 100;\n        var r, g, b;\n\n        if (s == 0) {\n            r = g = b = l; // achromatic\n        } else {\n            function hue2rgb(p, q, t) {\n                if (t < 0) t += 1;\n                if (t > 1) t -= 1;\n                if (t < 1 / 6) return p + (q - p) * 6 * t;\n                if (t < 1 / 2) return q;\n                if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n                return p;\n            }\n\n            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            var p = 2 * l - q;\n\n            r = hue2rgb(p, q, h + 1 / 3);\n            g = hue2rgb(p, q, h);\n            b = hue2rgb(p, q, h - 1 / 3);\n        }\n        Sk.abstr.sattr(self, R_STR, Sk.ffi.remapToPy(Math.round(r * 255)), false);\n        Sk.abstr.sattr(self, G_STR, Sk.ffi.remapToPy(Math.round(g * 255)), false);\n        Sk.abstr.sattr(self, B_STR, Sk.ffi.remapToPy(Math.round(b * 255)), false);\n        Sk.abstr.sattr(self, A_STR, Sk.ffi.remapToPy(Math.round(a * 255)), false);\n    });\n    $loc.hsla = Sk.misceval.callsimOrSuspend(Sk.builtins.property, hsla_getter, hsla_setter);\n\n    var i1i2i3_getter = new Sk.builtin.func(function (self) {\n        var r = Sk.ffi.remapToJs(Sk.abstr.gattr(self, R_STR, false));\n        var g = Sk.ffi.remapToJs(Sk.abstr.gattr(self, G_STR, false));\n        var b = Sk.ffi.remapToJs(Sk.abstr.gattr(self, B_STR, false));\n        r /= 255;\n        g /= 255;\n        b /= 255;\n        var i1 = (r + g + b) / 3;\n        var i2 = (r - b) / 2;\n        var i3 = (2 * g - r - b) / 4;\n        return new Sk.builtin.tuple([i1, i2, i3]);\n    });\n    var i1i2i3_setter = new Sk.builtin.func(function (self, val) {\n        var i1i2i3 = Sk.ffi.remapToJs(val);\n        var i1 = i1i2i3[0];\n        var i2 = i1i2i3[1];\n        var i3 = i1i2i3[2];\n        var r = i1 + i2 - 2 * i3 / 3;\n        var g = i1 + 4 * i3 / 3;\n        var b = i1 - i2 - 2 * i3 / 3;\n        Sk.abstr.sattr(self, R_STR, Sk.ffi.remapToPy(Math.round(r * 255)), false);\n        Sk.abstr.sattr(self, G_STR, Sk.ffi.remapToPy(Math.round(g * 255)), false);\n        Sk.abstr.sattr(self, B_STR, Sk.ffi.remapToPy(Math.round(b * 255)), false);\n    });\n    $loc.i1i2i3 = Sk.misceval.callsimOrSuspend(Sk.builtins.property, i1i2i3_getter, i1i2i3_setter);\n\n    $loc.normalize = new Sk.builtin.func(function (self) {\n        var r = Sk.ffi.remapToJs(Sk.abstr.gattr(self, R_STR, false));\n        var g = Sk.ffi.remapToJs(Sk.abstr.gattr(self, G_STR, false));\n        var b = Sk.ffi.remapToJs(Sk.abstr.gattr(self, B_STR, false));\n        var a = Sk.ffi.remapToJs(Sk.abstr.gattr(self, A_STR, false));\n        return new Sk.builtin.tuple([r / 255, g / 255, b / 255, a / 255]);\n    });\n\n    $loc.correct_gamma = new Sk.builtin.func(function (self, val) {\n        var gamma = Sk.ffi.remapToJs(val);\n        var r = Sk.ffi.remapToJs(Sk.abstr.gattr(self, R_STR, false));\n        var g = Sk.ffi.remapToJs(Sk.abstr.gattr(self, G_STR, false));\n        var b = Sk.ffi.remapToJs(Sk.abstr.gattr(self, B_STR, false));\n        var a = Sk.ffi.remapToJs(Sk.abstr.gattr(self, A_STR, false));\n        r = Math.round(Math.pow(r / 255, gamma) * 255);\n        g = Math.round(Math.pow(g / 255, gamma) * 255);\n        b = Math.round(Math.pow(b / 255, gamma) * 255);\n        a = Math.round(Math.pow(a / 255, gamma) * 255);\n        Sk.abstr.sattr(self, R_STR, Sk.ffi.remapToPy(r), false);\n        Sk.abstr.sattr(self, G_STR, Sk.ffi.remapToPy(g), false);\n        Sk.abstr.sattr(self, B_STR, Sk.ffi.remapToPy(b), false);\n        Sk.abstr.sattr(self, A_STR, Sk.ffi.remapToPy(a), false);\n        return new Sk.builtin.tuple([r, g, b, a])\n    });\n\n    $loc.set_length = new Sk.builtin.func(function (self, val) {\n        Sk.abstr.sattr(self, Sk.builtin.str.$len, val, false);\n    });\n\n    $loc.__len__ = new Sk.builtin.func(function (self) {\n        return Sk.abstr.gattr(self, Sk.builtin.str.$len, false);\n    })\n};\n\n";
