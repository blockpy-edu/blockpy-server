(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("FilePond"), require("jQuery"), require("ko"));
	else if(typeof define === 'function' && define.amd)
		define("blockpy", ["FilePond", "jQuery", "ko"], factory);
	else if(typeof exports === 'object')
		exports["blockpy"] = factory(require("FilePond"), require("jQuery"), require("ko"));
	else
		root["blockpy"] = factory(root["FilePond"], root["jQuery"], root["ko"]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_filepond__, __WEBPACK_EXTERNAL_MODULE_jquery__, __WEBPACK_EXTERNAL_MODULE_knockout__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/blockpy.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/blockpy.js":
/*!************************!*\
  !*** ./src/blockpy.js ***!
  \************************/
/*! exports provided: _IMPORTED_COMPLETE_DATASETS, _IMPORTED_DATASETS, BlockPy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(ko) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockPy", function() { return BlockPy; });
/* harmony import */ var _css_blockpy_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./css/blockpy.css */ "./src/css/blockpy.css");
/* harmony import */ var _css_blockpy_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_blockpy_css__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_bootstrap_retheme_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./css/bootstrap_retheme.css */ "./src/css/bootstrap_retheme.css");
/* harmony import */ var _css_bootstrap_retheme_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_bootstrap_retheme_css__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var skulpt_modules_image__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! skulpt_modules/image */ "./src/skulpt_modules/image.js");
/* harmony import */ var skulpt_modules_weakref__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! skulpt_modules/weakref */ "./src/skulpt_modules/weakref.js");
/* harmony import */ var storage_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! storage.js */ "./src/storage.js");
/* harmony import */ var editors_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! editors.js */ "./src/editors.js");
/* harmony import */ var editor_python_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! editor/python.js */ "./src/editor/python.js");
/* harmony import */ var server_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! server.js */ "./src/server.js");
/* harmony import */ var interface_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! interface.js */ "./src/interface.js");
/* harmony import */ var _files__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./files */ "./src/files.js");
/* harmony import */ var _editor_abstract_editor__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./editor/abstract_editor */ "./src/editor/abstract_editor.js");
/* harmony import */ var engine_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! engine.js */ "./src/engine.js");
/* harmony import */ var _trace__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./trace */ "./src/trace.js");
/* harmony import */ var _console__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./console */ "./src/console.js");
/* harmony import */ var feedback_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! feedback.js */ "./src/feedback.js");
/* harmony import */ var _dialog__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./dialog */ "./src/dialog.js");
/* harmony import */ var _editor_assignment_settings__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./editor/assignment_settings */ "./src/editor/assignment_settings.js");
/* harmony import */ var _corgis__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./corgis */ "./src/corgis.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_IMPORTED_COMPLETE_DATASETS", function() { return _corgis__WEBPACK_IMPORTED_MODULE_18__["_IMPORTED_COMPLETE_DATASETS"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_IMPORTED_DATASETS", function() { return _corgis__WEBPACK_IMPORTED_MODULE_18__["_IMPORTED_DATASETS"]; });

/* harmony import */ var _history__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./history */ "./src/history.js");
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./utilities */ "./src/utilities.js");
/* harmony import */ var _editor_sample_submissions__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./editor/sample_submissions */ "./src/editor/sample_submissions.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * @fileoverview Starting point of the BlockPy application, containing the main
 * BlockPy class.
 */




 //import {$builtinmodule as matplotlibModule} from "skulpt_modules/matplotlib2";





















var EDITOR_VERSION = "5.1.2";
/**
 * Major entry point for creating a BlockPy instance.
 * Two most important fields are `model` and `components`.
 * The `model` holds all the data about the interface.
 * The `components` are references to the disparate parts of BlockPy.
 *
 * Most of this classes definition is just initializing the model and updating
 * it on an assignment switch.
 */

var BlockPy = /*#__PURE__*/function () {
  /**
   * @param {Object} configuration - User level settings (e.g., what editor mode, whether to mute semantic errors, etc.)
   * @param {Object} assignment - Assignment level settings (data about the loaded assignment, user, submission, etc.)
   * @param {Object} submission - Includes the source code of any programs to be loaded
   */
  function BlockPy(configuration, assignment, submission) {
    _classCallCheck(this, BlockPy);

    this.initModel(configuration);

    if (assignment !== undefined) {
      this.setAssignment(configuration, assignment, submission);
    }

    this.initMain();
  }
  /**
   * Initializes the BlockPy object by initializing its interface,
   * model, and components.
   *
   */


  _createClass(BlockPy, [{
    key: "initMain",
    value: function initMain() {
      this.initUtilities();
      this.initModelMethods();
      this.turnOnHacks();
      this.initInterface();
      this.applyModel();
      this.initComponents();
      this.makeExtraSubscriptions();
      this.start();
    }
  }, {
    key: "getSetting",

    /**
     * Retrieves a default value or
     * @param {string} key - the key to look up a value for
     * @param {Object} defaultValue - if the key is not found anywhere, use this value
     */
    value: function getSetting(key, defaultValue) {
      if (key in this.initialConfiguration_) {
        return this.initialConfiguration_[key];
      } else if (this.localSettings_.has(key)) {
        return this.localSettings_.get(key);
      } else {
        return defaultValue;
      }
    }
    /**
     * Initializes the model to its defaults.
     *
     * Categories:
     *   * user: values for the current user (stored to server)
     *   * assignment: values for the current assignment (stored to server)
     *   * submission: values for the current submission (stored to server)
     *   * display: flags related to current visibility (stored to localSettings)
     *   * status: messages related to current status (not stored)
     *   * execution: values related to last run (not stored)
     *   * configuration: constant values related to setup (not stored)
     */

  }, {
    key: "initModel",
    value: function initModel(configuration) {
      // Connect to local storage
      this.localSettings_ = new storage_js__WEBPACK_IMPORTED_MODULE_5__["LocalStorageWrapper"]("localSettings");
      this.initialConfiguration_ = configuration; //console.log(configuration, configuration["submission.code"], configuration["partId"], extractPart(configuration["submission.code"] || "", configuration["partId"]));

      this.model = {
        user: {
          id: ko.observable(configuration["user.id"]),
          name: ko.observable(configuration["user.name"]),

          /**
           * Whether you are an Owner (can modify the assignment), Grader (can view
           * the assignments' information) or Student (can not see any instructor stuff).
           * @type {bool}
           */
          role: ko.observable(this.getSetting("user.role", "owner")),

          /**
           * Current course for this user
           */
          courseId: ko.observable(configuration["user.course_id"]),

          /**
           * Current assignment group that this user is inside
           */
          groupId: ko.observable(configuration["user.group_id"])
        },
        assignment: {
          id: ko.observable(null),
          name: ko.observable("Scratch Canvas"),
          instructions: ko.observable("Welcome to BlockPy. Try editing and running the code below."),

          /**
           * The human-friendly URL to use as a shortcut for this assignment
           */
          url: ko.observable(""),
          // TODO: warning message if maze
          type: ko.observable(_editor_assignment_settings__WEBPACK_IMPORTED_MODULE_17__["AssigmentType"].BLOCKPY),
          points: ko.observable(null),
          startingCode: ko.observable(configuration["assignment.starting_code"] || ""),
          onRun: ko.observable(configuration["assignment.on_run"] || ""),
          onChange: ko.observable(configuration["assignment.on_change"] || null),
          onEval: ko.observable(configuration["assignment.on_eval"] || null),
          extraInstructorFiles: ko.observableArray(Object(_files__WEBPACK_IMPORTED_MODULE_10__["loadConcatenatedFile"])(configuration["assignment.extra_instructor_files"]) || []),
          extraStartingFiles: ko.observableArray([]),
          forkedId: ko.observable(null),
          forkedVersion: ko.observable(null),
          ownerId: ko.observable(null),
          courseId: ko.observable(null),
          version: ko.observable(null),
          tags: ko.observableArray([]),
          sampleSubmissions: ko.observableArray([]),
          reviewed: ko.observable(configuration["assignment.reviewed"]),
          "public": ko.observable(configuration["assignment.public"]),
          hidden: ko.observable(configuration["assignment.hidden"]),
          ipRanges: ko.observable(configuration["assignment.ip_ranges"]),
          settings: Object(_editor_assignment_settings__WEBPACK_IMPORTED_MODULE_17__["makeAssignmentSettingsModel"])(configuration)
        },
        submission: {
          id: ko.observable(null),
          code: ko.observable(Object(_utilities__WEBPACK_IMPORTED_MODULE_20__["extractPart"])(configuration["submission.code"] || "", configuration["partId"]) || ""),
          extraFiles: ko.observableArray([]),
          url: ko.observable(""),
          endpoint: ko.observable(""),
          score: ko.observable(0),
          correct: ko.observable(false),
          // assignmentId inferred from assignment.id
          // courseId inferred from user.courseId
          // userId inferred from user.id
          // assignmentVersion inferred from assignment.version
          version: ko.observable(0),
          submissionStatus: ko.observable("Started"),
          gradingStatus: ko.observable("NotReady"),
          ownerId: ko.observable(null)
        },
        display: {
          /**
           * Currently visible File, if applicable
           * @type {String}
           */
          filename: ko.observable(null),

          /**
           * Whether or not to be presented with the instructor settings and files
           * @type {bool}
           */
          instructor: ko.observable("" + this.getSetting("display.instructor", "false") === "true"),

          /**
           * Whether or not to prevent the printer from showing things
           */
          mutePrinter: ko.observable(false),

          /**
           * (Python Views) The current editor mode.
           * @type {DisplayModes}
           */
          pythonMode: ko.observable(this.getSetting("display.python.mode", editor_python_js__WEBPACK_IMPORTED_MODULE_7__["DisplayModes"].TEXT)),

          /**
           * Whether or not History mode is engaged.
           * @type {bool}
           */
          historyMode: ko.observable(false),

          /**
           * Whether or not to be auto-saving changes in Python editor
           * If an integer, specifies the delay that should be used (microseconds).
           * This is never on in non-Python editors.
           * @type {bool|int}
           */
          autoSave: ko.observable(true),

          /**
           * Whether or not the console is full width and feedback is hidden
           */
          bigConsole: ko.observable(false),

          /**
           * The height to use for the console.
           *    If null, then let the height remain unchanged
           *    If a number, then the
           */
          previousConsoleHeight: ko.observable(null),
          currentConsoleHeight: ko.observable(null),

          /**
           * Which panel to show in the second row's second column
           * @type {SecondRowSecondPanelOptions}
           */
          secondRowSecondPanel: ko.observable(interface_js__WEBPACK_IMPORTED_MODULE_9__["SecondRowSecondPanelOptions"].FEEDBACK),
          previousSecondRowSecondPanel: ko.observable(null),

          /**
           * Whether or not to be tracing the code right now
           */
          traceExecution: ko.observable(false),

          /**
           * The list of promises to still resolve while loading datasets
           * @type {Array<Promise>}
           */
          loadingDatasets: ko.observableArray([]),

          /**
           * The temporary changed value of the instructions have been changed from what is in the assignment
           */
          changedInstructions: ko.observable(null),

          /**
           * A holder for the timer to trigger on-changes
           */
          triggerOnChange: null,

          /**
           * Whether the current feedback and output corresponds to the current submission.
           * This would be false if there is no feedback/output (i.e., code has not been run),
           * or if the user has modified the submission after the last run (e.g., by editing
           * the text).
           */
          dirtySubmission: ko.observable(true),

          /**
           *  Whether or not to make the BlockPy element in FULL SCREEN mode. Sadly, not fullscreen
           *  within the window, but FULL SCREEN. Very aggressive.
           */
          fullscreen: ko.observable(false),

          /**
           * User-supplied passcode to compare on the server against the current passcode.
           */
          passcode: ko.observable(""),

          /**
           * Whether or not to clear out inputs after a run/on_run cycle
           */
          clearInputs: ko.observable(true),

          /**
           * Whether or not images should be rendered (true), or just stay as text code (false).
           */
          renderImages: ko.observable(true),
          editorVersion: EDITOR_VERSION,
          readOnly: ko.observable(this.getSetting("display.read_only", "false").toString() === "true"),

          /**
           * Uploaded files are ones that have been listed by the remote
           */
          uploadedFiles: ko.observable(null),

          /**
           * Backup copy of the latest known full code for the Submission. This is relevant if there was a
           * PartID specified, in which case the submission.code in the model is only showing what we know
           * locally.
           */
          backupSubmissionCode: ko.observable(configuration["submission.code"] || ""),

          /**
           * Controls the rating system
           */
          showRating: ko.observable(this.getSetting("display.showRating", "true").toString() === "true"),

          /**
           * Whether the student has rated this current feedback
           */
          hasRated: ko.observable(false)
        },
        status: {
          // @type {ServerStatus}
          loadAssignment: ko.observable(server_js__WEBPACK_IMPORTED_MODULE_8__["StatusState"].READY),
          loadAssignmentMessage: ko.observable(""),
          // @type {ServerStatus}
          loadHistory: ko.observable(server_js__WEBPACK_IMPORTED_MODULE_8__["StatusState"].READY),
          loadHistoryMessage: ko.observable(""),
          // @type {ServerStatus}
          loadFile: ko.observable(server_js__WEBPACK_IMPORTED_MODULE_8__["StatusState"].READY),
          loadFileMessage: ko.observable(""),
          // @type {ServerStatus}
          loadDataset: ko.observable(server_js__WEBPACK_IMPORTED_MODULE_8__["StatusState"].READY),
          loadDatasetMessage: ko.observable(""),
          // @type {ServerStatus}
          logEvent: ko.observable(server_js__WEBPACK_IMPORTED_MODULE_8__["StatusState"].READY),
          logEventMessage: ko.observable(""),
          // @type {ServerStatus}
          saveImage: ko.observable(server_js__WEBPACK_IMPORTED_MODULE_8__["StatusState"].READY),
          saveImageMessage: ko.observable(""),
          // @type {ServerStatus}
          saveFile: ko.observable(server_js__WEBPACK_IMPORTED_MODULE_8__["StatusState"].READY),
          saveFileMessage: ko.observable(""),
          // @type {ServerStatus}
          saveAssignment: ko.observable(server_js__WEBPACK_IMPORTED_MODULE_8__["StatusState"].READY),
          saveAssignmentMessage: ko.observable(""),
          // @type {ServerStatus}
          updateSubmission: ko.observable(server_js__WEBPACK_IMPORTED_MODULE_8__["StatusState"].READY),
          updateSubmissionMessage: ko.observable(""),
          // @type {ServerStatus}
          updateSubmissionStatus: ko.observable(server_js__WEBPACK_IMPORTED_MODULE_8__["StatusState"].READY),
          updateSubmissionStatusMessage: ko.observable(""),
          // @type {ServerStatus}
          listUploadedFiles: ko.observable(server_js__WEBPACK_IMPORTED_MODULE_8__["StatusState"].READY),
          listUploadedFilesMessage: ko.observable(""),
          // @type {ServerStatus}
          downloadFile: ko.observable(server_js__WEBPACK_IMPORTED_MODULE_8__["StatusState"].READY),
          downloadFileMessage: ko.observable(""),
          // @type {ServerStatus}
          uploadFile: ko.observable(server_js__WEBPACK_IMPORTED_MODULE_8__["StatusState"].READY),
          uploadFileMessage: ko.observable(""),
          // @type {ServerStatus}
          renameFile: ko.observable(server_js__WEBPACK_IMPORTED_MODULE_8__["StatusState"].READY),
          renameFileMessage: ko.observable(""),
          // @type {ServerStatus}
          externalAPI: ko.observable(server_js__WEBPACK_IMPORTED_MODULE_8__["StatusState"].READY),
          externalAPIMessage: ko.observable(""),
          // @type {ServerStatus}
          onExecution: ko.observable(server_js__WEBPACK_IMPORTED_MODULE_8__["StatusState"].READY)
        },
        execution: {
          // Information about in-progress executions
          reports: {},
          // list of Output objects
          output: ko.observableArray([]),
          // List of inputted strings
          input: ko.observableArray([]),
          inputIndex: ko.observable(0),
          // Information related to a student run
          student: {
            // str: the filename that was last executed and is associated with these results
            filename: ko.observable(null),
            // integer
            currentStep: ko.observable(null),
            // integer
            lastStep: ko.observable(null),
            // integer
            currentLine: ko.observable(null),
            lastLine: ko.observable(0),
            // array of simple objects
            currentTraceData: ko.observableArray([]),
            // integer
            currentTraceStep: ko.observable(0),
            // Actual execution results
            results: null,
            globals: ko.observable(null),
            calls: {}
          },
          instructor: {
            globals: null,
            sysmodules: undefined
          },
          // Information related to feedback from the instructor run
          feedback: {
            // str (markdown)
            message: ko.observable("Ready"),
            category: ko.observable(null),
            label: ko.observable(null),
            hidden: ko.observable(false),
            linesError: ko.observableArray([]),
            linesUncovered: ko.observableArray([]),
            // The results of the last execution
            results: null
          }
        },
        configuration: {
          /**
           * Functions to fire when certain events occur
           */
          callbacks: {
            /**
             * When the student gets a success
             */
            "success": this.initialConfiguration_["callback.success"]
          },

          /**
           * Whether or not the server is connected.
           * @type {bool}
           */
          serverConnected: ko.observable(this.getSetting("server.connected", true)),
          // string
          blocklyPath: this.initialConfiguration_["blockly.path"],
          // string
          attachmentPoint: this.initialConfiguration_["attachment.point"],
          // JQuery object
          container: null,
          // Maps codes ('log_event', 'save_code') to URLs
          urls: this.initialConfiguration_["urls"] || {},

          /**
           * Unique Part ID that can distinguish this editor instance's region of the assignment.
           * It's possible that other editors may be attached to a different Part of the same assignmnet, on the
           * same page.
           * **/
          partId: ko.observable(configuration["partId"] || ""),
          accessToken: ko.observable(configuration["access_token"] || undefined)
        }
      };
    }
  }, {
    key: "initInterface",

    /**
     * Creates the interface
     */
    value: function initInterface() {
      var constants = this.model.configuration;
      var gui = Object(interface_js__WEBPACK_IMPORTED_MODULE_9__["makeInterface"])(this);
      constants.container = jquery__WEBPACK_IMPORTED_MODULE_2___default()(constants.attachmentPoint).html(jquery__WEBPACK_IMPORTED_MODULE_2___default()(gui));
    }
  }, {
    key: "loadAssignment",
    value: function loadAssignment(assignment_id) {
      this.components.server.loadAssignment(assignment_id);
    }
  }, {
    key: "loadTags",
    value: function loadTags(tags) {// Already a JSON list representing tags
    }
  }, {
    key: "loadSampleSubmissions",
    value: function loadSampleSubmissions(samples) {// Already a JSON list representing samples
    }
  }, {
    key: "loadNoSubmission",
    value: function loadNoSubmission(assignment) {
      this.model.submission.code(assignment.starting_code);
      Object(_files__WEBPACK_IMPORTED_MODULE_10__["loadConcatenatedFile"])(assignment.extra_starting_files, this.model.submission.extraFiles);
    }
  }, {
    key: "loadSubmission",
    value: function loadSubmission(submission, assignment) {
      if (!submission) {
        // TODO: Scarier "You are not logged in message"
        this.loadNoSubmission(assignment);
        return false;
      } // TODO: What if submissions' assignment version and the assignments' version conflict?


      this.model.submission.id(submission.id);
      this.model.display.backupSubmissionCode(submission.code);
      this.model.submission.code(Object(_utilities__WEBPACK_IMPORTED_MODULE_20__["extractPart"])(submission.code, this.model.configuration.partId()) || "");
      this.model.submission.correct(submission.correct);
      this.model.submission.score(submission.score);
      this.model.submission.endpoint(submission.endpoint);
      this.model.submission.url(submission.url);
      this.model.submission.version(submission.version);
      this.model.submission.gradingStatus(submission.grading_status || _editor_sample_submissions__WEBPACK_IMPORTED_MODULE_21__["SubmissionStatuses"].UNKNOWN);
      this.model.submission.submissionStatus(submission.submission_status || _editor_sample_submissions__WEBPACK_IMPORTED_MODULE_21__["SubmissionStatuses"].UNKNOWN);
      this.model.submission.ownerId(submission.user_id);
      this.model.user.courseId(submission.course_id);
      Object(_files__WEBPACK_IMPORTED_MODULE_10__["loadConcatenatedFile"])(submission.extra_files, this.model.submission.extraFiles);
    }
  }, {
    key: "loadAssignmentData_",
    value: function loadAssignmentData_(data) {
      console.debug(data);
      this.resetInterface();
      this.components.fileSystem.dismountExtraFiles();
      var wasServerConnected = this.model.configuration.serverConnected();
      this.model.configuration.serverConnected(false);
      var assignment = data.assignment;
      this.model.assignment.id(assignment.id);
      this.model.assignment.version(assignment.version);
      this.model.assignment.courseId(assignment.course_id);
      this.model.assignment.forkedId(assignment.forked_id);
      this.model.assignment.forkedVersion(assignment.forked_version);
      this.model.assignment.hidden(assignment.hidden);
      this.model.assignment.reviewed(assignment.reviewed);
      this.model.assignment["public"](assignment["public"]);
      this.model.assignment.type(assignment.type);
      this.model.assignment.url(assignment.url);
      this.model.assignment.points(assignment.points);
      this.model.assignment.ipRanges(assignment.ip_ranges);
      this.model.assignment.instructions(assignment.instructions);
      this.model.assignment.name(assignment.name);
      this.model.assignment.onChange(assignment.on_change || null);

      if (assignment.on_change) {
        this.components.fileSystem.newFile("!on_change.py", assignment.on_change);
      }

      this.model.assignment.onEval(assignment.on_eval || null);

      if (assignment.on_eval) {
        this.components.fileSystem.newFile("!on_eval.py", assignment.on_eval);
      }

      this.model.assignment.onRun(assignment.on_run);
      this.model.assignment.startingCode(assignment.starting_code);
      this.model.assignment.ownerId(assignment.owner_id);
      this.loadTags(assignment.tags);
      this.loadSampleSubmissions(assignment.sample_submissions);
      Object(_files__WEBPACK_IMPORTED_MODULE_10__["loadConcatenatedFile"])(assignment.extra_instructor_files, this.model.assignment.extraInstructorFiles);
      Object(_files__WEBPACK_IMPORTED_MODULE_10__["loadConcatenatedFile"])(assignment.extra_starting_files, this.model.assignment.extraStartingFiles);
      Object(_editor_assignment_settings__WEBPACK_IMPORTED_MODULE_17__["loadAssignmentSettings"])(this.model, assignment.settings);
      this.loadSubmission(data.submission, assignment);
      this.model.display.dirtySubmission(true);
      this.model.display.changedInstructions(null);
      this.model.configuration.serverConnected(wasServerConnected);
      this.components.corgis.loadDatasets(true);
      this.components.pythonEditor.bm.refresh();
      this.components.fileSystem.loadRemoteFiles();
      this.components.server.setStatus("saveFile", server_js__WEBPACK_IMPORTED_MODULE_8__["StatusState"].READY);
    }
  }, {
    key: "initModelMethods",
    value: function initModelMethods() {
      var _this = this;

      var self = this;
      var model = this.model;
      model.ui = {
        smallLayout: ko.pureComputed(function () {
          return !model.display.instructor() && model.assignment.settings.smallLayout();
        }),
        role: {
          isGrader: ko.pureComputed(function () {
            return model.user.role() === "owner" || model.user.role() === "grader";
          })
        },
        instructions: {
          isChanged: ko.pureComputed(function () {
            return model.display.changedInstructions() !== null;
          }),
          current: ko.pureComputed(function () {
            return model.ui.instructions.isChanged() ? self.utilities.markdown(model.display.changedInstructions()) : self.utilities.markdown(model.assignment.instructions());
          }),
          reset: function reset() {
            return model.display.changedInstructions(null);
          }
        },
        menu: {
          visible: ko.pureComputed(function () {
            return model.display.instructor() || !model.assignment.settings.onlyInteractive();
          }),
          textFullscreen: ko.pureComputed(function () {
            return model.display.fullscreen() ? "fa-compress-arrows-alt" : "fa-expand-arrows-alt";
          }),
          clickFullscreen: function clickFullscreen() {
            model.display.fullscreen(!model.display.fullscreen());
          },
          editInputs: function editInputs() {
            _this.components.dialog.EDIT_INPUTS();
          },
          toggleImages: function toggleImages() {
            if (model.display.renderImages()) {
              self.components.pythonEditor.bm.textEditor.disableImages();
            } else {
              self.components.pythonEditor.bm.textEditor.enableImages();
            }

            model.display.renderImages(!model.display.renderImages());
          },
          canMarkSubmitted: ko.pureComputed(function () {
            return model.assignment.hidden() || model.assignment.reviewed() || model.assignment.settings.canClose();
          }),
          textMarkSubmitted: ko.pureComputed(function () {
            if (model.ui.menu.isCompleted()) {
              return model.user.groupId() ? "Problem closed" : "Assignment closed";
            } else if (model.ui.menu.isSubmitted()) {
              return "Reopen for editing";
            } else if (model.display.dirtySubmission()) {
              return "Run";
            } else {
              if (!model.assignment.hidden() && model.submission.correct()) {
                return "Submit";
              } else {
                return "Submit early";
              }
            }
          }),
          clickMarkSubmitted: function clickMarkSubmitted() {
            if (model.ui.menu.isCompleted()) {
              alert("You cannot reopen closed assignments. Contact a grader!");
            } else if (model.ui.menu.isSubmitted()) {
              self.components.server.updateSubmissionStatus("inProgress");
            } else if (model.display.dirtySubmission()) {
              self.components.engine.delayedRun();
            } else {
              self.components.server.updateSubmissionStatus("Submitted");
            }
          },
          isSubmitted: ko.pureComputed(function () {
            return (model.assignment.reviewed() || model.assignment.settings.canClose()) && model.submission.submissionStatus().toLowerCase() === "submitted";
          }),
          isCompleted: ko.pureComputed(function () {
            return model.submission.submissionStatus().toLowerCase() === "completed";
          }),
          showQueuedInputs: ko.pureComputed(function () {
            return !model.assignment.settings.hideQueuedInputs();
          }),
          showClock: ko.pureComputed(function () {
            return !model.assignment.settings.hasClock();
          })
        },
        secondRow: {
          width: ko.pureComputed(function () {
            return model.display.instructor() || !model.assignment.settings.smallLayout() ? "col-md-12" : "col-md-5";
          }),
          hideTraceButton: ko.pureComputed(function () {
            return !model.display.instructor() && model.assignment.settings.hideTraceButton();
          }),
          isAllVisible: ko.pureComputed(function () {
            return !model.assignment.settings.hideMiddlePanel();
          }),
          isFeedbackVisible: ko.pureComputed(function () {
            return model.display.secondRowSecondPanel() === interface_js__WEBPACK_IMPORTED_MODULE_9__["SecondRowSecondPanelOptions"].FEEDBACK;
          }),
          isTraceVisible: ko.pureComputed(function () {
            return model.display.secondRowSecondPanel() === interface_js__WEBPACK_IMPORTED_MODULE_9__["SecondRowSecondPanelOptions"].TRACE;
          }),
          isConsoleShowVisible: ko.pureComputed(function () {
            return model.ui.secondRow.isFeedbackVisible() || model.ui.secondRow.isTraceVisible();
          }),
          switchLabel: ko.pureComputed(function () {
            return model.execution.student.lastStep() !== null ? "View Trace" : "";
          }),
          advanceState: function advanceState() {
            var currentPanel = model.display.secondRowSecondPanel;

            if (currentPanel() === interface_js__WEBPACK_IMPORTED_MODULE_9__["SecondRowSecondPanelOptions"].NONE) {
              currentPanel(interface_js__WEBPACK_IMPORTED_MODULE_9__["SecondRowSecondPanelOptions"].FEEDBACK);
            } else if (currentPanel() === interface_js__WEBPACK_IMPORTED_MODULE_9__["SecondRowSecondPanelOptions"].TRACE) {
              currentPanel(interface_js__WEBPACK_IMPORTED_MODULE_9__["SecondRowSecondPanelOptions"].NONE);
            } else if (model.execution.student.lastStep() !== null) {
              currentPanel(interface_js__WEBPACK_IMPORTED_MODULE_9__["SecondRowSecondPanelOptions"].TRACE);
            } else {
              currentPanel(interface_js__WEBPACK_IMPORTED_MODULE_9__["SecondRowSecondPanelOptions"].NONE);
            }
          },
          makeWide: function makeWide() {
            var currentPanel = model.display.secondRowSecondPanel;
            model.display.previousSecondRowSecondPanel(currentPanel());
            currentPanel(interface_js__WEBPACK_IMPORTED_MODULE_9__["SecondRowSecondPanelOptions"].NONE);
          },
          restorePanel: function restorePanel() {
            var oldPanel = model.display.previousSecondRowSecondPanel;

            if (oldPanel() !== null) {
              model.display.secondRowSecondPanel(oldPanel());
              oldPanel(null);
            }
          }
        },
        console: {
          size: ko.pureComputed(function () {
            return !model.display.instructor() && model.assignment.settings.smallLayout() || model.display.secondRowSecondPanel() === interface_js__WEBPACK_IMPORTED_MODULE_9__["SecondRowSecondPanelOptions"].NONE ? "col-md-12" : "col-md-6";
          }),
          hideEvaluate: ko.pureComputed(function () {
            return model.assignment.settings.hideEvaluate() || !model.execution.student.globals() || model.status.onExecution() === server_js__WEBPACK_IMPORTED_MODULE_8__["StatusState"].ACTIVE;
          })
        },
        feedback: {
          badge: ko.pureComputed(function () {
            if (model.execution.feedback.category() === null) {
              return "label-none";
            }

            switch (model.execution.feedback.category().toLowerCase()) {
              default:
              case "none":
                return "label-none";

              case "runtime":
                return "label-runtime-error";

              case "syntax":
                return "label-syntax-error";

              case "editor":
                return "label-syntax-error";

              case "internal":
                return "label-internal-error";

              case "semantic":
              case "analyzer":
                return "label-semantic-error";

              case "feedback":
              case "instructor":
                return "label-feedback-error";

              case "complete":
                return "label-problem-complete";

              case "instructions":
                return "label-instructions";

              case "no errors":
                return "label-no-errors";
            }
          }),
          category: ko.pureComputed(function () {
            if (model.execution.feedback.category() === null) {
              return "";
            }

            switch (model.execution.feedback.category().toLowerCase()) {
              default:
              case "none":
                return "";

              case "runtime":
                return "Runtime Error";

              case "syntax":
                return "Syntax Error";

              case "editor":
                return "Editor Error";

              case "internal":
                return "Internal Error";

              case "semantic":
              case "analyzer":
                return "Algorithm Error";

              case "feedback":
              case "instructions":
                return "Instructions";

              case "instructor":
                return "Incorrect Answer";

              case "complete":
                return "Complete";

              case "no errors":
                return "No errors";
            }
          }),
          resetScore: function resetScore() {
            model.submission.score(0);
            model.submission.correct(false);
            self.components.server.updateSubmission(model.submission.score(), model.submission.correct(), true, true);
          },
          provideRatings: ko.pureComputed(function () {
            return !model.assignment.hidden();
          }),
          flipRating: function flipRating() {
            var newState = !model.display.showRating();
            model.display.showRating(newState);
            self.localSettings_.set("display.showRating", newState.toString());
          },
          rate: function rate(rating) {
            self.components.server.logEvent("X-Rating", model.execution.feedback.category(), model.execution.feedback.label(), rating);
            model.configuration.container.find(".blockpy-rating").fadeOut(500, function () {
              jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).fadeIn(500);
              model.display.hasRated(true);
            });
            var thankYou = model.configuration.container.find(".blockpy-feedback-thank-you");
            thankYou.addClass("show");
            setTimeout(function () {
              thankYou.removeClass("show");
            }, 1000);
          },
          hasRatedClass: ko.pureComputed(function () {
            return model.display.hasRated() ? "far" : "fas";
          })
        },
        trace: {
          has: ko.pureComputed(function () {
            return model.execution.student.currentTraceData() !== null;
          }),
          highlightedLine: ko.pureComputed(function () {
            if (model.display.secondRowSecondPanel() !== interface_js__WEBPACK_IMPORTED_MODULE_9__["SecondRowSecondPanelOptions"].TRACE) {
              return [];
            }

            var step = model.execution.student.currentTraceStep();
            var lastStep = model.execution.student.lastStep();
            var traceData = model.execution.student.currentTraceData();

            if (!traceData || step === null) {
              return [];
            } else if (step === 0) {
              return [];
            } else {
              return [traceData[step - 1].line];
            }
          }),
          line: ko.pureComputed(function () {
            var step = model.execution.student.currentTraceStep();
            var lastStep = model.execution.student.lastStep();
            var traceData = model.execution.student.currentTraceData();

            if (!traceData || step === null) {
              return "No trace";
            }

            if (step === 0) {
              return "Before run";
            } else if (step === lastStep) {
              return "Finished run";
            } else {
              // TODO: why are these numbers wonky?
              return "Line " + traceData[step - 1].line;
            }
          }),
          ast: ko.pureComputed(function () {
            var step = model.execution.student.currentTraceStep();
            var lastStep = model.execution.student.lastStep();
            var traceData = model.execution.student.currentTraceData();

            if (!traceData) {
              return "Nothing traced.";
            }

            switch (step) {
              case 0:
                return "Starting execution";

              case lastStep:
                if (!model.execution.reports.student.success) {
                  return "Execution halted (error)";
                }

                return "Finished execution";

              default:
                return "Current step: " + _trace__WEBPACK_IMPORTED_MODULE_13__["AST_DESCRIPTIONS"][traceData[step - 1].ast];
            }
          }),
          first: function first() {
            model.execution.student.currentTraceStep(0);
          },
          backward: function backward() {
            var previous = Math.max(0, model.execution.student.currentTraceStep() - 1);
            model.execution.student.currentTraceStep(previous);
          },
          forward: function forward() {
            var next = Math.min(model.execution.student.lastStep(), model.execution.student.currentTraceStep() + 1);
            model.execution.student.currentTraceStep(next);
          },
          last: function last() {
            model.execution.student.currentTraceStep(model.execution.student.lastStep());
          },
          data: ko.pureComputed(function () {
            var step = model.execution.student.currentTraceStep();
            var lastStep = model.execution.student.lastStep();
            var traceData = model.execution.student.currentTraceData();

            if (!traceData) {
              return [];
            }

            switch (step) {
              case 0:
                return [];

              case lastStep:
                return traceData[step - 1];

              default:
                return traceData[step];
            }
          })
        },
        files: {
          visible: ko.pureComputed(function () {
            return model.display.instructor() || !model.assignment.settings.hideFiles() || model.assignment.settings.preloadAllFiles();
          }),
          addIsVisible: ko.pureComputed(function () {
            return model.display.instructor() || !model.assignment.settings.hideFiles();
          }),
          width: ko.pureComputed(function () {
            return model.display.instructor() || !model.assignment.settings.smallLayout() ? "col-md-12" : "col-md-6";
          }),
          hasContents: function hasContents(path) {
            switch (path) {
              case "answer.py":
                return model.submission.code();

              case "!instructions.md":
                return model.assignment.instructions();

              case "!on_change.py":
                return model.assignment.onChange() !== null;

              case "!on_eval.py":
                return model.assignment.onEval() !== null;

              case "?mock_urls.blockpy":
                return model.assignment.extraInstructorFiles().some(function (file) {
                  return file.filename() === "?mock_urls.blockpy";
                });

              case "images.blockpy":
                return model.assignment.extraInstructorFiles().some(function (file) {
                  return file.filename() === "images.blockpy";
                });

              case "!answer_prefix.py":
                return model.assignment.extraInstructorFiles().some(function (file) {
                  return file.filename() === "!answer_prefix.py";
                });

              case "!answer_suffix.py":
                return model.assignment.extraInstructorFiles().some(function (file) {
                  return file.filename() === "!answer_suffix.py";
                });

              case "?toolbox.blockpy":
                return model.assignment.extraInstructorFiles().some(function (file) {
                  return file.filename() === "?toolbox.blockpy";
                });

              case "!tags.blockpy":
                return model.assignment.tags().length;

              case "!sample_submissions.blockpy":
                return model.assignment.sampleSubmissions().length;

              default:
                return false;
            }
          },
          add: function add(path) {
            switch (path) {
              case "?mock_urls.blockpy":
              case "!answer_prefix.py":
              case "!answer_suffix.py":
              case "?tags.blockpy":
              case "?settings.blockpy":
                self.components.fileSystem.newFile(path);
                break;

              case "images.blockpy":
                self.components.fileSystem.newFile(path, "{}");
                break;

              case "?toolbox.blockpy":
                var normalToolbox = self.components.pythonEditor.bm.blockEditor.TOOLBOXES["normal"];
                normalToolbox = JSON.stringify(normalToolbox, null, 2);
                self.components.fileSystem.newFile(path, normalToolbox);
                break;

              case "!sample_submissions.blockpy":
                model.assignment.sampleSubmissions([_editor_sample_submissions__WEBPACK_IMPORTED_MODULE_21__["SampleSubmission"].Blank()]);
                self.components.fileSystem.newFile(path);
                break;

              case "!on_change.py":
                model.assignment.onChange("");
                self.components.fileSystem.newFile(path);
                break;
              // TODO fix extrafiles for instructor and student

              case "!on_eval.py":
                model.assignment.onEval("");
                self.components.fileSystem.newFile(path);
                break;

              case "instructor":
                self.components.fileSystem.newFileDialog("instructor");
                return;

              case "student":
                self.components.fileSystem.newFileDialog("student");
                return;

              case "starting":
                self.components.fileSystem.newFileDialog("starting");
                return;

              default:
            }

            model.display.filename(path);
          },
          "delete": function _delete() {
            return self.components.fileSystem.deleteFile(model.display.filename());
          },
          rename: function rename(newName) {
            return self.components.fileSystem.renameFile(model.display.filename(), newName);
          },
          getStudentCode: function getStudentCode() {
            var prefixPy = self.components.fileSystem.getFile("!answer_prefix.py");
            var suffixPy = self.components.fileSystem.getFile("!answer_suffix.py");
            var code = self.model.submission.code();

            if (prefixPy && prefixPy.handle && prefixPy.handle()) {
              code = prefixPy.handle() + code;
            }

            if (suffixPy && suffixPy.handle && suffixPy.handle()) {
              code = code + suffixPy.handle();
            }

            return code;
          },
          extraStudentFiles: Object(_files__WEBPACK_IMPORTED_MODULE_10__["observeConcatenatedFile"])(model.submission.extraFiles),
          extraInstructorFiles: Object(_files__WEBPACK_IMPORTED_MODULE_10__["observeConcatenatedFile"])(model.assignment.extraInstructorFiles),
          extraStartingFiles: Object(_files__WEBPACK_IMPORTED_MODULE_10__["observeConcatenatedFile"])(model.assignment.extraStartingFiles),
          displayFilename: function displayFilename(path) {
            if (path === "?mock_urls.blockpy") {
              return "URL Data";
            }

            if (path === "images.blockpy") {
              return "Images";
            }

            if (path === "!answer_prefix.py") {
              return "Answer Prefix";
            }

            if (path === "!answer_suffix.py") {
              return "Answer Suffix";
            }

            if (path === "?toolbox.blockpy") {
              return "Toolbox";
            }

            if (path.startsWith("&")) {
              return path.slice(1);
            }

            return path;
          }
        },
        editors: {
          current: ko.pureComputed(function () {
            return self.components.editors.getEditor(model.display.filename());
          }),
          width: ko.pureComputed(function () {
            return model.display.instructor() || !model.assignment.settings.smallLayout() ? "col-md-12" : "col-md-7";
          }),
          view: ko.pureComputed(function () {
            return !model.display.instructor() && (model.assignment.settings.hideEditors() || model.assignment.settings.onlyInteractive()) ? "None" : model.display.filename() ? model.ui.editors.current() : "None";
          }),
          reset: function reset() {
            self.components.server.logEvent("X-File.Reset", "", "", "", "answer.py");
            model.submission.code(model.assignment.startingCode());
            model.submission.extraFiles(model.assignment.extraStartingFiles().map(function (file) {
              var filename = file.filename().substr(1);
              return Object(_files__WEBPACK_IMPORTED_MODULE_10__["makeModelFile"])(filename, file.contents());
            }));
          },
          canSave: ko.pureComputed(function () {
            return !model.display.autoSave();
          }),
          canDelete: ko.pureComputed(function () {
            return (!model.assignment.settings.hideFiles() || model.display.instructor()) && _files__WEBPACK_IMPORTED_MODULE_10__["UNDELETABLE_FILES"].indexOf(model.display.filename()) === -1;
          }),
          canRename: ko.pureComputed(function () {
            return (!model.assignment.settings.hideFiles() || model.display.instructor()) && _files__WEBPACK_IMPORTED_MODULE_10__["UNRENAMABLE_FILES"].indexOf(model.display.filename()) === -1;
          }),
          upload: _editor_abstract_editor__WEBPACK_IMPORTED_MODULE_11__["uploadFile"].bind(self),
          download: _editor_abstract_editor__WEBPACK_IMPORTED_MODULE_11__["downloadFile"].bind(self),
          importDataset: function importDataset() {
            self.components.corgis.openDialog();
          },
          python: {
            fullscreen: function fullscreen() {
              var codeMirror = self.components.pythonEditor.bm.textEditor.codeMirror;
              return codeMirror.setOption("fullScreen", !codeMirror.getOption("fullScreen"));
            },
            updateMode: function updateMode(newMode) {
              self.components.server.logEvent("X-View.Change", "", "", newMode, model.display.filename());
              model.display.pythonMode(newMode);

              if (model.display.filename() === "answer.py") {
                self.components.pythonEditor.oldPythonMode = newMode;
              }
            },
            isHistoryAvailable: ko.pureComputed(function () {
              return model.ui.server.isEndpointConnected("loadHistory");
            }),
            turnOffHistoryMode: function turnOffHistoryMode() {
              self.components.pythonEditor.updateEditor();
              self.components.pythonEditor.setReadOnly(false);
              model.display.historyMode(false);
            },
            turnOnHistoryMode: function turnOnHistoryMode() {
              self.components.server.loadHistory(function (response) {
                if (response.success) {
                  self.components.history.load(response.history);
                  model.display.historyMode(true);
                  self.components.pythonEditor.setReadOnly(true);
                } else {
                  self.components.dialog.ERROR_LOADING_HISTORY();
                }
              });
            },
            toggleHistoryMode: function toggleHistoryMode() {
              if (model.display.historyMode()) {
                model.ui.editors.python.turnOffHistoryMode();
              } else {
                model.ui.editors.python.turnOnHistoryMode();
              }
            },
            history: {
              start: function start() {
                self.components.history.moveToStart();
              },
              previous: function previous() {
                self.components.history.movePrevious();
              },
              next: function next() {
                self.components.history.moveNext();
              },
              mostRecent: function mostRecent() {
                self.components.history.moveToMostRecent();
              },
              use: function use() {
                self.components.history.use();
              }
            }
          },
          images: {
            uploadFile: function uploadFile() {
              return self.components.editors.byName("image").uploadFile();
            },
            deleteFile: function deleteFile(fileInfo) {
              return self.components.editors.byName("image").deleteFile(fileInfo);
            },
            renameFile: function renameFile(fileInfo) {
              return self.components.editors.byName("image").renameFile(fileInfo);
            },
            reloadImages: function reloadImages() {
              return self.components.editors.byName("image").reloadImages();
            },
            canChoosePlacement: ko.pureComputed(function () {
              return model.display.instructor();
            }),
            canModify: function canModify(placement) {
              return model.display.instructor() || placement === "submission" || placement === "user";
            }
          },
          settings: {
            save: function save() {
              return self.components.server.saveAssignment();
            }
          },
          sampleSubmissions: {
            buildEditor: function buildEditor(newDOM, index, newElement) {
              var editor = self.components.editors.byName("Sample Submissions");
              editor.buildEditor(newDOM, index, newElement);
            }
          }
        },
        execute: {
          isRunning: ko.pureComputed(function () {
            return model.status.onExecution() === server_js__WEBPACK_IMPORTED_MODULE_8__["StatusState"].ACTIVE;
          }),
          runLabel: ko.pureComputed(function () {
            return model.status.onExecution() === server_js__WEBPACK_IMPORTED_MODULE_8__["StatusState"].ACTIVE ? "Stop" : "Run";
          }),
          run: function run() {
            if (model.status.onExecution() === server_js__WEBPACK_IMPORTED_MODULE_8__["StatusState"].ACTIVE) {
              if (typeof PygameLib !== "undefined" && PygameLib.running) {
                PygameLib.StopPygame();
              }

              model.status.onExecution(server_js__WEBPACK_IMPORTED_MODULE_8__["StatusState"].READY);
            } else {
              self.components.engine.delayedRun();
            }
          },
          runQuietlyLabel: ko.pureComputed(function () {
            return model.status.onExecution() === server_js__WEBPACK_IMPORTED_MODULE_8__["StatusState"].ACTIVE ? "Stop" : "Run without feedback";
          }),
          runQuietly: function runQuietly() {
            if (model.status.onExecution() === server_js__WEBPACK_IMPORTED_MODULE_8__["StatusState"].ACTIVE) {
              if (typeof PygameLib !== "undefined" && PygameLib.running) {
                PygameLib.StopPygame();
              }

              model.status.onExecution(server_js__WEBPACK_IMPORTED_MODULE_8__["StatusState"].READY);
            } else {
              self.components.engine.delayedRun(true);
            }
          },
          evaluate: function evaluate() {
            return self.components.engine.evaluate();
          }
        },
        server: {
          status: function status(endpoint) {
            return "server-status-" + model.status[endpoint]();
          },
          isEndpointConnected: function isEndpointConnected(endpoint) {
            return model.configuration.serverConnected() && model.configuration.urls !== undefined && model.configuration.urls[endpoint] !== undefined;
          },
          messages: ko.pureComputed(function () {
            return Object(_utilities__WEBPACK_IMPORTED_MODULE_20__["capitalize"])(model.status.loadAssignmentMessage() || model.status.saveAssignmentMessage() || model.status.loadHistoryMessage() || model.status.loadFileMessage() || model.status.saveFileMessage() || model.status.loadDatasetMessage() || model.status.logEventMessage() || model.status.saveImage() || model.status.updateSubmissionMessage() || model.status.externalAPI() || model.status.updateSubmissionStatusMessage() || "");
          }),
          force: {
            loadAssignment: function loadAssignment(data, event) {
              //let fileHandler = $(".blockpy-force-load-assignment-file");
              var assignmentForceLoadButton = jquery__WEBPACK_IMPORTED_MODULE_2___default()(event.target); //fileHandler.click();

              jquery__WEBPACK_IMPORTED_MODULE_2___default()(event.target).parent().fadeOut(100).fadeIn(100); // Allow user to upload a file containing an assignment submission

              var fr = new FileReader();
              var files = assignmentForceLoadButton[0].files;

              fr.onload = function (e) {
                var assignmentSubmission = JSON.parse(e.target.result);
                self.loadAssignmentData_(assignmentSubmission);
              };

              fr.fileName = files[0].name;
              fr.readAsText(files[0]);
              assignmentForceLoadButton.val("");
            },
            updateSubmission: function updateSubmission(data, event) {
              console.log(event);
              self.components.server.updateSubmission(self.model.submission.score(), self.model.submission.correct(), false, true);
              jquery__WEBPACK_IMPORTED_MODULE_2___default()(event.target).fadeOut(100).fadeIn(100);
            }
          }
        },
        footer: {
          visible: ko.pureComputed(function () {
            return model.display.instructor() || !model.ui.smallLayout();
          })
        }
      };
      Object(interface_js__WEBPACK_IMPORTED_MODULE_9__["makeExtraInterfaceSubscriptions"])(self, model);
    }
  }, {
    key: "turnOnHacks",
    value: function turnOnHacks() {
      //console.log("TODO");
      Sk.builtinFiles.files["src/lib/image.js"] = skulpt_modules_image__WEBPACK_IMPORTED_MODULE_3__["$builtinmodule"].toString(); //Sk.builtinFiles.files["src/lib/weakref.js"] = weakrefModule.toString();
      //Sk.builtinFiles.files["src/lib/matplotlib/pyplot/__init__.js"] = matplotlibModule.toString();
    }
    /**
     * Applys the KnockoutJS bindings to the model, instantiating the values into the
     * HTML.
     */

  }, {
    key: "applyModel",
    value: function applyModel() {
      ko.applyBindings(this.model, this.model.configuration.container[0]);
    }
  }, {
    key: "initUtilities",
    value: function initUtilities() {
      var main = this;
      this.utilities = {
        markdown: function markdown(text) {
          return text ? EasyMDE.prototype.markdown(text) : "<p></p>";
        }
      };
    }
  }, {
    key: "initComponents",
    value: function initComponents() {
      var container = this.model.configuration.container;
      var components = this.components = {};
      var main = this; // Each of these components will take the BlockPy instance, and possibly a
      // reference to the relevant HTML location where it will be embedded.

      components.dialog = new _dialog__WEBPACK_IMPORTED_MODULE_16__["BlockPyDialog"](main, container.find(".blockpy-dialog"));
      components.feedback = new feedback_js__WEBPACK_IMPORTED_MODULE_15__["BlockPyFeedback"](main, container.find(".blockpy-feedback"));
      components.trace = new _trace__WEBPACK_IMPORTED_MODULE_13__["BlockPyTrace"](main);
      components.console = new _console__WEBPACK_IMPORTED_MODULE_14__["BlockPyConsole"](main, container.find(".blockpy-console"));
      components.engine = new engine_js__WEBPACK_IMPORTED_MODULE_12__["BlockPyEngine"](main);
      components.fileSystem = new _files__WEBPACK_IMPORTED_MODULE_10__["BlockPyFileSystem"](main);
      components.editors = new editors_js__WEBPACK_IMPORTED_MODULE_6__["Editors"](main, container.find(".blockpy-editor")); // Convenient shortcut directly to PythonEditor

      components.pythonEditor = this.components.editors.byName("python");
      components.server = new server_js__WEBPACK_IMPORTED_MODULE_8__["BlockPyServer"](main);
      components.corgis = new _corgis__WEBPACK_IMPORTED_MODULE_18__["BlockPyCorgis"](main);
      components.history = new _history__WEBPACK_IMPORTED_MODULE_19__["BlockPyHistory"](main, container.find(".blockpy-history-toolbar"));
    }
  }, {
    key: "show",
    value: function show() {
      this.model.configuration.container.show(); //this.model.configuration.container.find(".blockpy-file-instructor").toggle(this.model.display.instructor());
    }
  }, {
    key: "hide",
    value: function hide() {
      this.model.configuration.container.hide();
    }
  }, {
    key: "makeExtraSubscriptions",
    value: function makeExtraSubscriptions() {
      var _this2 = this;

      this.model.display.changedInstructions.subscribe(function (changed) {
        _this2.components.server.logEvent("X-Instructions.Change", "", "", changed, "instructions.md");
      });
      this.clock = null;
      var container = this.model.configuration.container;

      var updateClock = function updateClock() {
        return container.find(".blockpy-menu-clock").text(Object(_utilities__WEBPACK_IMPORTED_MODULE_20__["getCurrentTime"])());
      };

      if (this.model.ui.menu.showClock()) {
        this.clock = setInterval(updateClock, 1000);
      }

      this.model.ui.menu.showClock.subscribe(function (changed) {
        if (_this2.model.ui.menu.showClock()) {
          if (_this2.clock) {
            clearInterval(_this2.clock);
            _this2.clock = null;
          }
        } else {
          if (!_this2.clock) {
            _this2.clock = setInterval(updateClock, 1000);
          }
        }
      });
    }
  }, {
    key: "start",
    value: function start() {
      this.model.display.filename("answer.py");
    }
  }, {
    key: "resetInterface",
    value: function resetInterface() {
      this.components.engine.reset(); // Disable any alternative logEntry functions we have been given

      this.components.server.altLogEntry = null;
    }
  }, {
    key: "requestPasscode",
    value: function requestPasscode() {
      var userSuppliedPasscode = prompt("Please enter the passcode.");
      this.model.display.passcode(userSuppliedPasscode);
    }
  }, {
    key: "destroy",
    value: function destroy() {}
  }]);

  return BlockPy;
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! knockout */ "knockout")))

/***/ }),

/***/ "./src/console.js":
/*!************************!*\
  !*** ./src/console.js ***!
  \************************/
/*! exports provided: CONSOLE_HTML, ConsoleLineType, BlockPyConsole */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CONSOLE_HTML", function() { return CONSOLE_HTML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConsoleLineType", function() { return ConsoleLineType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockPyConsole", function() { return BlockPyConsole; });
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utilities */ "./src/utilities.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }


/**
 * Evaluate button HTML template
 * @type {string}
 */

var START_EVAL_HTML = "\n<button type=\"button\" class=\"btn btn-sm btn-outline float-right blockpy-btn-eval\">\n    Evaluate\n</button>";
/**
 * HTML template for a new line in the console.
 * @type {string}
 */

var NEW_CONSOLE_LINE_HTML = "<div></div>";
/**
 * HTML template for the entire console area
 * @type {string}
 */

var CONSOLE_HTML = "\n    <div class='blockpy-panel blockpy-console'\n          role=\"region\" aria-label=\"Console\"\n          data-bind=\"class: ui.console.size\">\n          \n        <!-- Feedback/Trace Visibility Control -->\n        <button type='button'\n                class='btn btn-sm btn-outline-secondary float-right blockpy-show-feedback'\n                data-bind=\"hidden: ui.secondRow.isConsoleShowVisible, click: ui.secondRow.advanceState\">\n            <span class='fas fa-eye'></span>\n        </button>\n          \n        <strong>Console:</strong>\n        \n        <div class='blockpy-printer blockpy-printer-default'>\n        </div>\n        \n     </div>";
/**
 * All the possible types for a line in the console.
 * @enum
 */

var ConsoleLineType = {
  TEXT: "text",
  HTML: "html",
  PLOT: "plot",
  IMAGE: "image",
  PYGAME: "pygame",
  DRAFTER: "drafter",
  TURTLE: "turtle",
  EVAL: "eval",
  START_EVAL: "start_eval",
  VALUE: "value",
  INPUT: "input",
  TEST_CASE: "test_case"
};
/**
 * Abstract version of a line in the console. All other console lines
 * should extend this class. Critically, they need to implement a render function.
 */

var ConsoleLine = /*#__PURE__*/function () {
  function ConsoleLine(main, type, content) {
    _classCallCheck(this, ConsoleLine);

    /**
     * Reference back to the main BlockPy instance.
     * @const
     * @type {BlockPy}
     */
    this.main = main;
    /**
     * Categorizes what kind of line this is (text/html/plot/etc.)
     * @type {ConsoleLineType}
     */

    this.type = type;
    /**
     * The actual data stored on this line.
     * @type {string}
     */

    this.content = content;
    /**
     * Metadata about where the line originated from in the code.
     * @type {{filename: string, line: number, step: number}}
     */

    this.origin = {
      filename: Sk.currFilename,
      step: main.components.engine.executionBuffer.step,
      line: main.components.engine.executionBuffer.line
    };
    /**
     * The HTML content stored on this line, meant to be rendered
     * to the user.
     * @type {*|jQuery.fn.init|jQuery|HTMLElement}
     */

    this.html = $("<div></div>", {
      "class": "blockpy-printer-output",
      "data-container": main.model.configuration.attachmentPoint,
      "data-toggle": "tooltip",
      "data-placement": "auto",
      "data-step": this.origin.step,
      "title": "Step " + this.origin.step + ", Line " + this.origin.line
    });
    /**
     * Whether or not this line should be visible
     * @type {boolean}
     */

    this.visible = !main.model.display.mutePrinter();
    /**
     *
     * @type {number}
     */

    this.index = 0;
  }
  /**
   * Create a Skulpt representation of this console line's content.
   * @returns {*}
   */


  _createClass(ConsoleLine, [{
    key: "toSkulpt",
    value: function toSkulpt() {
      return Sk.ffi.remapToPy(this.content);
    }
    /**
     * Remove this console line by deleting its HTML representation.
     */

  }, {
    key: "delete",
    value: function _delete() {
      this.html.remove();
    }
  }]);

  return ConsoleLine;
}();

var ConsoleLineTurtle = /*#__PURE__*/function (_ConsoleLine) {
  _inherits(ConsoleLineTurtle, _ConsoleLine);

  var _super = _createSuper(ConsoleLineTurtle);

  // TODO: Capture turtle commands for tracing purposes
  function ConsoleLineTurtle(main) {
    var _this;

    _classCallCheck(this, ConsoleLineTurtle);

    _this = _super.call(this, main, ConsoleLineType.TURTLE);

    _this.html.addClass("blockpy-console-turtle-output");

    return _this;
  }

  _createClass(ConsoleLineTurtle, [{
    key: "render",
    value: function render(where) {
      if (this.visible) {
        where.prepend(this.html); //this.html[0].scrollIntoView({ behavior: "smooth" });

        var top = this.html.offset().top; //$('html').scrollTop(top);

        $("html").scrollTop(top); //this.html.tooltip();
      }
    }
  }]);

  return ConsoleLineTurtle;
}(ConsoleLine);

var ConsoleLineDrafter = /*#__PURE__*/function (_ConsoleLine2) {
  _inherits(ConsoleLineDrafter, _ConsoleLine2);

  var _super2 = _createSuper(ConsoleLineDrafter);

  function ConsoleLineDrafter(main, size, fullscreen) {
    var _this2;

    _classCallCheck(this, ConsoleLineDrafter);

    _this2 = _super2.call(this, main, ConsoleLineType.DRAFTER);

    _this2.html.addClass("blockpy-console-drafter-output");

    _this2.size = size;
    _this2.fullscreen = fullscreen;
    return _this2;
  }

  _createClass(ConsoleLineDrafter, [{
    key: "render",
    value: function render(where) {
      if (this.visible) {
        where.prepend(this.html);
        var top = this.html.offset().top;
        $("html").scrollTop(top);
      }
    }
  }, {
    key: "cleanup",
    value: function cleanup() {// Starts off as a no-op
    }
  }, {
    key: "stop",
    value: function stop() {
      this.main.model.ui.secondRow.restorePanel();
    }
  }]);

  return ConsoleLineDrafter;
}(ConsoleLine);

var ConsoleLinePygame = /*#__PURE__*/function (_ConsoleLine3) {
  _inherits(ConsoleLinePygame, _ConsoleLine3);

  var _super3 = _createSuper(ConsoleLinePygame);

  function ConsoleLinePygame(main, size, fullscreen, pygameObj) {
    var _this3;

    _classCallCheck(this, ConsoleLinePygame);

    _this3 = _super3.call(this, main, ConsoleLineType.PYGAME);

    _this3.html.addClass("blockpy-console-pygame-output");

    _this3.size = size;
    _this3.fullscreen = fullscreen;
    _this3.pygameObj = pygameObj;
    _this3.initialized = false;
    _this3.canvas = document.createElement("canvas"); //Sk.main_canvas = document.getElementById("myCanvas");

    return _this3;
  }

  _createClass(ConsoleLinePygame, [{
    key: "render",
    value: function render(where) {
      if (this.visible) {
        this.html.append(this.canvas);
        where.prepend(this.html);
        var top = this.html.offset().top;
        $("html").scrollTop(top);
      }
    }
  }, {
    key: "cleanup",
    value: function cleanup() {// Starts off as a no-op
    }
  }, {
    key: "stop",
    value: function stop() {
      this.cleanup = function () {};

      this.main.model.ui.secondRow.restorePanel();
    }
  }, {
    key: "finalize",
    value: function finalize(cleanupFunction, listeners) {
      var _this4 = this;

      this.initialized = true;

      this.cleanup = function () {
        return cleanupFunction(_this4.pygameObj, listeners);
      };
    }
  }]);

  return ConsoleLinePygame;
}(ConsoleLine);

var ConsoleLineImage = /*#__PURE__*/function (_ConsoleLine4) {
  _inherits(ConsoleLineImage, _ConsoleLine4);

  var _super4 = _createSuper(ConsoleLineImage);

  function ConsoleLineImage(main, content) {
    var _this5;

    _classCallCheck(this, ConsoleLineImage);

    _this5 = _super4.call(this, main, ConsoleLineType.IMAGE, content);

    _this5.html.addClass("blockpy-console-image-output");

    return _this5;
  }

  _createClass(ConsoleLineImage, [{
    key: "render",
    value: function render(where) {
      if (this.visible) {
        console.log(this.content);
        this.html.append(this.content);
        where.append(this.html); //this.html.tooltip();
      }
    }
  }]);

  return ConsoleLineImage;
}(ConsoleLine);

var ConsoleLinePlot = /*#__PURE__*/function (_ConsoleLine5) {
  _inherits(ConsoleLinePlot, _ConsoleLine5);

  var _super5 = _createSuper(ConsoleLinePlot);

  function ConsoleLinePlot(main, content) {
    var _this6;

    _classCallCheck(this, ConsoleLinePlot);

    _this6 = _super5.call(this, main, ConsoleLineType.PLOT, content);

    _this6.html.addClass("blockpy-console-plot-output");

    return _this6;
  }

  _createClass(ConsoleLinePlot, [{
    key: "render",
    value: function render(where) {
      if (this.visible) {
        where.append(this.html); //this.html.tooltip();
      }
    }
  }]);

  return ConsoleLinePlot;
}(ConsoleLine);

var ConsoleLineText = /*#__PURE__*/function (_ConsoleLine6) {
  _inherits(ConsoleLineText, _ConsoleLine6);

  var _super6 = _createSuper(ConsoleLineText);

  function ConsoleLineText() {
    _classCallCheck(this, ConsoleLineText);

    return _super6.apply(this, arguments);
  }

  _createClass(ConsoleLineText, [{
    key: "addContent",
    value: function addContent(content) {
      this.content = this.content + content;
    }
  }, {
    key: "render",
    value: function render(where) {
      if (this.visible) {
        var encodedText = Object(_utilities__WEBPACK_IMPORTED_MODULE_0__["encodeHTML"])(this.content);

        if (!encodedText || encodedText.trim().length <= 0) {
          encodedText = "\n";
        }

        var lineData = $("<samp></samp>", {
          "html": encodedText
        });
        this.html.append(lineData);
        where.append(this.html);
        this.html.tooltip();
      }
    }
  }]);

  return ConsoleLineText;
}(ConsoleLine);

var ConsoleLineValue = /*#__PURE__*/function (_ConsoleLine7) {
  _inherits(ConsoleLineValue, _ConsoleLine7);

  var _super7 = _createSuper(ConsoleLineValue);

  function ConsoleLineValue(main, content) {
    _classCallCheck(this, ConsoleLineValue);

    return _super7.call(this, main, ConsoleLineType.VALUE, content);
  }

  _createClass(ConsoleLineValue, [{
    key: "render",
    value: function render(where) {
      if (this.visible) {
        var encodedText = Object(_utilities__WEBPACK_IMPORTED_MODULE_0__["encodeHTML"])(this.content);
        var lineData = $("<code></code>", {
          "html": encodedText
        });
        this.html.append(lineData);
        where.append(this.html);
        this.html.tooltip();
      }
    }
  }]);

  return ConsoleLineValue;
}(ConsoleLine);

var ConsoleLineInput = /*#__PURE__*/function (_ConsoleLine8) {
  _inherits(ConsoleLineInput, _ConsoleLine8);

  var _super8 = _createSuper(ConsoleLineInput);

  function ConsoleLineInput(main, promptMessage) {
    var _this7;

    _classCallCheck(this, ConsoleLineInput);

    _this7 = _super8.call(this, main, ConsoleLineType.INPUT, promptMessage);
    _this7.visible = true;
    return _this7;
  }
  /**
   * Creates an Input box for receiving input() from the user.
   *
   */


  _createClass(ConsoleLineInput, [{
    key: "render",
    value: function render(where) {
      // Perform any necessary cleaning
      if (this.visible) {
        // Input form
        var inputForm = $("<input type='text' />"); // Enter button

        var inputBtn = $("<button></button>", {
          "html": "Enter"
        }); // Group form and button

        var inputGroup = $("<div></div>", {
          "class": "blockpy-console-input"
        });
        inputGroup.append(inputForm);
        inputGroup.append(inputBtn); // Prompt box, new line, input group

        var inputBox = $("<div></div>");

        if (this.content !== "\n") {
          var encodedText = Object(_utilities__WEBPACK_IMPORTED_MODULE_0__["encodeHTML"])(this.content);
          var inputMsg = $("<samp></samp>", {
            "html": encodedText
          });
          inputBox.append(inputMsg);
        }

        inputBox.append($("<br>")).append(inputGroup); // Render

        this.html.append(inputBox);
        where.append(this.html); // Make it interactive

        return this.makeInteractive(inputForm, inputBtn);
      }

      return "";
    }
  }, {
    key: "makeInteractive",
    value: function makeInteractive(input, button) {
      var _this8 = this;

      var resolveOnClick;
      var submittedPromise = new Promise(function (resolve) {
        resolveOnClick = resolve;
      });
      var inputIndex = this.main.model.execution.inputIndex();

      var submitForm = function submitForm() {
        var userInputtedValue = input.val();
        Sk.queuedInput.push(userInputtedValue);

        _this8.main.model.execution.inputIndex(inputIndex + 1);

        _this8.main.model.execution.input().push(userInputtedValue);

        resolveOnClick(userInputtedValue);
        input.prop("disabled", true);
        button.prop("disabled", true);

        _this8.html.tooltip();
      };

      button.click(submitForm);
      input.keyup(function (e) {
        if (e.keyCode === 13) {
          submitForm();
        }
      });
      input.focus();
      console.log(inputIndex, this.main.model.execution.input().length);

      if (inputIndex < this.main.model.execution.input().length) {
        var userInputtedValue = this.main.model.execution.input()[inputIndex];
        input.val(userInputtedValue);
        this.main.model.execution.inputIndex(inputIndex + 1);
        return new Promise(function (resolve) {
          input.prop("disabled", true);
          button.prop("disabled", true);

          _this8.html.tooltip();

          resolve(userInputtedValue);
        });
      }

      return submittedPromise;
    }
  }]);

  return ConsoleLineInput;
}(ConsoleLine);

var ConsoleLineEvaluate = /*#__PURE__*/function (_ConsoleLineInput) {
  _inherits(ConsoleLineEvaluate, _ConsoleLineInput);

  var _super9 = _createSuper(ConsoleLineEvaluate);

  function ConsoleLineEvaluate(main) {
    _classCallCheck(this, ConsoleLineEvaluate);

    return _super9.call(this, main, "Evaluate:");
  }

  return ConsoleLineEvaluate;
}(ConsoleLineInput);

var ConsoleLineStartEvaluate = /*#__PURE__*/function (_ConsoleLine9) {
  _inherits(ConsoleLineStartEvaluate, _ConsoleLine9);

  var _super10 = _createSuper(ConsoleLineStartEvaluate);

  function ConsoleLineStartEvaluate(main) {
    var _this9;

    _classCallCheck(this, ConsoleLineStartEvaluate);

    _this9 = _super10.call(this, main, ConsoleLineType.START_EVAL);

    _this9.html.append($(START_EVAL_HTML));

    _this9.html.click(function () {
      _this9.main.model.ui.execute.evaluate();

      _this9["delete"]();
    });

    return _this9;
  }

  _createClass(ConsoleLineStartEvaluate, [{
    key: "render",
    value: function render(where) {
      where.append(this.html);
    }
  }]);

  return ConsoleLineStartEvaluate;
}(ConsoleLine);

var BlockPyConsole = /*#__PURE__*/function () {
  /**
   * An object for managing the console, with features for things like printing, plotting, evaling, inputing.
   * The "printer" is the region where we put things, as opposed to the console as a whole.
   *
   * @constructor
   * @param {Object} main - The main BlockPy instance
   * @param {HTMLElement} tag - The HTML object this is attached to.
   */
  function BlockPyConsole(main, tag) {
    _classCallCheck(this, BlockPyConsole);

    this.main = main;
    this.tag = tag;
    this.printerTag = tag.find(".blockpy-printer");
    this.MINIMUM_WIDTH = 200;
    this.MINIMUM_HEIGHT = 200;
    this.DEFAULT_HEIGHT = this.printerTag.height(); // Let CSS define this

    this.main.model.display.previousConsoleHeight(this.DEFAULT_HEIGHT);
    this.output = this.main.model.execution.output; //this.input = this.main.model.execution.input;

    this.settings = {};
    this.clear(); // TODO: If the user modifies a file, then make the console look faded a little
  }

  _createClass(BlockPyConsole, [{
    key: "clear",

    /**
     * Reset the status of the printer, including removing any text in it and
     * fixing its size.
     */
    value: function clear() {
      this.output.removeAll();
      this.lineBuffer = null;
      this.plotBuffer = null;
      this.printerTag.empty(); // If the user hasn't changed the console size, we'll reset it

      if (this.main.model.display.previousConsoleHeight() === this.printerTag.height()) {
        this.printerTag.height(this.DEFAULT_HEIGHT);
        this.main.model.display.previousConsoleHeight(this.printerTag.height());
      }

      this.turtleLine = null;
      Sk.TurtleGraphics = {
        target: this.getTurtleLine.bind(this),
        width: this.getWidth(),
        height: this.getHeight(),
        assets: this.loadAsset.bind(this)
      };
      this.pygameLine = null;
      this.drafterLine = null;
    }
  }, {
    key: "loadAsset",
    value: function loadAsset(name) {
      return name;
    }
  }, {
    key: "getTurtleLine",
    value: function getTurtleLine() {
      if (this.turtleLine === null) {
        this.turtleLine = new ConsoleLineTurtle(this.main);
        this.turtleLine.render(this.printerTag); // If the user hasn't changed the console size, we'll do so

        if (this.main.model.display.previousConsoleHeight() === this.printerTag.height()) {
          var currentPrinterDimension = this.printerTag.width();
          this.printerTag.height(currentPrinterDimension);
          this.main.model.display.previousConsoleHeight(this.printerTag.height());
          Sk.TurtleGraphics.height = currentPrinterDimension - 40;
        }
      }

      return this.turtleLine.html[0];
    }
  }, {
    key: "handlePygameResize",
    value: function handlePygameResize(newWidth, newHeight) {
      // If the user hasn't changed the console size, and the newHeight is bigger than default, we'll change it
      if (this.main.model.display.previousConsoleHeight() === this.printerTag.height() && newHeight > this.DEFAULT_HEIGHT) {
        this.printerTag.height(30 + newHeight);
        this.main.model.display.previousConsoleHeight(this.printerTag.height());
      } // If the pygame window is wider than the console, we'll expand temporarily.


      if (newWidth > this.printerTag.width()) {
        this.main.model.ui.secondRow.makeWide();
      }
    }
  }, {
    key: "finishTurtles",
    value: function finishTurtles() {
      if (this.main.model.assignment.settings.saveTurtleOutput()) {
        if (this.turtleLine) {
          var canvas = this.turtleLine.html.find("canvas").last()[0];
          var dataUrl = canvas.toDataURL("image/png");
          this.main.components.server.saveImage("turtle_output", dataUrl);
        } else if (this.pygameLine) {
          var _canvas = this.pygameLine.canvas;

          var _dataUrl = _canvas.toDataURL("image/png");

          this.main.components.server.saveImage("turtle_output", _dataUrl);
        } else {// TODO: What if there are no turtles to save?
        }
      }
    } // TODO: turtles should be based on the current width

  }, {
    key: "newTurtle",
    value: function newTurtle() {
      return this;
    }
  }, {
    key: "getWidth",
    value: function getWidth() {
      return Math.max(this.MINIMUM_WIDTH, this.printerTag.width() - 40);
    }
  }, {
    key: "getHeight",
    value: function getHeight() {
      return Math.max(this.MINIMUM_HEIGHT, this.printerTag.height() + 40);
    }
  }, {
    key: "isMuted",
    value: function isMuted() {
      return this.main.model.display.mutePrinter();
    }
    /**
     * Updates each printed element in the printer and makes it hidden
     * or visible, depending on what step we're on.
     *
     * @param {Number} step - The current step of the executed program that we're on; each element in the printer must be marked with a "data-step" property to resolve this.
     * @param {Number} page - Deprecated, not sure what this even does.
     */

  }, {
    key: "stepPrinter",
    value: function stepPrinter(step, page) {
      this.printerTag.find(".blockpy-printer-output").each(function () {
        if ($(this).attr("data-step") <= step) {
          $(this).show();
        } else {
          $(this).hide();
        }
      });
    }
  }, {
    key: "print",

    /**
     * Print a line to the on-screen printer.
     * @param {String} lineText - A line of text to be printed out.
     */
    value: function print(lineText) {
      // Empty strings means do nothing.
      // print("", end="")
      if (!lineText) {
        return;
      }

      var flush = false;

      if (lineText.charAt(lineText.length - 1) === "\n") {
        flush = true;
      }

      var splitLines = lineText.split("\n");

      if (this.lineBuffer === null) {
        this.lineBuffer = new ConsoleLineText(this.main, ConsoleLineType.TEXT, splitLines[0]);
      } else {
        this.lineBuffer.addContent(splitLines[0]);
      }

      for (var i = 1; i < splitLines.length - 1; i++) {
        this.output.push(this.lineBuffer);
        this.lineBuffer.render(this.printerTag);
        this.lineBuffer = new ConsoleLineText(this.main, ConsoleLineType.TEXT, splitLines[i]);
      }

      if (flush) {
        this.output.push(this.lineBuffer);
        this.lineBuffer.render(this.printerTag);
        this.lineBuffer = null;
      }
    }
  }, {
    key: "plot",
    value: function plot(plots) {
      this.plotBuffer = new ConsoleLinePlot(this.main, plots);
      this.plotBuffer.render(this.printerTag);
      return this.plotBuffer;
    }
  }, {
    key: "pygame",
    value: function pygame(size, fullscreen, pygameObj) {
      if (this.pygameLine === null) {
        this.pygameLine = new ConsoleLinePygame(this.main, size, fullscreen, pygameObj);
        this.pygameLine.render(this.printerTag);
      }

      return this.pygameLine;
    }
  }, {
    key: "drafter",
    value: function drafter(size, fullscreen) {
      if (this.drafterLine === null) {
        this.drafterLine = new ConsoleLineDrafter(this.main, size, fullscreen);
        this.drafterLine.render(this.printerTag);
      }

      return this.drafterLine;
    }
  }, {
    key: "printPILImage",
    value: function printPILImage(imageData) {
      console.log("TEST", imageData.image);
      this.imageBuffer = new ConsoleLineImage(this.main, imageData.image);
      this.imageBuffer.render(this.printerTag);
      return this.imageBuffer;
    }
  }, {
    key: "printValue",
    value: function printValue(value) {
      var printedValue = new ConsoleLineValue(this.main, value);
      printedValue.render(this.printerTag);
      return printedValue;
    }
    /**
     * Creates and registers a Promise from the Input box
     * @param {String} promptMessage - Message to display to the user.
     *
     */

  }, {
    key: "input",
    value: function input(promptMessage) {
      this.inputBuffer = new ConsoleLineInput(this.main, promptMessage);
      return this.inputBuffer.render(this.printerTag);
    }
  }, {
    key: "evaluate",
    value: function evaluate() {
      this.inputBuffer = new ConsoleLineEvaluate(this.main);
      return this.inputBuffer.render(this.printerTag);
    }
  }, {
    key: "beginEval",
    value: function beginEval() {
      var startEvaluation = new ConsoleLineStartEvaluate(this.main);
      return startEvaluation.render(this.printerTag);
    }
    /**
     * Unconditionally scroll to the bottom of the window.
     *
     */

  }, {
    key: "scrollToBottom",
    value: function scrollToBottom() {
      this.tag.animate({
        scrollTop: this.tag.prop("scrollHeight") - this.tag.prop("clientHeight")
      }, 500);
    }
  }]);

  return BlockPyConsole;
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/corgis.js":
/*!***********************!*\
  !*** ./src/corgis.js ***!
  \***********************/
/*! exports provided: _IMPORTED_DATASETS, _IMPORTED_COMPLETE_DATASETS, BlockPyCorgis */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_IMPORTED_DATASETS", function() { return _IMPORTED_DATASETS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_IMPORTED_COMPLETE_DATASETS", function() { return _IMPORTED_COMPLETE_DATASETS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockPyCorgis", function() { return BlockPyCorgis; });
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utilities */ "./src/utilities.js");
 // TODO: editor.bm.blockEditor.extraTools[]

var _IMPORTED_DATASETS = {};
var _IMPORTED_COMPLETE_DATASETS = {};
/**
 * This is a very simplistic helper function that will transform
 * a given button into a "Loaded" state (disabled, pressed state, etc.).
 *
 * @param {HTMLElement} btn - An HTML element to change the text of.
 */

var setButtonLoaded = function setButtonLoaded(btn) {
  btn.addClass("active").addClass("btn-success").removeClass("btn-primary").prop("disabled", true).text("Loaded").attr("aria-pressed", "true");
};
/**
 * Module that connects to the CORGIS datasets and manages interactions
 * with them. This includes loading in datasets at launch and on-the-fly.
 * Note that this has no presence on screen, so it does not have a tag.
 *
 * @constructor
 * @this {BlockPyCorgis}
 * @param {Object} main - The main BlockPy instance
 */


function BlockPyCorgis(main) {
  this.main = main;
  this.loadedDatasets = [];
  this.loadDatasets();
}

BlockPyCorgis.prototype.loadDatasets = function (silently) {
  var _this = this;

  // Load in each the datasets
  var model = this.main.model,
      editor = this.main.components.pythonEditor,
      server = this.main.components.server;
  var imports = [];
  model.assignment.settings.datasets().split(",").forEach(function (name) {
    if (name && !(name in BlockMirrorBlockEditor.EXTRA_TOOLS)) {
      imports.push.apply(imports, _this.importDataset(Object(_utilities__WEBPACK_IMPORTED_MODULE_0__["slug"])(name), name, silently));
    }
  }); // When datasets are loaded, update the toolbox.

  $.when.apply($, imports).done(function () {
    //console.log("TRIGGERED");
    editor.bm.forceBlockRefresh();
    editor.bm.blockEditor.remakeToolbox();
  }).fail(function (e) {
    console.log(arguments);
    console.error(e);
  }).always(function () {
    server.finalizeSubscriptions();
  });
};
/**
 * Loads the definitions for a dataset into the environment, including
 * the dataset (as a JS file), the skulpt bindings, and the blockly
 * bindings. This requires access to a CORGIS server, and occurs
 * asynchronously. The requests are fired and their deferred objects
 * are returned - callers can use this information to perform an action
 * on completion of the import.
 *
 * @param {String} slug - The URL safe version of the dataset name
 * @param {String} name - The user-friendly version of the dataset name.
 * @returns {Array.<Deferred>} - Returns the async requests as deferred objects.
 */


BlockPyCorgis.prototype.importDataset = function (slug, name) {
  var _this2 = this;

  var url_retrievals = [];

  if (this.main.model.ui.server.isEndpointConnected("importDatasets")) {
    var root = this.main.model.configuration.urls.importDatasets + "blockpy/" + slug + "/" + slug;
    this.main.model.display.loadingDatasets.push(name); // Actually get data

    var getDataset = $.getScript(root + "_dataset.js"); // Load getComplete silently in the background because its big :(

    var getComplete = $.getScript(root + "_complete.js");
    var getSkulpt = $.get(root + "_skulpt.js", function (data) {
      Sk.builtinFiles["files"]["src/lib/" + slug + "/__init__.js"] = data;
    });
    var getBlockly = $.getScript(root + "_blockly.js"); // On completion, update menus.

    $.when(getDataset, getSkulpt, getBlockly).done(function () {
      _this2.loadedDatasets.push(slug);

      _this2.main.components.pythonEditor.bm.textToBlocks.hiddenImports.push(slug);

      _this2.main.components.pythonEditor.bm.forceBlockRefresh();

      _this2.main.components.pythonEditor.bm.blockEditor.remakeToolbox();

      _this2.main.model.display.loadingDatasets.remove(name);
    });
    url_retrievals.push(getDataset, getSkulpt, getBlockly);
  }

  return url_retrievals;
};
/**
 * Opens a dialog box to present the user with the datasets available
 * through the CORGIS server. This requires a call, so this method
 * completes asynchronously. The dialog is composed of a table with
 * buttons to load the datasets (More than one dataset can be loaded
 * from within the dialog at a time).
 */


BlockPyCorgis.prototype.openDialog = function () {
  var _this3 = this;

  if (this.main.model.ui.server.isEndpointConnected("importDatasets")) {
    var root = this.main.model.configuration.urls.importDatasets;
    $.getJSON(root + "index.json", function (data) {
      // Make up the Body
      var datasets = data.blockpy;
      var documentation = root + "blockpy/index.html";
      var start = $("<p>Documentation is available at <a href='".concat(documentation, "' target=_blank>url</a></p>"));
      var body = $("<table></table>", {
        "class": "table table-bordered table-sm table-striped"
      });
      Object.keys(datasets).sort().map(function (name) {
        var sluggedName = Object(_utilities__WEBPACK_IMPORTED_MODULE_0__["slug"])(datasets[name].name);
        var titleName = name;
        var btn = $('<button type="button" class="btn btn-primary" data-toggle="button" aria-pressed="false" autocomplete="off">Load</button>');
        var imgSrc = root + "../images/datasets/" + name + "-icon.png";

        if (_this3.loadedDatasets.indexOf(sluggedName) > -1) {
          setButtonLoaded(btn);
        } else {
          btn.click(function () {
            _this3.importDataset(sluggedName, "Data - " + datasets[name].title);

            setButtonLoaded(btn);
          });
        } //let img = `<img src='${imgSrc}' class="corgis-icon">`;


        $("<tr></tr>") //.append($("<td>" + img + "</td>"))
        .append($("<td>" + datasets[name].title + "</td>")).append($("<td>" + datasets[name].overview + "</td>")).append($("<td></td>").append(btn)).appendTo(body);
      });
      body.appendTo(start); // Show the actual dialog

      _this3.main.components.dialog.show("Import Datasets", start, null);
    });
  }
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/css/blockpy.css":
/*!*****************************!*\
  !*** ./src/css/blockpy.css ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin
    if(false) { var cssReload; }
  

/***/ }),

/***/ "./src/css/bootstrap_retheme.css":
/*!***************************************!*\
  !*** ./src/css/bootstrap_retheme.css ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin
    if(false) { var cssReload; }
  

/***/ }),

/***/ "./src/dialog.js":
/*!***********************!*\
  !*** ./src/dialog.js ***!
  \***********************/
/*! exports provided: DIALOG_HTML, BlockPyDialog */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DIALOG_HTML", function() { return DIALOG_HTML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockPyDialog", function() { return BlockPyDialog; });
// TODO: Dyanmically populate aria-labelledby in this and other places
var DIALOG_HTML = "\n    <div class='blockpy-dialog modal hidden'\n         role=\"dialog\"\n         aria-label='Dialog'\n         aria-hidden=\"true\"\n         aria-modal=\"true\">\n        <div class='modal-dialog modal-lg' role=\"document\">\n            <div class='modal-content' role='region' aria-label='Dialog content'>\n                <div class='modal-header'>\n                    <h4 class='modal-title'>Dynamic Content</h4>\n                    <button type='button' class='close' data-dismiss='modal' aria-hidden='true'>\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                </div>\n                <div class='modal-body' style='max-width:100%; max-height:400px'>\n                </div>\n                <div class='modal-footer'>\n                    <button type='button' class='btn btn-white modal-close' data-dismiss='modal'>Close</button>\n                    <button type='button' class='btn btn-success modal-okay' data-dismiss='modal'>Okay</button>\n                </div>    \n            </div>\n        </div>\n    </div>\n";
/**
 * A utility object for quickly and conveniently generating dialog boxes.
 * Unfortunately, this doesn't dynamically create new boxes; it reuses the same one
 * over and over again. It turns out dynamically generating new dialog boxes
 * is a pain! So we can't stack them.
 *
 * @constructor
 * @this {BlockPyDialog}
 * @param {Object} main - The main BlockPy instance
 * @param {HTMLElement} tag - The HTML object this is attached to.
 */

function BlockPyDialog(main, tag) {
  var _this = this;

  this.main = main;
  this.tag = tag;
  this.titleTag = tag.find(".modal-title");
  this.bodyTag = tag.find(".modal-body");
  this.footerTag = tag.find(".modal-footer");
  this.okayButton = tag.find(".modal-okay");
  this.closeButton = tag.find(".modal-close");

  this.yes = function () {};

  this.no = function () {};

  this.okayButton.click(function () {
    _this.yes();

    _this.tag.modal("hide");
  });
  this.closeButton.click(function () {
    _this.no(); //this.tag.modal("hide");

  });
}

BlockPyDialog.prototype.close = function () {
  this.tag.modal("hide");
};
/**
 * A simple externally available function for popping up a dialog
 * message. This menu will be draggable by its title.
 *
 * @param {String} title - The title of the message dialog. Can have HTML.
 * @param {String} body - The body of the message dialog. Can have HTML.
 * @param {function} onclose - A function to be run when the user closes the dialog.
 */


BlockPyDialog.prototype.show = function (title, body, onclose) {
  this.titleTag.html(title);
  this.bodyTag.html(body);
  this.tag.modal("show");
  this.okayButton.hide();
  this.tag.draggable({
    "handle": ".modal-title"
  });
  this.tag.on("hidden.bs.modal", function (e) {
    if (onclose !== undefined && onclose !== null) {
      onclose();
    }
  });
};

BlockPyDialog.prototype.confirm = function (title, body, yes, no, yesText) {
  if (yesText === undefined) {
    yesText = "Okay";
  }

  this.show(title, body, no);
  this.yes = yes;
  this.no = no;
  this.okayButton.show().html(yesText); // TODO: add okay button and cancel button
};

BlockPyDialog.prototype.ASSIGNMENT_VERSION_CHANGED = function () {
  this.confirm("Assignment Changed", "Your instructor has made changes to this assignment. Would you like to reload? All your work has been saved.");
};

BlockPyDialog.prototype.ERROR_LOADING_ASSIGNMNENT = function (reason) {
  this.show("Error Loading Assignment", "BlockPy encountered an error while loading the assignment.<br>\nPlease reload the page and try again.<br>Response from server was:<br><pre>".concat(reason, "</pre>"));
};

BlockPyDialog.prototype.ERROR_LISTING_UPLOADED_FILES = function (reason) {
  this.show("Error Listing Uploaded Files", "BlockPy encountered an error while listing the uploaded files.<br>\nPlease reload the page and try again.<br>Response from server was:<br><pre>".concat(reason, "</pre>"));
};

BlockPyDialog.prototype.ERROR_UPLOADING_FILE = function (reason) {
  this.show("Error Uploaded File", "BlockPy encountered an error while uploading the file.<br>\nPlease try again.<br>Response from server was:<br><pre>".concat(reason, "</pre>"));
};

BlockPyDialog.prototype.ERROR_DOWNLOADING_FILE = function (reason) {
  this.show("Error Downloading File", "BlockPy encountered an error while downloading a file.<br>\nPlease try again.<br>Response from server was:<br><pre>".concat(reason, "</pre>"));
};

BlockPyDialog.prototype.ERROR_RENAMING_FILE = function (reason) {
  this.show("Error Renaming File", "BlockPy encountered an error while renaming a file.<br>\nPlease try again.<br>Response from server was:<br><pre>".concat(reason, "</pre>"));
};

BlockPyDialog.prototype.ERROR_DELETING_FILE = function (reason) {
  this.show("Error Deleting File", "BlockPy encountered an error while deleting a file.<br>\nPlease try again.<br>Response from server was:<br><pre>".concat(reason, "</pre>"));
};

BlockPyDialog.prototype.ERROR_SAVING_ASSIGNMNENT = function (reason) {
  this.show("Error Saving Assignment", "BlockPy encountered an error while saving the assignment.<br>\nPlease reload the page and try again.<br>Response from server was:<br><pre>".concat(reason, "</pre>"));
};

BlockPyDialog.prototype.ERROR_SHOW_STUDENT_ERROR = function (error) {
  this.show("Original Error", "When I ran your code, I encountered an error:\n\n<div class=\"blockpy-dialog-student-error-message\">".concat(error, "</div>"));
};

BlockPyDialog.prototype.POSITIVE_FEEDBACK_FULL = function (title, message) {
  this.show(title, message);
};

BlockPyDialog.prototype.SCREENSHOT_BLOCKS = function () {// TODO
};

BlockPyDialog.prototype.ERROR_UPDATING_SUBMISSION_STATUS = function () {
  this.show("Error Updating Submission Status", "BlockPy encountered an error while updating your submission status.<br>\nPlease reload the page and try again.");
};

BlockPyDialog.prototype.ERROR_LOADING_HISTORY = function () {
  this.show("Error Loading History", "BlockPy encountered an error while loading your history.<br>\nPlease reload the page and try again.");
};

BlockPyDialog.prototype.OFFER_FORK = function () {
  var setupUrl = this.main.model.configuration.urls.instructionsAssignmentSetup;
  setupUrl = setupUrl ? " (<a href=\"".concat(setupUrl, "\" target=\"_blank\">How do I do that?</a>)") : "";
  this.show("Assignment Not Owned; Fork?", "\n    <div class=\"mb-4\">\n        It looks like you want to edit this assignment, but you are not an instructor\n    or designer in the course that owns it (\"Course Name\"). Would you like to fork\n    this assignment (or its entire group) so that you can save your modifications?\n    </div>\n    \n    <div class=\"mb-4\">\n        Remember to update the Launch URL in the assignments' settings on Canvas!".concat(setupUrl, "\n    </div>\n    \n    <div><button type='button' class='btn btn-white'>Fork entire assignment group</button></div>\n    <div><button type='button' class='btn btn-white'>Fork just this assignment</button></div>\n    <div><button type='button' class='btn btn-danger'>Reset my local changes</button></div>\n    \n    <div class=\"form-check\">\n        <input type=\"checkbox\" class=\"form-check-input\"\n                name=\"blockpy-transfer-submissions\">\n        <label class=\"form-check-label\" for=\"blockpy-transfer-submissions\">Transfer Student Submissions for this course</label>\n    </div>\n    \n    <div class=\"form-check\">\n    <label class=\"form-text\" for=\"blockpy-course-id\">New owning course id: </label>\n        <input type=\"text\" name=\"blockpy-course-id\" value=\"").concat(this.main.model.user.courseId(), "\">\n    </div>\n    "));
};

BlockPyDialog.prototype.EDIT_INPUTS = function () {
  var _this2 = this;

  var inputText = this.main.model.execution.input().join("\n");
  var clearInputs = this.main.model.display.clearInputs() ? "" : "checked";

  var yes = function yes() {
    var checked = _this2.tag.find(".blockpy-remember-inputs").prop("checked");

    var inputs = _this2.tag.find(".blockpy-input-list").val().split("\n");

    _this2.main.model.display.clearInputs(!checked);

    _this2.main.model.execution.input(inputs);
  };

  this.confirm("Edit Remembered Inputs", "\n\n<div class=\"form-check\">\n<input type=\"checkbox\" class=\"blockpy-remember-inputs form-check-input\"\n        name=\"blockpy-remember-inputs\" ".concat(clearInputs, ">\n<label class=\"form-check-label\" for=\"blockpy-remember-inputs\">Reuse inputs for next execution</label>\n</div>\n\n<textarea class=\"blockpy-input-list form-control\" rows=\"4\">").concat(inputText, "</textarea><br>\nEdit the inputs above to store and reuse them across multiple executions.\nEach input should be put on its own line.\nYou do not need quotes; the text will be entered literally.\n \n"), yes, this.no, "Save"); // TODO: Allow user to specify the infinite string to keep giving when the others run out
};

/***/ }),

/***/ "./src/editor/abstract_editor.js":
/*!***************************************!*\
  !*** ./src/editor/abstract_editor.js ***!
  \***************************************/
/*! exports provided: uploadFile, sluggify, downloadFile, AbstractEditor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uploadFile", function() { return uploadFile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sluggify", function() { return sluggify; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "downloadFile", function() { return downloadFile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractEditor", function() { return AbstractEditor; });
/* harmony import */ var _editors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../editors */ "./src/editors.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }


function uploadFile(model, event) {
  var fileReader = new FileReader();
  var files = event.target.files;

  fileReader.onload = function (e) {
    return model.ui.editors.current().uploadFile(e);
  };

  fileReader.fileName = files[0].name;
  fileReader.readAsText(files[0]);
  event.target.value = "";
}
function sluggify(text) {
  return text.replace(/[^a-z0-9]/gi, "_").toLowerCase();
}
function downloadFile(model, event) {
  var _model$ui$editors$cur = model.ui.editors.current().downloadFile(),
      name = _model$ui$editors$cur.name,
      extension = _model$ui$editors$cur.extension,
      contents = _model$ui$editors$cur.contents,
      mimetype = _model$ui$editors$cur.mimetype; // Make safe


  name = sluggify(name);
  name = name + extension; // Make the data download as a file

  var blob = new Blob([contents], {
    type: mimetype
  });

  if (window.navigator.msSaveOrOpenBlob) {
    window.navigator.msSaveBlob(blob, name);
  } else {
    var temporaryDownloadLink = window.document.createElement("a");
    temporaryDownloadLink.href = window.URL.createObjectURL(blob);
    temporaryDownloadLink.download = name;
    document.body.appendChild(temporaryDownloadLink);
    temporaryDownloadLink.click();
    document.body.removeChild(temporaryDownloadLink);
  }
}
var AbstractEditor = /*#__PURE__*/function () {
  function AbstractEditor(main, tag) {
    _classCallCheck(this, AbstractEditor);

    this.main = main;
    this.tag = tag;
    this.fileSystem = main.components.fileSystem;
    this.filename = null;
    this.file = null;
  }

  _createClass(AbstractEditor, [{
    key: "deleteFile",
    value: function deleteFile() {
      this.fileSystem.deleteFile(this.filename);
      this.main.model.display.filename("answer.py");
      this.main.components.editors.changeEditor("answer.py");
    }
  }, {
    key: "onFileDeleted",
    value: function onFileDeleted() {
      // TODO: Switch to the previous file instead of a default file
      this.main.model.display.filename("answer.py");
      this.main.components.editors.changeEditor("answer.py");
    }
  }, {
    key: "onFileUpdated",
    value: function onFileUpdated(file) {
      if (file.filename === this.filename) {
        //this.file = file;
        this.main.components.editors.changeEditor(this.filename); //this.fileSystem.stopWatchingFile(this.filename);
        //this.trackCurrentFile();
      }
    }
  }, {
    key: "trackCurrentFile",
    value: function trackCurrentFile() {
      this.fileSystem.watchFile(this.filename, {
        updated: this.onFileUpdated.bind(this),
        deleted: this.onFileDeleted.bind(this)
      });
    }
  }, {
    key: "enter",
    value: function enter(newFilename, oldEditor) {
      this.filename = newFilename;
      this.file = this.fileSystem.getFile(newFilename);
      this.trackCurrentFile();
    }
    /**
     *
     * @param newFilename - the filename that the other editor will be switching to
     * @param oldEditor
     * @param newEditor
     */

  }, {
    key: "exit",
    value: function exit(newFilename, oldEditor, newEditor) {
      this.fileSystem.stopWatchingFile(this.filename);
      this.file = null;
      this.filename = null;
    }
  }, {
    key: "uploadFile",
    value: function uploadFile(event) {
      var filename = event.target.fileName;
      var contents = event.target.result;
      this.file.handle(contents);
    }
  }, {
    key: "downloadFile",
    value: function downloadFile() {
      var filename = _editors__WEBPACK_IMPORTED_MODULE_0__["Editors"].parseFilename(this.filename);
      return {
        name: filename.name,
        extension: filename.type,
        contents: this.file.handle(),
        mimetype: "text/plain"
      };
    }
  }]);

  return AbstractEditor;
}();

/***/ }),

/***/ "./src/editor/assignment_settings.js":
/*!*******************************************!*\
  !*** ./src/editor/assignment_settings.js ***!
  \*******************************************/
/*! exports provided: AssigmentType, ASSIGNMENT_SETTINGS_EDITOR_HTML, saveAssignmentSettings, loadAssignmentSettings, makeAssignmentSettingsModel, AssignmentSettings */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(ko) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AssigmentType", function() { return AssigmentType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ASSIGNMENT_SETTINGS_EDITOR_HTML", function() { return ASSIGNMENT_SETTINGS_EDITOR_HTML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "saveAssignmentSettings", function() { return saveAssignmentSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadAssignmentSettings", function() { return loadAssignmentSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeAssignmentSettingsModel", function() { return makeAssignmentSettingsModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AssignmentSettings", function() { return AssignmentSettings; });
/* harmony import */ var _abstract_editor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract_editor */ "./src/editor/abstract_editor.js");
/* harmony import */ var _python__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./python */ "./src/editor/python.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var ASSIGNMENT_SETTINGS = [["toolbox", "toolbox", "normal", "toolbox", "Which version of the toolbox to present to the user."], ["type", "type", "blockpy", "type", "The type of question; BlockPy programming problems are the default, but we also support static readings, quiz questions, and a Maze game."], ["passcode", "passcode", "", "string", "A string that the user must enter to access the problem. If blank, then no passcode is prompted."], //["toolboxLevel", "toolbox_level", "normal", "toolbox", "INCOMPLETE: What level of toolbox to present to the user (hiding and showing categories)."],
["startView", "start_view", _python__WEBPACK_IMPORTED_MODULE_1__["DisplayModes"].TEXT, _python__WEBPACK_IMPORTED_MODULE_1__["DisplayModes"], "The Python editor mode to start in when the student starts the problem."], ["datasets", "datasets", "", "string", "The current list of datasets available on load as a comma-separated string."], ["disableTimeout", "disable_timeout", false, "bool", "If checked, then students code is allowed to run without timeouts (potentially allowing infinite loops)."], ["partId", "part_id", "", "string", "The Part ID of an Assignment that this editor is responsible for. Assignments can have regions (\"Parts\") that behave independently to the user but all correspond to the same assignment on the backend. Blank corresponds to the full document. Note that most assignment settings will apply UNIVERSALLY across all parts, including the on_run.py and the other settings on this page."], ["isParsons", "is_parsons", false, "bool", "If checked, then this is a parson's style question (jumbled)."], ["saveTurtleOutput", "save_turtle_output", false, "bool", "If checked, then turtle (and pygame) output is saved whenever the program uses it."], ["disableFeedback", "disable_feedback", false, "bool", "If checked, then no instructor scripts are run (e.g., on_run and on_eval)."], ["disableInstructorRun", "disable_instructor_run", false, "bool", "If checked, then the instructor on_run will not automatically run the students' code. This still runs the students' code once beforehand, but the output/data will not be available to the instructor's on_run.py script."], ["disableStudentRun", "disable_student_run", false, "bool", "If checked, then the run button no longer run the students' code. This still runs the instructor's feedback on_run script."], ["disableTifa", "disable_tifa", false, "bool", "If checked, then do not automatically run Tifa (which can be slow)."], ["disableTrace", "disable_trace", false, "bool", "If checked, then the students code will not have its execution traced (no variables recorded, no coverage tracked)."], ["disableEdit", "disable_edit", false, "bool", "If checked, then the students' file will not be editable."], ["preloadAllFiles", "preload_all_files", false, "bool", "If checked, then the students can upload and use images and other files. This preloads all available files and images. You can filter them using the Preloaded Files setting."], ["enableImages", "can_image", false, "bool", "If checked, then users can copy/paste images directly into the text editor."], ["enableBlocks", "can_blocks", true, "bool", "If checked, then the student can edit the block interface (if not, then it is visible but not editable)."], ["canClose", "can_close", false, "bool", "If checked, then the student should mark their submission closed when they are done. There is no way to force a student to do so. Unlike Reviewed, this still submits the correctness."], ["onlyInteractive", "only_interactive", false, "bool", "If checked, the editors are hidden, the program is automatically run, and then the console enters Eval mode (interactive)."], ["onlyUploads", "only_uploads", false, "bool", "If checked, then the students' file will not be directly editable (they will have to upload submissions)."], // What menus/feedback to show and hide
["hideSubmission", "hide_submission", false, "bool", "If checked, then students will not be able to see their submission's code or history on Canvas."], ["hideFiles", "hide_files", true, "bool", "If checked, then students will not see the View Files toolbar."], ["hideQueuedInputs", "hide_queued_inputs", false, "bool", "If checked, then the students cannot access the queued inputs box (makes repeated debugging easier for the input function)."], ["hideEditors", "hide_editors", false, "bool", "If checked, then all of the editors are hidden."], ["hideMiddlePanel", "hide_middle_panel", false, "bool", "If checked, then the console and feedback areas is hidden."], ["hideAll", "hide_all", false, "bool", "INCOMPLETE: If checked, then the entire interface is hidden."], ["hideEvaluate", "hide_evaluate", false, "bool", "If checked, then the Evaluate button is not shown on the console."], ["hideImportDatasetsButton", "hide_import_datasets_button", false, "bool", "If checked, then students cannot see the import datasets button."], // TODO: Fix this one to be settable
["hideImportStatements", "hide_import_statements", false, "bool", "INCOMPLETE: If checked, certain kinds of import statements (matplotlib, turtle, datasets) are not shown in the block interface."], ["hideCoverageButton", "hide_coverage_button", false, "bool", "INCOMPLETE: If checked, the coverage button is not shown."], ["hideTraceButton", "hide_trace_button", false, "bool", "If checked, then the Trace button is not shown."], ["smallLayout", "small_layout", false, "bool", "If checked, then the interface fits into a smaller region."], ["hasClock", "has_clock", false, "bool", "If checked, then a clock is shown in the top right corner."], ["preloadFiles", "preload_files", "", "string", "A JSON structure representing the files that should be loaded on start from the remote, as if they were local."]];
var AssigmentType = {
  BLOCKPY: "blockpy",
  MAZE: "maze",
  QUIZ: "quiz",
  READING: "reading"
};

function getDocumentation(name) {
  for (var i = 0; i < ASSIGNMENT_SETTINGS.length; i++) {
    if (ASSIGNMENT_SETTINGS[i][0] === name) {
      return ASSIGNMENT_SETTINGS[i][4];
    }
  }

  return "Documentation not found for field";
}

function makeStartViewTab(name, icon, mode) {
  return "<label class=\"btn btn-outline-secondary blockpy-mode-set-blocks\"\n                data-bind=\"css: {active: assignment.settings.startView() === '".concat(mode, "'},\n                           click: assignment.settings.startView.bind($data, '").concat(mode, "')\">\n                <span class='fas fa-").concat(icon, "'></span>\n                <input type=\"radio\" name=\"blockpy-start-view-set\" autocomplete=\"off\" checked> ").concat(name, "\n            </label>");
}

var ASSIGNMENT_SETTINGS_BOOLEAN_COMPONENTS_HTML = ASSIGNMENT_SETTINGS // Only handle the simple booleans this way
.filter(function (setting) {
  return setting[3] === "bool";
}).map(function (setting) {
  var prettyName = setting[1].split("_").map(function (word) {
    return word.charAt(0).toUpperCase() + word.slice(1);
  }).join(" ");
  return "\n        <div class=\"form-group row\">\n            <div class=\"col-sm-2 text-right\">\n                <label class=\"form-check-label\" for=\"blockpy-settings-".concat(setting[0], "\">").concat(prettyName, "</label>\n            </div>\n            <div class=\"col-sm-1\">\n                <div class=\"form-check\">\n                    <input class=\"form-check-input\" type=\"checkbox\" id=\"blockpy-settings-").concat(setting[0], "\"\n                    data-bind=\"checked: assignment.settings.").concat(setting[0], "\">\n                </div>  \n            </div>            \n            <div class=\"col-sm-9\">\n                <small class=\"form-text text-muted\">\n                    ").concat(setting[4], "\n                </small>\n            </div>\n        </div>\n        ");
}).join("\n\n");
var ASSIGNMENT_SETTINGS_EDITOR_HTML = "\n    <div class=\"blockpy-view-settings\">\n    \n    <form>\n\n        <div class=\"form-group row\">\n            <div class=\"col-sm-12 mx-auto\">\n                <button type=\"button\" class=\"btn btn-success\"\n                    data-bind=\"click: ui.editors.settings.save\">Save changes</button>\n            </div>\n        </div>\n    \n        <div class=\"form-group row\">\n            <label for=\"blockpy-settings-name\" class=\"col-sm-2 col-form-label text-right\">Name:</label>\n            <div class=\"col-sm-10\">\n                <input type=\"text\" class=\"form-control\" id=\"blockpy-settings-name\"\n                data-bind=\"value: assignment.name\">\n                <small class=\"form-text text-muted\">\n                    The student-facing name of the assignment. Assignments within a group are ordered alphabetically\n                    by their name, so you may want to use a naming scheme like \"#43.5) Whatever\".\n                </small>\n            </div>\n        </div>\n        \n        <div class=\"form-group row\">\n            <label for=\"blockpy-settings-url\" class=\"col-sm-2 col-form-label text-right\">URL:</label>\n            <div class=\"col-sm-10\">\n                <input type=\"text\" class=\"form-control\" id=\"blockpy-settings-url\"\n                data-bind=\"value: assignment.url\">\n                <small class=\"form-text text-muted\">\n                    The course-unique URL that can be used to consistently refer to this assignment. \n                </small>\n            </div>\n        </div>\n        \n        <div class=\"form-group row\">\n            <div class=\"col-sm-2 text-right\">\n                <label class=\"form-check-label\" for=\"blockpy-settings-public\">Public:</label>\n            </div>\n            <div class=\"col-sm-1\">\n                <div class=\"form-check\">\n                    <input class=\"form-check-input\" type=\"checkbox\" id=\"blockpy-settings-public\"\n                    data-bind=\"checked: assignment.public\">\n                </div>  \n            </div>            \n            <div class=\"col-sm-9\">\n                <small class=\"form-text text-muted\">\n                    If not public, users outside of the course will not be able to see the assignment in course listings.\n                </small>\n            </div>\n        </div>\n        \n        <div class=\"form-group row\">\n            <div class=\"col-sm-2 text-right\">\n                <label class=\"form-check-label\" for=\"blockpy-settings-hidden\">Hidden:</label>\n            </div>\n            <div class=\"col-sm-1\">\n                <div class=\"form-check\">\n                    <input class=\"form-check-input\" type=\"checkbox\" id=\"blockpy-settings-hidden\"\n                    data-bind=\"checked: assignment.hidden\">\n                </div>  \n            </div>            \n            <div class=\"col-sm-9\">\n                <small class=\"form-text text-muted\">\n                    If hidden, students will not be able to see their grade while working on the assignment.\n                </small>\n            </div>\n        </div>\n        \n        <div class=\"form-group row\">\n            <div class=\"col-sm-2 text-right\">\n                <label class=\"form-check-label\" for=\"blockpy-settings-reviewed\">Reviewed:</label>\n            </div>\n            <div class=\"col-sm-1\">\n                <div class=\"form-check\">\n                    <input class=\"form-check-input\" type=\"checkbox\" id=\"blockpy-settings-reviewed\"\n                    data-bind=\"checked: assignment.reviewed\">\n                </div>  \n            </div>            \n            <div class=\"col-sm-9\">\n                <small class=\"form-text text-muted\">\n                    If reviewed, the assignment need to be commented upon and regraded by the staff after submission.\n                </small>\n            </div>\n        </div>\n        \n        <div class=\"form-group row\">\n            <label for=\"blockpy-settings-points\" class=\"col-sm-2 col-form-label text-right\">Points:</label>\n            <div class=\"col-sm-10\">\n                <input type=\"number\" class=\"form-control\" id=\"blockpy-settings-points\"\n                data-bind=\"value: assignment.points\">\n                <small class=\"form-text text-muted\">\n                    The number of points this assignment is worth; defaults to 1 point. \n                </small>\n            </div>\n        </div>\n        \n        <div class=\"form-group row\">\n            <div class=\"col-sm-2 text-right\">\n                <label class=\"form-check-label\" for=\"blockpy-settings-reviewed\">Starting View:</label>\n            </div>\n            <div class=\"col-sm-3\">\n                <div class=\"btn-group btn-group-toggle mr-2\" data-toggle=\"buttons\">\n                    ".concat(makeStartViewTab("Blocks", "th-large", _python__WEBPACK_IMPORTED_MODULE_1__["DisplayModes"].BLOCK), "\n                    ").concat(makeStartViewTab("Split", "columns", _python__WEBPACK_IMPORTED_MODULE_1__["DisplayModes"].SPLIT), "\n                    ").concat(makeStartViewTab("Text", "align-left", _python__WEBPACK_IMPORTED_MODULE_1__["DisplayModes"].TEXT), "\n                 </div>\n            </div>            \n            <div class=\"col-sm-7\">\n                <small class=\"form-text text-muted\">\n                    ").concat(getDocumentation("startView"), "\n                </small>\n            </div>\n        </div>\n        \n        <div class=\"form-group row\">\n            <label for=\"blockpy-settings-ip-ranges\" class=\"col-sm-2 col-form-label text-right\">IP Ranges:</label>\n            <div class=\"col-sm-10\">\n                <input type=\"text\" class=\"form-control\" id=\"blockpy-settings-ip-ranges\"\n                data-bind=\"value: assignment.ipRanges\">\n                <small class=\"form-text text-muted\">\n                    Provide a comma-separated list of IP Addresses that will be explicitly allowed. If blank,\n                    then all addresses are allowed. If an address starts with <code>^</code> then it it is explicitly\n                    blacklisted, but that can be overridden in turn with a <code>!</code>. Addresses can also\n                    include a bit mask to allow a range of addresses.\n                </small>\n            </div>\n        </div>\n        \n        <div class=\"form-group row\">\n            <label for=\"blockpy-settings-passcode\" class=\"col-sm-2 col-form-label text-right\">Passcode:</label>\n            <div class=\"col-sm-10\">\n                <input type=\"text\" class=\"form-control\" id=\"blockpy-settings-passcode\"\n                data-bind=\"value: assignment.settings.passcode\">\n                <small class=\"form-text text-muted\">\n                    ").concat(getDocumentation("passcode"), "\n                </small>\n            </div>\n        </div>\n        \n        <div class=\"form-group row\">\n            <label for=\"blockpy-settings-datasets\" class=\"col-sm-2 col-form-label text-right\">Preloaded Datasets:</label>\n            <div class=\"col-sm-10\">\n                <input type=\"text\" class=\"form-control\" id=\"blockpy-settings-datasets\"\n                data-bind=\"value: assignment.settings.datasets\">\n                <small class=\"form-text text-muted\">\n                    ").concat(getDocumentation("datasets"), "\n                </small>\n            </div>\n        </div>\n        \n        <div class=\"form-group row\">\n            <label for=\"blockpy-settings-preload-files\" class=\"col-sm-2 col-form-label text-right\">Preloaded Files:</label>\n            <div class=\"col-sm-10\">\n                <input type=\"text\" class=\"form-control\" id=\"blockpy-settings-preload-files\"\n                data-bind=\"value: assignment.settings.preloadFiles\">\n                <small class=\"form-text text-muted\">\n                    ").concat(getDocumentation("preloadFiles"), "\n                </small>\n            </div>\n        </div>\n        \n        <div class=\"form-group row\">\n            <label for=\"blockpy-settings-toolbox\" class=\"col-sm-2 col-form-label text-right\">Block Toolbox:</label>\n            <div class=\"col-sm-10\">\n                <select class=\"form-control\" id=\"blockpy-settings-toolbox\"\n                       data-bind=\"value: assignment.settings.toolbox\">\n                   <option value=\"normal\">Normal Toolbox</option>\n                   <option value=\"ct\">CT@VT Toolbox</option>\n                   <option value=\"ct2\">CT@VT Toolbox V2</option>\n                   <option value=\"minimal\">Minimal Set</option>\n                   <option value=\"full\">All Blocks</option>\n                   <option value=\"custom\">Custom</option>\n                </select>\n                <small class=\"form-text text-muted\">\n                    ").concat(getDocumentation("toolbox"), "\n                </small>\n            </div>\n        </div>\n        \n        <div class=\"form-group row\">\n            <label for=\"blockpy-settings-type\" class=\"col-sm-2 col-form-label text-right\">Problem Type:</label>\n            <div class=\"col-sm-10\">\n                <select class=\"form-control\" id=\"blockpy-settings-type\"\n                       data-bind=\"value: assignment.type\">\n                   <option value=\"blockpy\">BlockPy</option>\n                   <option value=\"maze\">Maze</option>\n                   <option value=\"quiz\">Quiz Question</option>\n                   <option value=\"reading\">Reading</option>\n                </select>\n                <small class=\"form-text text-muted\">\n                    ").concat(getDocumentation("type"), "\n                </small>\n            </div>\n        </div>\n        \n        <div class=\"form-group row\">\n            <label for=\"blockpy-settings-part-id\" class=\"col-sm-2 col-form-label text-right\">Part ID:</label>\n            <div class=\"col-sm-10\">\n                <input type=\"text\" class=\"form-control\" id=\"blockpy-settings-part-id\"\n                data-bind=\"value: configuration.partId\">\n                <small class=\"form-text text-muted\">\n                    ").concat(getDocumentation("partId"), "\n                </small>\n            </div>\n        </div>\n        \n        ").concat(ASSIGNMENT_SETTINGS_BOOLEAN_COMPONENTS_HTML, "\n    </form>\n    \n    </div>\n");
function saveAssignmentSettings(model) {
  var settings = {};
  ASSIGNMENT_SETTINGS.forEach(function (setting) {
    var clientName = setting[0],
        serverName = setting[1],
        defaultValue = setting[2];
    var value = model.assignment.settings[clientName](); // Only store this setting if its different from the default

    if (value !== defaultValue) {
      settings[serverName] = value;
    }
  });
  return JSON.stringify(settings);
}
function loadAssignmentSettings(model, settings) {
  if (settings) {
    settings = JSON.parse(settings);
    ASSIGNMENT_SETTINGS.forEach(function (setting) {
      var clientName = setting[0],
          serverName = setting[1];

      if (serverName in settings) {
        model.assignment.settings[clientName](settings[serverName]);
      } else {
        model.assignment.settings[clientName](setting[2]);
      }
    });

    if (settings.start_view) {
      model.display.pythonMode(settings.start_view);
    }
  }
}
function makeAssignmentSettingsModel(configuration) {
  var settings = {};
  ASSIGNMENT_SETTINGS.forEach(function (setting) {
    var clientName = setting[0],
        serverName = setting[1],
        defaultValue = setting[2],
        fieldType = setting[3];

    if (configuration["assignment.settings." + serverName] === undefined) {
      settings[clientName] = ko.observable(defaultValue);
    } else {
      var configValue = configuration["assignment.settings." + serverName];

      if (fieldType === "bool") {
        configValue = configValue.toLowerCase() === "true";
      }

      settings[clientName] = ko.observable(configValue);
    }
  });
  return settings;
}

var AssignmentSettingsView = /*#__PURE__*/function (_AbstractEditor) {
  _inherits(AssignmentSettingsView, _AbstractEditor);

  var _super = _createSuper(AssignmentSettingsView);

  function AssignmentSettingsView(main, tag) {
    var _this;

    _classCallCheck(this, AssignmentSettingsView);

    _this = _super.call(this, main, tag);
    _this.dirty = false;
    return _this;
  }

  _createClass(AssignmentSettingsView, [{
    key: "enter",
    value: function enter(newFilename, oldEditor) {
      _get(_getPrototypeOf(AssignmentSettingsView.prototype), "enter", this).call(this, newFilename, oldEditor);

      this.dirty = false; //TODO: this.updateEditor(this.file.handle());
      // Subscribe to the relevant File
      // this.currentSubscription = this.file.handle.subscribe(this.updateEditor.bind(this));
      // Notify relevant file of changes to BM

      this.currentListener = this.updateHandle.bind(this); //TODO: this.codeMirror.on("change", this.currentListener);
    }
  }, {
    key: "updateEditor",
    value: function updateEditor(newContents) {
      this.dirty = !this.dirty;

      if (this.dirty) {
        this.dirty = true; // TODO: Do update

        this.dirty = false;
      }
    }
  }, {
    key: "updateHandle",
    value: function updateHandle(event) {
      this.dirty = !this.dirty;

      if (this.dirty) {
        this.dirty = true; //this.file.handle(this.codeMirror.value());
        // TODO: Update

        this.dirty = false;
      }
    }
  }, {
    key: "exit",
    value: function exit(newFilename, oldEditor, newEditor) {
      // Remove subscriber
      //this.currentSubscription.dispose();
      // TODO: update
      //this.codeMirror.off("change", this.currentListener);
      _get(_getPrototypeOf(AssignmentSettingsView.prototype), "exit", this).call(this, newFilename, oldEditor);
    }
  }]);

  return AssignmentSettingsView;
}(_abstract_editor__WEBPACK_IMPORTED_MODULE_0__["AbstractEditor"]);

var AssignmentSettings = {
  name: "Assignment Settings",
  extensions: ["!assignment_settings.blockpy"],
  constructor: AssignmentSettingsView,
  template: ASSIGNMENT_SETTINGS_EDITOR_HTML
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! knockout */ "knockout")))

/***/ }),

/***/ "./src/editor/default_header.js":
/*!**************************************!*\
  !*** ./src/editor/default_header.js ***!
  \**************************************/
/*! exports provided: default_header */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_header", function() { return default_header; });
var default_header = "\n<div class=\"blockpy-python-toolbar col-md-12 btn-toolbar\"\n     role=\"toolbar\" aria-label=\"Python Toolbar\">\n     <div class=\"btn-group mr-2\">\n        <label class=\"btn btn-outline-secondary\">\n            <span class=\"fas fa-file-upload\"></span> Upload\n            <input class=\"blockpy-toolbar-upload\" type=\"file\"\n                hidden\n                data-bind=\"event: {change: ui.editors.upload}\">\n         </label>\n\n        <button type=\"button\" class=\"btn btn-outline-secondary dropdown-toggle dropdown-toggle-split\"\n            data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n            <span class=\"caret\"></span>\n            <span class=\"sr-only\">Toggle Dropdown</span>\n        </button>\n        \n        <div class=\"dropdown-menu dropdown-menu-right\">\n            <a class='dropdown-item blockpy-toolbar-download'\n                data-bind=\"click: ui.editors.download\">\n            <span class='fas fa-download'></span> Download\n            </a>\n        </div>\n    </div>\n    \n    <div class=\"btn-group mr-2\" role=\"group\" aria-label=\"Delete Group\"\n        data-bind=\"visible: ui.editors.canDelete\">\n        <button type=\"button\" class=\"btn btn-outline-secondary\",\n            data-bind=\"click: ui.files.delete\">\n            <span class=\"fas fa-trash\"></span> Delete\n         </button>\n     </div>\n </div>\n";

/***/ }),

/***/ "./src/editor/images.js":
/*!******************************!*\
  !*** ./src/editor/images.js ***!
  \******************************/
/*! exports provided: IMAGE_EDITOR_HTML, ImageEditor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IMAGE_EDITOR_HTML", function() { return IMAGE_EDITOR_HTML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImageEditor", function() { return ImageEditor; });
/* harmony import */ var _abstract_editor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract_editor */ "./src/editor/abstract_editor.js");
/* harmony import */ var filepond__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! filepond */ "filepond");
/* harmony import */ var filepond__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(filepond__WEBPACK_IMPORTED_MODULE_1__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var IMAGE_EDITOR_HTML = "\n     <div>\n        <strong>Available Files</strong><br>\n            All the files available to open with <code>PIL</code> for this assignment:\n            <button data-bind=\"click: ui.editors.images.reloadImages\"\n                class=\"btn btn-outline-secondary float-right\"\n            >Reload Available Images</button>\n        <!-- ko if: display.uploadedFiles() !== null -->\n            <ul>\n                <!-- ko foreach: { data: Object.keys(display.uploadedFiles()), as: 'placement' } -->\n                <li>\n                    <strong data-bind=\"text: $data[0].toUpperCase() + $data.slice(1)\"></strong>:\n                    <table class=\"table table-striped table-bordered table-hover table-sm\">\n                        <thead>\n                            <tr>\n                                <th>Filename</th>\n                                <th>Preview</th>\n                                <th>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                    <!-- ko foreach: { data: $root.display.uploadedFiles()[placement], as: 'filename' } -->\n                        <tr>\n                            <td>\n                                <code data-bind=\"text: filename[0]\"></code>\n                            </td>\n                            <td>\n                                <details>\n                                    <summary><img data-bind=\"attr: { src: filename[1], alt: filename[1] }\"\n                                        width=\"30px\" height=\"30px\" onerror=\"this.style.display='none'\"/>\n                                    </summary>\n                                    <img data-bind=\"attr: { src: filename[1], alt: filename[1] }\"\n                                        onerror=\"this.style.display='none'\"/>\n                                </details>\n                            </td>\n                            <td>\n                                <button class=\"btn btn-danger\" \n                                    data-bind=\"click: $root.ui.editors.images.deleteFile.bind(filename[0]),\n                                               visible: $root.ui.editors.images.canModify(placement)\">Delete</button>\n                                <button class=\"btn btn-danger\" \n                                    data-bind=\"click: $root.ui.editors.images.renameFile.bind(filename[0]),\n                                               visible: $root.ui.editors.images.canModify(placement)\">Rename</button>\n                            </td>\n                        </tr>\n                    <!-- /ko -->\n                    </table>\n                </li>\n                <!-- /ko -->\n            </ul>\n        <!-- /ko -->\n        \n        <strong>Add more files</strong><br>\n        Upload more files using the forms below:\n                \n        <div class=\"form-group row\">\n            <div class=\"col-sm-2 text-right\">\n                <label class=\"form-label\" for=\"blockpy-editor-images-upload-file\">File:</label>\n            </div>\n            <div class=\"col-sm-10\">\n                <input type=\"file\" class=\"form-control blockpy-editor-images-upload-file\" id=\"blockpy-editor-images-upload-file\"\n            name=\"blockpy-editor-images-upload-file\">\n                <small class=\"form-text text-muted\">\n                    The file to make available in your code\n                </small>\n            </div>\n        </div>\n        \n        <div class=\"form-group row\" data-bind=\"visible: ui.editors.images.canChoosePlacement()\">\n            <div class=\"col-sm-2 text-right\">\n                <label class=\"form-label\" for=\"blockpy-editor-images-upload-placement\">Placement:</label>\n            </div>\n            <div class=\"col-sm-10\">\n                <select id=\"blockpy-editor-images-upload-placement\" name=\"blockpy-editor-images-upload-placement\"\n                    class=\"form-control blockpy-editor-images-upload-placement\">\n                    <option value=\"submission\" selected>Only your submission</option>\n                    <option value=\"assignment\">For all submissions of this assignment</option>\n                    <option value=\"course\">Across the entire course</option>\n                    <option value=\"user\">For just your user account</option>\n                </select>\n                <small class=\"form-text text-muted\">\n                    The placement of the file in the system. This controls whether other users can see the file.\n                    If you want to provide a file to all students for just this specific problem, then you should\n                    use <code>For all submissions of this assignment</code>. If you want to use this same image\n                    across other assignments (including assignments within this assignment group), then you should\n                    use <code>Across the entire course</code>.\n                </small>\n            </div>\n        </div>\n        \n        <div class=\"form-group row\">\n            <div class=\"col-sm-2 text-right\">\n                <label class=\"form-label\" for=\"blockpy-editor-images-upload-filename\">Filename:</label>\n            </div>\n            <div class=\"col-sm-10\">\n                <input type=\"text\" class=\"form-control blockpy-editor-images-upload-filename\" id=\"blockpy-editor-images-upload-filename\"\n                             name=\"blockpy-editor-images-upload-filename\">\n                <small class=\"form-text text-muted\">\n                    The filename that will be made available in the code. This should be a valid filename for the\n                    system, and should not contain spaces or special characters. It should also have a valid file\n                    extension (e.g., <code>.png</code>, <code>.jpg</code>, <code>.txt</code>).\n                </small>\n            </div>\n        </div>\n        <div class=\"form-group row\">\n            <button data-bind=\"click: ui.editors.images.uploadFile\" class=\"btn btn-success\">Upload</button>\n        </div>\n    </div>\n";

var ImageEditorView = /*#__PURE__*/function (_AbstractEditor) {
  _inherits(ImageEditorView, _AbstractEditor);

  var _super = _createSuper(ImageEditorView);

  function ImageEditorView(main, tag) {
    var _this;

    _classCallCheck(this, ImageEditorView);

    _this = _super.call(this, main, tag);
    _this.tagUploadFileButton = _this.tag.find(".blockpy-editor-images-upload-file");
    _this.tagUploadFilePlacement = _this.tag.find(".blockpy-editor-images-upload-placement");
    _this.tagUploadFileName = _this.tag.find(".blockpy-editor-images-upload-filename");

    _this.tagUploadFileButton.on("change", function (event) {
      _this.tagUploadFileName.val(event.target.files[0].name);
    });

    return _this;
  }

  _createClass(ImageEditorView, [{
    key: "enter",
    value: function enter(newFilename, oldEditor) {
      _get(_getPrototypeOf(ImageEditorView.prototype), "enter", this).call(this, newFilename, oldEditor);

      var uploadedFiles = this.main.model.display.uploadedFiles();

      if (uploadedFiles === null) {
        this.reloadImages();
      }

      this.currentSubscription = this.file.handle.subscribe(this.updateEditor.bind(this)); // const target = this.tag.find(".blockpy-editor-images-filepond")[0];
      //console.log(target);

      /*const uploadUrl = new URL(this.main.model.configuration.urls["uploadFile"]);
      uploadUrl.searchParams.set("directory", this.main.model.assignment.id());
      uploadUrl.searchParams.set("placement", "submission");*/
      // this.filepond = FilePond.create(target, {
      //     //files: [],
      //     allowMultiple: true,
      //     server: {
      //         url: this.main.model.configuration.urls["downloadFile"],
      //         load: (source, load) => {
      //             const params = new URL(source, window.location.origin).searchParams;
      //             this.main.components.server.downloadFile(
      //                 params.get("placement"),
      //                 params.get("directory"),
      //                 params.get("filename"),
      //                 (response) => {
      //                     load(new File([response], params.get("filename")));
      //                 }
      //             );
      //             console.log(source, load);
      //         },
      //         process: {
      //             url: this.main.model.configuration.urls["uploadFile"],
      //             // url: "blockpy/upload_file?placement=assignment&directory="+this.main.model.assignment.id(),
      //         }
      //     }
      // });
      // console.log(this.filepond);

      /*
      this.updateEditor(this.file.handle());
      // Subscribe to the relevant File
        // Notify relevant file of changes to BM
      this.currentListener = this.updateHandle.bind(this);
      this.codeMirror.on("change", this.currentListener);*/
    }
  }, {
    key: "reloadImages",
    value: function reloadImages() {
      var _this2 = this;

      this.main.components.server.listUploadedFiles(function (response) {
        if (response.success) {
          _this2.main.model.display.uploadedFiles(response.files);

          _this2.main.components.fileSystem.loadRemoteFiles(response.files); // const allFiles = [];
          // Object.entries(response.files).forEach(([group, files]) => {
          //     files.forEach(([filename, url]) => allFiles.push({
          //         source: url,
          //         options: {
          //             type: "local"
          //         }
          //     }));
          // });
          // this.filepond.addFiles(allFiles);

        } else {
          _this2.main.components.dialog.ERROR_LISTING_UPLOADED_FILES(response.message);
        }
      });
    }
  }, {
    key: "updateEditor",
    value: function updateEditor(newContents) {}
  }, {
    key: "updateHandle",
    value: function updateHandle(event) {
      /*this.dirty = !this.dirty;
      if (this.dirty) {
          this.dirty = true;
          this.file.handle(this.codeMirror.getValue());
          this.dirty = false;
      }*/
    }
  }, {
    key: "getPlacementDirectory",
    value: function getPlacementDirectory(placement) {
      switch (placement) {
        case "submission":
          return this.main.model.submission.id();

        case "assignment":
          return this.main.model.assignment.id();

        case "course":
          return this.main.model.course.id();

        case "user":
          return this.main.model.user.id();

        default:
          return null;
      }
    }
  }, {
    key: "uploadFile",
    value: function uploadFile(event) {
      var _this3 = this;

      this.main.components.server.uploadFile(this.tagUploadFilePlacement.val(), this.getPlacementDirectory(this.tagUploadFilePlacement.val()), this.tagUploadFileName.val(), this.tagUploadFileButton[0].files[0], function (response) {
        if (response.success) {
          _this3.reloadImages();
        } else {
          _this3.main.components.dialog.ERROR_UPLOADING_FILE(response.message);
        }
      });
    }
  }, {
    key: "deleteFile",
    value: function deleteFile(fileInfo) {
      var _this4 = this;

      var _fileInfo = _slicedToArray(fileInfo, 2),
          filename = _fileInfo[0],
          url = _fileInfo[1];

      var queryParams = new URL(url, window.location.origin).searchParams;
      this.main.components.server.uploadFile(queryParams.get("placement"), queryParams.get("directory"), filename, "", function (response) {
        if (response.success) {
          _this4.reloadImages();
        } else {
          _this4.main.components.dialog.ERROR_DELETING_FILE(response.message);
        }
      }, true);
    }
  }, {
    key: "renameFile",
    value: function renameFile(fileInfo) {
      var _this5 = this;

      var _fileInfo2 = _slicedToArray(fileInfo, 2),
          filename = _fileInfo2[0],
          url = _fileInfo2[1];

      var queryParams = new URL(url, window.location.origin).searchParams;
      var newFilename = prompt("Enter the new filename for this file:", filename);

      if (newFilename) {
        this.main.components.server.renameFile(queryParams.get("placement"), queryParams.get("directory"), filename, newFilename, function (response) {
          if (response.success) {
            _this5.reloadImages();
          } else {
            _this5.main.components.dialog.ERROR_RENAMING_FILE(response.message);
          }
        });
      }
    }
  }, {
    key: "exit",
    value: function exit(newFilename, oldEditor, newEditor) {
      // Remove subscriber
      this.currentSubscription.dispose();

      _get(_getPrototypeOf(ImageEditorView.prototype), "exit", this).call(this, newFilename, oldEditor); // if (this.filepond) {
      //     this.filepond.destroy();
      // }

    }
  }]);

  return ImageEditorView;
}(_abstract_editor__WEBPACK_IMPORTED_MODULE_0__["AbstractEditor"]);

var ImageEditor = {
  name: "Image",
  extensions: ["images.blockpy"],
  constructor: ImageEditorView,
  template: IMAGE_EDITOR_HTML
};

/***/ }),

/***/ "./src/editor/json.js":
/*!****************************!*\
  !*** ./src/editor/json.js ***!
  \****************************/
/*! exports provided: JSON_EDITOR_HTML, JsonEditor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JSON_EDITOR_HTML", function() { return JSON_EDITOR_HTML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JsonEditor", function() { return JsonEditor; });
/* harmony import */ var _abstract_editor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract_editor */ "./src/editor/abstract_editor.js");
/* harmony import */ var _default_header__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./default_header */ "./src/editor/default_header.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var JSON_EDITOR_HTML = "\n    ".concat(_default_header__WEBPACK_IMPORTED_MODULE_1__["default_header"], "\n     <div>\n        <textarea class=\"blockpy-editor-json\"></textarea>\n    </div>\n");

var JsonEditorView = /*#__PURE__*/function (_AbstractEditor) {
  _inherits(JsonEditorView, _AbstractEditor);

  var _super = _createSuper(JsonEditorView);

  function JsonEditorView(main, tag) {
    var _this;

    _classCallCheck(this, JsonEditorView);

    _this = _super.call(this, main, tag);
    _this.codeMirror = CodeMirror.fromTextArea(tag.find(".blockpy-editor-json")[0], {
      showCursorWhenSelecting: true,
      lineNumbers: true,
      firstLineNumber: 1,
      indentUnit: 4,
      tabSize: 4,
      indentWithTabs: false,
      mode: "json",
      extraKeys: {
        "Tab": "indentMore",
        "Shift-Tab": "indentLess",
        "Esc": function Esc(cm) {
          if (cm.getOption("fullScreen")) {
            cm.setOption("fullScreen", false);
          } else {
            cm.display.input.blur();
          }
        },
        "F11": function F11(cm) {
          cm.setOption("fullScreen", !cm.getOption("fullScreen"));
        }
      }
    });
    _this.dirty = false;
    return _this;
  }

  _createClass(JsonEditorView, [{
    key: "enter",
    value: function enter(newFilename, oldEditor) {
      _get(_getPrototypeOf(JsonEditorView.prototype), "enter", this).call(this, newFilename, oldEditor);

      this.dirty = false;
      this.updateEditor(this.file.handle()); // Subscribe to the relevant File

      this.currentSubscription = this.file.handle.subscribe(this.updateEditor.bind(this)); // Notify relevant file of changes to BM

      this.currentListener = this.updateHandle.bind(this);
      this.codeMirror.on("change", this.currentListener);

      if (oldEditor !== this) {
        // Delay so that everything is rendered
        setTimeout(this.codeMirror.refresh.bind(this.codeMirror), 1);
      } // TODO: update dynamically when changing instructor status


      this.codeMirror.setOption("readOnly", newFilename.startsWith("&") && !this.main.model.display.instructor());
    }
  }, {
    key: "updateEditor",
    value: function updateEditor(newContents) {
      this.dirty = !this.dirty;

      if (this.dirty) {
        this.dirty = true;
        this.codeMirror.setValue(newContents);
        this.codeMirror.refresh();
        this.dirty = false;
      }
    }
  }, {
    key: "updateHandle",
    value: function updateHandle(event) {
      this.dirty = !this.dirty;

      if (this.dirty) {
        this.dirty = true;
        this.file.handle(this.codeMirror.getValue());
        this.dirty = false;
      }
    }
  }, {
    key: "exit",
    value: function exit(newFilename, oldEditor, newEditor) {
      // Remove subscriber
      this.currentSubscription.dispose();
      this.codeMirror.off("change", this.currentListener);
      this.codeMirror.setOption("readOnly", false);

      _get(_getPrototypeOf(JsonEditorView.prototype), "exit", this).call(this, newFilename, oldEditor);
    }
  }]);

  return JsonEditorView;
}(_abstract_editor__WEBPACK_IMPORTED_MODULE_0__["AbstractEditor"]);

var JsonEditor = {
  name: "JSON",
  extensions: [".json"],
  constructor: JsonEditorView,
  template: JSON_EDITOR_HTML
};

/***/ }),

/***/ "./src/editor/markdown.js":
/*!********************************!*\
  !*** ./src/editor/markdown.js ***!
  \********************************/
/*! exports provided: MARKDOWN_EDITOR_HTML, MarkdownEditor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MARKDOWN_EDITOR_HTML", function() { return MARKDOWN_EDITOR_HTML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MarkdownEditor", function() { return MarkdownEditor; });
/* harmony import */ var _abstract_editor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract_editor */ "./src/editor/abstract_editor.js");
/* harmony import */ var _default_header__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./default_header */ "./src/editor/default_header.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var MARKDOWN_EDITOR_HTML = "\n    ".concat(_default_header__WEBPACK_IMPORTED_MODULE_1__["default_header"], "\n    <textarea class=\"blockpy-editor-markdown\"></textarea>    \n");

var MarkdownEditorView = /*#__PURE__*/function (_AbstractEditor) {
  _inherits(MarkdownEditorView, _AbstractEditor);

  var _super = _createSuper(MarkdownEditorView);

  function MarkdownEditorView(main, tag) {
    var _this;

    _classCallCheck(this, MarkdownEditorView);

    _this = _super.call(this, main, tag);
    _this.mde = new EasyMDE({
      element: tag.find(".blockpy-editor-markdown")[0],
      autoDownloadFontAwesome: false,
      forceSync: true,
      minHeight: "300px",
      //scrollbarStyle: "native",
      // TODO: imageUploadFunction
      renderingConfig: {
        codeSyntaxHighlighting: true
      },
      indentWithTabs: false,
      tabSize: 4
    });
    _this.dirty = false;
    return _this;
  }

  _createClass(MarkdownEditorView, [{
    key: "enter",
    value: function enter(newFilename, oldEditor) {
      _get(_getPrototypeOf(MarkdownEditorView.prototype), "enter", this).call(this, newFilename, oldEditor);

      this.dirty = false;
      this.updateEditor(this.file.handle()); // Subscribe to the relevant File

      this.currentSubscription = this.file.handle.subscribe(this.updateEditor.bind(this)); // Notify relevant file of changes to BM

      this.currentListener = this.updateHandle.bind(this);
      this.mde.codemirror.on("change", this.currentListener);

      if (oldEditor !== this) {
        // Delay so that everything is rendered
        setTimeout(this.mde.codemirror.refresh.bind(this.mde.codemirror), 1);
      }
    }
  }, {
    key: "updateEditor",
    value: function updateEditor(newContents) {
      this.dirty = !this.dirty;

      if (this.dirty) {
        this.dirty = true;
        this.mde.value(newContents);
        this.mde.codemirror.refresh();
        this.dirty = false;
      }
    }
  }, {
    key: "updateHandle",
    value: function updateHandle(event) {
      this.dirty = !this.dirty;

      if (this.dirty) {
        this.dirty = true;
        this.file.handle(this.mde.value());
        this.dirty = false;
      }
    }
  }, {
    key: "exit",
    value: function exit(newFilename, oldEditor, newEditor) {
      // Remove subscriber
      this.currentSubscription.dispose();
      this.mde.codemirror.off("change", this.currentListener);

      _get(_getPrototypeOf(MarkdownEditorView.prototype), "exit", this).call(this, newFilename, oldEditor);
    }
  }]);

  return MarkdownEditorView;
}(_abstract_editor__WEBPACK_IMPORTED_MODULE_0__["AbstractEditor"]);

var MarkdownEditor = {
  name: "Markdown",
  extensions: [".md"],
  constructor: MarkdownEditorView,
  template: MARKDOWN_EDITOR_HTML
};

/***/ }),

/***/ "./src/editor/python.js":
/*!******************************!*\
  !*** ./src/editor/python.js ***!
  \******************************/
/*! exports provided: DisplayModes, PYTHON_EDITOR_HTML, PythonEditor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DisplayModes", function() { return DisplayModes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PYTHON_EDITOR_HTML", function() { return PYTHON_EDITOR_HTML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PythonEditor", function() { return PythonEditor; });
/* harmony import */ var _abstract_editor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract_editor */ "./src/editor/abstract_editor.js");
/* harmony import */ var _history__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../history */ "./src/history.js");
/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../interface */ "./src/interface.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * TODO: rename files, manual save, tags, sample_submissions, on_eval, non-builtin files
 * TODO: import data, history, run, url_data, assignment_settings, parsons_mode
 * TODO: delete becomes "clear" for instructor files
 */

/**
 *
 * @enum {str}
 */



var DisplayModes = {
  BLOCK: "block",
  SPLIT: "split",
  TEXT: "text"
};

function makeTab(name, icon, mode) {
  return "<label class=\"btn btn-outline-secondary blockpy-mode-set-blocks\"\n                data-bind=\"css: {active: display.pythonMode() === '".concat(mode, "'},\n                           click: ui.editors.python.updateMode.bind($data, '").concat(mode, "')\">\n                <span class='fas fa-").concat(icon, "'></span>\n                <input type=\"radio\" name=\"blockpy-mode-set\" autocomplete=\"off\" checked> ").concat(name, "\n            </label>");
}

var PYTHON_EDITOR_HTML = "\n\n    <div class=\"blockpy-python-toolbar col-md-12 btn-toolbar\"\n         role=\"toolbar\" aria-label=\"Python Toolbar\">\n\n         <div class=\"btn-group mr-2\" role=\"group\" aria-label=\"Run Group\">         \n            <button type=\"button\" class=\"btn blockpy-run notransition\"\n                data-bind=\"click: ui.execute.run,\n                            css: {'blockpy-run-running': ui.execute.isRunning}\">\n                <span class=\"fas fa-play\"></span> <span data-bind=\"text: ui.execute.runLabel\"></span>\n             </button>\n         </div>\n         \n         <div class=\"btn-group btn-group-toggle mr-2\" data-toggle=\"buttons\">\n            <!-- ko if: $root.assignment.settings.enableBlocks() -->\n            ".concat(makeTab("Blocks", "th-large", DisplayModes.BLOCK), "\n            ").concat(makeTab("Split", "columns", DisplayModes.SPLIT), "\n            ").concat(makeTab("Text", "align-left", DisplayModes.TEXT), "\n            <!-- /ko -->\n         </div>\n\n         <div class=\"btn-group mr-2\" role=\"group\" aria-label=\"Reset Group\">\n             <button type=\"button\" class=\"btn btn-outline-secondary\"\n                 data-bind=\"click: ui.editors.reset\">\n                 <span class=\"fas fa-sync\"></span> Reset\n              </button>\n         </div>\n         \n         <!-- ko if: !assignment.settings.hideImportDatasetsButton() && !ui.smallLayout()-->\n         <div class=\"btn-group mr-2\" role=\"group\" aria-label=\"Import Group\">\n            <button type=\"button\" class=\"btn btn-outline-secondary\"\n                data-bind=\"click: ui.editors.importDataset\">\n                <span class=\"fas fa-cloud-download-alt\"></span> Import datasets\n             </button>\n         </div>\n         <!-- /ko -->\n         \n         <div class=\"btn-group mr-2\" data-bind=\"hidden: ui.smallLayout\">\n                <label class=\"btn btn-outline-secondary\">\n                    <span class=\"fas fa-file-upload\"></span> Upload\n                    <input class=\"blockpy-toolbar-upload\" type=\"file\"\n                        hidden\n                        data-bind=\"event: {change: ui.editors.upload}\">\n                 </label>\n\n                <button type=\"button\" class=\"btn btn-outline-secondary dropdown-toggle dropdown-toggle-split\"\n                    data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                    <span class=\"caret\"></span>\n                    <span class=\"sr-only\">Toggle Dropdown</span>\n                </button>\n                \n                <div class=\"dropdown-menu dropdown-menu-right\">\n                    <a class='dropdown-item blockpy-toolbar-download'\n                        data-bind=\"click: ui.editors.download\">\n                    <span class='fas fa-download'></span> Download\n                    </a>\n                </div>\n            </div>\n         \n         <div class=\"btn-group mr-2\" role=\"group\" aria-label=\"History Group\" data-bind=\"hidden: ui.smallLayout\">\n            <button type=\"button\" class=\"btn btn-outline-secondary\"\n                aria-pressed=\"false\"\n                data-bind=\"click: ui.editors.python.toggleHistoryMode,\n                           enable: ui.editors.python.isHistoryAvailable,\n                           css: { active: display.historyMode },\n                           attr: { 'aria-pressed': display.historyMode }\">\n                <span class=\"fas fa-history\"></span> History\n             </button>\n         </div>\n         \n         <!-- Fully functional, but a little too.. Invasive \n         <div class=\"btn-group mr-2\" role=\"group\" aria-label=\"Fullscreen Group\"\n            data-bind=\"visible: display.pythonMode() === 'text'\">\n            <button type=\"button\" class=\"btn btn-outline-secondary\"\n                data-bind=\"click: ui.editors.python.fullscreen\">\n                <span class=\"fas fa-expand-arrows-alt\"></span> Fullscreen\n             </button>\n         </div>\n         -->\n         \n         <div class=\"btn-group mr-2\" role=\"group\" aria-label=\"Save Group\"\n            data-bind=\"visible: ui.editors.canSave\">\n            <button type=\"button\" class=\"btn btn-outline-secondary\">\n                <span class=\"fas fa-save\"></span> Save\n             </button>\n         </div>\n         \n         <div class=\"btn-group mr-2\" role=\"group\" aria-label=\"Delete Group\"\n            data-bind=\"visible: ui.editors.canDelete\">\n            <button type=\"button\" class=\"btn btn-outline-secondary\",\n                data-bind=\"click: ui.files.delete\">\n                <span class=\"fas fa-trash\"></span> Delete\n             </button>\n         </div>\n         \n         <div class=\"btn-group mr-2\">\n                <button type=\"button\" class=\"btn btn-outline-secondary dropdown-toggle dropdown-toggle-split\"\n                    data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                    <span class=\"fas fa-ellipsis-v\"></span>\n                    <span class=\"sr-only\">Toggle Extra Features</span>\n                </button>\n                \n                <div class=\"dropdown-menu dropdown-menu-right\">\n                    <a class='dropdown-item blockpy-toolbar-run-quietly notransition' role=\"button\"\n                        href=\"\"\n                        data-bind=\"click: ui.execute.runQuietly,\n                                    css: {'blockpy-run-running': ui.execute.isRunning}\">\n                        <span class=\"fas fa-comment-slash\"></span> <span data-bind=\"text: ui.execute.runQuietlyLabel\"></span>\n                    </a>\n                </div>\n            </div>\n         \n         <!--<div class=\"btn-group mr-2\" role=\"group\" aria-label=\"Rename Group\"\n            data-bind=\"visible: ui.editors.canRename\">\n             <button type=\"button\" class=\"btn btn-outline-secondary\">\n                <span class=\"fas fa-file-signature\"></span> Rename\n             </button>\n         </div>-->\n         \n    </div>\n    \n    ").concat(_history__WEBPACK_IMPORTED_MODULE_1__["HISTORY_TOOLBAR_HTML"], "\n\n\n    <div class=\"blockpy-python-blockmirror\"\n        data-bind=\"hidden: ui.menu.isSubmitted\">\n    </div>\n");

function convertIpynbToPython(code) {
  var ipynb = JSON.parse(code);

  var isUsable = function isUsable(cell) {
    if (cell.cell_type === "code") {
      return cell.source.length > 0 && !cell.source[0].startsWith("%");
    } else {
      return cell.cell_type === "markdown" || cell.cell_type === "raw";
    }
  };

  var makePython = function makePython(cell) {
    if (cell.cell_type === "code") {
      return cell.source.join("\n");
    } else if (cell.cell_type === "markdown" || cell.cell_type === "raw") {
      return "'''" + cell.source.join("\n") + "'''";
    }
  };

  return ipynb.cells.filter(isUsable).map(makePython).join("\n");
}

var PythonEditorView = /*#__PURE__*/function (_AbstractEditor) {
  _inherits(PythonEditorView, _AbstractEditor);

  var _super = _createSuper(PythonEditorView);

  function PythonEditorView(main, tag) {
    var _this;

    _classCallCheck(this, PythonEditorView);

    _this = _super.call(this, main, tag.find(".blockpy-python-blockmirror"));
    Blockly.setParentContainer(main.model.configuration.container[0]);
    _this.bm = new BlockMirror({
      "container": _this.tag[0],
      "run": main.components.engine.run.bind(main.components.engine),
      "skipSkulpt": true,
      "blocklyMediaPath": main.model.configuration.blocklyPath,
      "toolbox": main.model.assignment.settings.toolbox(),
      "imageMode": true,
      imageDownloadHook: function imageDownloadHook(oldUrl) {
        return oldUrl;
      },
      imageUploadHook: function imageUploadHook(blob) {
        //const uuid = window.URL.createObjectURL(new Blob([])).substring(31);
        return new Promise(function (resolve, reject) {
          var submissionId = main.model.submission.id();
          main.components.server.uploadFile("submission", submissionId, blob.name, blob, function (response) {
            resolve(JSON.stringify(response.endpoint)); //resolve(JSON.stringify(main.model.configuration.urls["downloadFile"] + `?placement=submission&directory=${submissionId}&filename=${blob.name}`));
          }); //return Promise.resolve("Image("+JSON.stringify(URL.createObjectURL(blob))+")");
          //return Promise.resolve(JSON.stringify(URL.createObjectURL(blob)));
        });
      },
      imageLiteralHook: function imageLiteralHook(oldUrl) {
        //return `Image("${oldUrl}")`;
        return "\"".concat(oldUrl, "\"");
      } //'height': '2000px'

    }); // TODO: Prevent INS and OVR mode (... this.bm.textEditor.codeMirror.

    _this.dirty = false;
    _this.readOnly = false;

    _this.makeSubscriptions();

    _this.lineErrorSubscription = null;
    _this.lineUncoveredSubscription = null;
    _this.lineTraceSubscription = null;
    _this.oldPythonMode = _this.main.model.display.pythonMode();

    _this.makePerAssignmentSubscriptions();

    return _this;
  }

  _createClass(PythonEditorView, [{
    key: "configureExtraBlockly",
    value: function configureExtraBlockly() {
      var _this2 = this;

      this.bm.blockEditor.workspace.configureContextMenu = function (options) {
        options.push({
          enabled: true,
          text: "Screenshot",
          callback: function callback() {
            return _this2.main.components.dialog.SCREENSHOT_BLOCKS;
          }
        });
      };
    }
  }, {
    key: "enter",
    value: function enter(newFilename, oldEditor) {
      var _this3 = this;

      var oldFilename = this.filename;

      _get(_getPrototypeOf(PythonEditorView.prototype), "enter", this).call(this, newFilename, oldEditor);

      this.dirty = false;

      if (newFilename !== "answer.py") {
        if (oldFilename === "answer.py") {
          this.oldPythonMode = this.main.model.display.pythonMode();
        }

        this.main.model.display.pythonMode(DisplayModes.TEXT);
      } else {
        this.main.model.display.pythonMode(this.oldPythonMode);
      }

      this.updateEditor(this.file.handle()); // Subscribe to the relevant File

      this.currentSubscription = this.file.handle.subscribe(this.updateEditor.bind(this)); // Notify relevant file of changes to BM

      this.currentBMListener = this.updateHandle.bind(this);
      this.bm.addChangeListener(this.currentBMListener);

      if (newFilename !== "answer.py") {
        this.bm.isParsons = function () {
          return false;
        };
      } else {
        this.bm.isParsons = this.main.model.assignment.settings.isParsons;
        this.lineErrorSubscription = this.main.model.execution.feedback.linesError.subscribe(function (lines) {
          return _this3.bm.setHighlightedLines(lines, "editor-error-line");
        });
        this.lineUncoveredSubscription = this.main.model.execution.feedback.linesUncovered.subscribe(function (lines) {
          return _this3.bm.setHighlightedLines(lines, "editor-uncovered-line");
        });
        this.lineTraceSubscription = this.main.model.ui.trace.highlightedLine.subscribe(function (lines) {
          _this3.bm.clearHighlightedLines("editor-traced-line");

          _this3.bm.setHighlightedLines(lines, "editor-traced-line");
        });
      } //this.bm.blockEditor.workspace.render();
      //this.bm.refresh();
      // TODO: Figure out why this doesn't end up looking right (go to a different editor, come back, and it'll be squished)
      //this.bm.refresh();


      setTimeout(function () {
        return _this3.bm.refresh();
      }, 0);
    }
  }, {
    key: "updateEditor",
    value: function updateEditor(newContents) {
      if (newContents === undefined) {
        if (this.file !== null) {
          newContents = this.file.handle();
        } else {
          // Doesn't matter, file was already shut down.
          newContents = "";
        }
      } else if (newContents === null) {
        // We're closing this file
        this.main.components.fileSystem.deleteFileLocally_(this.filename);
        return;
      }

      this.dirty = !this.dirty;

      if (this.dirty) {
        this.dirty = true;
        this.bm.setCode(newContents); // Delay so that everything is rendered

        this.dirty = false;
      }
    }
  }, {
    key: "updateHandle",
    value: function updateHandle(event) {
      this.bm.clearHighlightedLines();
      this.dirty = !this.dirty;

      if (this.dirty) {
        this.dirty = true;

        if (!this.main.model.display.historyMode()) {
          this.file.handle(this.bm.getCode());
        }

        this.dirty = false;
      }
    }
  }, {
    key: "exit",
    value: function exit(newFilename, oldEditor, newEditor) {
      // Remove subscriber
      this.dirty = false;
      this.currentSubscription.dispose();
      this.bm.removeChangeListener(this.currentBMListener);

      if (this.main.model.display.historyMode()) {
        this.main.model.ui.editors.python.turnOffHistoryMode();
      }

      this.clearLineSubscriptions();

      _get(_getPrototypeOf(PythonEditorView.prototype), "exit", this).call(this, newFilename, oldEditor);
    }
  }, {
    key: "clearLineSubscriptions",
    value: function clearLineSubscriptions() {
      this.bm.clearHighlightedLines();

      if (this.lineErrorSubscription) {
        this.lineErrorSubscription.dispose();
        this.lineErrorSubscription = null;
      }

      if (this.lineUncoveredSubscription) {
        this.lineUncoveredSubscription.dispose();
        this.lineUncoveredSubscription = null;
      }

      if (this.lineTraceSubscription) {
        this.lineTraceSubscription.dispose();
        this.lineTraceSubscription = null;
      }
    }
  }, {
    key: "makeSubscriptions",
    value: function makeSubscriptions() {
      var _this4 = this;

      this.bm.setMode(this.main.model.display.pythonMode());
      this.main.model.display.pythonMode.subscribe(function (mode) {
        _this4.bm.setMode(mode);
      });
      this.main.model.assignment.settings.enableBlocks.subscribe(function (enabled) {
        if (!enabled) {
          _this4.bm.setMode(DisplayModes.TEXT);
        } else {
          _this4.bm.setMode(_this4.main.model.display.pythonMode());
        }
      });
      this.main.model.assignment.settings.toolbox.subscribe(this.reloadToolbox.bind(this));
      this.main.model.assignment.settings.enableImages.subscribe(function (imageMode) {
        _this4.bm.setImageMode(imageMode);
      }); // Small Layout Stuff

      this.oldHeight = null;

      if (this.main.model.ui.smallLayout()) {
        this.useSmallLayout();
      }

      this.main.model.ui.smallLayout.subscribe(function (useSmallLayout) {
        if (useSmallLayout) {
          _this4.useSmallLayout();
        } else if (_this4.oldHeight !== null) {
          _this4.bm.configuration.height = _this4.oldHeight;

          _this4.bm.textEditor.resizeResponsively();

          _this4.oldHeight = null;
        }
      });
    }
  }, {
    key: "useSmallLayout",
    value: function useSmallLayout() {
      this.bm.textEditor.updateGutter({
        indentSidebar: false
      });
      this.oldHeight = this.bm.configuration.height;
      this.bm.configuration.height = 300; // TODO: Parameterize this

      this.bm.textEditor.resizeResponsively();
    }
  }, {
    key: "reloadToolbox",
    value: function reloadToolbox(toolbox) {
      if (toolbox === "custom") {
        var customToolbox = this.main.components.fileSystem.getFile("?toolbox.blockpy");

        if (customToolbox == null) {
          toolbox = "empty";
        } else {
          try {
            toolbox = JSON.parse(customToolbox.handle());
          } catch (e) {
            console.error(e); // TODO: Improve error message for instructor

            toolbox = "minimal";
          }
        }
      }

      this.bm.configuration.toolbox = toolbox; // TODO: Handle invalid toolbox better

      try {
        this.bm.blockEditor.remakeToolbox();
      } catch (e) {
        console.error(e);
        this.bm.configuration.toolbox = "empty";
        this.bm.blockEditor.remakeToolbox();
      }
    }
  }, {
    key: "makePerAssignmentSubscriptions",
    value: function makePerAssignmentSubscriptions() {
      var _this5 = this;

      this.main.model.display.instructor.subscribe(function (changed) {
        _this5.setReadOnly(_this5.decideIfNotEditable());
      });
      this.main.model.assignment.settings.onlyUploads.subscribe(function (changed) {
        _this5.setReadOnly(_this5.decideIfNotEditable());
      });
      this.main.model.configuration.partId.subscribe(function (changed) {// TODO: Handle part id changing after everything is loaded
      });
    }
  }, {
    key: "decideIfNotEditable",
    value: function decideIfNotEditable() {
      var model = this.main.model;
      return model.display.historyMode() || model.assignment.settings.onlyUploads() && !model.display.instructor();
    }
  }, {
    key: "setReadOnly",
    value: function setReadOnly(isReadOnly) {
      this.readOnly = isReadOnly;
      this.bm.setReadOnly(isReadOnly);
    }
  }, {
    key: "uploadFile",
    value: function uploadFile(event) {
      var filename = event.target.fileName;
      var code = event.target.result;

      if (filename.endsWith(".ipynb")) {
        code = convertIpynbToPython(code);
      }

      this.main.components.server.logEvent("X-File.Upload", "", "", code, this.filename);
      this.file.handle(code);
      this.main.components.engine.run(); // TODO: Run code
    }
  }, {
    key: "downloadFile",
    value: function downloadFile() {
      var result = _get(_getPrototypeOf(PythonEditorView.prototype), "downloadFile", this).call(this);

      if (result.name === "answer" && result.extension === ".py") {
        result.name = Object(_abstract_editor__WEBPACK_IMPORTED_MODULE_0__["sluggify"])(this.main.model.assignment.name());
      }

      result.mimetype = "text/x-python";
      this.main.components.server.logEvent("X-File.Download", "", "", "", result.name);
      return result;
    }
  }]);

  return PythonEditorView;
}(_abstract_editor__WEBPACK_IMPORTED_MODULE_0__["AbstractEditor"]);

var PythonEditor = {
  name: "Python",
  extensions: [".py", ".reading"],
  constructor: PythonEditorView,
  template: PYTHON_EDITOR_HTML
};

/***/ }),

/***/ "./src/editor/quiz.js":
/*!****************************!*\
  !*** ./src/editor/quiz.js ***!
  \****************************/
/*! exports provided: QUIZ_EDITOR_HTML, QuizEditor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QUIZ_EDITOR_HTML", function() { return QUIZ_EDITOR_HTML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuizEditor", function() { return QuizEditor; });
/* harmony import */ var _abstract_editor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract_editor */ "./src/editor/abstract_editor.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var QUIZ_EDITOR_HTML = "\n    <div>\n    <textarea class=\"blockpy-editor-quiz\"></textarea>\n    </div>\n";

var QuizEditorView = /*#__PURE__*/function (_AbstractEditor) {
  _inherits(QuizEditorView, _AbstractEditor);

  var _super = _createSuper(QuizEditorView);

  function QuizEditorView(main, tag) {
    var _this;

    _classCallCheck(this, QuizEditorView);

    _this = _super.call(this, main, tag);
    _this.codeMirror = CodeMirror.fromTextArea(tag.find(".blockpy-editor-quiz")[0], {
      showCursorWhenSelecting: true,
      lineNumbers: true,
      firstLineNumber: 1,
      indentUnit: 4,
      tabSize: 4,
      indentWithTabs: false,
      extraKeys: {
        "Tab": "indentMore",
        "Shift-Tab": "indentLess",
        "Esc": function Esc(cm) {
          if (cm.getOption("fullScreen")) {
            cm.setOption("fullScreen", false);
          } else {
            cm.display.input.blur();
          }
        },
        "F11": function F11(cm) {
          cm.setOption("fullScreen", !cm.getOption("fullScreen"));
        }
      }
    });
    _this.dirty = false;
    return _this;
  }

  _createClass(QuizEditorView, [{
    key: "enter",
    value: function enter(newFilename, oldEditor) {
      _get(_getPrototypeOf(QuizEditorView.prototype), "enter", this).call(this, newFilename, oldEditor);

      this.dirty = false;
      this.updateEditor(this.file.handle()); // Subscribe to the relevant File

      this.currentSubscription = this.file.handle.subscribe(this.updateEditor.bind(this)); // Notify relevant file of changes to BM

      this.currentListener = this.updateHandle.bind(this);
      this.codeMirror.on("change", this.currentListener);

      if (oldEditor !== this) {
        // Delay so that everything is rendered
        setTimeout(this.codeMirror.refresh.bind(this.codeMirror), 1);
      } // TODO: update dynamically when changing instructor status


      this.codeMirror.setOption("readOnly", newFilename.startsWith("&") && !this.main.model.display.instructor());
    }
  }, {
    key: "updateEditor",
    value: function updateEditor(newContents) {
      this.dirty = !this.dirty;

      if (this.dirty) {
        this.dirty = true;
        this.codeMirror.setValue(newContents);
        this.codeMirror.refresh();
        this.dirty = false;
      }
    }
  }, {
    key: "updateHandle",
    value: function updateHandle(event) {
      this.dirty = !this.dirty;

      if (this.dirty) {
        this.dirty = true;
        this.file.handle(this.codeMirror.getValue());
        this.dirty = false;
      }
    }
  }, {
    key: "exit",
    value: function exit(newFilename, oldEditor, newEditor) {
      // Remove subscriber
      this.currentSubscription.dispose();
      this.codeMirror.off("change", this.currentListener);
      this.codeMirror.setOption("readOnly", false);

      _get(_getPrototypeOf(QuizEditorView.prototype), "exit", this).call(this, newFilename, oldEditor);
    }
  }]);

  return QuizEditorView;
}(_abstract_editor__WEBPACK_IMPORTED_MODULE_0__["AbstractEditor"]);

var QuizEditor = {
  name: "Quiz",
  extensions: [".quiz"],
  constructor: QuizEditorView,
  template: QUIZ_EDITOR_HTML
};

/***/ }),

/***/ "./src/editor/sample_submissions.js":
/*!******************************************!*\
  !*** ./src/editor/sample_submissions.js ***!
  \******************************************/
/*! exports provided: SubmissionStatuses, SampleSubmission, SAMPLE_SUBMISSIONS_HTML, SampleSubmissions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(ko) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubmissionStatuses", function() { return SubmissionStatuses; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SampleSubmission", function() { return SampleSubmission; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SAMPLE_SUBMISSIONS_HTML", function() { return SAMPLE_SUBMISSIONS_HTML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SampleSubmissions", function() { return SampleSubmissions; });
/* harmony import */ var _abstract_editor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract_editor */ "./src/editor/abstract_editor.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Panel for editing the set of Sample Submissions.
 * These are not provided at all to students without the Grader role.
 */

var SubmissionStatuses = {
  UNKNOWN: "unknown",
  PASSED: "passed",
  FAILED: "failed",
  ERROR: "error",
  SKIPPED: "skipped"
};
var SampleSubmission = /*#__PURE__*/function () {
  function SampleSubmission(name, status, code) {
    _classCallCheck(this, SampleSubmission);

    this.name = name;
    this.status = status;
    this.code = code;
  }

  _createClass(SampleSubmission, [{
    key: "serialize",
    value: function serialize() {
      return {
        name: this.name,
        status: this.status,
        code: this.code
      };
    }
  }], [{
    key: "Blank",
    value: function Blank(count) {
      return new SampleSubmission("Untitled" + (count || 1), SubmissionStatuses.UNKNOWN, "a=0");
    }
  }, {
    key: "deserialize",
    value: function deserialize(data) {
      return new SampleSubmission(data.name, data.status, data.code);
    }
  }]);

  return SampleSubmission;
}();
var SAMPLE_SUBMISSIONS_HTML = "\n<div>\n    <div data-bind=\"foreach: {data: assignment.sampleSubmissions}\"\n        class=\"row\">\n        <div class=\"col-md-6\">\n            <span data-bind=\"text: name\"></span>\n            <textarea class=\"blockpy-editor-sample-submissions-code\"\n                data-bind=\"codeMirrorInstance: code\"></textarea>\n        </div>\n        <div class=\"col-md-6\">\n            <span data-bind=\"text: status\"></span>        \n        </div>\n    </div>\n</div>\n";
ko.bindingHandlers.codeMirrorInstance = {
  init: function init(element, valueAccessor, allBindings, viewModel, bindingContext) {
    // This will be called when the binding is first applied to an element
    // Set up any initial state, event handlers, etc. here
    console.log("INIT");
    var cm = CodeMirror.fromTextArea(element, {
      showCursorWhenSelecting: true,
      lineNumbers: true,
      firstLineNumber: 1,
      indentUnit: 4,
      tabSize: 4,
      indentWithTabs: false,
      extraKeys: {
        "Tab": "indentMore",
        "Shift-Tab": "indentLess",
        "Esc": function Esc(cm) {
          if (cm.getOption("fullScreen")) {
            cm.setOption("fullScreen", false);
          } else {
            cm.display.input.blur();
          }
        },
        "F11": function F11(cm) {
          cm.setOption("fullScreen", !cm.getOption("fullScreen"));
        }
      }
    });
    cm.setSize("100%", "100px");
    return cm;
  },
  update: function update(element, valueAccessor, allBindings, viewModel, bindingContext) {
    // This will be called once when the binding is first applied to an element,
    // and again whenever any observables/computeds that are accessed change
    // Update the DOM element based on the supplied values here.
    console.log("UPDATE");
  }
};

var SampleSubmissionsView = /*#__PURE__*/function (_AbstractEditor) {
  _inherits(SampleSubmissionsView, _AbstractEditor);

  var _super = _createSuper(SampleSubmissionsView);

  function SampleSubmissionsView(main, tag) {
    var _this;

    _classCallCheck(this, SampleSubmissionsView);

    _this = _super.call(this, main, tag);
    _this.tag = tag;
    _this.codeMirrors = [];
    _this.dirty = false;
    return _this;
  }

  _createClass(SampleSubmissionsView, [{
    key: "buildEditor",
    value: function buildEditor(newDOM, index, newElement) {}
  }, {
    key: "rebuildEditors",
    value: function rebuildEditors() {
      console.log("Rebuilding editors");
    }
  }, {
    key: "enter",
    value: function enter(newFilename, oldEditor) {
      var _this2 = this;

      _get(_getPrototypeOf(SampleSubmissionsView.prototype), "enter", this).call(this, newFilename, oldEditor);

      this.dirty = false;
      this.updateEditor(this.file.handle()); // Subscribe to the relevant File

      this.currentSubscription = this.file.handle.subscribe(this.updateEditor.bind(this)); // Notify relevant file of changes to BM

      this.currentListener = this.updateHandle.bind(this); //this.rebuildEditors();
      //this.codeMirror.on("change", this.currentListener);

      if (oldEditor !== this) {
        console.log(this.tag);
        console.log(this.tag.find(".CodeMirror"));
        console.log(this.tag.find(".CodeMirror").map(function (i, cm) {
          return console.log("+++", cm.CodeMirror);
        }));
        this.tag.find(".CodeMirror").map(function (i, cm) {
          return cm.CodeMirror.refresh();
        });
        console.log("REFRESH"); // Delay so that everything is rendered

        setTimeout(function () {
          return _this2.tag.find(".CodeMirror").map(function (i, cm) {
            return cm.CodeMirror.refresh();
          });
        }, 1);
      } // TODO: update dynamically when changing instructor status
      //this.codeMirror.setOption("readOnly", newFilename.startsWith("&") && !this.main.model.display.instructor());

    }
  }, {
    key: "updateEditor",
    value: function updateEditor(newContents) {
      this.dirty = !this.dirty;

      if (this.dirty) {
        this.dirty = true;
        console.log(this.codeMirrors); //this.codeMirrors.each( (i, cm) => cm.setValue(newContents.join("\n")));
        //this.codeMirrors.each( (i, cm) => cm.refresh());

        this.dirty = false;
      }
    }
  }, {
    key: "updateHandle",
    value: function updateHandle(event) {
      this.dirty = !this.dirty;

      if (this.dirty) {
        this.dirty = true;
        this.file.handle(this.codeMirrors.map(function (cm) {
          return cm.getValue();
        }));
        this.dirty = false;
      }
    }
  }, {
    key: "exit",
    value: function exit(newFilename, oldEditor, newEditor) {
      // Remove subscriber
      this.currentSubscription.dispose();
      this.codeMirrors = []; //this.codeMirrors.off("change", this.currentListener);
      //this.codeMirror.setOption("readOnly", false);

      _get(_getPrototypeOf(SampleSubmissionsView.prototype), "exit", this).call(this, newFilename, oldEditor);
    }
  }]);

  return SampleSubmissionsView;
}(_abstract_editor__WEBPACK_IMPORTED_MODULE_0__["AbstractEditor"]);

var SampleSubmissions = {
  name: "Sample Submissions",
  extensions: ["!sample_submissions.blockpy"],
  constructor: SampleSubmissionsView,
  template: SAMPLE_SUBMISSIONS_HTML
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! knockout */ "knockout")))

/***/ }),

/***/ "./src/editor/tags.js":
/*!****************************!*\
  !*** ./src/editor/tags.js ***!
  \****************************/
/*! exports provided: TAGS_EDITOR_HTML, TagsEditor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TAGS_EDITOR_HTML", function() { return TAGS_EDITOR_HTML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TagsEditor", function() { return TagsEditor; });
/* harmony import */ var _abstract_editor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract_editor */ "./src/editor/abstract_editor.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var TAGS_EDITOR_HTML = "\nCreate new\nImport by name\nFind by owner/course/kind\n\nTags:\n    Data:\n        Name\n        Kind\n        Level\n        Version\n        Description\n    Controls:\n        Edit\n        Remove\n        Delete \n";

var TagsEditorView = /*#__PURE__*/function (_AbstractEditor) {
  _inherits(TagsEditorView, _AbstractEditor);

  var _super = _createSuper(TagsEditorView);

  function TagsEditorView(main, tag) {
    _classCallCheck(this, TagsEditorView);

    return _super.call(this, main, tag.find(".blockpy-editor-tags"));
  }

  return TagsEditorView;
}(_abstract_editor__WEBPACK_IMPORTED_MODULE_0__["AbstractEditor"]);

var TagsEditor = {
  name: "Tags",
  extensions: ["!tags.blockpy"],
  constructor: TagsEditorView,
  template: TAGS_EDITOR_HTML
};

/***/ }),

/***/ "./src/editor/text.js":
/*!****************************!*\
  !*** ./src/editor/text.js ***!
  \****************************/
/*! exports provided: TEXT_EDITOR_HTML, TextEditor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TEXT_EDITOR_HTML", function() { return TEXT_EDITOR_HTML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextEditor", function() { return TextEditor; });
/* harmony import */ var _abstract_editor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract_editor */ "./src/editor/abstract_editor.js");
/* harmony import */ var _default_header__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./default_header */ "./src/editor/default_header.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var TEXT_EDITOR_HTML = "\n    ".concat(_default_header__WEBPACK_IMPORTED_MODULE_1__["default_header"], "\n    <div>\n    <textarea class=\"blockpy-editor-text\"></textarea>\n    </div>\n");

var TextEditorView = /*#__PURE__*/function (_AbstractEditor) {
  _inherits(TextEditorView, _AbstractEditor);

  var _super = _createSuper(TextEditorView);

  function TextEditorView(main, tag) {
    var _this;

    _classCallCheck(this, TextEditorView);

    _this = _super.call(this, main, tag);
    _this.codeMirror = CodeMirror.fromTextArea(tag.find(".blockpy-editor-text")[0], {
      showCursorWhenSelecting: true,
      lineNumbers: true,
      firstLineNumber: 1,
      indentUnit: 4,
      tabSize: 4,
      indentWithTabs: false,
      extraKeys: {
        "Tab": "indentMore",
        "Shift-Tab": "indentLess",
        "Esc": function Esc(cm) {
          if (cm.getOption("fullScreen")) {
            cm.setOption("fullScreen", false);
          } else {
            cm.display.input.blur();
          }
        },
        "F11": function F11(cm) {
          cm.setOption("fullScreen", !cm.getOption("fullScreen"));
        }
      }
    });
    _this.dirty = false;
    return _this;
  }

  _createClass(TextEditorView, [{
    key: "enter",
    value: function enter(newFilename, oldEditor) {
      _get(_getPrototypeOf(TextEditorView.prototype), "enter", this).call(this, newFilename, oldEditor);

      this.dirty = false;
      this.updateEditor(this.file.handle()); // Subscribe to the relevant File

      this.currentSubscription = this.file.handle.subscribe(this.updateEditor.bind(this)); // Notify relevant file of changes to BM

      this.currentListener = this.updateHandle.bind(this);
      this.codeMirror.on("change", this.currentListener);

      if (oldEditor !== this) {
        // Delay so that everything is rendered
        setTimeout(this.codeMirror.refresh.bind(this.codeMirror), 1);
      } // TODO: update dynamically when changing instructor status


      this.codeMirror.setOption("readOnly", newFilename.startsWith("&") && !this.main.model.display.instructor());
    }
  }, {
    key: "updateEditor",
    value: function updateEditor(newContents) {
      this.dirty = !this.dirty;

      if (this.dirty) {
        this.dirty = true;
        this.codeMirror.setValue(newContents);
        this.codeMirror.refresh();
        this.dirty = false;
      }
    }
  }, {
    key: "updateHandle",
    value: function updateHandle(event) {
      this.dirty = !this.dirty;

      if (this.dirty) {
        this.dirty = true;
        this.file.handle(this.codeMirror.getValue());
        this.dirty = false;
      }
    }
  }, {
    key: "exit",
    value: function exit(newFilename, oldEditor, newEditor) {
      // Remove subscriber
      this.currentSubscription.dispose();
      this.codeMirror.off("change", this.currentListener);
      this.codeMirror.setOption("readOnly", false);

      _get(_getPrototypeOf(TextEditorView.prototype), "exit", this).call(this, newFilename, oldEditor);
    }
  }]);

  return TextEditorView;
}(_abstract_editor__WEBPACK_IMPORTED_MODULE_0__["AbstractEditor"]);

var TextEditor = {
  name: "Text",
  extensions: [".txt"],
  constructor: TextEditorView,
  template: TEXT_EDITOR_HTML
};

/***/ }),

/***/ "./src/editor/toolbox.js":
/*!*******************************!*\
  !*** ./src/editor/toolbox.js ***!
  \*******************************/
/*! exports provided: TOOLBOX_EDITOR_HTML, ToolboxEditor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOOLBOX_EDITOR_HTML", function() { return TOOLBOX_EDITOR_HTML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ToolboxEditor", function() { return ToolboxEditor; });
/* harmony import */ var _abstract_editor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract_editor */ "./src/editor/abstract_editor.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var TOOLBOX_EDITOR_HTML = "\n    <div>\n        <div class=\"col-md-12\"\n         role=\"toolbar\" aria-label=\"Toolbox Toolbar\">\n             <div class=\"btn-group mr-2\" role=\"group\" aria-label=\"Save Group\">         \n                <button type=\"button\" class=\"btn btn-outline-secondary btn-editor-json-save\">\n                    <span class=\"fas fa-save\"></span> Save\n                 </button>\n             </div>\n         </div>\n        <textarea class=\"blockpy-editor-toolbox\"></textarea>\n    </div>\n";

var ToolboxEditorView = /*#__PURE__*/function (_AbstractEditor) {
  _inherits(ToolboxEditorView, _AbstractEditor);

  var _super = _createSuper(ToolboxEditorView);

  function ToolboxEditorView(main, tag) {
    var _this;

    _classCallCheck(this, ToolboxEditorView);

    _this = _super.call(this, main, tag);
    _this.codeMirror = CodeMirror.fromTextArea(tag.find(".blockpy-editor-toolbox")[0], {
      showCursorWhenSelecting: true,
      lineNumbers: true,
      firstLineNumber: 1,
      indentUnit: 4,
      tabSize: 4,
      indentWithTabs: false,
      mode: "json",
      extraKeys: {
        "Tab": "indentMore",
        "Shift-Tab": "indentLess",
        "Esc": function Esc(cm) {
          if (cm.getOption("fullScreen")) {
            cm.setOption("fullScreen", false);
          } else {
            cm.display.input.blur();
          }
        },
        "F11": function F11(cm) {
          cm.setOption("fullScreen", !cm.getOption("fullScreen"));
        }
      }
    });
    _this.dirty = false;
    return _this;
  }

  _createClass(ToolboxEditorView, [{
    key: "enter",
    value: function enter(newFilename, oldEditor) {
      _get(_getPrototypeOf(ToolboxEditorView.prototype), "enter", this).call(this, newFilename, oldEditor);

      this.dirty = false;
      this.updateEditor(this.file.handle()); // Subscribe to the relevant File

      this.currentSubscription = this.file.handle.subscribe(this.updateEditor.bind(this)); // Notify relevant file of changes to BM

      this.currentListener = this.updateHandle.bind(this);
      this.tag.find(".btn-editor-json-save").on("click", this.currentListener); //this.codeMirror.on("change", this.currentListener);

      if (oldEditor !== this) {
        // Delay so that everything is rendered
        setTimeout(this.codeMirror.refresh.bind(this.codeMirror), 1);
      } // TODO: update dynamically when changing instructor status


      this.codeMirror.setOption("readOnly", newFilename.startsWith("&") && !this.main.model.display.instructor());
    }
  }, {
    key: "updateEditor",
    value: function updateEditor(newContents) {
      this.dirty = !this.dirty;

      if (this.dirty) {
        this.dirty = true;
        this.codeMirror.setValue(newContents);
        this.codeMirror.refresh();
        this.dirty = false;
      }
    }
  }, {
    key: "updateHandle",
    value: function updateHandle(event) {
      this.dirty = !this.dirty;

      if (this.dirty) {
        this.dirty = true;
        this.file.handle(this.codeMirror.getValue());

        if (this.main.model.assignment.settings.toolbox() === "custom") {
          this.main.components.pythonEditor.reloadToolbox("custom");
        }

        this.dirty = false;
      }
    }
  }, {
    key: "exit",
    value: function exit(newFilename, oldEditor, newEditor) {
      // Remove subscriber
      this.currentSubscription.dispose();
      this.tag.find(".btn-editor-toolbox-save").off("click", this.currentListener); //this.codeMirror.off("change", this.currentListener);

      this.codeMirror.setOption("readOnly", false);

      _get(_getPrototypeOf(ToolboxEditorView.prototype), "exit", this).call(this, newFilename, oldEditor);
    }
  }]);

  return ToolboxEditorView;
}(_abstract_editor__WEBPACK_IMPORTED_MODULE_0__["AbstractEditor"]);

var ToolboxEditor = {
  name: "Toolbox",
  extensions: ["?toolbox.blockpy"],
  constructor: ToolboxEditorView,
  template: TOOLBOX_EDITOR_HTML
};

/***/ }),

/***/ "./src/editors.js":
/*!************************!*\
  !*** ./src/editors.js ***!
  \************************/
/*! exports provided: EditorsEnum, EDITORS_HTML, Editors */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditorsEnum", function() { return EditorsEnum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EDITORS_HTML", function() { return EDITORS_HTML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Editors", function() { return Editors; });
/* harmony import */ var _editor_python__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./editor/python */ "./src/editor/python.js");
/* harmony import */ var _editor_text__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./editor/text */ "./src/editor/text.js");
/* harmony import */ var _editor_assignment_settings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./editor/assignment_settings */ "./src/editor/assignment_settings.js");
/* harmony import */ var _editor_tags__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./editor/tags */ "./src/editor/tags.js");
/* harmony import */ var _editor_markdown__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./editor/markdown */ "./src/editor/markdown.js");
/* harmony import */ var _editor_sample_submissions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./editor/sample_submissions */ "./src/editor/sample_submissions.js");
/* harmony import */ var _editor_json__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./editor/json */ "./src/editor/json.js");
/* harmony import */ var _editor_toolbox__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./editor/toolbox */ "./src/editor/toolbox.js");
/* harmony import */ var _editor_quiz__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./editor/quiz */ "./src/editor/quiz.js");
/* harmony import */ var _editor_images__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./editor/images */ "./src/editor/images.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Editors are inferred from Filenames.
 *
 * The editor is based on the extension:
 *  .blockpy: Special editor (will be chosen by filename)
 *  .py: Python Editor
 *  .md: Markdown Editor
 *  .txt: Text Editor (also used for other types)
 *  .peml: PEML Editor
 *  .png, .gif, .jpeg, .jpg, .bmp: Image Editor
 *  .json: JSON Editor
 *  .yaml: YAML Editor
 */










/**
 * The different possible editors available
 * @enum {string}
 */

var EditorsEnum = {
  SUBMISSION: "submission",
  ASSIGNMENT: "assignment",
  INSTRUCTIONS: "instructions",
  ON_RUN: "on_run",
  ON_CHANGE: "on_change",
  ON_EVAL: "on_eval",
  STARTING_CODE: "starting_code",
  SAMPLE_SUBMISSIONS: "sample_submissions",
  INSTRUCTOR_FILE: "instructor_file"
};
var SPECIAL_NAMESPACES = ["!", "^", "?", "$"];
var AVAILABLE_EDITORS = [_editor_text__WEBPACK_IMPORTED_MODULE_1__["TextEditor"], _editor_python__WEBPACK_IMPORTED_MODULE_0__["PythonEditor"], _editor_assignment_settings__WEBPACK_IMPORTED_MODULE_2__["AssignmentSettings"], _editor_tags__WEBPACK_IMPORTED_MODULE_3__["TagsEditor"], _editor_markdown__WEBPACK_IMPORTED_MODULE_4__["MarkdownEditor"], _editor_sample_submissions__WEBPACK_IMPORTED_MODULE_5__["SampleSubmissions"], _editor_json__WEBPACK_IMPORTED_MODULE_6__["JsonEditor"], _editor_toolbox__WEBPACK_IMPORTED_MODULE_7__["ToolboxEditor"], _editor_quiz__WEBPACK_IMPORTED_MODULE_8__["QuizEditor"], _editor_images__WEBPACK_IMPORTED_MODULE_9__["ImageEditor"]];
var EDITORS_HTML = AVAILABLE_EDITORS.map(function (editor) {
  return "\n<div class=\"blockpy-panel blockpy-editor\" \n     data-bind=\"visible: ui.editors.view().name === '".concat(editor.name, "', class: ui.editors.width\">\n    <div>\n    ").concat(editor.template, "\n    </div>\n</div>\n");
}
/*
`
<!-- ko if: ui.editors.view().name === '${editor.name}' -->
${editor.template}
<!-- /ko -->`*/
).join("\n");
var Editors = /*#__PURE__*/function () {
  function Editors(main, tag) {
    var _this = this;

    _classCallCheck(this, Editors);

    this.main = main;
    this.tag = tag;
    this.current = null;
    this.registered_ = [];
    this.extensions_ = {};
    this.byName_ = {};
    AVAILABLE_EDITORS.forEach(function (editor) {
      return _this.registerEditor(editor);
    });
    this.main.model.display.filename.subscribe(this.changeEditor, this);
  }

  _createClass(Editors, [{
    key: "registerEditor",
    value: function registerEditor(data) {
      var extensions = data.extensions;
      var instance = new data.constructor(this.main, this.tag);
      instance.name = data.name;
      this.registered_.push(instance);
      this.byName_[data.name.toLowerCase()] = instance;

      for (var i = 0; i < extensions.length; i++) {
        this.extensions_[extensions[i]] = instance;
      }
    }
  }, {
    key: "byName",
    value: function byName(name) {
      return this.byName_[name.toLowerCase()];
    }
  }, {
    key: "changeEditor",
    value: function changeEditor(newFilename) {
      var oldEditor = this.current;
      var newEditor = this.getEditor(newFilename, oldEditor);

      if (oldEditor !== null) {
        oldEditor.exit(newFilename, oldEditor, newEditor);
      }

      this.current = newEditor;
      this.current.enter(newFilename, oldEditor);
    }
  }, {
    key: "getEditor",
    value: function getEditor(path) {
      var _Editors$parseFilenam = Editors.parseFilename(path),
          space = _Editors$parseFilenam.space,
          name = _Editors$parseFilenam.name,
          type = _Editors$parseFilenam.type;

      if (type === ".blockpy" && path in this.extensions_) {
        return this.extensions_[path];
      }

      var assignmentType = this.main.model.assignment.type();

      if (assignmentType !== _editor_assignment_settings__WEBPACK_IMPORTED_MODULE_2__["AssigmentType"].BLOCKPY) {
        if (name === "answer" && type === ".py") {
          if ("." + assignmentType in this.extensions_) {
            return this.extensions_["." + assignmentType];
          } else {
            console.error("No editor registered for assignment type:", assignmentType);
            return this.registered_[0];
          }
        }
      }

      if (type in this.extensions_) {
        return this.extensions_[type];
      } else {
        return this.registered_[0];
      } //console.log(this.main.model.assignment.type(), space, name, type);

    }
  }], [{
    key: "parseFilename",
    value: function parseFilename(path) {
      var space = path.charAt(0);

      if (SPECIAL_NAMESPACES.indexOf(space) !== -1) {
        path = path.substr(1);
      } else {
        space = "";
      }

      var name = path.substr(0, path.lastIndexOf("."));
      var type = path.substr(path.lastIndexOf("."));
      return {
        "space": space,
        "name": name,
        "type": type
      };
    }
  }]);

  return Editors;
}();

/***/ }),

/***/ "./src/engine.js":
/*!***********************!*\
  !*** ./src/engine.js ***!
  \***********************/
/*! exports provided: BlockPyEngine */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockPyEngine", function() { return BlockPyEngine; });
/* harmony import */ var _server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./server */ "./src/server.js");
/* harmony import */ var _engine_on_run__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./engine/on_run */ "./src/engine/on_run.js");
/* harmony import */ var _engine_run__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./engine/run */ "./src/engine/run.js");
/* harmony import */ var _engine_eval__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./engine/eval */ "./src/engine/eval.js");
/* harmony import */ var _engine_sample__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./engine/sample */ "./src/engine/sample.js");
/* harmony import */ var _engine_on_change__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./engine/on_change */ "./src/engine/on_change.js");
/* harmony import */ var _engine_on_eval__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./engine/on_eval */ "./src/engine/on_eval.js");
/* harmony import */ var _engine_on_sample__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./engine/on_sample */ "./src/engine/on_sample.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }









/**
 * An object for executing Python code and passing the results along to interested components.
 *
 * Interesting components:
 *  Execution Buffer: Responsible for collecting the trace during program execution.
 *                    This prevents Knockoutjs from updating the editor during execution.
 *
 * @constructor
 * @this {BlockPyEditor}
 * @param {Object} main - The main BlockPy instance
 * @param {HTMLElement} tag - The HTML object this is attached to.
 */

var BlockPyEngine = /*#__PURE__*/function () {
  function BlockPyEngine(main) {
    _classCallCheck(this, BlockPyEngine);

    this.main = main;
    this.executionModel = this.main.model.execution;
    this.configurations = {
      run: new _engine_run__WEBPACK_IMPORTED_MODULE_2__["RunConfiguration"](main),
      eval: new _engine_eval__WEBPACK_IMPORTED_MODULE_3__["EvalConfiguration"](main),
      onRun: new _engine_on_run__WEBPACK_IMPORTED_MODULE_1__["OnRunConfiguration"](main),
      onChange: new _engine_on_change__WEBPACK_IMPORTED_MODULE_5__["OnChangeConfiguration"](main),
      onEval: new _engine_on_eval__WEBPACK_IMPORTED_MODULE_6__["OnEvalConfiguration"](main)
    }; // Preconfigure skulpt so we can parse

    Sk.configure(this.configurations.run.getSkulptOptions()); // Keeps track of the tracing while the program is executing

    this.executionBuffer = {};
    /**
     * Definable function to be run when execution has fully ended,
     * whether it succeeds or fails.
     */

    this.onExecutionBegin = null;
    this.onExecutionEnd = null;
  }
  /**
   * Reset reports
   */


  _createClass(BlockPyEngine, [{
    key: "resetReports",
    value: function resetReports() {
      var report = this.executionModel.reports;
      report["verifier"] = {};
      report["parser"] = {};
      report["student"] = {};
      report["instructor"] = {};
      report["model"] = this.main.model;
    }
  }, {
    key: "resetStudentModel",
    value: function resetStudentModel() {
      var student = this.executionModel.student;
      student.calls = {};
      student.currentStep(null);
      student.currentTraceStep(0);
      student.lastStep(0);
      student.currentLine(null);
      student.currentTraceData.removeAll();
      student.results = null;
      student.tracing = [];
    }
  }, {
    key: "resetExecutionBuffer",
    value: function resetExecutionBuffer() {
      this.executionBuffer = {
        "trace": [],
        "step": 0,
        "line": 0
      };
    }
  }, {
    key: "reset",

    /**
     * Remove all interface aspects of the previous Run.
     */
    value: function reset() {
      // TODO: Clear out any coverage/trace/error highlights in editors
      // Reset execution in model
      this.resetStudentModel(); // Get reports ready

      this.resetReports(); // Clear out the execution buffer

      this.resetExecutionBuffer(); // Clear out the console of printed stuff

      this.main.components.console.clear(); // Clear out any old feedback

      this.main.components.feedback.clear();
    }
  }, {
    key: "delayedRun",
    value: function delayedRun() {
      var disableFeedback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      //this.main.model.status.onExecution(StatusState.ACTIVE);
      //$(".blockpy-run").addClass("blockpy-run-running");
      this.run(disableFeedback); //setTimeout(this.run.bind(this), 1);
    }
  }, {
    key: "stop",
    value: function stop() {}
  }, {
    key: "run",
    value: function run() {
      var _this = this;

      var disableFeedback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      this.configuration = this.configurations.run.use(this);
      var execution = this.execute().then(this.configuration.success.bind(this.configuration), this.configuration.failure.bind(this.configuration));

      if (!this.main.model.assignment.settings.disableFeedback() && !disableFeedback) {
        execution.then(function () {
          _this.configuration.provideSecretError();

          return _this.onRun();
        });
      } else {
        execution.then(this.configuration.showErrors.bind(this.configuration));
      }

      execution.then(this.configuration["finally"].bind(this.configuration));
    }
  }, {
    key: "onRun",
    value: function onRun() {
      this.configuration = this.configurations.onRun.use(this);
      this.execute().then(this.configuration.success.bind(this.configuration), this.configuration.failure.bind(this.configuration)).then(this.configuration["finally"].bind(this.configuration)).then(this.executionEnd_.bind(this));
    }
  }, {
    key: "evaluate",
    value: function evaluate() {
      var _this2 = this;

      this.main.model.status.onExecution(_server__WEBPACK_IMPORTED_MODULE_0__["StatusState"].ACTIVE);
      var evaluationInput = this.main.components.console.evaluate();
      console.log(evaluationInput);
      evaluationInput.then(function (userInput) {
        _this2.configuration = _this2.configurations.eval.use(_this2, userInput);

        var execution = _this2.execute().then(_this2.configuration.success.bind(_this2.configuration), _this2.configuration.failure.bind(_this2.configuration));

        if (!_this2.main.model.assignment.settings.disableFeedback() && _this2.main.model.assignment.onEval()) {
          _this2.configuration.provideSecretError();

          execution.then(_this2.onEval.bind(_this2));
        } else {
          execution.then(_this2.configuration.showErrors.bind(_this2.configuration)).then(_this2.evaluate.bind(_this2));
        }

        execution.then(_this2.configuration["finally"].bind(_this2.configuration));
      });
    }
  }, {
    key: "onEval",
    value: function onEval() {
      this.configuration = this.configurations.onEval.use(this);
      this.execute().then(this.configuration.success.bind(this.configuration), this.configuration.failure.bind(this.configuration)).then(this.evaluate.bind(this)).then(this.configuration["finally"].bind(this.configuration));
    }
  }, {
    key: "onChange",
    value: function onChange() {
      this.configuration = this.configurations.onChange.use(this);
    }
  }, {
    key: "execute",
    value: function execute() {
      var _this3 = this;

      this.main.model.status.onExecution(_server__WEBPACK_IMPORTED_MODULE_0__["StatusState"].ACTIVE);
      return Sk.misceval.asyncToPromise(function () {
        return Sk.importMainWithBody(_this3.configuration.filename, false, _this3.configuration.code, true, _this3.configuration.sysmodules);
      });
    }
    /**
     * Activated whenever the Python code changes
     */

  }, {
    key: "on_change",
    value: function on_change() {
      var FILENAME = "on_change"; // Skip if the instructor has not defined anything

      if (!this.main.model.programs[FILENAME]().trim()) {
        return false;
      }

      this.main.model.execution.status("changing");
      this.main.components.server.saveCode(); // On step does not perform parse analysis by default or run student code

      var engine = this;
      var feedback = this.main.components.feedback;
      engine.resetReports();
      engine.verifyCode();
      engine.updateParse();
      engine.runInstructorCode(FILENAME, true, function (module) {
        if (Sk.executionReports["instructor"]["success"]) {
          // SUCCESS, SCORE, CATEGORY, LABEL, MESSAGE, DATA, HIDE
          // TODO: only show under certain circumstances
          if (!success && !(category === "Instructor" && label === "No errors")) {
            feedback.presentFeedback(category, label, message, line);
          }

          engine.main.components.feedback.presentFeedback(module.$d);
          engine.main.model.execution.status("complete");
        }
      });
      engine.main.components.server.logEvent("engine", "on_change");
    }
  }, {
    key: "executionEnd_",

    /**
     * Helper function that will attempt to call the defined onExecutionEnd,
     * but will do nothing if there is no function defined.
     */
    value: function executionEnd_() {
      if (this.onExecutionEnd !== null) {
        this.onExecutionEnd();
      }
    }
    /**
     *
     */

  }, {
    key: "executionBegin_",
    value: function executionBegin_() {
      if (this.onExecutionBegin !== null) {
        this.onExecutionBegin();
      }
    }
  }]);

  return BlockPyEngine;
}();

/***/ }),

/***/ "./src/engine/configurations.js":
/*!**************************************!*\
  !*** ./src/engine/configurations.js ***!
  \**************************************/
/*! exports provided: EMPTY_MODULE, Configuration */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EMPTY_MODULE", function() { return EMPTY_MODULE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Configuration", function() { return Configuration; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var EMPTY_MODULE = "let $builtinmodule = function(mod){ return mod; }";
/**
 * A container for holding settings of a particular run configuration.
 * This is the root class for all other configurations.
 */

var Configuration = /*#__PURE__*/function () {
  function Configuration(main) {
    _classCallCheck(this, Configuration);

    this.main = main;
    this.filename = null;
    this.code = null;
    this.sysmodules = undefined;
  }

  _createClass(Configuration, [{
    key: "use",
    value: function use(engine) {
      var _this = this;

      // Access point for instructor data
      this.engine = engine;
      Sk.executionReports = this.main.model.execution.reports;
      Sk.console = this.main.components.console;
      Sk.queuedInput = [];
      Sk.configure(this.getSkulptOptions()); // Set openFile as mechanism to read files

      Sk.inBrowser = this.openFile.bind(this); // Function to convert filenames to URLs

      Sk.fileToURL = this.getUrlFromFilename.bind(this); // Proxy requests

      Sk.requestsGet = function (url, data, timeout) {
        return _this.openURL(url, data, timeout);
      }; // Configure a "do you want to wait? prompt"


      Sk.timeoutHandler = function (timePassed, execLimit) {
        if (_this.main.model.assignment.settings.disableTimeout()) {
          return null;
        }

        var promptMessage = _this.getTimeoutPrompt(timePassed / 1000 > 30);

        var delay = prompt(promptMessage, Sk.execLimit / 1000);

        if (delay !== null || delay == 0) {
          delay = Sk.execLimit + parseInt(delay, 10) * 1000;
          Sk.execLimit = delay;

          Sk.execLimitFunction = function () {
            return _this.main.model.assignment.settings.disableTimeout() ? Infinity : delay;
          };
        }

        return delay;
      }; // Attach beforeCall


      Sk.beforeCall = this.beforeCall.bind(this);
      return this;
    }
  }, {
    key: "getTimeoutPrompt",
    value: function getTimeoutPrompt(longTimeout) {
      if (longTimeout) {
        return "The program has taken a REALLY long time to run (30 or more seconds). You might want to cancel and check your code. Or, you can add more seconds to wait below.";
      } else {
        return "The program is taking a while to run. How many more seconds would you like to wait?";
      }
    }
  }, {
    key: "getSkulptOptions",
    value: function getSkulptOptions() {
      return {
        __future__: Sk.python3,
        // import
        read: this.importFile.bind(this),
        // open
        //fileopen: this.openFile.bind(this),
        // file.write
        filewrite: this.writeFile.bind(this),
        // print
        output: this.print.bind(this),
        // input
        inputfun: this.input.bind(this),
        inputfunTakesPrompt: true,
        // Media Image Proxy URL
        imageProxy: this.getImageProxy.bind(this),
        // TODO: Make this set by the system so we can use our own servers in practice
        emojiProxy: function emojiProxy(part) {
          return "https://twemoji.maxcdn.com/v/13.1.0/svg/".concat(part.toLowerCase(), ".svg");
        },
        // Whether or not to keep the globals
        retainGlobals: true
      };
    }
  }, {
    key: "getUrlFromFilename",
    value: function getUrlFromFilename(filename) {
      var found = this.main.components.fileSystem.filesToUrls[filename];

      if (found === undefined) {
        throw new Sk.builtin.OSError("File not found: " + filename);
      }

      return found;
    }
    /**
     * Used to access Skulpt built-ins. This is pretty generic, taken
     * almost directly from the Skulpt docs.
     *
     * @param {String} filename - The python filename (e.g., "os" or "pprint") that will be loaded.
     * @returns {String} The JavaScript source code of the file (weird, right?)
     * @throws Will throw an error if the file isn't found.
     */

  }, {
    key: "importFile",
    value: function importFile(filename) {
      console.warn("Unimplemented method!"); // TODO
    }
  }, {
    key: "openURL",
    value: function openURL(url, data, timeout) {
      //return new Promise((resolve, reject) => {
      var mockUrlData = this.main.components.fileSystem.getFile("?mock_urls.blockpy");

      if (mockUrlData == null) {
        throw new Sk.builtin.IOError("Cannot access url: URL Data was not made available for this assignment");
      }

      mockUrlData = JSON.parse(mockUrlData.handle());

      for (var filename in mockUrlData) {
        if (mockUrlData.hasOwnProperty(filename)) {
          for (var i = 0; i < mockUrlData[filename].length; i += 1) {
            if (mockUrlData[filename][i] === url) {
              var fileData = this.main.components.fileSystem.readFile(filename);
              return fileData;
            }
          }
        }
      } //reject(new Sk.builtin.IOError("Cannot access url: "+url+" was not made available for this assignment"));


      throw new Sk.builtin.IOError("Cannot access url: " + url + " was not made available for this assignment"); //});
    }
  }, {
    key: "openFile",
    value: function openFile() {
      console.warn("Unimplemented method!"); // TODO
    }
  }, {
    key: "writeFile",
    value: function writeFile() {
      console.warn("Unimplemented method!"); // TODO
    }
  }, {
    key: "print",
    value: function print(value) {
      this.main.components.console.print(value);
    }
  }, {
    key: "input",
    value: function input() {
      console.warn("Unimplemented method!"); // TODO
    }
  }, {
    key: "clearInput",
    value: function clearInput() {
      if (this.main.model.display.clearInputs()) {
        this.main.model.execution.input([]);
      }

      this.main.model.execution.inputIndex(0);
    }
  }, {
    key: "getImageProxy",
    value: function getImageProxy(url) {
      // TODO
      return url;
    }
  }, {
    key: "step",
    value: function step() {}
  }, {
    key: "lastStep",
    value: function lastStep() {}
  }, {
    key: "isForbidden",
    value: function isForbidden(filename) {
      return false;
    }
  }, {
    key: "success",
    value: function success(module) {
      throw new Error("Abstract success execution");
    }
  }, {
    key: "failure",
    value: function failure(error) {
      throw new Error("Abstract failure execution");
    }
  }, {
    key: "finally",
    value: function _finally(result) {
      // Force Pygame to stop trapping keyboard events
      if (this.main.components.console.pygameLine) {
        this.main.components.console.pygameLine.cleanup();
        this.main.components.console.pygameLine.stop();
      }
    }
  }, {
    key: "dummyOutSandbox",
    value: function dummyOutSandbox() {//Sk.builtinFiles.files["src/lib/pedal/sandbox/sandbox.py"] = "class Sandbox: pass\ndef run(): pass\ndef reset(): pass\n";
    }
  }, {
    key: "beforeCall",
    value: function beforeCall(functionName, posargs, kwargs) {
      //console.log("TRACKING CALL", functionName, posargs, kwargs);
      // TODO: Handle fastcall too? Check how that works in Skulpt side
      var studentModel = this.main.model.execution.reports.student;

      if (!("calls" in studentModel)) {
        studentModel.calls = {};
      }

      if (!(functionName in studentModel.calls)) {
        studentModel.calls[functionName] = [];
      }

      var args = {}; // Get actual parameter names!!

      for (var i = 0; i < posargs.length; i += 1) {
        args["__ARG" + i] = posargs[i];
      }

      if (kwargs && kwargs[0] != null) {
        args["__ARGS"] = kwargs[0];
      }

      if (kwargs && kwargs[1] != null) {
        args["__KWARGS"] = kwargs[1];
      } //console.log(args);


      studentModel.calls[functionName].push(args);
    }
  }], [{
    key: "inputMockFunction",
    value: function inputMockFunction() {
      if (Sk.queuedInput.length) {
        return Sk.queuedInput.pop();
      } else {
        return "";
      }
    }
  }]);

  return Configuration;
}();

/***/ }),

/***/ "./src/engine/eval.js":
/*!****************************!*\
  !*** ./src/engine/eval.js ***!
  \****************************/
/*! exports provided: EvalConfiguration */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EvalConfiguration", function() { return EvalConfiguration; });
/* harmony import */ var _student__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./student */ "./src/engine/student.js");
/* harmony import */ var _server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../server */ "./src/server.js");
/* harmony import */ var _trace__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../trace */ "./src/trace.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }




var EvalConfiguration = /*#__PURE__*/function (_StudentConfiguration) {
  _inherits(EvalConfiguration, _StudentConfiguration);

  var _super = _createSuper(EvalConfiguration);

  function EvalConfiguration() {
    _classCallCheck(this, EvalConfiguration);

    return _super.apply(this, arguments);
  }

  _createClass(EvalConfiguration, [{
    key: "use",
    value: function use(engine, code) {
      // TODO: fix to be currently added line
      this.main.model.execution.feedback.message("Running...");
      this.filename = "answer";
      this.code = "_ = " + code;
      Sk.afterSingleExecution = null;
      Sk.beforeCall = null;

      _get(_getPrototypeOf(EvalConfiguration.prototype), "use", this).call(this, engine);

      Sk.retainGlobals = true;
      Sk.globals = this.main.model.execution.student.globals();
      this.main.components.server.logEvent("X-File.Add", "", "", code, "evaluations");
      this.main.components.server.logEvent("Compile", "", "", this.code, "evaluations");
      return this;
    }
  }, {
    key: "success",
    value: function success(module) {
      var _this = this;

      console.log("Eval success");
      this.main.components.server.logEvent("X-Evaluate.Program", "", "", "", "evaluations");
      this.main.model.status.onExecution(_server__WEBPACK_IMPORTED_MODULE_1__["StatusState"].READY);
      this.main.model.execution.student.globals(Sk.globals);
      Sk.globals = {};
      var report = this.main.model.execution.reports;
      var filename = this.filename;
      this.main.model.execution.student.results = module;
      this.main.components.console.printValue(Sk.ffi.remapToJs(module.$d._.$r()));
      return new Promise(function (resolve, reject) {
        //this.step(module.$d, module.$d,-1, 0, filename + ".py");
        _this.lastStep();

        report["student"] = {
          "success": true,
          "trace": _this.engine.executionBuffer.trace,
          "lines": _this.engine.executionBuffer.trace.map(function (x) {
            return x.line;
          }),
          "realLines": _this.engine.executionBuffer.trace.filter(function (x) {
            return !x.isDocstring;
          }).map(function (x) {
            return x.line;
          }),
          "results": module,
          "output": _this.main.model.execution.output,
          "evaluation": _this.code,
          "calls": _this.main.model.execution.student.calls,
          "tracing": []
        };
        resolve();
      });
    }
  }, {
    key: "failure",
    value: function failure(error) {
      var _this2 = this;

      console.log("Eval failure", error);
      this.main.model.status.onExecution(_server__WEBPACK_IMPORTED_MODULE_1__["StatusState"].FAILED);
      var report = this.main.model.execution.reports;
      this.main.components.server.logEvent("Compile.Error", "", "", error.toString(), "evaluations");
      return new Promise(function (resolve, reject) {
        report["student"] = {
          "success": false,
          "error": error,
          "evaluation": _this2.code,
          "tracing": []
        };
        resolve();
      });
    }
  }]);

  return EvalConfiguration;
}(_student__WEBPACK_IMPORTED_MODULE_0__["StudentConfiguration"]);

/***/ }),

/***/ "./src/engine/instructor.js":
/*!**********************************!*\
  !*** ./src/engine/instructor.js ***!
  \**********************************/
/*! exports provided: InstructorConfiguration */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InstructorConfiguration", function() { return InstructorConfiguration; });
/* harmony import */ var _configurations_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./configurations.js */ "./src/engine/configurations.js");
/* harmony import */ var _skulpt_modules_sk_mod_instructor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../skulpt_modules/sk_mod_instructor */ "./src/skulpt_modules/sk_mod_instructor.js");
/* harmony import */ var _skulpt_modules_coverage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../skulpt_modules/coverage */ "./src/skulpt_modules/coverage.js");
/* harmony import */ var _skulpt_modules_pedal_tracer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../skulpt_modules/pedal_tracer */ "./src/skulpt_modules/pedal_tracer.js");
/* harmony import */ var _files__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../files */ "./src/files.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }






var UTILITY_MODULE_CODE = "var $builtinmodule = " + _skulpt_modules_sk_mod_instructor__WEBPACK_IMPORTED_MODULE_1__["$sk_mod_instructor"].toString();
var COVERAGE_MODULE_CODE = _skulpt_modules_coverage__WEBPACK_IMPORTED_MODULE_2__["$sk_mod_coverage"];
var InstructorConfiguration = /*#__PURE__*/function (_Configuration) {
  _inherits(InstructorConfiguration, _Configuration);

  var _super = _createSuper(InstructorConfiguration);

  function InstructorConfiguration() {
    _classCallCheck(this, InstructorConfiguration);

    return _super.apply(this, arguments);
  }

  _createClass(InstructorConfiguration, [{
    key: "use",
    value: function use(engine) {
      var _this = this;

      _get(_getPrototypeOf(InstructorConfiguration.prototype), "use", this).call(this, engine); // Instructors get 4 seconds


      Sk.execLimitFunction = function () {
        return _this.main.model.assignment.settings.disableTimeout() ? Infinity : 7000;
      };

      Sk.execLimit = Sk.execLimitFunction(); // Stepper! Executed after every statement.

      Sk.afterSingleExecution = null; // 10 *1000
      // Mute everything

      this.main.model.display.mutePrinter(true); // Disable input box

      Sk.queuedInput = []; // TODO Sk.inputfun = BlockPyEngine.inputMockFunction;
      // TODO: Allow input function to disable the timer, somehow
      // Disable the beforeCall checker unless specifically requested

      Sk.beforeCallBackup = Sk.beforeCall;
      Sk.beforeCall = null; // Enable utility mode

      Sk.builtinFiles.files["src/lib/utility/__init__.js"] = UTILITY_MODULE_CODE;
      Sk.builtinFiles.files["src/lib/coverage.py"] = COVERAGE_MODULE_CODE; // TODO: Check if this needs to be optimized
      //const PEDAL_TRACER_MODULE_CODE = Sk.compile($pedal_tracer, "tracer.py", "exec", true, false);

      Sk.builtinFiles.files["src/lib/pedal/sandbox/tracer.py"] = _skulpt_modules_pedal_tracer__WEBPACK_IMPORTED_MODULE_3__["$pedal_tracer"];
      delete Sk.builtinFiles.files["src/lib/pedal/sandbox/tracer.js"]; // TODO: Mock Pedal's tracer module with the appropriate version

      Sk.builtinFiles.files["./_instructor/__init__.js"] = _configurations_js__WEBPACK_IMPORTED_MODULE_0__["EMPTY_MODULE"]; // Reuse any existing sysmodules that we previously found, but not __main__ modules

      this.sysmodules = this.clearExistingStudentImports(); // Horrific hack, to prevent Tifa from caching a bad version of the students' import

      Sk.clearExistingStudentImports = this.clearExistingStudentImports;
      return this;
    }
  }, {
    key: "print",
    value: function print(value) {
      _get(_getPrototypeOf(InstructorConfiguration.prototype), "print", this).call(this, value);

      console.info("Printed:", value);
    }
  }, {
    key: "clearExistingStudentImports",
    value: function clearExistingStudentImports() {
      var sysmodules = this.main.model.execution.instructor.sysmodules; // Remove any existing __main__ modules

      if (sysmodules !== undefined) {
        var _iterator = _createForOfIteratorHelper(this.getAllFilenames()),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var filename = _step.value;
            var skFilename = new Sk.builtin.str(filename);
            /*if (sysmodules.quick$lookup(skFilename)) {
                sysmodules.pop$item(skFilename);
            }*/

            sysmodules.pop$item(skFilename);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return sysmodules;
    }
  }, {
    key: "getAllStudentFiles",
    value: function getAllStudentFiles() {
      var files = {
        "answer.py": this.main.model.ui.files.getStudentCode()
      }; // Skip special instructor files

      this.main.model.assignment.extraInstructorFiles().forEach(function (file) {
        if (!"!^$#".includes(file.filename()[0])) {
          files[Object(_files__WEBPACK_IMPORTED_MODULE_4__["chompSpecialFile"])(file.filename())] = file.contents();
        }
      }); // Include normal student extra files

      this.main.model.submission.extraFiles().forEach(function (file) {
        files[file.filename()] = file.contents();
      });
      return files;
    }
  }, {
    key: "getAllFilenames",
    value: function getAllFilenames() {
      function clean(filename) {
        filename = Object(_files__WEBPACK_IMPORTED_MODULE_4__["chompSpecialFile"])(filename);

        if (filename.endsWith(".py")) {
          filename = filename.slice(0, -3);
        }

        return filename;
      }

      return ["__main__", "_instructor"].concat(_toConsumableArray(this.main.model.assignment.extraInstructorFiles().map(function (file) {
        return "_instructor." + clean(file.filename());
      })), _toConsumableArray(this.main.model.submission.extraFiles().map(function (file) {
        return clean(file.filename());
      })));
    }
  }, {
    key: "getTimeoutPrompt",
    value: function getTimeoutPrompt(longTimeout) {
      if (longTimeout) {
        return "The instructor code has taken a REALLY long time to check your code (30 or more seconds). You might want to cancel and check your code (or get help from an instructor). Or, you can add more seconds to wait below.";
      } else {
        return "The instructor code is taking a little while to check your code; it might just need a little more time. How many more seconds would you like to wait?";
      }
    }
  }, {
    key: "openFile",
    value: function openFile(filename) {
      var found = this.main.components.fileSystem.searchForFile(filename, false);

      if (found === undefined) {
        throw new Sk.builtin.OSError("File not found: " + filename);
      } else {
        return found.contents();
      }
    }
  }, {
    key: "openURL",
    value: function openURL(url, data, timeout) {
      // TODO: Figure out why parameters are misaligned..?
      if (data.v === "OPENAI") {
        return this.main.components.server.openaiProxy(timeout.v);
      } else {
        return _get(_getPrototypeOf(InstructorConfiguration.prototype), "openURL", this).call(this, url, data, timeout);
      }
    }
  }, {
    key: "importFile",
    value: function importFile(filename) {
      if (filename === "./answer.py") {
        return this.main.model.submission.code();
      } else if (filename === "./_instructor/on_run.py") {
        return this.main.model.assignment.onRun();
      } else if (filename === "./_instructor/on_eval.py") {
        return this.main.model.assignment.onEval() || "";
      } else if (filename === "./_instructor/__init__.js") {
        return _configurations_js__WEBPACK_IMPORTED_MODULE_0__["EMPTY_MODULE"];
      } else if (Sk.builtinFiles === undefined) {
        throw new Sk.builtin.OSError("Built-in modules not accessible.");
      } else if (Sk.builtinFiles["files"][filename] !== undefined) {
        return Sk.builtinFiles["files"][filename];
      } else {
        var found = this.main.components.fileSystem.searchForFile(filename, false);

        if (found === undefined) {
          throw new Sk.builtin.OSError("File not found: '" + filename + "'");
        } else {
          return found.contents();
        }
      }
    }
  }, {
    key: "input",
    value: function input(promptMessage) {
      //return "ApplePie";
      console.log(">>>", this.main.model.execution.input(), this.main.model.execution.inputIndex());

      if (this.main.model.execution.inputIndex() < this.main.model.execution.input().length) {
        var inputIndex = this.main.model.execution.inputIndex();
        var nextInput = this.main.model.execution.input()[inputIndex];
        this.main.model.execution.inputIndex(inputIndex + 1);
        return nextInput;
      } else {
        return "ApplePie";
      }
      /*return new Promise((resolve) => {
          resolve(Sk.queuedInput.pop());
      });*/

    }
  }, {
    key: "beforeCall",
    value: function beforeCall(functionName, posargs, kwargs) {
      var studentModel = this.main.model.execution.reports.student; //console.log("HEY INSTRUCTOR CALL", functionName, studentModel.tracing);

      if (studentModel.tracing && studentModel.tracing.length) {
        _get(_getPrototypeOf(InstructorConfiguration.prototype), "beforeCall", this).call(this, functionName, posargs, kwargs);
      }
    }
  }]);

  return InstructorConfiguration;
}(_configurations_js__WEBPACK_IMPORTED_MODULE_0__["Configuration"]);

/***/ }),

/***/ "./src/engine/on_change.js":
/*!*********************************!*\
  !*** ./src/engine/on_change.js ***!
  \*********************************/
/*! exports provided: OnChangeConfiguration */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OnChangeConfiguration", function() { return OnChangeConfiguration; });
/* harmony import */ var _instructor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instructor */ "./src/engine/instructor.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var OnChangeConfiguration = /*#__PURE__*/function (_InstructorConfigurat) {
  _inherits(OnChangeConfiguration, _InstructorConfigurat);

  var _super = _createSuper(OnChangeConfiguration);

  function OnChangeConfiguration() {
    _classCallCheck(this, OnChangeConfiguration);

    return _super.apply(this, arguments);
  }

  _createClass(OnChangeConfiguration, [{
    key: "use",
    value: function use(engine) {
      _get(_getPrototypeOf(OnChangeConfiguration.prototype), "use", this).call(this, engine);

      this.filename = "on_change.py";
      this.code = this.main.model.assignment.onChange();
      clearTimeout(this.main.model.display.triggerOnChange);
      return this;
    }
  }]);

  return OnChangeConfiguration;
}(_instructor__WEBPACK_IMPORTED_MODULE_0__["InstructorConfiguration"]);

/***/ }),

/***/ "./src/engine/on_eval.js":
/*!*******************************!*\
  !*** ./src/engine/on_eval.js ***!
  \*******************************/
/*! exports provided: WRAP_INSTRUCTOR_CODE, OnEvalConfiguration */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WRAP_INSTRUCTOR_CODE", function() { return WRAP_INSTRUCTOR_CODE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OnEvalConfiguration", function() { return OnEvalConfiguration; });
/* harmony import */ var _instructor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instructor */ "./src/engine/instructor.js");
/* harmony import */ var _server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../server */ "./src/server.js");
/* harmony import */ var _on_run__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./on_run */ "./src/engine/on_run.js");
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities */ "./src/utilities.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }





/**
 * @return {string}
 */

var WRAP_INSTRUCTOR_CODE = function WRAP_INSTRUCTOR_CODE(studentCode, instructorCode, quick, isSafe) {
  var safeCode = JSON.stringify(studentCode);
  return "\nfrom utility import *\n\n# Load in some commonly used tools\nfrom pedal.cait.cait_api import parse_program\nfrom pedal.sandbox.commands import *\nfrom pedal.core.commands import *\n\n# Backup the feedback\non_run_feedback = []\nfor feedback in MAIN_REPORT.feedback:\n    on_run_feedback.append(feedback)\nMAIN_REPORT.feedback.clear()\n\nfrom pedal.environments.blockpy import setup_environment\n# Add in evaluated stuff from last time\nstudent = get_sandbox()\n# TODO: What about new inputs since we last ran/evaled?\n# MAIN_REPORT.submission.files['evaluation'] = ".concat(safeCode, "\nevaluate(").concat(safeCode, "['evaluation'])\n\n# TODO: Refactor resolver to return instructions\n# Monkey-patch questions\n#from pedal import questions\n#questions.show_question = set_instructions\n\n").concat(_on_run__WEBPACK_IMPORTED_MODULE_2__["INSTRUCTOR_MARKER"], "\n").concat(instructorCode, "\n\n# Resolve everything\nfrom pedal.resolvers.simple import resolve\nfinal = resolve()\nSUCCESS = final.success\nSCORE = final.score\nCATEGORY = final.category\nLABEL = final.title\nMESSAGE = final.message\nDATA = final.data\nHIDE = final.hide_correctness\n\n# Handle questions\nif final.instructions:\n    set_instructions(final.instructions[-1].message)\n    \n# Handle positive feedback\nPOSITIVE = []\nfor positive in final.positives:\n    message = positive.message\n    if not positive:\n        message = positive.else_message\n    POSITIVE.append({\n        \"title\": positive.title,\n        \"label\": positive.label,\n        \"message\": message\n    })\n    \n# Handle system messages\nfor system in final.systems:\n    if system.label == 'log':\n        console_log(system.title, system.message);\n    if system.label == 'debug':\n        console_debug(system.title, system.message);\n\n");
};
var OnEvalConfiguration = /*#__PURE__*/function (_InstructorConfigurat) {
  _inherits(OnEvalConfiguration, _InstructorConfigurat);

  var _super = _createSuper(OnEvalConfiguration);

  function OnEvalConfiguration() {
    _classCallCheck(this, OnEvalConfiguration);

    return _super.apply(this, arguments);
  }

  _createClass(OnEvalConfiguration, [{
    key: "use",
    value: function use(engine) {
      _get(_getPrototypeOf(OnEvalConfiguration.prototype), "use", this).call(this, engine);

      this.filename = "_instructor.on_eval";
      this.code = this.main.model.assignment.onEval() || "";
      var disableTifa = this.main.model.assignment.settings.disableTifa();
      var report = this.main.model.execution.reports; //let studentCodeSafe = this.main.model.execution.reports.student.evaluation || "None";

      var studentFiles = this.getAllStudentFiles();
      studentFiles["evaluation"] = this.main.model.execution.reports.student.evaluation || "None";
      this.dummyOutSandbox();
      var instructorCode = this.code;
      var isSafe = !report["parser"].empty && report["verifier"].success;
      instructorCode = WRAP_INSTRUCTOR_CODE(studentFiles, instructorCode, disableTifa, isSafe);
      console.log(">>>", instructorCode);
      var lineOffset = Object(_on_run__WEBPACK_IMPORTED_MODULE_2__["findActualInstructorOffset"])(instructorCode); //instructorCode.split(NEW_LINE_REGEX).length;

      report["instructor"] = {
        "compliments": [],
        "filename": "./_instructor/on_eval.py",
        "code": instructorCode,
        "lineOffset": lineOffset //'complete': false // Actually, let's use undefined for now.

      };
      this.code = instructorCode;

      _get(_getPrototypeOf(OnEvalConfiguration.prototype), "use", this).call(this, engine); //Sk.retainGlobals = false;


      Sk.globals = this.main.model.execution.instructor.globals;
      return this;
    }
  }, {
    key: "success",
    value: function success(module) {
      console.log("OnEval success"); // TODO: Actually parse results

      this.main.model.execution.instructor.globals = Sk.globals;
      this.main.model.execution.instructor.sysmodules = Sk.sysmodules;
      console.log(module);
      var results = module.$d.on_eval.$d;
      console.log(module.$d);
      this.main.components.feedback.presentFeedback(results);
      this.main.model.execution.reports["instructor"]["success"] = true;
      var success = Sk.ffi.remapToJs(results.SUCCESS);
      this.main.model.submission.correct(success || this.main.model.submission.correct()); // Cannot exceed 1 point, cannot go below 0 points

      var score = Sk.ffi.remapToJs(results.SCORE);
      score = Math.max(0.0, Math.min(1.0, score));
      var oldScore = this.main.model.submission.score();
      this.main.model.submission.score(Math.max(oldScore, score)); // Hide status

      var hide = Sk.ffi.remapToJs(results.HIDE); // And fire the result!

      this.main.components.server.updateSubmission(score, success, hide, false);
      this.main.model.status.onExecution(_server__WEBPACK_IMPORTED_MODULE_1__["StatusState"].READY); //after(module);

      /*if (success && this.main.model.configuration.callbacks.success) {
          this.main.model.configuration.callbacks.success(this.main.model.assignment.id());
      }*/

      if (!Sk.executionReports.instructor.scrolling) {
        try {
          this.main.components.console.scrollToBottom();
        } catch (e) {}
      }
    }
  }, {
    key: "failure",
    value: function failure(error) {
      console.log("OnEval failure", error);
      var report = this.main.model.execution.reports;

      if (error.tp$name === "GracefulExit") {
        report["instructor"]["success"] = true;
        this.main.model.status.onExecution(_server__WEBPACK_IMPORTED_MODULE_1__["StatusState"].READY);
      } else {
        this.main.model.status.onExecution(_server__WEBPACK_IMPORTED_MODULE_1__["StatusState"].FAILED); //console.log(report["instructor"]["code"]);

        this.main.components.feedback.presentInternalError(error, this.filename); //report["instructor"]["success"] = false;
        //report["instructor"]["error"] = error;
        //TODO: report["instructor"]["line_offset"] = lineOffset;
      } //TODO: after(error);

    }
  }]);

  return OnEvalConfiguration;
}(_instructor__WEBPACK_IMPORTED_MODULE_0__["InstructorConfiguration"]);

/***/ }),

/***/ "./src/engine/on_run.js":
/*!******************************!*\
  !*** ./src/engine/on_run.js ***!
  \******************************/
/*! exports provided: findActualInstructorOffset, INSTRUCTOR_MARKER, NEW_LINE_REGEX, WRAP_INSTRUCTOR_CODE, OnRunConfiguration */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findActualInstructorOffset", function() { return findActualInstructorOffset; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "INSTRUCTOR_MARKER", function() { return INSTRUCTOR_MARKER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NEW_LINE_REGEX", function() { return NEW_LINE_REGEX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WRAP_INSTRUCTOR_CODE", function() { return WRAP_INSTRUCTOR_CODE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OnRunConfiguration", function() { return OnRunConfiguration; });
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities */ "./src/utilities.js");
/* harmony import */ var _server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../server */ "./src/server.js");
/* harmony import */ var _instructor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./instructor */ "./src/engine/instructor.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }




function findActualInstructorOffset(instructorCode) {
  var index = instructorCode.indexOf(INSTRUCTOR_MARKER);
  var before = instructorCode.slice(0, index);
  var match = before.match(NEW_LINE_REGEX);
  return match ? 1 + match.length : 0;
}
var INSTRUCTOR_MARKER = "###Run the actual instructor code###";
var NEW_LINE_REGEX = /\n/g;
/**
 * @return {string}
 */

var WRAP_INSTRUCTOR_CODE = function WRAP_INSTRUCTOR_CODE(studentFiles, instructorCode, quick, isSafe) {
  var safeCode = JSON.stringify(studentFiles);
  var skip_tifa = quick ? "True" : "False"; // TODO: Add in Sk.queuedInput to be passed in

  return "\n# Support our sysmodules hack by clearing out any lingering old data\nfrom pedal.core.report import MAIN_REPORT\nMAIN_REPORT.clear()\n\nfrom bakery import student_tests\nstudent_tests.reset()\n\nfrom utility import *\n\n# Load in some commonly used tools\nfrom pedal.cait.cait_api import parse_program\nfrom pedal.sandbox.commands import *\nfrom pedal.core.commands import *\n\nfrom pedal.environments.blockpy import setup_environment\n# Do we execute student's code?\nskip_run = get_model_info('assignment.settings.disableInstructorRun')\ninputs = None if skip_run else get_model_info('execution.input')\n\n# Set the seed to the submission ID by default?\nfrom pedal.questions import set_seed\nset_seed(str(get_model_info(\"submission.id\")))\n\n# Initialize the BlockPy environment\npedal = setup_environment(skip_tifa=".concat(skip_tifa, ",\n                          skip_run=skip_run,\n                          inputs=inputs,\n                          main_file='answer.py',\n                          files=").concat(safeCode, ")\nstudent = pedal.fields['student']\n\n# TODO: Refactor resolver to return instructions\n# Monkey-patch questions\n#from pedal import questions\n#questions.show_question = set_instructions\n\n").concat(INSTRUCTOR_MARKER, "\n").concat(instructorCode, "\n\n# Resolve everything\nfrom pedal.resolvers.simple import resolve\nfinal = resolve()\nSUCCESS = final.success\nSCORE = final.score\nCATEGORY = final.category\nLABEL = final.title\nMESSAGE = final.message\nDATA = final.data\nHIDE = final.hide_correctness\n\n# Handle questions\nif final.instructions:\n    set_instructions(final.instructions[-1].message)\n    \n# Handle positive feedback\nPOSITIVE = []\nfor positive in final.positives:\n    message = positive.message\n    if not positive:\n        message = positive.else_message\n    POSITIVE.append({\n        \"title\": positive.title,\n        \"label\": positive.label,\n        \"message\": message\n    })\n    \n# Handle system messages\nfor system in final.systems:\n    if system.label == 'log':\n        console_log(system.title, system.message);\n    if system.label == 'debug':\n        console_debug(system.title, system.message);\n\n");
};
var OnRunConfiguration = /*#__PURE__*/function (_InstructorConfigurat) {
  _inherits(OnRunConfiguration, _InstructorConfigurat);

  var _super = _createSuper(OnRunConfiguration);

  function OnRunConfiguration() {
    _classCallCheck(this, OnRunConfiguration);

    return _super.apply(this, arguments);
  }

  _createClass(OnRunConfiguration, [{
    key: "use",
    value: function use(engine) {
      _get(_getPrototypeOf(OnRunConfiguration.prototype), "use", this).call(this, engine);

      this.filename = "_instructor.on_run";
      this.code = this.main.model.assignment.onRun();
      var disableTifa = this.main.model.assignment.settings.disableTifa(); // Put the input index back to the front, so we can replay inputs

      this.main.model.execution.inputIndex(1);
      var report = this.main.model.execution.reports; //let studentCodeSafe = this.main.model.submission.code();

      var studentFiles = this.getAllStudentFiles();
      this.dummyOutSandbox();
      var instructorCode = this.code;
      var isSafe = !report["parser"].empty && report["verifier"].success;
      instructorCode = WRAP_INSTRUCTOR_CODE(studentFiles, instructorCode, disableTifa, isSafe);
      var lineOffset = findActualInstructorOffset(instructorCode); //instructorCode.split(NEW_LINE_REGEX).length;
      //lineOffset = 0; //instructorCode.split(NEW_LINE_REGEX).length - lineOffset - 4;

      report["instructor"] = {
        "compliments": [],
        "filename": "./_instructor/on_run.py",
        "code": instructorCode,
        "lineOffset": lineOffset //'complete': false // Actually, let's use undefined for now.

      };
      /*
      TODO: Interesting situation. If you have an instructor-file (not a student-file),
      then it gets imported into sysmodules as `_instructor.MODULE_NAME`. But the instructor
      script will attempt to import it as `MODULE_NAME`, and fail. UNLESS the *student* has
      previously imported that module successfully. So there's a common case here where the
      students' code fails to import the module THEREBY breaking the instructor code.
       */

      this.code = instructorCode;
      Sk.retainGlobals = false;
      return this;
    }
  }, {
    key: "success",
    value: function success(module) {
      // TODO Logging!!!!
      //console.log("OnRun success");
      // TODO: Actually parse results
      this.main.model.execution.instructor.globals = Sk.globals;
      this.main.model.execution.instructor.sysmodules = Sk.sysmodules;
      Sk.globals = {};
      var results = module.$d.on_run.$d;
      this.main.components.feedback.presentFeedback(results);
      this.main.model.execution.reports["instructor"]["success"] = true;
      var success = Sk.ffi.remapToJs(results.SUCCESS);
      this.main.model.submission.correct(success || this.main.model.submission.correct()); // Cannot exceed 1 point, cannot go below 0 points

      var score = Sk.ffi.remapToJs(results.SCORE);
      score = Math.max(0, Math.min(1, score));
      var oldScore = this.main.model.submission.score();
      score = Math.max(oldScore, score);
      this.main.model.submission.score(score); // Hide status

      var hide = Sk.ffi.remapToJs(results.HIDE); // And fire the result!

      this.main.components.server.updateSubmission(score, success, hide, false);
      this.main.model.status.onExecution(_server__WEBPACK_IMPORTED_MODULE_1__["StatusState"].READY); //after(module);

      /*if (success && this.main.model.configuration.callbacks.success) {
          this.main.model.configuration.callbacks.success(this.main.model.assignment.id());
      }*/

      if (!Sk.executionReports.instructor.scrolling) {
        try {
          this.main.components.console.scrollToBottom();
        } catch (e) {}
      }
    }
  }, {
    key: "failure",
    value: function failure(error) {
      console.error("OnRun failure", error);
      var report = this.main.model.execution.reports;

      if (error.tp$name === "GracefulExit") {
        report["instructor"]["success"] = true;
        this.main.model.status.onExecution(_server__WEBPACK_IMPORTED_MODULE_1__["StatusState"].READY);
      } else {
        this.main.model.status.onExecution(_server__WEBPACK_IMPORTED_MODULE_1__["StatusState"].FAILED); //console.log(report["instructor"]["code"]);

        this.main.components.feedback.presentInternalError(error, this.filename); //report["instructor"]["success"] = false;
        //report["instructor"]["error"] = error;
        //TODO: report["instructor"]["line_offset"] = lineOffset;
      } //TODO: after(error);

    }
  }]);

  return OnRunConfiguration;
}(_instructor__WEBPACK_IMPORTED_MODULE_2__["InstructorConfiguration"]);
/*
# The following is the old instructor code, leaving it here for now.

from pedal.core.report import MAIN_REPORT
# Support our sysmodules hack by clearing out any lingering old data
MAIN_REPORT.clear()
from pedal.core.commands import contextualize_report
contextualize_report(${safeCode}, "answer.py")
${tifaAnalysis}
from pedal.sandbox.sandbox import Sandbox
from pedal.sandbox import compatibility
from utility import *
student = MAIN_REPORT['sandbox']['run'] = Sandbox()
student.report_exceptions_mode = True
log(get_model_info('execution.input'))
student.set_input(get_model_info('execution.input'))
if not get_model_info('assignment.settings.disableInstructorRun'):
    compatibility.run_student(raise_exceptions=False)
#log(student.data)
#student = get_student_data()
#error, position = get_student_error()
#compatibility.raise_exception(error, position)
run_student = compatibility.run_student
reset_output = compatibility.reset_output
queue_input = compatibility.queue_input
get_output = compatibility.get_output
get_plots = compatibility.get_plots
compatibility.trace_lines = trace_lines
from pedal import questions
questions.show_question = set_instructions
# TODO: Remove the need for this hack!
def capture_output(func, *args):
   reset_output()
   student.call(func.__name__, *args)
   return get_output()
compatibility.capture_output = capture_output

from pedal.cait.cait_api import parse_program
${instructorCode}
from pedal.resolvers import simple
final = simple.resolve()
SUCCESS = final.success
SCORE = final.score
CATEGORY = final.category
LABEL = final.title
MESSAGE = final.message
DATA = final.data
HIDE = final.hide_correctness

 */

/***/ }),

/***/ "./src/engine/on_sample.js":
/*!*********************************!*\
  !*** ./src/engine/on_sample.js ***!
  \*********************************/
/*! exports provided: OnSampleConfiguration */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OnSampleConfiguration", function() { return OnSampleConfiguration; });
/* harmony import */ var _on_run__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./on_run */ "./src/engine/on_run.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var OnSampleConfiguration = /*#__PURE__*/function (_OnRunConfiguration) {
  _inherits(OnSampleConfiguration, _OnRunConfiguration);

  var _super = _createSuper(OnSampleConfiguration);

  function OnSampleConfiguration() {
    _classCallCheck(this, OnSampleConfiguration);

    return _super.apply(this, arguments);
  }

  _createClass(OnSampleConfiguration, [{
    key: "use",
    value: function use(engine) {
      _get(_getPrototypeOf(OnSampleConfiguration.prototype), "use", this).call(this, engine);

      this.filename = "on_run.py";
      this.code = this.main.model.assignment.onRun();
      return this;
    }
  }]);

  return OnSampleConfiguration;
}(_on_run__WEBPACK_IMPORTED_MODULE_0__["OnRunConfiguration"]);

/***/ }),

/***/ "./src/engine/run.js":
/*!***************************!*\
  !*** ./src/engine/run.js ***!
  \***************************/
/*! exports provided: RunConfiguration */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RunConfiguration", function() { return RunConfiguration; });
/* harmony import */ var _student__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./student */ "./src/engine/student.js");
/* harmony import */ var _server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../server */ "./src/server.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var RunConfiguration = /*#__PURE__*/function (_StudentConfiguration) {
  _inherits(RunConfiguration, _StudentConfiguration);

  var _super = _createSuper(RunConfiguration);

  function RunConfiguration() {
    _classCallCheck(this, RunConfiguration);

    return _super.apply(this, arguments);
  }

  _createClass(RunConfiguration, [{
    key: "use",
    value: function use(engine) {
      this.main.model.execution.feedback.message("Running...");
      this.filename = "answer";
      this.code = this.main.model.ui.files.getStudentCode();

      if (this.main.model.assignment.settings.disableStudentRun()) {
        this.code = "";
      } //this.code = this.main.model.submission.code();


      this.main.components.server.saveFile("answer.py", this.main.model.submission.code(), null);
      this.main.components.server.logEvent("Compile", "", "", "", "answer.py"); //console.log(this.code);

      _get(_getPrototypeOf(RunConfiguration.prototype), "use", this).call(this, engine);

      engine.reset();
      this.updateParse();
      this.main.model.execution.reports["verifier"] = {
        "success": Boolean(this.code.trim()),
        "code": this.code
      };

      if (typeof Sk.environ == "undefined") {
        Sk.environ = new Sk.builtin.dict();
      }

      var printerTag = this.main.components.console.printerTag,
          width = printerTag.width() - 50,
          height = Math.max(300, printerTag.height() - 50);
      Sk.environ.set$item(new Sk.builtin.str("DESIGNER_WINDOW_WIDTH"), new Sk.builtin.int_(Math.round(width)));
      Sk.environ.set$item(new Sk.builtin.str("DESIGNER_WINDOW_HEIGHT"), new Sk.builtin.int_(Math.round(height)));
      Sk.retainGlobals = false;
      this.clearInput();
      return this;
    }
  }, {
    key: "success",
    value: function success(module) {
      var _this = this;

      console.log("Run success");
      var message = {
        "inputs": this.main.model.execution.input().join("\n"),
        "outputs": this.main.model.execution.output().map(function (line) {
          return line.content;
        }).join("\n")
      };
      this.main.components.server.logEvent("Run.Program", "", "", JSON.stringify(message), "answer.py");
      this.main.model.display.dirtySubmission(false);
      this.main.components.console.finishTurtles();
      this.main.model.status.onExecution(_server__WEBPACK_IMPORTED_MODULE_1__["StatusState"].READY);
      this.main.model.execution.student.globals(Sk.globals);
      Sk.globals = {};
      var report = this.main.model.execution.reports;
      var filename = this.filename;
      this.main.model.execution.student.results = module;

      if (!this.main.model.assignment.settings.hideEvaluate()) {
        this.main.components.console.beginEval();
      }

      return new Promise(function (resolve, reject) {
        _this.step(module.$d, module.$d, -1, 0, filename + ".py");

        _this.lastStep();

        report["student"] = {
          "success": true,
          "trace": _this.engine.executionBuffer.trace,
          "lines": _this.engine.executionBuffer.trace.map(function (x) {
            return x.line;
          }),
          "realLines": _this.engine.executionBuffer.trace.filter(function (x) {
            return !x.isDocstring;
          }).map(function (x) {
            return x.line;
          }),
          "results": module,
          "output": _this.main.model.execution.output,
          "input": _this.main.model.execution.input,
          "calls": _this.main.model.execution.student.calls,
          "tracing": []
        };
        resolve();
      });
    }
  }, {
    key: "failure",
    value: function failure(error) {
      var _this2 = this;

      console.error("Run failure", error);
      this.main.model.status.onExecution(_server__WEBPACK_IMPORTED_MODULE_1__["StatusState"].FAILED);
      var report = this.main.model.execution.reports;

      if (report.parser.success && report.verifier.success) {
        this.main.components.server.logEvent("Compile.Error", "", "", error.toString(), "answer.py");
      } else {
        this.main.components.server.logEvent("Run.Program", "ProgramErrorOutput", "", error.toString(), "answer.py");
      }

      this.lastStep();
      return new Promise(function (resolve, reject) {
        report["student"] = {
          "success": false,
          "error": error,
          "trace": _this2.engine.executionBuffer.trace,
          "lines": _this2.engine.executionBuffer.trace.map(function (x) {
            return x.line;
          }),
          "realLines": _this2.engine.executionBuffer.trace.filter(function (x) {
            return !x.isDocstring;
          }).map(function (x) {
            return x.line;
          }),
          "input": _this2.main.model.execution.input,
          "calls": _this2.main.model.execution.student.calls,
          "tracing": []
        };
        resolve();
      });
    }
  }]);

  return RunConfiguration;
}(_student__WEBPACK_IMPORTED_MODULE_0__["StudentConfiguration"]);

/***/ }),

/***/ "./src/engine/sample.js":
/*!******************************!*\
  !*** ./src/engine/sample.js ***!
  \******************************/
/*! exports provided: SampleConfiguration */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SampleConfiguration", function() { return SampleConfiguration; });
/* harmony import */ var _student__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./student */ "./src/engine/student.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var SampleConfiguration = /*#__PURE__*/function (_StudentConfiguration) {
  _inherits(SampleConfiguration, _StudentConfiguration);

  var _super = _createSuper(SampleConfiguration);

  function SampleConfiguration() {
    _classCallCheck(this, SampleConfiguration);

    return _super.apply(this, arguments);
  }

  _createClass(SampleConfiguration, [{
    key: "use",
    value: function use(engine) {
      _get(_getPrototypeOf(SampleConfiguration.prototype), "use", this).call(this, engine); // TODO: Fix to be the current sample submission


      this.filename = "answer.py";
      this.code = "print('Not ready yet!')";
      return this;
    }
  }]);

  return SampleConfiguration;
}(_student__WEBPACK_IMPORTED_MODULE_0__["StudentConfiguration"]);

/***/ }),

/***/ "./src/engine/student.js":
/*!*******************************!*\
  !*** ./src/engine/student.js ***!
  \*******************************/
/*! exports provided: StudentConfiguration */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StudentConfiguration", function() { return StudentConfiguration; });
/* harmony import */ var _configurations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./configurations */ "./src/engine/configurations.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var StudentConfiguration = /*#__PURE__*/function (_Configuration) {
  _inherits(StudentConfiguration, _Configuration);

  var _super = _createSuper(StudentConfiguration);

  function StudentConfiguration() {
    _classCallCheck(this, StudentConfiguration);

    return _super.apply(this, arguments);
  }

  _createClass(StudentConfiguration, [{
    key: "use",
    value: function use(engine) {
      var _this = this;

      _get(_getPrototypeOf(StudentConfiguration.prototype), "use", this).call(this, engine); // Limit execution to 4 seconds


      var settings = this.main.model.settings;

      Sk.execLimitFunction = function () {
        return _this.main.model.assignment.settings.disableTimeout() ? Infinity : 5000;
      };

      Sk.execLimit = Sk.execLimitFunction(); // Stepper! Executed after every statement.

      Sk.afterSingleExecution = this.step.bind(this); // Unmute everything

      this.main.model.display.mutePrinter(false); // Function to call after each step
      // afterSingleExecution

      Sk.builtinFiles.files["src/lib/utility/__init__.js"] = _configurations__WEBPACK_IMPORTED_MODULE_0__["EMPTY_MODULE"];
      return this;
    }
  }, {
    key: "openFile",
    value: function openFile(filename) {
      var found = this.main.components.fileSystem.searchForFile(filename, true); //console.log(filename, found);

      if (found === undefined) {
        if (Sk.builtinFiles && Sk.builtinFiles["files"][filename] !== undefined) {
          return Sk.builtinFiles["files"][filename];
        } else {
          throw new Sk.builtin.OSError("File not found: " + filename);
        }
      } else {
        return found.contents();
      }
    }
  }, {
    key: "importFile",
    value: function importFile(filename) {
      if (this.isForbidden(filename)) {
        throw "File not accessible: '" + filename + "'";
      } else if (filename === "./answer.py") {
        return this.main.model.submission.code();
      } else if (Sk.builtinFiles === undefined) {
        throw new Sk.builtin.OSError("Built-in modules not accessible.");
      } else if (Sk.builtinFiles["files"][filename] !== undefined) {
        return Sk.builtinFiles["files"][filename];
      } else {
        var found = this.main.components.fileSystem.searchForFile(filename, true);

        if (found === undefined) {
          throw new Sk.builtin.OSError("File not found: '" + filename + "'");
        } else {
          return found.contents();
        }
      }
    }
  }, {
    key: "input",
    value: function input(promptMessage) {
      return this.main.components.console.input(promptMessage);
    }
  }, {
    key: "isForbidden",
    value: function isForbidden(filename) {
      return filename.startsWith("src/lib/utility/") || filename.startsWith("src/lib/pedal/") || filename.startsWith("./_instructor/");
    }
    /**
     * "Steps" the execution of the code, meant to be used as a callback to the Skulpt
     * environment.
     *
     * @param {Object} globals - Hash that maps the names of global variables (Strings) to their Skulpt representation.
     * @param {Object} locals - Hash that maps the names of local variables (Strings) to their Skulpt representation.
     * @param {Number} lineNumber - The corresponding line number in the source code that is being executed.
     * @param {Number} columnNumber - The corresponding column number in the source code that is being executed.
     *                                Think of it as the "X" position to the lineNumber's "Y" position.
     * @param {String} filename - The name of the python file being executed (e.g., "__main__.py").
     * @param {Boolean} isDocstring - Whether or not this is an actual line or a docstring.
     */

  }, {
    key: "step",
    value: function step(globals, locals, lineNumber, columnNumber, filename, isDocstring, astName) {
      if (filename === "answer.py") {
        /*if (execStack) {
            console.log(execStack.map(([n, o]) => [n, {...o}]));
        }*/
        var currentStep = this.engine.executionBuffer.step;
        globals = this.main.components.trace.parseGlobals(_objectSpread(_objectSpread({}, globals), locals)); // TODO: Trace local variables properly
        //let locals = this.main.components.trace.parseGlobals(locals);
        //Object.assign(globals, locals);

        this.engine.executionBuffer.trace.push({
          "step": currentStep,
          "filename": filename,
          //'block': highlightMap[lineNumber-1],
          "line": lineNumber,
          "column": columnNumber,
          "properties": globals.properties,
          "modules": globals.modules,
          "isDocstring": isDocstring,
          "ast": astName
        });
        this.engine.executionBuffer.step = currentStep + 1;
        this.engine.executionBuffer.line = lineNumber;
      }
    }
  }, {
    key: "lastStep",

    /**
     * Called at the end of the Skulpt execution to terminate the executionBuffer
     * and hand it off to the execution trace in the model.
     */
    value: function lastStep() {
      var execution = this.main.model.execution;
      execution.student.currentTraceData(this.engine.executionBuffer.trace);
      execution.student.currentStep(this.engine.executionBuffer.step);
      execution.student.lastStep(this.engine.executionBuffer.step);
      execution.student.currentLine(this.engine.executionBuffer.line);
      execution.student.lastLine(this.engine.executionBuffer.line);
      execution.student.currentTraceStep(this.engine.executionBuffer.step);
    }
  }, {
    key: "getLines",
    value: function getLines(ast) {
      var visitedLines = new Set();

      var visitBody = function visitBody(node) {
        if (node.lineno !== undefined) {
          visitedLines.add(node.lineno);
        }

        if (node.body) {
          node.body.forEach(function (statement) {
            return visitBody(statement);
          });
        }

        if (node.orelse) {
          node.orelse.forEach(function (statement) {
            return visitBody(statement);
          });
        }

        if (node.finalbody) {
          node.finalbody.forEach(function (statement) {
            return visitBody(statement);
          });
        }
      };

      visitBody(ast);
      return Array.from(visitedLines);
    }
    /**
     * Ensure that the parse information is up-to-date
     */

  }, {
    key: "updateParse",
    value: function updateParse() {
      var report = this.main.model.execution.reports; // Hold all the actually discovered lines from the parse

      var lines = []; // Attempt a parse

      var ast;

      try {
        var parse = Sk.parse(this.filename, this.code);
        ast = Sk.astFromParse(parse.cst, this.filename, parse.flags);
        lines = this.getLines(ast);
      } catch (error) {
        // Report the error
        report["parser"] = {
          "success": false,
          "error": error,
          "empty": true,
          "lines": lines
        };
        console.error(error);
        console.log(this.filename, this.code);
        return false;
      } // Successful parse


      report["parser"] = {
        "success": true,
        "ast": ast,
        "empty": ast.body.length === 0,
        "lines": lines
      };
      return true;
    }
  }, {
    key: "showErrors",
    value: function showErrors() {
      var report = this.main.model.execution.reports;

      if (report["student"].success) {
        this.main.components.feedback.clear("Execution finished. No errors to report.");
      } else {
        this.main.components.feedback.presentRunError(report.student.error);
      }
    }
  }, {
    key: "provideSecretError",
    value: function provideSecretError() {
      var _this2 = this;

      var report = this.main.model.execution.reports;
      var feedback = this.main.components.feedback;

      if (!report["student"].success) {
        var errorButton = this.main.model.configuration.container.find(".blockpy-student-error");
        var message = feedback.presentRunError(report.student.error, true);
        errorButton.attr("title", "Click to see Original Error");
        errorButton.tooltip({
          "trigger": "hover",
          "container": this.main.model.configuration.attachmentPoint
        });
        errorButton.click(function () {
          return _this2.main.components.dialog.ERROR_SHOW_STUDENT_ERROR(message);
        });
        errorButton.show();
      }
    }
  }]);

  return StudentConfiguration;
}(_configurations__WEBPACK_IMPORTED_MODULE_0__["Configuration"]);

/***/ }),

/***/ "./src/feedback.js":
/*!*************************!*\
  !*** ./src/feedback.js ***!
  \*************************/
/*! exports provided: FEEDBACK_HTML, BlockPyFeedback */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FEEDBACK_HTML", function() { return FEEDBACK_HTML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockPyFeedback", function() { return BlockPyFeedback; });
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utilities */ "./src/utilities.js");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }


var FEEDBACK_HTML = "\n\n<span class='blockpy-floating-feedback text-muted-less pull-right position-sticky sticky-top'\n    aria-hidden=\"true\" role=\"presentation\" aria-label=\"New Feedback Alert\">\n    New feedback &uarr;\n</span>\n\n<div class='blockpy-feedback blockpy-panel'\n            role=\"region\" aria-label=\"Feedback\"\n            aria-live=\"polite\"\n            data-bind=\"class: ui.console.size\">\n\n    <div>\n    <!-- Feedback/Trace Visibility Control -->\n    <!-- ko ifnot: ui.secondRow.hideTraceButton -->\n    <button type='button'\n            class='btn btn-sm btn-outline-secondary float-right'\n            data-bind=\"click: ui.secondRow.advanceState\">\n        <span class='fas fa-eye'></span>\n        <span data-bind=\"text: ui.secondRow.switchLabel\"></span>\n    </button>\n    <!-- /ko -->\n    \n    <!-- Positive Feedback Region -->\n    <div class=\"blockpy-feedback-positive float-right\">\n        \n    \n    </div>\n\n    <!-- Actual Feedback Region -->    \n    <div>\n        <strong>Feedback: </strong>\n        <span class='badge blockpy-feedback-category feedback-badge'\n            data-bind=\"css: ui.feedback.badge,\n                       text: ui.feedback.category\">Feedback Kind</span>\n        <small data-bind=\"text: (100*submission.score())+'%',\n                          visible: display.instructor() && execution.feedback.label()\"\n            class=\"text-muted\"></small>\n        <small data-bind=\"click: ui.feedback.resetScore,\n                          visible: display.instructor() && execution.feedback.label() && submission.score() > 0\"\n            class=\"text-muted\" style=\"cursor: pointer\"><u>(reset)</u></small>\n    </div>\n    <div>\n        <strong class=\"blockpy-feedback-label\"\n            data-bind=\"text: execution.feedback.label\"></strong>\n        <div class=\"blockpy-feedback-message\"\n            data-bind=\"html: execution.feedback.message\"></div>\n    </div>\n    </div>\n    <div style=\"position: relative;\">\n        <!-- The thank you message will appear above the span -->\n        <span class=\"blockpy-feedback-thank-you\">Thank you!</span>\n    </div>\n    <small class=\"blockpy-feedback-response-full\" style=\"text-align: right\"\n        data-bind=\"visible: ui.feedback.provideRatings() && execution.feedback.label() && display.showRating()\">\n        <span style=\"cursor: pointer;\" class=\"far fa-minus-square\"\n            data-bind=\"click: ui.feedback.flipRating\"></span>\n        Rate this Feedback:\n        <span style=\"cursor: pointer; font-size: 20px\" class=\"blockpy-rating fa-thumbs-up\"\n            data-bind=\"click: ()=>ui.feedback.rate('thumbs-up'),\n                        css: ui.feedback.hasRatedClass\"></span>\n<!--        <span style=\"cursor: pointer; font-size: 20px\" class=\"blockpy-rating fa-meh\"-->\n<!--            data-bind=\"click: ()=>ui.feedback.rate('meh'),-->\n<!--                        css: ui.feedback.hasRatedClass\"></span>-->\n        <span style=\"cursor: pointer; font-size: 20px\" class=\"blockpy-rating fa-thumbs-down\"\n            data-bind=\"click: ()=>ui.feedback.rate('thumbs-down'),\n                        css: ui.feedback.hasRatedClass\"></span>\n    </small>\n    <small class=\"blockpy-feedback-response-collapsed\" \n        style=\"position: absolute; right: 0; bottom: 0\"\n        data-bind=\"visible: execution.feedback.label() && !display.showRating()\">\n        <span style=\"cursor: pointer; vertical-align: middle\" class=\"far fa-plus-square\"\n            data-bind=\"click: ui.feedback.flipRating\"></span> Rate\n    </small>\n</div>            \n";
var BlockPyFeedback = /*#__PURE__*/function () {
  /**
   * An object that manages the feedback area, where users are told the state of their
   * program's execution and given guidance. Also manages the creation of the Trace Table.
   *
   * @constructor
   * @this {BlockPyFeedback}
   * @param {Object} main - The main BlockPy instance
   * @param {HTMLElement} tag - The HTML object this is attached to.
   */
  function BlockPyFeedback(main, tag) {
    var _this = this;

    _classCallCheck(this, BlockPyFeedback);

    this.main = main;
    this.tag = tag;
    this.feedbackModel = this.main.model.execution.feedback;
    this.category = this.tag.find(".blockpy-feedback-category");
    this.label = this.tag.find(".blockpy-feedback-label");
    this.message = this.tag.find(".blockpy-feedback-message");
    this.positive = this.tag.find(".blockpy-feedback-positive"); // TODO: If they change the student extra files, also update the dirty flag

    this.main.model.submission.code.subscribe(function () {
      return _this.main.model.display.dirtySubmission(true);
    });
  }

  _createClass(BlockPyFeedback, [{
    key: "scrollIntoView",

    /**
     * Moves the screen (takes 1 second) to make the Feedback area visible.
     */
    value: function scrollIntoView() {
      $("html, body").animate({
        scrollTop: this.tag.offset().top
      }, 700);
    }
  }, {
    key: "isFeedbackVisible",

    /**
     * Determines if the feedback area is currently visible
     * @returns {boolean}
     */
    value: function isFeedbackVisible() {
      var visibilityBuffer = 100;
      var topOfElement = this.tag.offset().top; //let bottomOfElement = this.tag.offset().top + this.tag.outerHeight();

      var bottomOfElement = topOfElement + visibilityBuffer;
      var bottomOfScreen = $(window).scrollTop() + $(window).height();
      var topOfScreen = $(window).scrollTop(); //bottom_of_element -= 40; // User friendly padding

      return topOfElement < bottomOfScreen && topOfScreen < bottomOfElement;
    }
  }, {
    key: "clear",

    /**
     * Clears any output currently in the feedback area. Also resets the printer and
     * any highlighted lines in the editor.
     */
    value: function clear() {
      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "Ready";
      this.feedbackModel.message(message);
      this.feedbackModel.category(null);
      this.feedbackModel.label(null);
      this.feedbackModel.hidden(false);
      this.feedbackModel.linesError.removeAll();
      this.feedbackModel.linesUncovered.removeAll();
      this.clearPositiveFeedback();
      this.category.off("click");
      this.main.model.display.hasRated(false);
    }
  }, {
    key: "updateRegularFeedback",
    value: function updateRegularFeedback() {}
    /**
     * Updates the model with these new execution results
     * @param executionResults
     */

  }, {
    key: "updateFeedback",
    value: function updateFeedback(executionResults) {
      var _this2 = this;

      // Parse out data
      var message = Sk.ffi.remapToJs(executionResults.MESSAGE);
      var category = Sk.ffi.remapToJs(executionResults.CATEGORY);
      var label = Sk.ffi.remapToJs(executionResults.LABEL);
      var hide = Sk.ffi.remapToJs(executionResults.HIDE);
      var data = executionResults.DATA;
      var positives = Sk.ffi.remapToJs(executionResults.POSITIVE); // Override based on assignments' settings

      var hideScore = this.main.model.assignment.hidden();

      if (hideScore && category.toLowerCase() === "complete") {
        category = "no errors";
        label = "No errors";
        message = "No errors reported.";
      } // Remap to expected BlockPy labels


      if (category.toLowerCase() === "instructor" && label.toLowerCase() === "explain") {
        label = "Instructor Feedback";
      } // Don't present a lack of error as being incorrect


      if (category === "Instructor" && label === "No errors") {
        category = "no errors";
      } // Update model accordingly


      message = this.main.utilities.markdown(message).replace(/<pre>\n/g, "<pre>\n\n");
      this.feedbackModel.message(message);
      this.feedbackModel.category(category);
      this.feedbackModel.label(label); //let highlightTimeout = setTimeout(() => {

      this.message.find("pre code").map(function (i, block) {
        window.hljs.highlightBlock(block);
      }); //}, 400);
      // TODO: Instead of tracking student file, let's track the instructor file

      this.main.components.server.logEvent("Intervention", category, label, message, "answer.py"); // Clear out any previously highlighted lines

      this.main.components.pythonEditor.bm.clearHighlightedLines(); // Find the first error on a line and report that

      var line = BlockPyFeedback.findFirstErrorLine(data);
      this.feedbackModel.linesError.removeAll();

      if (line !== null && line !== undefined) {
        this.feedbackModel.linesError.push(line);
      } // Invert the set of traced lines


      var studentReport = this.main.model.execution.reports.student;
      this.feedbackModel.linesUncovered.removeAll();

      if (studentReport.success) {
        var uncoveredLines = [];
        this.main.model.execution.reports.parser.lines.forEach(function (line) {
          if (studentReport.lines.indexOf(line) === -1) {
            uncoveredLines.push(line);
          }
        });
        this.feedbackModel.linesUncovered(uncoveredLines);
      }

      var _loop = function _loop(i) {
        var positiveData = positives[i];

        _this2.addPositiveFeedback(positiveData.message, "star", "green", function () {
          return _this2.main.components.dialog.POSITIVE_FEEDBACK_FULL(positiveData.title, positiveData.message);
        });
      };

      for (var i = 0; i < positives.length; i += 1) {
        _loop(i);
      }
    }
  }, {
    key: "clearPositiveFeedback",
    value: function clearPositiveFeedback() {
      this.positive.empty();
      this.main.model.configuration.container.find(".blockpy-student-error").hide();
    }
  }, {
    key: "addPositiveFeedback",
    value: function addPositiveFeedback(text, icon, color, onclick, toEnd) {
      var _this3 = this;

      var positive = $("<span></span>");
      positive.addClass("blockpy-feedback-positive-icon fas fa-" + icon);
      positive.css("color", color);
      positive.attr("title", text);

      if (toEnd) {
        this.positive.append(positive);
      } else {
        this.positive.prepend(positive);
      }

      positive.tooltip({
        "trigger": "hover",
        "container": this.main.model.configuration.attachmentPoint
      });

      if (onclick !== undefined) {
        positive.click(onclick);
      }

      positive.hover(function () {
        _this3.main.components.server.logEvent("X-Feedback", "positive", "hover", text, "");
      });
    }
    /**
     * Present any accumulated feedback
     */

  }, {
    key: "presentFeedback",
    value: function presentFeedback(executionResults) {
      this.updateFeedback(executionResults);
      this.category.off("click");

      if (this.main.model.display.instructor()) {
        this.updateFullFeedback(executionResults);
      } // TODO: Logging
      //this.main.components.server.logEvent("feedback", category+"|"+label, message);


      this.notifyFeedbackUpdate();
    }
  }, {
    key: "processSingleFeedback",
    value: function processSingleFeedback(element) {
      var title = element.tp$getattr(new _utilities__WEBPACK_IMPORTED_MODULE_0__["pyStr"]("title")).toString();
      var category = Object(_utilities__WEBPACK_IMPORTED_MODULE_0__["capitalize"])(element.tp$getattr(new _utilities__WEBPACK_IMPORTED_MODULE_0__["pyStr"]("category")).toString());
      var kind = element.tp$getattr(new _utilities__WEBPACK_IMPORTED_MODULE_0__["pyStr"]("kind")).toString();
      var active = Sk.misceval.isTrue(element);
      var message = element.tp$getattr(new _utilities__WEBPACK_IMPORTED_MODULE_0__["pyStr"]("message")).toString();
      var unused_message = element.tp$getattr(new _utilities__WEBPACK_IMPORTED_MODULE_0__["pyStr"]("unused_message")).toString();
      message = message === "None" ? unused_message : message;
      var justification = element.tp$getattr(new _utilities__WEBPACK_IMPORTED_MODULE_0__["pyStr"]("justification")).toString();
      var parent = element.tp$getattr(new _utilities__WEBPACK_IMPORTED_MODULE_0__["pyStr"]("parent"));
      var hasParent = !Sk.builtin.checkNone(parent);
      var score = element.tp$getattr(new _utilities__WEBPACK_IMPORTED_MODULE_0__["pyStr"]("resolved_score"));
      score = score === Sk.builtin.none.none$ ? "" : score.tp$name === "float" ? "+" + Math.round(score.v * 100).toString() + "%" : score.toString();
      return [element, parent, "\n        <div class=\"list-group-item flex-column align-items-start\" ".concat(hasParent ? "style='margin-left: 50px;'" : "", ">\n            <div class=\"d-flex w-100 justify-content-between align-items-center\">\n                <span><strong class=\"mb-1\" style=\"").concat(active ? "" : "text-decoration: line-through;", "\">").concat(title, "</strong> (").concat(category, " - ").concat(kind, ")</span>\n                <span class=\"badge badge-info badge-pill\">").concat(score, "</span>\n            </div>\n            ").concat(active ? "" : "<div>(Muted - Not shown to student)</div>", "\n            <div class=\"mb-1 p-1 feedback-expand-on-click feedback-shrunk\">\n                ").concat(message, "\n            </div>\n            <small style=\"white-space: pre\">").concat(justification, "</small>\n        </div>\n        ")];
    }
  }, {
    key: "updateFullFeedback",
    value: function updateFullFeedback(executionResults) {
      var _this4 = this;

      console.log(executionResults);

      if (!("MAIN_REPORT" in executionResults)) {
        return;
      }

      var mainReport = executionResults.MAIN_REPORT;
      var feedback = mainReport.tp$getattr(new _utilities__WEBPACK_IMPORTED_MODULE_0__["pyStr"]("feedback"));

      if (!feedback) {
        return;
      }

      var feedbacks = [];
      Sk.misceval.iterFor(feedback.tp$iter(), function (element) {
        feedbacks.push(_this4.processSingleFeedback(element));
      });
      Sk.misceval.iterFor(mainReport.tp$getattr(new _utilities__WEBPACK_IMPORTED_MODULE_0__["pyStr"]("ignored_feedback")).tp$iter(), function (element) {
        feedbacks.push(_this4.processSingleFeedback(element));
      });
      var parents = new Map();

      for (var i = 0; i < feedbacks.length; i += 1) {
        var _feedbacks$i = _slicedToArray(feedbacks[i], 3),
            element = _feedbacks$i[0],
            parent = _feedbacks$i[1],
            text = _feedbacks$i[2];

        var hasParent = !Sk.builtin.checkNone(parent);

        if (hasParent) {
          if (!parents.has(parent)) {
            parents.set(parent, []);
          }

          parents.get(parent).push(text);
        } else {
          if (!parents.has(element)) {
            parents.set(element, []);
          }

          parents.get(element).unshift(text);
        }
      }

      feedbacks = _toConsumableArray(parents.values()).flat();
      this.category.on("click", function () {
        _this4.main.components.dialog.show("Full Feedback Information", '<div class="list-group">' + feedbacks.join("\n") + "</div>");

        $(".feedback-expand-on-click").on("click", function (event) {
          $(event.target).toggleClass("feedback-shrunk");
        });
      });
    }
  }, {
    key: "notifyFeedbackUpdate",
    value: function notifyFeedbackUpdate() {
      if (!this.isFeedbackVisible()) {
        this.tag.find(".blockpy-floating-feedback").show().fadeOut(7000);

        if (this.shouldScrollIntoView()) {
          this.scrollIntoView();
        }
      }
    }
  }, {
    key: "shouldScrollIntoView",
    value: function shouldScrollIntoView() {
      return !this.main.model.ui.smallLayout();
    }
  }, {
    key: "presentRunError",
    value: function presentRunError(error, just_return) {
      if (just_return === undefined) {
        just_return = false;
      }

      var message, label, category, lineno;
      label = error.tp$name;
      category = "runtime";
      message = this.convertSkulptError(error);

      if (just_return) {
        return message;
      }

      this.feedbackModel.message(message);
      this.feedbackModel.category(category);
      this.feedbackModel.label(label);
      this.feedbackModel.linesError.removeAll();

      if (lineno !== undefined && lineno !== null) {
        this.feedbackModel.linesError.push(lineno);
      }
    }
  }, {
    key: "buildTraceback",
    value: function buildTraceback(error, filenameExecuted) {
      var _this5 = this;

      return error.traceback.map(function (frame) {
        if (!frame) {
          return "??";
        }

        var lineno = frame.lineno;

        if (frame.filename.slice(0, -3) === filenameExecuted) {
          lineno -= _this5.main.model.execution.reports.instructor.lineOffset;
        }

        var file = "File <code class=\"filename\">\"".concat(frame.filename, "\"</code>, ");
        var line = "on line <code class=\"lineno\">".concat(lineno, "</code>, ");
        var scope = frame.scope !== "<module>" && frame.scope !== undefined ? "in scope ".concat(frame.scope) : "";
        var source = "";

        if (frame.source !== undefined) {
          source = "\n<pre><code>".concat(frame.source, "</code></pre>");
        }

        return file + line + scope + source;
      });
    }
  }, {
    key: "convertSkulptError",
    value: function convertSkulptError(error, filenameExecuted, isInstructor) {
      var name = error.tp$name;
      var args = Sk.ffi.remapToJs(error.args);
      var top = "".concat(name, ": ").concat(args[0], "\n<br>\n<br>");
      var traceback = "";

      if (name === "TimeoutError") {
        if (error.err && error.err.traceback && error.err.traceback.length) {
          var allFrames = this.buildTraceback(error.err, filenameExecuted);
          var result = ["Traceback:"];

          if (allFrames.length > 5) {
            result.push.apply(result, _toConsumableArray(allFrames.slice(0, 3)).concat(["... Hiding ".concat(allFrames.length - 3, " other stack frames ...,")], _toConsumableArray(allFrames.slice(-3, -2))));
          } else {
            result.push.apply(result, _toConsumableArray(allFrames));
          }

          traceback = result.join("\n<br>");
        }
      } else {
        if (isInstructor) {
          top = "Error in instructor feedback. Please show the following to an instructor:<br>\n" + top;
        }

        if (error.traceback && error.traceback.length) {
          traceback = "Traceback:<br>\n" + this.buildTraceback(error, filenameExecuted).join("\n<br>");
        }
      }

      return top + "\n" + traceback;
    }
  }, {
    key: "presentInternalError",
    value: function presentInternalError(error, filenameExecuted) {
      if (error.tp$name === "TimeoutError") {
        this.main.model.execution.feedback.category("runtime");
        this.main.model.execution.feedback.label("Timeout Error");
      } else {
        this.main.model.execution.feedback.category("internal");
        this.main.model.execution.feedback.label("Internal Error");
      }

      var message = this.convertSkulptError(error, filenameExecuted, true);
      this.main.model.execution.feedback.message(message);
      this.notifyFeedbackUpdate();
      this.main.components.server.logEvent("X-System.Error", "internal", "Internal Error", message, filenameExecuted);
    }
  }], [{
    key: "findFirstErrorLine",
    value: function findFirstErrorLine(feedbackData) {
      if (feedbackData.quick$lookup) {
        var location = feedbackData.quick$lookup(new Sk.builtin.str("location"));

        if (location) {
          var line = location.tp$getattr(new Sk.builtin.str("line"));

          if (line) {
            return Sk.ffi.remapToJs(line);
          }
        }
      }

      return null;
      /*for (let i = feedbackData.length-1; i >= 0; i-= 1) {
          if ("position" in feedbackData[i]) {
              return feedbackData[i].position.line;
          }
      }
      return null;*/
    }
  }]);

  return BlockPyFeedback;
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/files.js":
/*!**********************!*\
  !*** ./src/files.js ***!
  \**********************/
/*! exports provided: FILES_HTML, STARTING_FILES, BASIC_NEW_FILES, chompSpecialFile, UNDELETABLE_FILES, UNRENAMABLE_FILES, makeModelFile, loadConcatenatedFile, createConcatenatedFile, observeConcatenatedFile, BlockPyFileSystem */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(ko, $) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FILES_HTML", function() { return FILES_HTML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "STARTING_FILES", function() { return STARTING_FILES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BASIC_NEW_FILES", function() { return BASIC_NEW_FILES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chompSpecialFile", function() { return chompSpecialFile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UNDELETABLE_FILES", function() { return UNDELETABLE_FILES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UNRENAMABLE_FILES", function() { return UNRENAMABLE_FILES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeModelFile", function() { return makeModelFile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadConcatenatedFile", function() { return loadConcatenatedFile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createConcatenatedFile", function() { return createConcatenatedFile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "observeConcatenatedFile", function() { return observeConcatenatedFile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockPyFileSystem", function() { return BlockPyFileSystem; });
/* harmony import */ var utilities_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! utilities.js */ "./src/utilities.js");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

 // ${makeTab("?mock_urls.blockpy", "URL Data", true)}

var makeTab = function makeTab(filename, friendlyName, hideIfEmpty, notInstructor) {
  if (friendlyName === undefined) {
    friendlyName = filename;
  }

  var instructorFileClass = "";
  var hideIfNotInstructor = "true";

  if (!notInstructor) {
    instructorFileClass = "blockpy-file-instructor";
    hideIfNotInstructor = "display.instructor()";
  }

  return "\n    <li class=\"nav-item ".concat(instructorFileClass, "\">\n        <a class=\"nav-link\" href=\"#\"\n            data-toggle=\"tab\"\n            data-bind=\"css: {active: display.filename() === '").concat(filename, "'},\n                click: display.filename.bind($data, '").concat(filename, "'),\n                visible: (!").concat(hideIfEmpty, " || ui.files.hasContents('").concat(filename, "')) && ").concat(hideIfNotInstructor, "\">\n            ").concat(friendlyName, "</a>\n    </li>");
};

var FILES_HTML = "\n<div class=\"blockpy-panel blockpy-files\"\n    data-bind=\"visible: ui.files.visible, class: ui.files.width\">\n<ul class=\"nav nav-tabs\" role=\"tablist\">\n\n    <li class=\"nav-item\">\n        <strong>View: </strong>\n    </li>\n\n    ".concat(makeTab("answer.py", undefined, undefined, true), "\n    ").concat(makeTab("!instructions.md", "Instructions"), "\n    ").concat(makeTab("!assignment_settings.blockpy", "Settings"), "\n    ").concat(makeTab("^starting_code.py", "Starting Code"), "\n    ").concat(makeTab("!on_run.py", "On Run"), "\n    ").concat(makeTab("!on_change.py", "On Change", true), "\n    ").concat(makeTab("!on_eval.py", "On Eval", true), "\n    ").concat(makeTab("!sample_submissions.blockpy", "Sample Submissions", true), "\n    ").concat(makeTab("!tags.blockpy", "Tags", true), "\n    \n    <!-- ko foreach: assignment.extraInstructorFiles -->\n        <li class=\"nav-item\"\n            data-bind=\"css: {'blockpy-file-instructor': !filename().startsWith('&')},\n                       visible: filename().startsWith('&') || $root.display.instructor() \">\n            <a class=\"nav-link\" href=\"#\"\n                data-toggle=\"tab\"\n                data-bind=\"css: {active: $root.display.filename() === filename(),\n                                 uneditable: filename().startsWith('&')},\n                            click: $root.display.filename.bind($data, filename()),\n                            text: $root.ui.files.displayFilename(filename())\">\n            </a>        \n        </li>\n    <!-- /ko -->\n    <!-- ko foreach: assignment.extraStartingFiles -->\n        <li class=\"nav-item blockpy-file-instructor\"\n            data-bind=\"visible: $root.display.instructor()\">\n            <a class=\"nav-link\" href=\"#\"\n                data-toggle=\"tab\"\n                data-bind=\"css: {active: $root.display.filename() === filename()},\n                            click: $root.display.filename.bind($data, filename()),\n                            text: filename\">\n            </a>        \n        </li>\n    <!-- /ko -->\n    \n    <!-- ko foreach: submission.extraFiles -->\n        <li class=\"nav-item\">\n            <a class=\"nav-link\" href=\"#\"\n                data-toggle=\"tab\"\n                data-bind=\"css: {active: $root.display.filename() === filename()},\n                            click: $root.display.filename.bind($data, filename()),\n                            text: $root.ui.files.displayFilename(filename())\">\n            </a>\n        </li>\n    <!-- /ko -->\n  \n    <li class=\"nav-item dropdown\" data-bind=\"visible: ui.files.addIsVisible\">\n        <a class=\"nav-link dropdown-toggle\" href=\"#\" data-toggle=\"dropdown\"\n         role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">Add New</a>\n        <!-- ko if: $root.display.instructor() -->\n        <div class=\"dropdown-menu dropdown-menu-right\">\n            <a class=\"dropdown-item blockpy-file-instructor\" href=\"#\"\n                data-bind=\"hidden: ui.files.hasContents('?mock_urls.blockpy'),\n                           click: ui.files.add.bind($data, '?mock_urls.blockpy')\">URL Data</a>\n            <a class=\"dropdown-item blockpy-file-instructor\" href=\"#\"\n                data-bind=\"hidden: ui.files.hasContents('images.blockpy'),\n                           click: ui.files.add.bind($data, 'images.blockpy')\">Images</a>\n            <a class=\"dropdown-item blockpy-file-instructor\" href=\"#\"\n                data-bind=\"hidden: ui.files.hasContents('?toolbox.blockpy'),\n                           click: ui.files.add.bind($data, '?toolbox.blockpy')\">Toolbox</a>\n            \n            <a class=\"dropdown-item blockpy-file-instructor\" href=\"#\"\n                data-bind=\"hidden: ui.files.hasContents('!tags.blockpy')\">Tags</a>\n            <a class=\"dropdown-item blockpy-file-instructor\" href=\"#\"\n                data-bind=\"hidden: ui.files.hasContents('!sample_submissions.blockpy'),\n                           click: ui.files.add.bind($data, '!sample_submissions.blockpy')\">Sample Submissions</a>\n            <div class=\"dropdown-divider\"></div>\n            <a class=\"dropdown-item blockpy-file-instructor\" href=\"#\"\n                data-bind=\"hidden: assignment.onChange,\n                           click: ui.files.add.bind($data, '!on_change.py')\">On Change</a>\n            <a class=\"dropdown-item blockpy-file-instructor\" href=\"#\"\n                data-bind=\"hidden: assignment.onEval,\n                           click: ui.files.add.bind($data, '!on_eval.py')\">On Eval</a>\n            <div class=\"dropdown-divider\"></div>\n           <a class=\"dropdown-item blockpy-file-instructor\" href=\"#\"\n                data-bind=\"hidden: ui.files.hasContents('!answer_prefix.py'),\n                           click: ui.files.add.bind($data, '!answer_prefix.py')\">Answer Prefix</a>\n           <a class=\"dropdown-item blockpy-file-instructor\" href=\"#\"\n                data-bind=\"hidden: ui.files.hasContents('!answer_suffix.py'),\n                           click: ui.files.add.bind($data, '!answer_suffix.py')\">Answer Suffix</a>\n            <div class=\"dropdown-divider\"></div>\n            <a class=\"dropdown-item blockpy-file-instructor\" href=\"#\"\n                data-bind=\"click: ui.files.add.bind($data, 'starting')\">Starting File</a>\n            <a class=\"dropdown-item blockpy-file-instructor\" href=\"#\"\n                data-bind=\"click: ui.files.add.bind($data, 'instructor')\">Instructor File</a>\n            <a class=\"dropdown-item\" href=\"#\"\n                data-bind=\"click: ui.files.add.bind($data, 'student')\">Student File</a>\n        </div>\n        <!-- /ko -->\n        <!-- ko ifnot: $root.display.instructor() -->\n        <div class=\"dropdown-menu dropdown-menu-right\">\n        <a class=\"dropdown-item\" href=\"#\"\n                data-bind=\"click: ui.files.add.bind($data, 'student')\">Student File</a>\n        </div>\n        <!-- /ko -->\n    </li>\n  \n</ul>\n</div>\n");
var NEW_INSTRUCTOR_FILE_DIALOG_HTML = "\n<form>\n<div class=\"form-group row\">\n    <div>\n        <p>This dialog box is for creating text files (e.g., Python code, Markdown, etc.) that will be\n        accessible from Python. If you want to upload a binary file (e.g., an image, a sqlite database),\n        then you should use the \"Images\" or \"URL Data\" options.</p>\n        \n        <p>Students will not be able to see file tabs unless you change the \"Hide Files\" setting to be unchecked.</p>\n    </div>\n    <!-- Filename -->\n    <div class=\"col-sm-2 text-right\">\n        <label for=\"blockpy-instructor-file-dialog-filename\">Filename:</label>\n    </div>\n    <div class=\"col-sm-10\">\n        <input type=\"text\" class=\"form-control blockpy-instructor-file-dialog-filename\"\n            id=\"blockpy-instructor-file-dialog-filename\">    \n    </div>\n    <!-- Filetype -->\n    <div class=\"col-sm-2 text-right mt-2\">\n        <label for=\"blockpy-instructor-file-dialog-filetype\">Filetype: </label>\n    </div>\n    <div class=\"col-sm-10\">\n        <span class=\"blockpy-instructor-file-dialog-filetype\"\n            id=\"blockpy-instructor-file-dialog-filetype\"></span>    \n    </div>\n    <!-- Inaccessible to student? -->\n    <div class=\"col-sm-2 text-right mt-2\">\n        <label for=\"blockpy-instructor-file-dialog-namespace\">Namespace: </label>\n    </div>\n    <div class=\"col-sm-4\">\n        <select class=\"form-control blockpy-instructor-file-dialog-namespace\"\n            id=\"blockpy-instructor-file-dialog-namespace\">\n            <option value=\"!\">Completely inaccessible</option>\n            <option value=\"?\">Hidden from student, accessible programatically</option>\n            <option value=\"&\">Visible to student, but not editable</option>\n        </select>\n    </div>\n</div>\n</form>\n";
/**
 * Filenames live in one of five possible namespaces:
 *  Instructor (!): Invisible to the student under all circumstances
 *  Start Space (^): Used to reset the student namespace
 *  Student Space (): Visible to the student when display.hideFiles is not true, able to be edited
 *  Hidden Space (?): Not directly visible to the student, but accessible programmatically
 *  Read-only Space (&): An instructor file type visible to the student, but is uneditable by them
 *  Secret Space ($): Not visible from the menu at all, some other mechanism controls it
 *  Generated Space (*): Visible to the student, but destroyed after Engine.Clear. Can shadow an actual file.
 *  Concatenated Space (#): Used when bundling a space for the server.
 */

var STARTING_FILES = [// Submission
"answer.py", // Instructor files
"!instructions.md", "!assignment_settings.blockpy", "^starting_code.py", "!on_run.py", "$settings.blockpy"];
var BASIC_NEW_FILES = ["!on_change.py", "!on_eval.py", "?mock_urls.blockpy", "?toolbox.blockpy", "!tags.blockpy", "!sample_submissions.blockpy", "!answer_prefix.py", "!answer_suffix.py"];
function chompSpecialFile(filename) {
  if ("!^?&$*#".includes(filename[0])) {
    return filename.slice(1);
  } else {
    return filename;
  }
}
var INSTRUCTOR_DIRECTORY = "_instructor/";
var STUDENT_DIRECTORY = "_student/";
var SearchModes = {
  EVERYWHERE: "EVERYWHERE",
  START_WITH_INSTRUCTOR: "START_WITH_INSTRUCTOR",
  ONLY_STUDENT_FILES: "ONLY_STUDENT_FILES"
};
var DELETABLE_SIMPLE_FILES = ["!on_change.py", "!on_eval.py"];
var UNDELETABLE_FILES = ["answer.py", "!instructions.md", "!assignment_settings.py", "^starting_code.py", "!on_run.py", "$settings.blockpy"];
var UNRENAMABLE_FILES = ["answer.py", "!instructions.md", "!assignment_settings.py", "^starting_code.py", "!on_run.py", "$settings.blockpy", "!on_change.py", "!on_eval.py", "?mock_urls.blockpy", "?toolbox.blockpy", "!tags.blockpy", "!sample_submissions.blockpy", "!answer_prefix.py", "!answer_suffix.py"];

var BlockPyFile = function BlockPyFile(main, filename, contents) {
  _classCallCheck(this, BlockPyFile);

  this.main = main;
  this.filename = filename;
  this.contents = contents || "";
  this.owner = null;
  this.handle = null;
};

function makeModelFile(filename, contents) {
  return {
    "filename": ko.observable(filename),
    contents: ko.observable(contents || "")
  };
}

function makeMockModelFile(filename, _contents) {
  return {
    filename: function (_filename) {
      function filename() {
        return _filename.apply(this, arguments);
      }

      filename.toString = function () {
        return _filename.toString();
      };

      return filename;
    }(function () {
      return filename;
    }),
    contents: function contents() {
      return _contents;
    }
  };
}

function loadConcatenatedFile(concatenatedFile, modelFileList) {
  if (concatenatedFile) {
    var files = JSON.parse(concatenatedFile);
    var modelFiles = [];

    for (var _filename2 in files) {
      if (files.hasOwnProperty(_filename2)) {
        modelFiles.push(makeModelFile(_filename2, files[_filename2]));
      }
    } //files = files.map(file => makeModelFile(file.filename, file.contents));


    if (modelFileList) {
      modelFileList(modelFiles);
    } else {
      return modelFiles;
    }
  } else {
    if (modelFileList) {
      modelFileList([]);
    } else {
      return [];
    }
  }
}
function createConcatenatedFile(modelFileList) {
  return JSON.stringify(modelFileList().map(function (file) {
    return {
      filename: file.filename(),
      contents: file.contents()
    };
  }));
}
function observeConcatenatedFile(modelFileList) {
  return ko.pureComputed(function () {
    var result = {};
    modelFileList().forEach(function (file) {
      return result[file.filename()] = file.contents();
    });
    return JSON.stringify(result);
  });
}
/**
 * Abstracts away database logic
 */

var BlockPyFileSystem = /*#__PURE__*/function () {
  function BlockPyFileSystem(main) {
    _classCallCheck(this, BlockPyFileSystem);

    this.main = main;
    this.files_ = {};
    this.mountFiles();
    this.watchModel();
    this.watches_ = {};
    this.remoteFiles_ = {};
    this.filesToUrls = {};
    /*main.model.configuration.container.find(".blockpy-file-instructor").toggle(this.main.model.display.instructor());
    this.main.model.display.instructor.subscribe((visiblity)=> {
        main.model.configuration.container.find(".blockpy-file-instructor").toggle(visiblity);
    });*/
  }

  _createClass(BlockPyFileSystem, [{
    key: "watchFile",
    value: function watchFile(filename, callback) {
      if (!(filename in this.watches_)) {
        this.watches_[filename] = [];
      }

      this.watches_[filename].push(callback);
    }
  }, {
    key: "stopWatchingFile",
    value: function stopWatchingFile(filename) {
      delete this.watches_[filename];
    }
  }, {
    key: "watchModel",
    value: function watchModel() {
      var _this = this;

      var filesystem = this;
      [this.main.model.submission.extraFiles, this.main.model.assignment.extraStartingFiles, this.main.model.assignment.extraInstructorFiles].forEach(function (fileArray) {
        return fileArray.subscribe(function (changes) {
          changes.sort(function (first, second) {
            return second.status.localeCompare(first.status);
          }).forEach(function (change) {
            var modelFile = change.value;

            if (change.status === "added") {
              // Track new file
              var file = filesystem.newFile(modelFile.filename(), modelFile.contents(), modelFile.contents);
              filesystem.notifyWatches(file);
            } else if (change.status === "deleted") {
              // Delete file
              var _file = filesystem.deleteFileLocally_(modelFile.filename());

              if (filesystem.main.model.display.filename() === modelFile.filename()) {
                filesystem.main.model.display.filename("answer.py");
              }
            }
          });
        }, _this, "arrayChange");
      });
    } // answer.py
    //   => subscribe to first element of submission.code)
    // !on_run.py, !on_change.py, !on_eval.py
    //   => subscribe to relevant assignment.<whatever>
    // ^starting_code.py
    //   => subscribe to first element of assignment.startingCode
    // ^whatever
    //   => subscribe to rest of the elements of assignment.startingCode
    // !whatever or ?whatever
    //   => subscribe to elements of assignment.extraFiles
    // Otherwise:
    //   => subscribe to rest of the elements of submission.code

    /**
     * New special files need to be registered here
     * @param file {BlockPyFile}
     * @private
     */

  }, {
    key: "observeFile_",
    value: function observeFile_(file) {
      if (file.filename === "answer.py") {
        file.handle = this.main.model.submission.code;
      } else if (file.filename === "!on_run.py") {
        file.handle = this.main.model.assignment.onRun;
      } else if (file.filename === "!on_change.py") {
        file.handle = this.main.model.assignment.onChange;
      } else if (file.filename === "!on_eval.py") {
        file.handle = this.main.model.assignment.onEval;
      } else if (file.filename === "!instructions.md") {
        file.handle = this.main.model.assignment.instructions;
      } else if (file.filename === "^starting_code.py") {
        file.handle = this.main.model.assignment.startingCode;
      } else if (file.filename === "?mock_urls.blockpy") {
        this.observeInArray_(file, this.main.model.assignment.extraInstructorFiles);
      } else if (file.filename === "?toolbox.blockpy") {
        this.observeInArray_(file, this.main.model.assignment.extraInstructorFiles);
      } else if (file.filename === "!answer_prefix.py") {
        this.observeInArray_(file, this.main.model.assignment.extraInstructorFiles);
      } else if (file.filename === "!answer_suffix.py") {
        this.observeInArray_(file, this.main.model.assignment.extraInstructorFiles);
      } else if (file.filename === "!tags.blockpy") {
        file.handle = this.main.model.assignment.tags;
      } else if (file.filename === "!assignment_settings.blockpy") {
        file.handle = this.main.model.assignment.settings;
      } else if (file.filename === "!sample_submissions.blockpy") {
        file.handle = this.main.model.assignment.sampleSubmissions;
      } else if (file.filename === "$settings.blockpy") {
        file.handle = this.main.model.display;
      } else if (file.filename.startsWith("^")) {
        this.observeInArray_(file, this.main.model.assignment.extraStartingFiles);
      } else if (file.filename.startsWith("!") || file.filename.startsWith("?") || file.filename.startsWith("&")) {
        this.observeInArray_(file, this.main.model.assignment.extraInstructorFiles);
      } else {
        this.observeInArray_(file, this.main.model.submission.extraFiles);
      }
    }
  }, {
    key: "observeInArray_",
    value: function observeInArray_(file, array) {
      file.owner = array;
      var codeBundle = file.owner();

      for (var i = 0; i < codeBundle.length; i++) {
        if (codeBundle[i].filename() === file.filename) {
          file.handle = codeBundle[i].contents;
        }
      }

      if (file.handle === null) {
        var newFile = makeModelFile(file.filename);
        file.handle = newFile.contents;
        array.push(newFile);
      }
    }
  }, {
    key: "mountFiles",
    value: function mountFiles() {
      this.newFile("answer.py");
      this.newFile("^starting_code.py");
      this.newFile("!on_run.py");
      this.newFile("!instructions.md");
      this.newFile("!assignment_settings.blockpy");
    }
  }, {
    key: "dismountExtraFiles",
    value: function dismountExtraFiles() {
      for (var name in this.files_) {
        if (this.files_.hasOwnProperty(name)) {
          if (UNDELETABLE_FILES.indexOf(name) === -1) {
            delete this.files_[name];
            delete this.watches_[name];
          }
        }
      } // submission.codeTODO: Shouldn't we notify the UI that the file was deleted?

    }
  }, {
    key: "newFile",
    value: function newFile(filename, contents, modelFile) {
      if (filename in this.files_) {
        // File already exists! Just update its handle
        var existingFile = this.files_[filename];

        if (modelFile === undefined) {
          this.observeFile_(existingFile);
        } else {
          existingFile.handle = modelFile;
        }

        existingFile.handle(contents || "");
        return existingFile;
      } else {
        // File does not exist
        var newFile = new BlockPyFile(this.main, filename);
        this.files_[filename] = newFile;

        if (modelFile === undefined) {
          this.observeFile_(newFile);
        } else {
          newFile.handle = modelFile;
        }

        if (contents !== undefined) {
          newFile.handle(contents);
        }

        return newFile;
      }
    }
  }, {
    key: "writeFile",
    value: function writeFile(filename, contents) {
      contents = contents || "";
      this.files_[filename].handle(contents);
    }
  }, {
    key: "readFile",
    value: function readFile(filename) {
      return this.files_[filename].handle();
    }
  }, {
    key: "getFile",
    value: function getFile(filename) {
      return this.files_[filename];
    }
    /**
     *
     * @param filename
     * @returns {boolean|object} The info about the file, or false if it could not be deleted
     */

  }, {
    key: "deleteFile",
    value: function deleteFile(filename) {
      if (DELETABLE_SIMPLE_FILES.indexOf(filename) !== -1) {
        var file = this.deleteFileLocally_(filename);
        file.handle(null);
        return true;
      } else if (this.files_[filename].owner === null) {
        return false;
      } else {
        // Triggers a callback to eventually call deleteFileLocally_
        var found = this.files_[filename].owner.remove(function (modelFile) {
          return modelFile.filename() === filename;
        });
        return found || false;
      }
    }
  }, {
    key: "deleteFileLocally_",
    value: function deleteFileLocally_(filename) {
      var file = this.files_[filename];
      delete this.files_[filename];

      if (filename in this.watches_) {
        this.watches_[filename].forEach(function (callback) {
          return callback.deleted();
        });
      }

      return file;
    }
  }, {
    key: "renameFile",
    value: function renameFile(source, destination) {
      if (UNRENAMABLE_FILES.indexOf(source) !== -1) {
        return false;
      } else if (this.files_[filename].owner === null) {
        return false;
      } else {
        // Triggers a callback to eventually call deleteFileLocally_
        var found = this.files_[filename].owner.remove(function (modelFile) {
          return modelFile.filename() === filename;
        });
        return found || false;
      }
    }
  }, {
    key: "notifyWatches",
    value: function notifyWatches(file) {
      if (file.filename in this.watches_) {
        this.watches_[file.filename].forEach(function (callback) {
          return callback.updated(file);
        });
      }
    }
  }, {
    key: "searchForFile",
    value: function searchForFile(name, studentSearch) {
      /*
      TODO: This is called quite a bit by the Import mechanism, might need
            to optimize it some more. Do timing tests.
       files.*
      _instructor/files.*
      _student/files.*
       If a student searches for a file, it checks the "?", "&", "*", "" namespaces
          import helper => "./helper.py"
          open("external.json") => "external.json"
      If an instructor searches for a file, it checks "!", "^", "?", "&", "*", "" namespaces
          To explicitly search instructor namespaces first
              import _instructor.helper => "./instructor/helper.py"
              open("_instructor/external.json") => "_instructor/external.json"
          to allow student files to override:
              import helper => "./helper.py"
              open("external.json") => "external.json"
          to only check student files, prepend with _student
       */
      // Chop off starting "./"
      if (name.startsWith("./")) {
        name = name.slice(2);
      }

      var searchMode = SearchModes.EVERYWHERE; // Should the search be start with instructor side?

      if (name.startsWith(INSTRUCTOR_DIRECTORY)) {
        name = name.slice(INSTRUCTOR_DIRECTORY.length);
        searchMode = SearchModes.START_WITH_INSTRUCTOR;
      } // Should the search be limited to the student mode?


      if (name.startsWith(STUDENT_DIRECTORY)) {
        name = name.slice(STUDENT_DIRECTORY.length);
        searchMode = SearchModes.ONLY_STUDENT_FILES;
      } else if (studentSearch) {
        searchMode = SearchModes.ONLY_STUDENT_FILES;
      } // Shortcut for instructor versions


      var extraStudentFiles = this.main.model.submission.extraFiles();
      var extraInstructorFiles = this.main.model.assignment.extraInstructorFiles();
      var extraStartingFiles = this.main.model.assignment.extraStartingFiles(); // Check special files (TODO: how would an instructor access "./_instructor/answer.py"?

      var specialFile = this.searchForSpecialFiles_(name, searchMode);

      if (specialFile !== undefined) {
        return specialFile;
      } // Start looking through possible files


      var studentVersion = this.searchForFileInList_(extraStudentFiles, name);
      var generatedVersion = this.searchForFileInList_(extraStudentFiles, "*" + name);
      var defaultVersion = this.searchForFileInList_(extraInstructorFiles, "&" + name);
      var hiddenVersion = this.searchForFileInList_(extraInstructorFiles, "?" + name);
      var remoteVersion = this.remoteFiles_[name];

      if (searchMode === SearchModes.ONLY_STUDENT_FILES) {
        return Object(utilities_js__WEBPACK_IMPORTED_MODULE_0__["firstDefinedValue"])(hiddenVersion, defaultVersion, studentVersion, generatedVersion, remoteVersion);
      }

      var instructorVersion = this.searchForFileInList_(extraInstructorFiles, "!" + name);
      var startingVersion = this.searchForFileInList_(extraStartingFiles, "^" + name);

      if (searchMode === SearchModes.START_WITH_INSTRUCTOR) {
        return Object(utilities_js__WEBPACK_IMPORTED_MODULE_0__["firstDefinedValue"])(instructorVersion, hiddenVersion, startingVersion, defaultVersion, studentVersion, generatedVersion, remoteVersion);
      } else if (searchMode === SearchModes.EVERYWHERE) {
        return Object(utilities_js__WEBPACK_IMPORTED_MODULE_0__["firstDefinedValue"])(defaultVersion, studentVersion, generatedVersion, instructorVersion, hiddenVersion, startingVersion, remoteVersion);
      }
    }
  }, {
    key: "searchForFileInList_",
    value: function searchForFileInList_(modelList, filename) {
      for (var i = 0; i < modelList.length; i++) {
        if (modelList[i].filename() === filename) {
          return modelList[i];
        }
      }

      return undefined;
    }
  }, {
    key: "searchForSpecialFiles_",
    value: function searchForSpecialFiles_(filename, searchMode) {
      if (searchMode === SearchModes.ONLY_STUDENT_FILES) {
        if (filename === "answer.py") {
          return makeMockModelFile("_instructor/answer.py", this.main.model.submission.code());
        }

        return undefined;
      }

      switch (filename) {
        case "answer.py":
          return makeMockModelFile("_instructor/answer.py", this.main.model.submission.code());

        case "on_run.py":
          return makeMockModelFile("_instructor/on_run.py", this.main.model.assignment.onRun());

        case "on_change.py":
          return makeMockModelFile("_instructor/on_change.py", this.main.model.assignment.onChange());

        case "on_eval.py":
          return makeMockModelFile("_instructor/on_eval.md", this.main.model.assignment.onEval());

        case "instructions.md":
          return makeMockModelFile("_instructor/instructions.md", this.main.model.assignment.instructions());

        case "starting_code.py":
          return makeMockModelFile("_instructor/starting_code.py", this.main.model.assignment.startingCode());
      }

      return undefined;
    }
  }, {
    key: "newFileDialog",
    value: function newFileDialog(kind) {
      var _this2 = this;

      var body = $(NEW_INSTRUCTOR_FILE_DIALOG_HTML);
      var filename = body.find(".blockpy-instructor-file-dialog-filename");
      var filetype = body.find(".blockpy-instructor-file-dialog-filetype");
      var namespace = body.find(".blockpy-instructor-file-dialog-namespace");
      var extensionRegex = /(?:\.([^.]+))?$/;
      filename.on("input", function () {
        var extension = extensionRegex.exec(filename.val())[1];
        extension = extension === undefined ? "No extension" : extension; //TODO: this.main.components.editors.getEditorFromExtension(extension);

        filetype.text(extension);
      });

      var yes = function yes() {
        var prefix = "";

        if (kind === "instructor") {
          prefix = namespace.val();
        } else if (kind === "starting") {
          prefix = "^";
        }

        if (filename.val()) {
          filename = prefix + filename.val();

          _this2.newFile(filename);
        }
      };

      body.submit(function (e) {
        e.preventDefault();
        yes();

        _this2.main.components.dialog.close();
      });
      this.main.components.dialog.confirm("Make New File", body, yes, function () {}, "Add");
    }
  }, {
    key: "loadRemoteFiles",
    value: function loadRemoteFiles() {
      var _this3 = this;

      var files = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      // Clear existing remote files (?)

      /*
      Object.getOwnPropertyNames(this.remoteFiles_).forEach(function (prop) {
          delete this.remoteFiles_[prop];
      });*/
      var model = this.main.model;
      var preloadFiles = model.assignment.settings.preloadFiles() || model.assignment.settings.preloadAllFiles();

      if (!preloadFiles && !files) {
        return null;
      }

      if (model.assignment.settings.preloadFiles()) {
        try {
          files = JSON.parse(preloadFiles);
        } catch (e) {
          console.error("Failed to preload files, invalid structure: ", e);
          return null;
        }

        this.downloadRemoteFiles(files);
      } else if (files) {
        this.downloadRemoteFiles(this.reorganizeFiles(files));
      } else {
        this.main.components.server.listUploadedFiles(function (data) {
          _this3.downloadRemoteFiles(_this3.reorganizeFiles(data.files));
        });
      }
    }
  }, {
    key: "reorganizeFiles",
    value: function reorganizeFiles(files) {
      var _this4 = this;

      var organized = {};
      Object.entries(files).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            placement = _ref2[0],
            placedFiles = _ref2[1];

        placedFiles.forEach(function (_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2),
              filename = _ref4[0],
              url = _ref4[1];

          var searchParams = new URL(url, window.location.origin).searchParams;
          var directory = searchParams.get("directory");
          var placement = searchParams.get("placement");

          if (!(placement in organized)) {
            organized[placement] = {};
          }

          if (!(directory in organized[placement])) {
            organized[placement][directory] = {};
          }

          organized[placement][directory][filename] = true;
          _this4.filesToUrls[filename] = url;
        });
      });
      return organized;
    }
  }, {
    key: "downloadRemoteFiles",
    value: function downloadRemoteFiles(files) {
      var _this5 = this;

      var oldRemainingFiles = Object.keys(this.remoteFiles_);
      Object.entries(files).forEach(function (_ref5) {
        var _ref6 = _slicedToArray(_ref5, 2),
            placement = _ref6[0],
            placementData = _ref6[1];

        Object.entries(placementData).forEach(function (_ref7) {
          var _ref8 = _slicedToArray(_ref7, 2),
              directory = _ref8[0],
              directoryData = _ref8[1];

          Object.entries(directoryData).forEach(function (_ref9) {
            var _ref10 = _slicedToArray(_ref9, 2),
                filename = _ref10[0],
                renamedFile = _ref10[1];

            if (renamedFile === true) {
              renamedFile = filename;
            }

            if (!(renamedFile in _this5.remoteFiles_)) {
              _this5.main.components.server.downloadFile(placement, directory, filename, function (data) {
                _this5.newFile("images.blockpy", "{}");

                _this5.remoteFiles_[renamedFile] = makeMockModelFile(renamedFile, data);
                delete oldRemainingFiles[renamedFile];
              });
            }
          });
        });
      }); // TODO: Clean up the old files after all the new ones are loaded
    }
  }]);

  return BlockPyFileSystem;
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! knockout */ "knockout"), __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/footer.js":
/*!***********************!*\
  !*** ./src/footer.js ***!
  \***********************/
/*! exports provided: FOOTER_HTML */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FOOTER_HTML", function() { return FOOTER_HTML; });
//TODO: Move get link down to footer, remove vertical bar from quick-menu
var FOOTER_HTML = "\n<div class=\"col-md-12 blockpy-panel blockpy-status\">\n    <div>\n        <label class=\"badge\" data-bind=\"class: ui.server.status('loadAssignment')\">Load Assignment\n            <!-- ko if: display.instructor -->\n            <input type=\"file\"\n            class=\"blockpy-force-load-assignment-file blockpy-hidden-file\"\n            accept=\"application/JSON\"\n            data-bind=\"event: {change: ui.server.force.loadAssignment}\">\n            <!-- /ko -->\n        </label>, \n        <span class=\"badge\" data-bind=\"class: ui.server.status('saveAssignment')\">Save Assignment</span>, \n        <span class=\"badge\" data-bind=\"class: ui.server.status('loadFile')\">Load File</span>, \n        <span class=\"badge\" data-bind=\"class: ui.server.status('saveFile')\">Save File</span>, \n        <span class=\"badge\" data-bind=\"class: ui.server.status('loadDataset')\">Load Dataset</span>, \n        <span class=\"badge\" data-bind=\"class: ui.server.status('logEvent')\">Log Event</span>, \n        <span class=\"badge\" data-bind=\"class: ui.server.status('updateSubmission'),\n                                        click: ui.server.force.updateSubmission\">Update Submission</span>, \n        <span class=\"badge\" data-bind=\"class: ui.server.status('onExecution')\">Execution</span>\n    </div>\n    <div\n        <span data-bind=\"text: ui.server.messages\"></span>\n    </div>\n    <div>\n        <span>User: <span data-bind=\"text: user.id\"></span> (<span data-bind=\"text: user.name\"></span>, <span data-bind=\"text: user.role\"></span>)</span>, \n        <span>Course: <span data-bind=\"text: user.courseId\"></span></span>,\n        <span>Group: <span data-bind=\"text: user.groupId\"></span></span>,\n        <span>Assignment: <span data-bind=\"text: assignment.id\"></span></span>,\n        <span>Assignment Version: <span data-bind=\"text: assignment.version\"></span></span>,\n        <span>Submission: \n            <span data-bind=\"text: submission.id\"></span>\n            <span data-bind=\"if: submission.ownerId() != user.id()\">\n                (Owner ID: <span data-bind=\"text: submission.ownerId()\"></span>)\n            </span>\n        </span>, \n        <span>Submission Version: <span data-bind=\"text: submission.version\"></span></span>,\n        <span>Editor Version: <span data-bind=\"text: display.editorVersion\"></span></span>\n    </div>\n</div>\n";

/***/ }),

/***/ "./src/history.js":
/*!************************!*\
  !*** ./src/history.js ***!
  \************************/
/*! exports provided: HISTORY_TOOLBAR_HTML, BlockPyHistory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HISTORY_TOOLBAR_HTML", function() { return HISTORY_TOOLBAR_HTML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockPyHistory", function() { return BlockPyHistory; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// TODO: Should disable buttons if we can't activate them.
var HISTORY_TOOLBAR_HTML = "\n<div class=\"blockpy-history-toolbar col-md-12\" data-bind=\"visible: display.historyMode\">\n\n    <form class=\"form-inline\">\n        <button class=\"blockpy-history-start btn btn-outline-secondary mr-2\" type=\"button\"\n            data-bind=\"click: ui.editors.python.history.start\">\n            <span class='fas fa-step-backward'></span> Start\n        </button>\n        <button class=\"btn btn-outline-secondary mr-2\" type=\"button\"\n            data-bind=\"click: ui.editors.python.history.previous\">\n            <span class='fas fa-backward'></span> Previous\n        </button>\n        <select class=\"blockpy-history-selector form-control custom-select mr-2\" aria-title=\"History Selector\">\n        </select>\n        <button class=\"btn btn-outline-secondary mr-2\" type=\"button\"\n            data-bind=\"click: ui.editors.python.history.use\">\n            <span class='fas fa-file-import'></span> Use\n        </button>\n        <button class=\"btn btn-outline-secondary mr-2\" type=\"button\"\n            data-bind=\"click: ui.editors.python.history.next\">\n            <span class='fas fa-forward'></span> Next\n        </button>\n        <button class=\"btn btn-outline-secondary\" type=\"button\"\n            data-bind=\"click: ui.editors.python.history.mostRecent\">\n            <span class='fas fa-step-forward'></span> Most Recent\n        </button>\n    </form>\n</div>\n";
/**
 * An object for displaying the user's coding logs (their history).
 * A lightweight component, its only job is to open a dialog.
 *
 * @constructor
 * @this {BlockPyHistory}
 * @param {Object} main - The main BlockPy instance
 */

var BlockPyHistory = /*#__PURE__*/function () {
  function BlockPyHistory(main, tag) {
    _classCallCheck(this, BlockPyHistory);

    this.main = main;
    this.tag = tag;
    this.currentId = null;
    this.history = [];
    this.editEvents = [];
  }

  _createClass(BlockPyHistory, [{
    key: "load",
    value: function load(history) {
      var _this = this;

      this.history = history;
      this.editEvents = [];
      this.selector = $(".blockpy-history-selector").empty();
      var editId = 0;
      history.filter(function (entry) {
        return !entry.file_path.startsWith("_instructor.") && entry.event_type !== "Compile" && entry.event_type !== "Intervention" && (!_this.main.model.assignment.hidden() || entry.event_type !== "X-Submission.LMS");
      }).forEach(function (entry, index) {
        var event_type = REMAP_EVENT_TYPES[entry.event_type] || entry.event_type;
        var displayed = prettyPrintDateTime(entry.client_timestamp) + " - " + event_type;
        var disable = entry.event_type !== "File.Edit";
        var option = $("<option></option>", {
          text: displayed,
          disabled: disable
        });

        if (_this.isEditEvent(entry)) {
          option.attr("value", editId);

          _this.editEvents.push(entry);

          editId += 1;
        }

        _this.selector.append(option);
      });
      this.selector.val(Math.max(0, editId - 1));
      this.selector.change(function (evt) {
        _this.updateEditor();
      });
    }
  }, {
    key: "moveToStart",
    value: function moveToStart() {
      this.selector.val(0);
      this.updateEditor();
    }
  }, {
    key: "movePrevious",
    value: function movePrevious() {
      var currentId = parseInt(this.selector.val(), 10);
      this.selector.val(Math.max(0, currentId - 1));
      this.updateEditor();
    }
  }, {
    key: "moveNext",
    value: function moveNext() {
      var currentId = parseInt(this.selector.val(), 10);
      this.selector.val(Math.min(this.editEvents.length - 1, currentId + 1));
      this.updateEditor();
    }
  }, {
    key: "moveToMostRecent",
    value: function moveToMostRecent() {
      this.selector.val(this.editEvents.length - 1);
      this.updateEditor();
    }
  }, {
    key: "updateEditor",
    value: function updateEditor() {
      if (this.editEvents.length) {
        var currentId = parseInt(this.selector.val(), 10);
        this.main.components.pythonEditor.bm.setCode(this.editEvents[currentId].message);
      }
    }
  }, {
    key: "use",
    value: function use() {
      if (this.editEvents.length) {
        var currentId = parseInt(this.selector.val(), 10);
        var code = this.editEvents[currentId].message;
        this.main.model.ui.editors.python.turnOffHistoryMode();
        this.main.components.pythonEditor.file.handle(code);
      }
    }
  }, {
    key: "isEditEvent",
    value: function isEditEvent(entry) {
      return (entry.event_type === "File.Edit" || entry.event_type === "File.Create") && this.main.model.display.filename() === entry.file_path;
    }
  }]);

  return BlockPyHistory;
}();
var REMAP_EVENT_TYPES = {
  "Session.Start": "Began session",
  "X-IP.Change": "Changed IP address",
  "File.Edit": "Edited code",
  "File.Create": "Started assignment",
  "Run.Program": "Ran program",
  "Compile.Error": "Syntax error",
  "X-Submission.LMS": "Updated grade"
};
var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "June", "July", "Aug", "Sept", "Oct", "Nov", "Dec"];
var weekDays = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];

function isSameDay(first, second) {
  return first.getDate() === second.getDate() && first.getMonth() === second.getMonth() && first.getFullYear() === second.getFullYear();
}
/**
 * Helper function to parse a date/time string and rewrite it as something
 * more human readable.
 * @param {String} timeString - the string representation of time ("YYYYMMDD HHMMSS")
 * @returns {String} - A human-readable time string.
 */


function prettyPrintDateTime(timeString) {
  /*let year = timeString.slice(0, 4),
      month = parseInt(timeString.slice(4, 6), 10)-1,
      day = timeString.slice(6, 8),
      hour = timeString.slice(9, 11),
      minutes = timeString.slice(11, 13),
      seconds = timeString.slice(13, 15);*/
  // TODO: Handle timezones correctly
  if (timeString === undefined) {
    return "Undefined Time";
  }

  var now = new Date();
  var past = new Date(parseInt(timeString, 10));

  if (isSameDay(now, past)) {
    return "Today at " + past.toLocaleTimeString();
  } else {
    var dayStr = weekDays[past.getDay()];
    var monthStr = monthNames[past.getMonth()];
    var date = dayStr + ", " + monthStr + " " + past.getDate();

    if (now.getFullYear() === past.getFullYear()) {
      return date + " at " + past.toLocaleTimeString();
    } else {
      return date + ", " + past.getFullYear() + " at " + past.toLocaleTimeString();
    }
  }
}
/**
 * Opens the history dialog box. This requires a trip to the server and
 * occurs asynchronously. The users' code is shown in preformatted text
 * tags (no code highlighting currently) along with the timestamp.
 */


BlockPyHistory.prototype.openDialog = function () {
  var dialog = this.main.components.dialog;
  var body = "<pre>a = 0</pre>";
  this.main.components.server.getHistory(function (data) {
    body = data.reverse().reduce(function (complete, elem) {
      var complete_str = prettyPrintDateTime(elem.time);
      var new_line = "<b>" + complete_str + "</b><br><pre>" + elem.code + "</pre>";
      return complete + "\n" + new_line;
    }, "");
    dialog.show("Work History", body, function () {});
  });
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/interface.js":
/*!**************************!*\
  !*** ./src/interface.js ***!
  \**************************/
/*! exports provided: SecondRowSecondPanelOptions, makeExtraInterfaceSubscriptions, makeInterface */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SecondRowSecondPanelOptions", function() { return SecondRowSecondPanelOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeExtraInterfaceSubscriptions", function() { return makeExtraInterfaceSubscriptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeInterface", function() { return makeInterface; });
/* harmony import */ var trace_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! trace.js */ "./src/trace.js");
/* harmony import */ var dialog_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dialog.js */ "./src/dialog.js");
/* harmony import */ var feedback_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! feedback.js */ "./src/feedback.js");
/* harmony import */ var files_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! files.js */ "./src/files.js");
/* harmony import */ var footer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! footer.js */ "./src/footer.js");
/* harmony import */ var editors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! editors.js */ "./src/editors.js");
/* harmony import */ var console_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! console.js */ "./src/console.js");
/**
 * @fileoverview Contains main HTML of BlockPy interface, and helper functions.
 * Combines a lot of HTML from components.
 *
 * Here's the layout:
 *  Row 1: Header and Quick Menu
 *  Row 2: Console and Feedback
 *  Row 3: File Navigation
 *  Row 4: View Row
 *  Row 5: Footer Row
 */







/**
 * The different layout options of the panes in the second row of the layout.
 * @enum {String}
 */

var SecondRowSecondPanelOptions = {
  FEEDBACK: "feedback",
  TRACE: "trace",
  NONE: "none"
};
/**
 * Setup any additional Knockout subscriptions to fire on interface changes.
 * @param self
 * @param model
 */

function makeExtraInterfaceSubscriptions(self, model) {
  // Highlight Markdown when instructions update
  var highlightTimeout = null;
  model.ui.instructions.current.subscribe(function () {
    if (highlightTimeout !== null) {
      clearTimeout(highlightTimeout);
    }

    highlightTimeout = setTimeout(function () {
      model.configuration.container.find(".blockpy-instructions pre code").map(function (i, block) {
        window.hljs.highlightBlock(block);
      });
    }, 400);
  }); // Provide Fullscreen support

  model.display.fullscreen.subscribe(function (isFullscreen) {
    self.components.server.logEvent("X-Display.Fullscreen.Request", "", "", isFullscreen.toString(), "");

    if (isFullscreen) {
      // NOTE: navigationUI could allow us to force controls to show
      model.configuration.container.parent()[0].requestFullscreen()["catch"](function (err) {
        var message = "Error attempting to enable full-screen mode: ".concat(err.message, " (").concat(err.name, ")");
        self.components.server.logEvent("X-Display.Fullscreen.Error", "", "", message, "");
        alert(message);
      }).then(function () {
        self.components.server.logEvent("X-Display.Fullscreen.Success", "", "", "", "");
        model.display.fullscreen(true);
        model.configuration.container.css("overflow-y", "auto");
      });
    } else {
      document.exitFullscreen().then(function () {
        self.components.server.logEvent("X-Display.Fullscreen.Exit", "", "", isFullscreen.toString(), "");
        model.display.fullscreen(false);
      });
    }
  });
} // TODO: Get shareable link button

function makeInterface(main) {
  return "\n<div class='blockpy-content container-fluid'>\n\n    <!-- Dialog -->\n    ".concat(dialog_js__WEBPACK_IMPORTED_MODULE_1__["DIALOG_HTML"], "\n    \n    <!-- Hidden Capture Canvas -->\n    <canvas id='capture-canvas' class='d-none' role=\"presentation\" aria-hidden=\"true\"></canvas>\n    \n    <!-- Row 1: Header and Quick Menu -->\n    <div class='row' data-bind=\"hidden: ui.smallLayout()\">\n         \n         <!-- Description -->\n         <div class='col-md-9 blockpy-panel blockpy-header'\n               role='heading' aria-label='Assignment Description'>\n         \n            <!-- Assignment Name -->\n            <span role='heading' aria-level='1'\n                  class=\"blockpy-name\">\n                <strong>BlockPy: </strong> \n                <span data-bind='text: assignment.name'></span>\n            </span>\n            \n            <!-- Reset Instructions Button -->\n            <div class=\"blockpy-instructions-reset\"\n                data-bind=\"visible: ui.instructions.isChanged\">\n                <a class=\"float-right\"\n                    data-bind=\"click: ui.instructions.reset\"\n                    href=\"\">\n                    Reset instructions</a>\n            </div>\n            \n            <!-- Instructions -->\n            <div class='blockpy-instructions'\n                 data-bind=\"html: ui.instructions.current\">\n            </div>\n        </div>\n        \n        <div class='col-md-3 blockpy-panel blockpy-quick-menu'\n             role='menubar' aria-label='Quick Menu' title=\"Quick Menu\">\n            <!-- Get Shareable Link -->\n            <!--<button class=\"btn btn-outline-secondary btn-sm\">\n                Get shareable link</button>-->\n            <span data-bind=\"visible: ui.menu.isSubmitted\">\n                Your submission is ready to be reviewed!</span>\n            <button class=\"btn btn-outline-secondary btn-sm\"\n                data-bind=\"visible: ui.menu.canMarkSubmitted,\n                           text: ui.menu.textMarkSubmitted,\n                           click: ui.menu.clickMarkSubmitted\"></button>\n            <!-- View as instructor -->\n            <div class=\"form-check\"\n                 data-bind=\"visible: ui.role.isGrader\">\n                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"blockpy-as-instructor\"\n                    data-bind=\"checked: display.instructor\">\n                <label class=\"form-check-label\" for=\"blockpy-as-instructor\">\n                    View as instructor\n                </label>\n            </div>\n            <!-- Readonly mode for spying -->\n            <div data-bind=\"if: submission.ownerId() != user.id()\">\n                Owner: <span data-bind=\"text: submission.ownerId\"></span>\n                <div class=\"form-check\">\n                    <input class=\"form-check-input\" type=\"checkbox\" value=\"blockpy-read-only\"\n                        data-bind=\"checked: display.readOnly\">\n                    <label class=\"form-check-label\" for=\"blockpy-read-only\">\n                        Readonly?\n                    </label>\n                </div>\n            </div>\n            \n            \n            <!-- Fullscreen button -->\n            <button class=\"btn btn-outline-secondary btn-sm\"\n                data-bind=\"click: ui.menu.clickFullscreen\"\n                title=\"Full Screen\">\n                <span class='fas' data-bind=\"class: ui.menu.textFullscreen\"></span>\n            </button>\n            <!-- Edit Queued Inputs -->\n            <button class=\"btn btn-outline-secondary btn-sm\"\n                data-bind=\"click: ui.menu.editInputs, visible: ui.menu.showQueuedInputs\" title=\"Edit Inputs\">\n                <span class='fas fa-list-alt'></span>\n            </button>\n            <!-- Toggle Image Rendering -->\n            <button class=\"btn btn-outline-secondary btn-sm\"\n                data-toggle=\"button\"\n                data-bind=\"click: ui.menu.toggleImages\" title=\"Toggle Images\">\n                <span class=\"fas fa-images\"></span>\n            </button>\n            <!-- Pink Bug for actual errors -->\n            <span class=\"blockpy-student-error fas fa-bug\"></span>\n            <span data-bind=\"hidden: ui.menu.showClock\" class=\"blockpy-menu-clock\"></span>\n        </div>\n         \n    </div>\n    \n    <!-- ko if: ui.smallLayout() -->\n    <!-- Small layout View as instructor -->\n    <div class=\"form-check\"\n         data-bind=\"visible: ui.role.isGrader\">\n        <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"blockpy-as-instructor\"\n            data-bind=\"checked: display.instructor\">\n        <label class=\"form-check-label\" for=\"blockpy-as-instructor\">\n            View as instructor\n        </label>\n    </div>\n    <!-- ko if: ui.files.visible() -->\n    ").concat(files_js__WEBPACK_IMPORTED_MODULE_3__["FILES_HTML"], "\n    <!-- /ko -->\n    <!-- /ko -->\n    \n    <div class='row'>\n    <!-- Row 2: Console and Feedback -->\n    <!-- ko if: ui.secondRow.isAllVisible -->\n    <div data-bind=\"class: ui.secondRow.width\">\n    <div class='row'>\n        <!-- Console -->\n        ").concat(console_js__WEBPACK_IMPORTED_MODULE_6__["CONSOLE_HTML"], "\n        <!-- Feedback -->\n        <!-- ko if: ui.secondRow.isFeedbackVisible -->\n        ").concat(feedback_js__WEBPACK_IMPORTED_MODULE_2__["FEEDBACK_HTML"], "\n        <!-- /ko -->\n        <!-- Trace -->\n        <!-- ko if: ui.secondRow.isTraceVisible -->\n        ").concat(trace_js__WEBPACK_IMPORTED_MODULE_0__["TRACE_HTML"], "\n        <!-- /ko -->\n    </div>\n    </div>\n    <!-- /ko -->\n    \n    <!-- Row 3: File Navigation -->\n    <!-- ko if: ui.files.visible() && !ui.smallLayout() -->\n    ").concat(files_js__WEBPACK_IMPORTED_MODULE_3__["FILES_HTML"], "\n    <!-- /ko -->\n    \n    <!-- Row 4: View Row -->\n    ").concat(editors_js__WEBPACK_IMPORTED_MODULE_5__["EDITORS_HTML"], "\n    \n    </div>\n    \n    \n    <!-- Row 5: Footer Row -->    \n    <!-- ko if: ui.footer.visible -->\n    <div class=\"row\">\n        ").concat(footer_js__WEBPACK_IMPORTED_MODULE_4__["FOOTER_HTML"], "\n    </div>\n    <!-- /ko -->\n    \n</div>\n    ");
}

/***/ }),

/***/ "./src/server.js":
/*!***********************!*\
  !*** ./src/server.js ***!
  \***********************/
/*! exports provided: StatusState, BlockPyServer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StatusState", function() { return StatusState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockPyServer", function() { return BlockPyServer; });
/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./storage */ "./src/storage.js");
/* harmony import */ var _editor_assignment_settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./editor/assignment_settings */ "./src/editor/assignment_settings.js");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



/**
 *
 * @enum {string}
 */

var StatusState = {
  READY: "ready",
  ACTIVE: "active",
  RETRYING: "retrying",
  FAILED: "failed",
  OFFLINE: "offline"
};
/**
 * Object for communicating with the external servers. This includes functionality for
 * saving and loading files, logging events, saving completions, and retrieving history.
 *
 * @constructor
 * @this {BlockPyServer}
 * @param {Object} main - The main BlockPy instance
 */

function BlockPyServer(main) {
  this.main = main; // Save URLs locally for quicker access

  this.urls = main.model.configuration.urls; // Add the LocalStorage connection

  this.storage = new _storage__WEBPACK_IMPORTED_MODULE_0__["LocalStorageWrapper"]("BLOCKPY"); // FaultResistantCache

  this.queue = {
    "logEvent": JSON.parse(this.storage.getDefault("logEvent", "[]")),
    "updateSubmission": JSON.parse(this.storage.getDefault("updateSubmission", "[]"))
  };
  this.MAX_QUEUE_SIZE = {
    "logEvent": 200,
    "updateSubmission": 50
  };
  this.TIMER_DELAY = 1000;
  this.FAIL_DELAY = 2000;
  this.timers = {};
  this.overlay = null;
  this.blockingAttempts = 0;
  this.cachedFilenames = [];
  this.createSubscriptions();
  this.checkCaches();
  this.altLogEntry = null;
}
/**
 * Checks whether the IP address has changed, logging an event if that occurs.
 * @param response
 */

BlockPyServer.prototype.checkIP = function (response) {
  if (response.success) {
    if (this.storage.has("IP")) {
      var oldIP = this.storage.get("IP");

      if (oldIP !== response.ip) {
        var message = JSON.stringify({
          "old": oldIP,
          "new": response.ip
        });

        if (this.altLogEntry) {
          this.altLogEntry("X-IP.Change", undefined, undefined, message);
        } else {
          this.logEvent("X-IP.Change", undefined, undefined, message);
        }

        this.storage.set("IP", response.ip);
      }
    } else {
      this.storage.set("IP", response.ip);
    }
  }
};
/**
 * Determines if there have been previous failures cached, and if so retries them.
 * TODO: update
 */


BlockPyServer.prototype.checkCaches = function () {
  var _this = this;

  if (this.storage.has("saveAssignment")) {
    var data = JSON.parse(this.storage.get("saveAssignment"));

    this._postLatestRetry(data, "assignment", "saveAssignment", this.TIMER_DELAY);
  }

  this.cachedFilenames.forEach(function (filename) {
    if (_this.storage.has("saveFile" + filename)) {
      var _data = JSON.parse(_this.storage.get("saveFile" + filename));

      _this._postLatestRetry(_data, filename, "saveFile", _this.TIMER_DELAY);
    }
  });
  var server = this;
  Object.keys(this.queue).forEach(function (endpoint) {
    (function pushAnyQueued(response) {
      if (response.success) {
        if (server.queue[endpoint].length) {
          var data = JSON.parse(server.queue[endpoint].pop());
          var url = server.urls[endpoint];

          server._postRetry(data, endpoint, 1000, pushAnyQueued);
        }
      }
    })({
      "success": true
    });
  });
};

BlockPyServer.prototype.createFileSubscription = function (model, filename) {
  var _this2 = this;

  model.subscribe(function (contents) {
    return _this2.main.model.display.autoSave() ? _this2.saveFile(filename, contents) : false;
  }, this);
  this.cachedFilenames.push(filename);
};
/**
 * TODO: fix
 */


BlockPyServer.prototype.createSubscriptions = function () {
  var model = this.main.model;
  this.createFileSubscription(model.submission.code, "answer.py");
  this.createFileSubscription(model.assignment.onRun, "!on_run.py");
  this.createFileSubscription(model.assignment.onEval, "!on_eval.py");
  this.createFileSubscription(model.assignment.onChange, "!on_change.py");
  this.createFileSubscription(model.assignment.instructions, "!instructions.md");
  this.createFileSubscription(model.assignment.startingCode, "^starting_code.py");
  this.createFileSubscription(model.ui.files.extraStudentFiles, "#extra_student_files.blockpy");
  this.createFileSubscription(model.ui.files.extraStartingFiles, "#extra_starting_files.blockpy");
  this.createFileSubscription(model.ui.files.extraInstructorFiles, "#extra_instructor_files.blockpy");
};

BlockPyServer.prototype.createEventLogs = function () {
  var _this3 = this;

  window.onblur = function () {
    _this3.logEvent("Session.End", undefined, undefined, undefined);
  };

  window.onfocus = function () {
    _this3.logEvent("Session.Start", undefined, undefined, undefined);
  }; // TODO: Add in beacon?

};
/**
 *
 * Some subscriptions have to happen after other things have been loaded.
 * Right now this is just after CORGIS libraries have been loaded, but maybe
 * we'll add more later and this will need to be refactored.
 *
 * TODO: fix
 *
 */


BlockPyServer.prototype.finalizeSubscriptions = function () {//this.main.model.assignment.settings.datasets.subscribe(this.saveAssignment.bind(this));
};

BlockPyServer.prototype.authorizeHeader = function (currentSettings) {
  if (!currentSettings) {
    currentSettings = {};
  }

  var accessToken = this.main.model.configuration.accessToken();

  if (accessToken) {
    if (!currentSettings.headers) {
      currentSettings.headers = {};
    }

    currentSettings.headers["Authorization"] = "Bearer " + accessToken;
  }

  return currentSettings;
};
/**
 * Creates the default payload for any communication with the server API
 * @returns {{assignment_id: *, course_id: *, group_id: *, user_id: *, timezone: *, version: *, timestamp: *}}
 */


BlockPyServer.prototype.createServerData = function () {
  var assignment = this.main.model.assignment;
  var user = this.main.model.user;
  var submission = this.main.model.submission;
  var display = this.main.model.display;
  var configuration = this.main.model.configuration;
  var now = new Date();
  var microseconds = now.getTime();
  var result = {
    "assignment_id": assignment.id(),
    "assignment_group_id": user.groupId(),
    "course_id": user.courseId(),
    "submission_id": submission.id(),
    "user_id": user.id(),
    "version": assignment.version(),
    "timestamp": microseconds,
    "timezone": now.getTimezoneOffset(),
    "passcode": display.passcode(),
    "part_id": configuration.partId()
  };
  return result;
};
/**
 * Updates the status and message for the relevant endpoint.
 * @param endpoint {string} one of the URL endpoints
 * @param status {StatusState}
 * @param message {string?}
 */


BlockPyServer.prototype.setStatus = function (endpoint, status, message) {
  if (endpoint in this.main.model.status) {
    this.main.model.status[endpoint](status);
    this.main.model.status[endpoint + "Message"](message || "");
  }
};
/**
 * Renders an overlay on the screen that blocks operation until the system is ready.
 * The overlay gets progressively darker to indicate repeated failures.
 */


BlockPyServer.prototype.showOverlay = function (attempt) {
  this.blockingAttempts += 1;

  if (!document.getElementsByClassName("blockpy-overlay").length) {
    this.overlay = $('<div class="blockpy-overlay"> </div>');
    this.overlay.appendTo(document.body);
  }

  switch (attempt) {
    case 0:
      this.overlay.css("background-color", "#988");
      break;

    case 1:
      this.overlay.css("background-color", "#655");
      break;

    case 2:
      this.overlay.css("background-color", "#333");
      break;

    default:
      this.overlay.css("background-color", "black");
      break;
  }
};
/**
 * Undo a level of overlay; if this was the last level, removes it from the screen.
 */


BlockPyServer.prototype.hideOverlay = function () {
  this.blockingAttempts -= 1;

  if (this.blockingAttempts <= 0) {
    this.overlay.remove();
  }
};

BlockPyServer.prototype._enqueueData = function (cache, data) {
  // Ensure we have not overfilled the queue
  var length = this.queue[cache].length;
  var max = this.MAX_QUEUE_SIZE[cache];

  if (length > max) {
    this.queue[cache] = this.queue[cache].slice(length - max, max);
  } // Only add the element if it's new


  var key = JSON.stringify(data);
  var index = this.queue[cache].indexOf(key);

  if (index === -1) {
    this.queue[cache].push(key);
    this.storage.set(cache, JSON.stringify(this.queue[cache]));
  }
};

BlockPyServer.prototype._dequeueData = function (cache, data) {
  var key = JSON.stringify(data);
  var index = this.queue[cache].indexOf(key);

  if (index >= 0) {
    this.queue[cache].splice(index);
    this.storage.set(cache, JSON.stringify(this.queue[cache]));
  }
};

BlockPyServer.prototype._postRetry = function (data, endpoint, delay, callback) {
  var _this4 = this;

  // Trigger request
  var postRequest = function postRequest() {
    // Make a backup of the current post
    _this4._enqueueData(endpoint, data);

    $.ajax(_objectSpread({
      url: _this4.urls[endpoint],
      type: "post",
      data: data
    }, _this4.authorizeHeader())).done(function (response) {
      _this4._dequeueData(endpoint, data);

      if (response.success) {
        _this4.setStatus(endpoint, StatusState.READY);
      } else {
        console.error(response);

        _this4.setStatus(endpoint, StatusState.FAILED, response.message);
      }

      if (callback) {
        callback(response);
      }

      if (response.success) {
        _this4.checkIP(response.ip);
      }
    }) // If server request is the latest one, then let's try it again in a bit
    .fail(function (error, textStatus) {
      _this4.setStatus(endpoint, StatusState.RETRYING, textStatus.toString());

      _this4._postRetry(data, endpoint, delay + _this4.FAIL_DELAY, callback);
    });
  };

  if (delay === null) {
    postRequest();
  } else {
    setTimeout(postRequest, delay);
  }
};
/**
 * Make a AJAX request that, upon failure, will check to see if this was the
 * latest attempt for this `cache` marker. If so, it will attempt again until
 * successful; otherwise, it gives up the request.
 *
 * @param {Object} data - The AJAX-ready data to be posted
 * @param {String} filename - The unique name given to the relevant timer
 * @param {String} endpoint - The unique name given to the relevant cache entry
 * @param {Integer} delay - The current number of milliseconds to wait before
 trying the request again.
 */


BlockPyServer.prototype._postLatestRetry = function (data, filename, endpoint, delay, failureFunction, doneFunction) {
  var _this5 = this;

  var cache = endpoint + filename;

  var request = function request() {
    // Make a backup of the current post
    _this5.storage.set(cache, JSON.stringify(data));

    var time = _this5.storage.getTime(cache); // Send the request


    $.ajax(_objectSpread({
      url: _this5.urls[endpoint],
      data: data,
      type: "post"
    }, _this5.authorizeHeader())).done(function (response) {
      if (response.success) {
        _this5.checkIP(response); // If server request is the latest one, clear it from the cache


        var cachedTime = _this5.storage.getTime(cache);

        if (time >= cachedTime) {
          _this5.storage.remove(cache);
        }

        _this5.setStatus(endpoint, StatusState.READY);
      } else {
        // This connected but failed, don't try again but let the user know why.
        _this5.setStatus(endpoint, StatusState.FAILED, response.message);

        if (response.success === false) {
          // If we're the latest one, clear it from the cache
          var _cachedTime = _this5.storage.getTime(cache);

          if (time >= _cachedTime) {
            _this5.storage.remove(cache);
          }

          if (failureFunction) {
            failureFunction(response);
          }
        }
      }
    }).fail(function (error, textStatus) {
      _this5.setStatus(endpoint, StatusState.RETRYING, textStatus.toString()); // If server request is the latest one, then let's try it again in a bit


      var cachedTime = _this5.storage.getTime(cache);

      if (time >= cachedTime) {
        _this5._postLatestRetry(data, filename, endpoint, delay + _this5.FAIL_DELAY);
      }
    }).done(doneFunction);
  };

  clearTimeout(this.timers[cache]);

  if (delay === null) {
    return request();
  } else {
    this.timers[cache] = setTimeout(request, delay);
  }
};

BlockPyServer.prototype._postBlocking = function (endpoint, data, attempts, success, failure) {
  var _this6 = this;

  var extraSettings = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
  this.showOverlay(attempts);
  return $.ajax(_objectSpread({
    type: "POST",
    url: this.urls[endpoint],
    data: data
  }, this.authorizeHeader(extraSettings))).done(function (response) {
    _this6.hideOverlay();

    _this6.setStatus(endpoint, StatusState.READY);

    success(response);

    _this6.checkIP(response);
  }).fail(function (e, textStatus, errorThrown) {
    if (attempts <= 0) {
      _this6.hideOverlay();

      _this6.setStatus(endpoint, StatusState.FAILED, textStatus.toString());

      if (failure) {
        failure(e, textStatus, errorThrown);
      }
    } else {
      setTimeout(function () {
        _this6.hideOverlay();

        _this6.setStatus(endpoint, StatusState.RETRYING, textStatus.toString());

        _this6._postBlocking(endpoint, data, attempts - 1, success, failure, extraSettings);
      }, _this6.FAIL_DELAY);
    }
  });
};

BlockPyServer.prototype.loadAssignment = function (assignment_id) {
  var _this7 = this;

  var model = this.main.model;

  if (model.ui.server.isEndpointConnected("loadAssignment")) {
    var data = this.createServerData();
    data["assignment_id"] = assignment_id;

    this._postBlocking("loadAssignment", data, 4, function (response) {
      if (response.success) {
        _this7.main.loadAssignmentData_(response);
      } else {
        _this7.setStatus("loadAssignment", StatusState.FAILED, response.message);

        _this7.main.components.dialog.ERROR_LOADING_ASSIGNMNENT(response.message);
      }
    }, function (e, textStatus, errorThrown) {
      _this7.main.components.dialog.ERROR_LOADING_ASSIGNMNENT(textStatus);

      console.error(e, textStatus, errorThrown);
    });
  } else {
    this.setStatus("loadAssignment", StatusState.OFFLINE);
  }
};

BlockPyServer.prototype.saveAssignment = function () {
  var _this8 = this;

  var model = this.main.model;

  if (model.ui.server.isEndpointConnected("saveAssignment")) {
    var data = this.createServerData();
    data["hidden"] = model.assignment.hidden();
    data["reviewed"] = model.assignment.reviewed();
    data["public"] = model.assignment["public"]();
    data["url"] = model.assignment.url();
    data["points"] = model.assignment.points();
    data["ip_ranges"] = model.assignment.ipRanges();
    data["name"] = model.assignment.name();
    data["settings"] = Object(_editor_assignment_settings__WEBPACK_IMPORTED_MODULE_1__["saveAssignmentSettings"])(model);

    this._postBlocking("saveAssignment", data, 3, this.startPossibleFork.bind(this), function (e, textStatus, errorThrown) {
      _this8.main.components.dialog.ERROR_SAVING_ASSIGNMNENT(textStatus);

      console.error(e, textStatus, errorThrown);
    });
  } else {
    this.setStatus("saveAssignment", StatusState.OFFLINE, "Server is not connected! (Save Assignment)");
  }
};

BlockPyServer.prototype.loadHistory = function (callback) {
  var _this9 = this;

  if (this.main.model.ui.server.isEndpointConnected("loadHistory")) {
    var model = this.main.model;
    var data = this.createServerData();

    this._postBlocking("loadHistory", data, 2, callback, function (e, textStatus, errorThrown) {
      _this9.main.components.dialog.ERROR_LOADING_HISTORY();

      console.error(e, textStatus, errorThrown);
    });
  }
};

BlockPyServer.prototype.listUploadedFiles = function (callback) {
  var _this10 = this;

  if (this.main.model.ui.server.isEndpointConnected("listUploadedFiles")) {
    var model = this.main.model;
    var data = this.createServerData();

    this._postBlocking("listUploadedFiles", data, 2, callback, function (e, textStatus, errorThrown) {
      _this10.main.components.dialog.ERROR_LISTING_UPLOADED_FILES(textStatus);

      console.error(e, textStatus, errorThrown);
    });
  }
};

BlockPyServer.prototype.uploadFile = function (placement, directory, filename, contents, callback) {
  var _this11 = this;

  var deleteInstead = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
  var model = this.main.model;

  if (model.ui.server.isEndpointConnected("uploadFile")) {
    var data = this.createServerData();
    data["placement"] = placement;
    data["directory"] = directory;
    data["filename"] = filename;
    data["contents"] = contents;

    if (deleteInstead) {
      data["delete"] = true;
    }

    var fd = Object.entries(data).reduce(function (d, e) {
      return d.append.apply(d, _toConsumableArray(e)), d;
    }, new FormData());
    return this._postBlocking("uploadFile", fd, 3, callback, function (e, textStatus, errorThrown) {
      if (deleteInstead) {
        _this11.main.components.dialog.ERROR_DELETING_FILE(textStatus);
      } else {
        _this11.main.components.dialog.ERROR_UPLOADING_FILE(textStatus);
      }

      console.error(e, textStatus, errorThrown);
    }, {
      processData: false,
      contentType: false
    });
  } else {
    this.setStatus("uploadFile", StatusState.OFFLINE, "Server is not connected! (Upload File)");
  }
};

BlockPyServer.prototype.downloadFile = function (placement, directory, filename, callback) {
  var _this12 = this;

  var model = this.main.model;

  if (model.ui.server.isEndpointConnected("downloadFile")) {
    var data = this.createServerData();
    data["placement"] = placement;
    data["directory"] = directory;
    data["filename"] = filename;
    var fd = Object.entries(data).reduce(function (d, e) {
      return d.append.apply(d, _toConsumableArray(e)), d;
    }, new FormData());
    return this._postBlocking("downloadFile", fd, 3, callback, function (e, textStatus, errorThrown) {
      _this12.main.components.dialog.ERROR_DOWNLOADING_FILE(textStatus);

      console.error(e, textStatus, errorThrown);
    }, {
      processData: false,
      contentType: false,
      dataType: "text"
    });
  } else {
    this.setStatus("uploadFile", StatusState.OFFLINE, "Server is not connected! (Upload File)");
  }
};

BlockPyServer.prototype.renameFile = function (placement, directory, old_filename, new_filename, callback) {
  var _this13 = this;

  var model = this.main.model;

  if (model.ui.server.isEndpointConnected("renameFile")) {
    var data = this.createServerData();
    data["placement"] = placement;
    data["directory"] = directory;
    data["old_filename"] = old_filename;
    data["new_filename"] = new_filename;
    var fd = Object.entries(data).reduce(function (d, e) {
      return d.append.apply(d, _toConsumableArray(e)), d;
    }, new FormData());
    return this._postBlocking("renameFile", fd, 3, callback, function (e, textStatus, errorThrown) {
      _this13.main.components.dialog.ERROR_UPLOADING_FILE(textStatus);

      console.error(e, textStatus, errorThrown);
    }, {
      processData: false,
      contentType: false
    });
  } else {
    this.setStatus("renameFile", StatusState.OFFLINE, "Server is not connected! (Rename File)");
  }
};

BlockPyServer.prototype.logEvent = function (event_type, category, label, message, file_path) {
  if (this.main.model.display.readOnly()) {
    this.setStatus("logEvent", StatusState.OFFLINE);
    return;
  }

  if (this.main.model.ui.server.isEndpointConnected("logEvent")) {
    var data = this.createServerData();
    data["event_type"] = event_type;
    data["category"] = category;
    data["label"] = label;
    data["message"] = message;
    data["file_path"] = file_path;
    this.setStatus("logEvent", StatusState.ACTIVE); // Trigger request

    this._postRetry(data, "logEvent", 0, function () {});
  } else {
    this.setStatus("logEvent", StatusState.OFFLINE);
  }
};

BlockPyServer.prototype.saveImage = function (directory, image) {
  if (this.main.model.display.readOnly()) {
    this.setStatus("saveImage", StatusState.OFFLINE);
    return;
  }

  if (this.main.model.ui.server.isEndpointConnected("saveImage")) {
    var data = this.createServerData();
    data["directory"] = directory;
    data["image"] = image;
    this.setStatus("saveImage", StatusState.ACTIVE); // Trigger request

    this._postLatestRetry(data, "turtle_output", "saveImage", 0);
  } else {
    this.setStatus("saveImage", StatusState.OFFLINE);
  }
};

BlockPyServer.prototype.updateSubmissionStatus = function (newStatus) {
  var _this14 = this;

  if (this.main.model.display.readOnly()) {
    this.setStatus("updateSubmissionStatus", StatusState.OFFLINE);
    return;
  }

  if (this.main.model.ui.server.isEndpointConnected("updateSubmissionStatus")) {
    var data = this.createServerData();
    data["status"] = newStatus;

    var postStatusChange = function postStatusChange(data) {
      if (data.success) {
        _this14.main.model.submission.submissionStatus(newStatus);
      }
    };

    this._postBlocking("updateSubmissionStatus", data, 2, postStatusChange, function (e, textStatus, errorThrown) {
      _this14.main.components.dialog.ERROR_UPDATING_SUBMISSION_STATUS();

      console.error(e, textStatus, errorThrown);
    });
  }
};
/**
 * This function can be used to load files and web resources.
 *
 * DEPRECATED
 */


BlockPyServer.prototype.loadFile = function (filename, type, callback, errorCallback) {
  var model = this.main.model;
  var server = this;

  if (model.ui.server.isEndpointConnected("load_file")) {
    var data = this.createServerData();
    data["filename"] = filename;
    data["type"] = type;

    this._postBlocking(this.urls.load_file, data, 5, function (response) {
      if (response.success) {
        callback(response.data);
      } else {
        errorCallback(response.message);
        server.setStatus("loadFile", StatusState.FAILED, response.message);
      }
    }, function (e, textStatus, errorThrown) {
      errorCallback("Server failure! Report to instructor");
      console.error(errorThrown);
    });
  } else {
    errorCallback("No file server available.");
    this.setStatus("loadFile", StatusState.OFFLINE, "Server is not connected! (Load File)");
  }
};

BlockPyServer.prototype.saveFile = function (filename, contents, delay) {
  if (delay === undefined) {
    delay = this.TIMER_DELAY;
  }

  var model = this.main.model;

  if (model.display.readOnly()) {
    this.setStatus("saveFile", StatusState.OFFLINE);
    return;
  }

  if (model.ui.server.isEndpointConnected("saveFile")) {
    var data = this.createServerData();
    data["filename"] = filename;
    data["code"] = contents;
    this.setStatus("saveFile", StatusState.ACTIVE);
    return this._postLatestRetry(data, filename, "saveFile", delay, this.startPossibleFork.bind(this));
  } else {
    return this.setStatus("saveFile", StatusState.OFFLINE);
  }
};

BlockPyServer.prototype.startPossibleFork = function (response) {
  if (!response.success && response.forkable) {
    this.main.components.dialog.OFFER_FORK();
  }
};

BlockPyServer.prototype.updateSubmission = function (score, correct, hiddenOverride, forceUpdate) {
  var _this15 = this;

  if (this.main.model.display.readOnly()) {
    this.setStatus("updateSubmission", StatusState.OFFLINE);
    return;
  }

  var callback = this.main.model.configuration.callbacks.success;

  if (this.main.model.ui.server.isEndpointConnected("updateSubmission")) {
    var data = this.createServerData();
    data["score"] = score;
    data["correct"] = correct;
    data["hidden_override"] = hiddenOverride;
    data["force_update"] = forceUpdate;
    this.main.components.pythonEditor.bm.blockEditor.getPngFromBlocks(function (pngData, img) {
      data["image"] = pngData;

      if (img.remove) {
        img.remove();
      }

      _this15._postRetry(data, "updateSubmission", 0, function (response) {
        if (response.success) {
          _this15.setStatus("updateSubmission", StatusState.READY);
        } else {
          _this15.setStatus("updateSubmission", StatusState.FAILED, response.message);
        }

        if (!hiddenOverride && correct && callback) {
          callback(data["assignment_id"]);
        }
      });
    });
  }
};

BlockPyServer.prototype.openaiProxy = function (openai_data) {
  var model = this.main.model;
  var server = this;
  var data = this.createServerData();
  data["openai_data"] = openai_data;
  return this._postBlocking(this.urls.openai_proxy, data);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/skulpt_modules/coverage.js":
/*!****************************************!*\
  !*** ./src/skulpt_modules/coverage.js ***!
  \****************************************/
/*! exports provided: $sk_mod_coverage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$sk_mod_coverage", function() { return $sk_mod_coverage; });
var $sk_mod_coverage = "\n\"\"\"\nHideous fill-in replacement for Coverage, leveraging some magic from the\nUtility function. The data this returns is false - it doesn't actually\ndescribe the missing lines and all lines; it just describes the traced lines.\nBut since Pedal doesn't need the other two, it works out fine when you do:\n\nstatements - missing\n\"\"\"\n\nimport utility\n\nclass Coverage:\n    def start(self):\n        pass\n\n    def stop(self):\n        pass\n\n    def save(self):\n        pass\n\n    def _analyze(self, filename: str):\n        lines = set(utility.trace_lines())\n        # lines will be the lines that were actually executed\n        return Analysis(None, len(lines), None, set(), lines)\n\n\nclass Numbers:\n    def __init__(self, n_missing, n_statements, pc_covered):\n        self.n_missing = n_missing\n        self.n_statements = n_statements\n        self.pc_covered = pc_covered\n\n\nclass Analysis:\n    def __init__(self, n_missing, n_statements, pc_covered, missing, statements):\n        self.missing = missing\n        self.statements = statements\n        self.numbers = Numbers(n_missing, n_statements, pc_covered)\n\n\nclass python:\n    def get_python_source(self):\n        return None\n";

/***/ }),

/***/ "./src/skulpt_modules/image.js":
/*!*************************************!*\
  !*** ./src/skulpt_modules/image.js ***!
  \*************************************/
/*! exports provided: $builtinmodule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$builtinmodule", function() { return $builtinmodule; });
var $builtinmodule = function $builtinmodule(name) {
  var mod, sampleWrapper;
  mod = {
    __name__: "image"
  };

  if (!Sk.PIL) {
    Sk.PIL = {
      assets: {}
    };
  } // InstantPromise is a workaround to allow usage of the clean promise-style
  // then/catch syntax but to instantly call resolve the then/catch chain so we
  // can avoid creating Suspensions in unnecessary cases.  This is desirable
  // because Suspensions have a fairly large negative impact on overall
  // performance.  These 'instant promises' come into play when a tracer()
  // call is made with a value other than 1.  When tracer is 0 or greater than 1
  // , we can bypass the creation of a Suspension and proceed to the next line of
  // code immediately if the current line is not going to involve a screen
  // update. We determine if a real promise or InstantPromise is necessary by
  // checking FrameManager.willRenderNext()


  function InstantPromise(err, result) {
    this.lastResult = result;
    this.lastError = err;
  }

  InstantPromise.prototype.then = function (cb) {
    if (this.lastError) {
      return this;
    }

    try {
      this.lastResult = cb(this.lastResult);
    } catch (e) {
      this.lastResult = undefined;
      this.lastError = e;
    }

    return this.lastResult instanceof Promise ? this.lastResult : this;
  };

  InstantPromise.prototype["catch"] = function (cb) {
    if (this.lastError) {
      try {
        this.lastResult = cb(this.lastError);
        this.lastError = undefined;
      } catch (e) {
        this.lastResult = undefined;
        this.lastError = e;
      }
    }

    return this.lastResult instanceof Promise ? this.lastResult : this;
  };

  var buildImage = function buildImage(imageData) {};

  function getAsset(name) {
    return new Promise(function (resolve, reject) {
      if (Sk.PIL.assets[name] !== undefined) {
        //return Sk.PIL.assets[name];
        resolve(Sk.PIL.assets[name]);
      } else {
        var img = new Image();
        img.crossOrigin = "Anonymous";

        img.onload = function () {
          Sk.PIL.assets[name] = img;
          resolve(img);
        };

        img.onerror = function () {
          //throw new Error("Failed to load asset: " + name);
          reject(name);
        };

        img.src = name;
      }
    });
  }

  var image = function image($gbl, $loc) {
    // open(filename) or open(url)
    // show()
    $loc.__init__ = new Sk.builtin.func(function (self, file_or_url) {
      Sk.builtin.pyCheckArgs("__init__", arguments, 2, 2);
      Sk.builtin.pyCheckType("file_or_url", "string", Sk.builtin.checkString(file_or_url));
      self.file_or_url = file_or_url; // TODO: Change to suspension

      var imagePromise = getAsset(Sk.ffi.remapToJs(file_or_url));
      var susp = new Sk.misceval.Suspension();
      self.image = Sk.builtin.none.none$;

      susp.resume = function () {
        if (susp.data["error"]) {
          //throw new Sk.builtin.IOError(susp.data["error"].message);
          throw susp.data["error"];
        } else {//return self.image;
        }
      };

      susp.data = {
        type: "Sk.promise",
        promise: imagePromise.then(function (value) {
          self.image = value;
          self.canvas = document.createElement("canvas");
          self.canvas.width = self.image.width;
          self.canvas.height = self.image.height;
          self.canvas.getContext("2d").drawImage(self.image, 0, 0, self.image.width, self.image.height);
          self.pixels = self.canvas.getContext("2d").getImageData(0, 0, self.image.width, self.image.height).data; //return value;
        }, function (err) {
          self.image = "";
          throw err; //return err;
        })
      };
      return susp;
    });
    $loc.show = new Sk.builtin.func(function (self) {
      if (Sk.console === undefined) {
        throw new Sk.builtin.NameError("Can not resolve drawing area. Sk.console is undefined!");
      }

      var consoleData = {
        image: self.image,
        file_or_url: self.file_or_url
      };
      Sk.console.printPILImage(consoleData);
    });
    $loc.flip = new Sk.builtin.func(function (self) {
      self.image.style.transform = "scaleX(-1)";

      if (Sk.console === undefined) {
        throw new Sk.builtin.NameError("Can not resolve drawing area. Sk.console is undefined!");
      }

      return self;
    });
  };

  mod.Image = Sk.misceval.buildClass(mod, image, "Image", []);
  return mod;
};

/***/ }),

/***/ "./src/skulpt_modules/pedal_tracer.js":
/*!********************************************!*\
  !*** ./src/skulpt_modules/pedal_tracer.js ***!
  \********************************************/
/*! exports provided: $pedal_tracer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$pedal_tracer", function() { return $pedal_tracer; });
var $pedal_tracer = "\n\n\"\"\"\nWraps the tracer module in Pedal\n\"\"\"\n\nimport os\nimport utility\n        \nclass SandboxBasicTracer:\n    \"\"\"\n\n    \"\"\"\n    def __init__(self):\n        super().__init__()\n        self.filename = \"student.py\"\n        self.code = None\n\n    def as_filename(self, filename, code):\n        if os.path.isabs(filename):\n            self.filename = filename\n        else:\n            self.filename = os.path.abspath(filename)\n        self.code = code\n        return self\n\n    def __enter__(self):\n        pass\n\n    def __exit__(self, exc_type, exc_val, traceback):\n        pass\n\nclass SandboxNativeTracer(SandboxBasicTracer):\n    \"\"\"\n    Tracks lines covered and function calls. Possibly other things? We could track variables, if that\n    was something people wanted.\n\n    TODO: Handle multiple submission files?\n    \"\"\"\n    def __init__(self):\n        super().__init__()\n        #self.calls = utility.trace_calls()\n        self.lines = utility.trace_lines()\n        self.step_index = len(utility.trace_lines())\n    \n    def get_calls(self):\n        return utility.trace_calls()\n    \n    calls = property(get_calls)\n    \n    def __enter__(self):\n        utility.start_trace(self)\n\n    def __exit__(self, exc_type, exc_val, traceback):\n        utility.stop_trace(self)\n\nTRACER_STYLES = {\n    'none': SandboxBasicTracer,\n    'native': SandboxNativeTracer\n}\n\n";

/***/ }),

/***/ "./src/skulpt_modules/sk_mod_instructor.js":
/*!*************************************************!*\
  !*** ./src/skulpt_modules/sk_mod_instructor.js ***!
  \*************************************************/
/*! exports provided: $sk_mod_instructor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$sk_mod_instructor", function() { return $sk_mod_instructor; });
/**
 * Skulpt Module for holding the Instructor API.
 *
 * This module is loaded in by getting the functions' source code from toString.
 * Isn't that crazy?
 *
 *
 */
var $sk_mod_instructor = function $sk_mod_instructor() {
  // Main module object that gets returned at the end.
  var mod = {};
  var none = Sk.builtin.none.none$;
  var prior = null;
  mod.timeit = new Sk.builtin.func(function (name) {
    Sk.builtin.pyCheckArgs("timeit", arguments, 1, 1);
    var difference;

    if (prior === null) {
      difference = 0;
    } else {
      difference = Date.now() - prior;
    }

    console.log(Sk.ffi.remapToJs(name), difference / 1000);
    prior = Date.now();
  });
  /**
   * Logs feedback to javascript console
   */

  mod.console_log = new Sk.builtin.func(function () {
    console.log(Array.prototype.slice.call(arguments).map(Sk.ffi.remapToJs));
  });
  /**
   * Logs debug to javascript console
   */

  mod.console_debug = new Sk.builtin.func(function () {
    console.log(arguments);
  });
  /**
   * This function coverts the output in the student report to a python 
   * list and returns it.
  **/

  mod.get_output = new Sk.builtin.func(function () {
    Sk.builtin.pyCheckArgs("get_output", arguments, 0, 0);

    if (Sk.executionReports["student"].success) {
      var output = Sk.executionReports["student"]["output"]();
      output = output.map(function (item) {
        return item.toSkulpt();
      });
      return new Sk.builtin.list(output);
    } else {
      return new Sk.builtin.list([]);
    }
  });
  /**
   * This function resets the output, particularly useful if the student
   * code is going to be rerun.
   */

  mod.reset_output = new Sk.builtin.func(function () {
    Sk.builtin.pyCheckArgs("reset_output", arguments, 0, 0);

    if (Sk.executionReports["student"].success) {
      Sk.executionReports["student"].output.removeAll();
    }

    return Sk.builtin.none.none$;
  });
  /*mod.queue_input = new Sk.builtin.func(function() {
      Sk.builtin.pyCheckArgs("queue_input", arguments, 1, Infinity);
      let args = arguments;
      for (let i = args.length-1; i >= 0; i--) {
          let input = args[i];
          Sk.builtin.pyCheckType("input", "string", Sk.builtin.checkString(input));
          Sk.queuedInput.push(Sk.ffi.remapToJs(input));
      }
  });*/

  /**
   * This function is called by instructors to get the students' code as a string.
  **/

  mod.get_program = new Sk.builtin.func(function () {
    Sk.builtin.pyCheckArgs("get_program", arguments, 0, 0);
    return Sk.ffi.remapToPy(Sk.executionReports["verifier"].code);
  });
  /**
   * This function is called by instructors to get the students' code as a string.
  **/

  mod.get_evaluation = new Sk.builtin.func(function () {
    Sk.builtin.pyCheckArgs("get_evaluation", arguments, 0, 0);
    return Sk.ffi.remapToPy(Sk.executionReports["student"].evaluation || "");
  });
  mod.trace_lines = new Sk.builtin.func(function () {
    if (Sk.executionReports["student"].success) {
      var lines = Sk.executionReports["student"].realLines;
      return Sk.ffi.remapToPy(lines);
    } else {
      return new Sk.builtin.list([]);
    }
  });
  mod.trace_calls = new Sk.builtin.func(function () {
    //console.log("--", Sk.executionReports["student"]);
    //console.log("CHECKING CALLS", Sk.executionReports['student'].success);
    if (Sk.executionReports["student"].success) {
      var calls = Sk.executionReports["student"].calls;
      return Sk.ffi.remapToPy(calls);
    }

    return new Sk.builtin.dict([]);
  });
  mod.start_trace = new Sk.builtin.func(function () {
    //console.log("START/BEGIN", Sk.beforeCall, Sk.executionReports.student.tracing);
    if (Sk.beforeCall === null) {
      Sk.beforeCall = Sk.beforeCallBackup;
    }

    Sk.executionReports["student"].tracing.push(true); //console.log("START/END", Sk.beforeCall, Sk.executionReports.student.tracing);
  });
  mod.stop_trace = new Sk.builtin.func(function () {
    //console.log("STOP/BEGIN", Sk.beforeCall, Sk.executionReports.student.tracing);
    Sk.executionReports["student"].tracing.pop();

    if (Sk.executionReports["student"].tracing.length === 0) {
      Sk.beforeCall = null;
    } //console.log("STOP/END", Sk.beforeCall, Sk.executionReports.student.tracing);

  });
  /**
   *
   */

  mod.get_student_error = new Sk.builtin.func(function () {
    Sk.builtin.pyCheckArgs("get_student_error", arguments, 0, 0);

    if (Sk.executionReports["student"].success) {
      return new Sk.builtin.tuple([none, none]);
    } else {
      var error = Sk.executionReports["student"].error,
          position = {};

      if (error && error.traceback && error.traceback.length > 0) {
        position["line"] = error.traceback[0].lineno;
      } else {
        error = none;
      }

      position = Sk.ffi.remapToPy(position);
      return new Sk.builtin.tuple([error, position]);
    }
  });
  mod.had_execution_time_error = new Sk.builtin.func(function () {
    Sk.builtin.pyCheckArgs("had_execution_time_error", arguments, 0, 0);
    return !Sk.executionReports["student"].success && Sk.executionReports["student"].error && Sk.executionReports["student"].error.tp$name === "TimeLimitError";
  });
  var backupTime = undefined;
  mod.limit_execution_time = new Sk.builtin.func(function () {
    Sk.builtin.pyCheckArgs("limit_execution_time", arguments, 0, 0);
    backupTime = Sk.execLimit;

    if (Sk.execLimitFunction) {
      Sk.execLimit = Sk.execLimitFunction();
      Sk.execStart = Date.now();
    }
  });
  mod.unlimit_execution_time = new Sk.builtin.func(function () {
    Sk.builtin.pyCheckArgs("unlimit_execution_time", arguments, 0, 0);
    Sk.execLimit = backupTime;
    Sk.execStart = Date.now();
  });
  mod.suppress_scrolling = new Sk.builtin.func(function () {
    Sk.builtin.pyCheckArgs("suppress_scrolling", arguments, 0, 0);
    Sk.executionReports.instructor.scrolling = true;
  });
  /*
  def hist(self, data, **kwargs):
      label = kwargs.get('label', None)
      self.active_plot['data'].append({'type': 'Histogram', 'values': data, 'label': label})
  def plot(self, xs, ys=None, **kwargs):
      label = kwargs.get('label', None)
      if ys == None:
          self.active_plot['data'].append({'type': 'Line', 
                                          'x': range(len(xs)), 'y': xs, 'label': label})
      else:
          self.active_plot['data'].append({'type': 'Line', 'x': xs, 'y': ys, 'label': label})
  def scatter(self, xs, ys, **kwargs):
      label = kwargs.get('label', None)
      self.active_plot['data'].append({'type': 'Scatter', 'x': xs, 'y': ys, 'label': label})
  */

  mod.get_plots = new Sk.builtin.func(function () {
    Sk.builtin.pyCheckArgs("get_plots", arguments, 0, 0);

    if (Sk.executionReports["student"].success) {
      var outputs = Sk.executionReports["student"]["output"]();
      outputs = outputs.filter(function (output) {
        return output.type === "plot";
      }).map(function (graph) {
        return {
          "data": graph.content.map(function (plot) {
            var newPlot = {
              "type": plot.type,
              "label": ""
            };

            if (plot.type === "line" || plot.type === "scatter") {
              newPlot["x"] = plot.data.map(function (v) {
                return v.x;
              });
              newPlot["y"] = plot.data.map(function (v) {
                return v.y;
              });
            } else if (plot.type === "hist") {
              newPlot["values"] = plot.data;
            }

            return newPlot;
          }),
          "xlabel": "",
          "ylabel": "",
          "title": "",
          "legend": false
        };
      });
      return Sk.ffi.remapToPy(outputs);
    } else {
      return Sk.ffi.remapToPy([]);
    }
  }); // Provides `student` as an object with all the data that the student declared.

  mod.StudentData = Sk.misceval.buildClass(mod, function ($gbl, $loc) {
    $loc.__init__ = new Sk.builtin.func(function (self) {
      //self.data = Sk.builtin.dict();
      var newDict = new Sk.builtin.dict();
      Sk.abstr.sattr(self, new Sk.builtin.str("data"), newDict, true);
      self.module = Sk.executionReports["student"].results;

      if (self.module !== undefined) {
        self.module = self.module.$d;

        for (var key in self.module) {
          if (self.module.hasOwnProperty(key)) {
            Sk.abstr.objectSetItem(newDict, Sk.ffi.remapToPy(Sk.unfixReserved(key)), self.module[key]);
          }
        }
      } else {
        self.module = {};
      }

      return Sk.builtin.none.none$;
    });

    var call_f = function call_f(kwa) {
      Sk.builtin.pyCheckArgsLen("call", arguments.length, 1, Infinity, true, true);
      var args = Array.prototype.slice.call(arguments, 1);
      var kwargs = new Sk.builtins.dict(kwa);
      var self = args[0];
      var functionName = args[1];
      args = args.slice(2);
      var inputs = kwargs.mp$lookup(new Sk.builtin.str("inputs"));

      if (inputs !== undefined) {
        inputs = Sk.ffi.remapToJs(inputs);

        if (inputs.constructor === Array) {
          inputs.forEach(function (item) {
            Sk.queuedInput.push(item);
          });
        } else {
          Sk.queuedInput.push(input);
        }
      }

      var data = self.tp$getattr(new Sk.builtin.str("data"));
      var functionObject = data.mp$lookup(functionName);
      var result = functionObject.tp$call(args);
      return result;
    };

    call_f.co_kwargs = true; //call_f.co_varnames = ["self", "function"];

    call_f.co_name = new Sk.builtin.str("call");
    $loc["call_$rn$"] = new Sk.builtin.func(call_f);
    $loc["__repr__"] = new Sk.builtin.func(function (self) {
      return new Sk.builtin.str("");
    });
    $loc.get_names_by_type = new Sk.builtin.func(function (self, type, exclude_builtins) {
      Sk.builtin.pyCheckArgs("get_names_by_type", arguments, 2, 3);

      if (exclude_builtins === undefined) {
        exclude_builtins = true;
      } else {
        Sk.builtin.pyCheckType("exclude_builtins", "boolean", Sk.builtin.checkBool(exclude_builtins));
        exclude_builtins = Sk.ffi.remapToJs(exclude_builtins);
      }

      var result = [];

      for (var property in self.module) {
        if (self.module.hasOwnProperty(property)) {
          if (self.module[property].tp$name === type.tp$name) {
            //console.log(exclude_builtins);
            if (exclude_builtins && property.startsWith("__")) {
              continue;
            }

            result.push(Sk.ffi.remapToPy(Sk.unfixReserved(property)));
          }
        }
      }

      return new Sk.builtin.list(result);
    });
    $loc.get_values_by_type = new Sk.builtin.func(function (self, type, exclude_builtins) {
      Sk.builtin.pyCheckArgs("get_values_by_type", arguments, 2, 3);

      if (exclude_builtins === undefined) {
        exclude_builtins = true;
      } else {
        Sk.builtin.pyCheckType("exclude_builtins", "boolean", Sk.builtin.checkBool(exclude_builtins));
        exclude_builtins = Sk.ffi.remapToJs(exclude_builtins);
      }

      var result = [];

      for (var property in self.module) {
        if (self.module.hasOwnProperty(property)) {
          if (self.module[property].tp$name === type.tp$name) {
            if (exclude_builtins && property.startsWith("__")) {
              continue;
            }

            result.push(self.module[property]);
          }
        }
      }

      return new Sk.builtin.list(result);
    });
  }, "StudentData");
  mod.student = Sk.misceval.callsimOrSuspend(mod.StudentData);
  mod.get_student_data = new Sk.builtin.func(function () {
    Sk.builtin.pyCheckArgs("get_student_data", arguments, 0, 0);
    return mod.student;
  });
  mod.set_instructions = new Sk.builtin.func(function (newInstructions) {
    Sk.builtin.pyCheckArgs("set_instructions", arguments, 1, 2);
    newInstructions = Sk.ffi.remapToJs(newInstructions);
    Sk.executionReports["model"].display.changedInstructions(newInstructions);
  });
  mod.get_model_info = new Sk.builtin.func(function (keys) {
    Sk.builtin.pyCheckArgs("get_model_info", arguments, 1, 1);
    var model = Sk.executionReports["model"];
    keys = Sk.ffi.remapToJs(keys).split(".");

    for (var i = 0; i < keys.length; i++) {
      model = model[keys[i]];
    }

    return Sk.ffi.remapToPy(model());
  });
  mod.clear_existing_student_imports = new Sk.builtin.func(function () {
    Sk.builtin.pyCheckArgs("clear_existing_student_imports", arguments, 0, 0);
    Sk.clearExistingStudentImports();
  });
  mod.download_file = new Sk.builtin.func(function (placement, directory, filename) {
    Sk.builtin.pyCheckArgs("download_file", arguments, 3, 3);
    var downloadFileUrl = Sk.executionReports["model"].configuration.urls["downloadFile"];
    var combiner = downloadFileUrl.includes("?") ? "&" : "?";
    var url = "".concat(downloadFileUrl).concat(combiner, "placement=").concat(placement, "&directory=").concat(directory, "&filename=").concat(filename);
    var prom = new Promise(function (resolve, reject) {
      var xmlhttp = new XMLHttpRequest(); // TODO: Figure out if this needs headers

      xmlhttp.addEventListener("loadend", function (e) {
        resolve(Sk.ffi.remapToPy(xmlhttp.responseText));
      });
      xmlhttp.open("GET", url);
      xmlhttp.send(null);
    });
    var susp = new Sk.misceval.Suspension();
    var resolution = null;

    susp.resume = function () {
      return resolution;
    };

    susp.data = {
      type: "Sk.promise",
      promise: prom.then(function (value) {
        resolution = value;
        return value;
      }, function (err) {
        resolution = "";
        return err;
      })
    };
    return susp;
  });
  return mod;
};

/***/ }),

/***/ "./src/skulpt_modules/weakref.js":
/*!***************************************!*\
  !*** ./src/skulpt_modules/weakref.js ***!
  \***************************************/
/*! exports provided: $builtinmodule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$builtinmodule", function() { return $builtinmodule; });
var $builtinmodule = function $builtinmodule(name) {
  var mod, sampleWrapper;
  mod = {
    __name__: "weakref"
  };
  /*mod.WeakSet = Sk.abstr.buildNativeClass("weakref.WeakSet", {
      constructor: function WeakSet()
  });*/

  var WeakSet = function WeakSet($gbl, $loc) {
    $loc.__init__ = new Sk.builtin.func(function (self, data) {
      Sk.builtin.pyCheckArgs("__init__", arguments, 2, 2);
      Sk.builtin.pyCheckType("data", "iterable", Sk.builtin.checkIterable(data));
      self.data = [];
      var iter = Sk.abstr.iter(data);
      var next;

      do {
        next = Sk.abstr.iternext(iter);

        if (next !== undefined) {
          self.data.push(new WeakRef(next));
        }
      } while (next !== undefined);

      return Sk.builtin.none.none$;
    });
    $loc.__iter__ = new Sk.builtin.func(function (self) {
      var viewOfData = [];

      for (var i = 0; i < self.data.length; i++) {
        var item = self.data[i].deref();

        if (item !== undefined) {
          viewOfData.push(item);
        }
      }

      self.data = viewOfData;
      return Sk.abstr.iter(new Sk.builtin.list(viewOfData));
    });
    /*$loc.next$ = new Sk.builtin.func(function (self) {
        return self.tp$iter();
    });*/

    $loc.add = new Sk.builtin.func(function (self, item) {
      self.data.push(new WeakRef(item));
    });
  };

  mod.WeakSet = Sk.misceval.buildClass(mod, WeakSet, "WeakSet", []);
  return mod;
};

/***/ }),

/***/ "./src/storage.js":
/*!************************!*\
  !*** ./src/storage.js ***!
  \************************/
/*! exports provided: LocalStorageWrapper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LocalStorageWrapper", function() { return LocalStorageWrapper; });
var LOCAL_STORAGE_REF;

try {
  LOCAL_STORAGE_REF = localStorage;
  var mod = "BLOCKPY_LOCALSTORAGE_TEST";
  LOCAL_STORAGE_REF.setItem(mod, mod);
  LOCAL_STORAGE_REF.removeItem(mod);
} catch (e) {
  LOCAL_STORAGE_REF = {
    _data: {},
    setItem: function setItem(id, val) {
      return this._data[id] = String(val);
    },
    getItem: function getItem(id) {
      return this._data.hasOwnProperty(id) ? this._data[id] : null;
    },
    removeItem: function removeItem(id) {
      return delete this._data[id];
    },
    clear: function clear() {
      return this._data = {};
    }
  };
}
/**
 * Helper object for interfacing with the LocalStorage. The LocalStorage
 * browser API allows for offline storage. That API is very unsophisticated,
 * and is essentially a lame key-value store. This object sits on top
 * and provides a number of useful utilities, including rudimentarycache
 * cache expiration.
 *
 * @constructor
 * @this {LocalStorageWrapper}
 * @param {String} namespace - A namespace to use in grouping access to localstorage. This keeps access clean and organized, while also making it possible to have multiple LocalStorage connections.
 */


function LocalStorageWrapper(namespace) {
  this.namespace = namespace;
}
/**
 * A method for adding a key/value pair to LocalStorage.
 * Note that both parameters must be strings (JSON.stringify is your friend).
 *
 * @param {String} key - The name of the key.
 * @param {String} value - The value.
 */

LocalStorageWrapper.prototype.set = function (key, value) {
  LOCAL_STORAGE_REF.setItem(this.namespace + "_" + key + "_value", value);
  LOCAL_STORAGE_REF.setItem(this.namespace + "_" + key + "_timestamp", $.now());
};
/**
 * A method for removing a key from LocalStorage.
 *
 * @param {String} key - The name of the key to remove.
 */


LocalStorageWrapper.prototype.remove = function (key) {
  LOCAL_STORAGE_REF.removeItem(this.namespace + "_" + key + "_value");
  LOCAL_STORAGE_REF.removeItem(this.namespace + "_" + key + "_timestamp");
};
/**
 * A method for retrieving the value associated with the given key.
 *
 * @param {String} key - The name of the key to retrieve the value for.
 */


LocalStorageWrapper.prototype.get = function (key) {
  return LOCAL_STORAGE_REF.getItem(this.namespace + "_" + key + "_value");
};
/**
 * A method for retrieving the time associated with the given key.
 *
 * @param {String} key - The name of the key to retrieve the time for.
 * @returns {Integer} - The timestamp (local epoch) when the key was last set.
 */


LocalStorageWrapper.prototype.getTime = function (key) {
  return parseInt(LOCAL_STORAGE_REF.getItem(this.namespace + "_" + key + "_timestamp"));
};
/**
 * A method for retrieving the value associated with the given key.
 * If the key does not exist, then the default value is used instead.
 * This default will be set.
 *
 * @param {String} key - The name of the key to retrieve the value for.
 * @param {String} defaultValue - The default value to use. Must be a string.
 */


LocalStorageWrapper.prototype.getDefault = function (key, defaultValue) {
  if (this.has(key)) {
    return this.get(key);
  } else {
    this.set(key, defaultValue);
    return defaultValue;
  }
};
/**
 * A test for whether the given key is in LocalStorage.
 *
 * @param {String} key - The key to test existence for.
 */


LocalStorageWrapper.prototype.has = function (key) {
  return LOCAL_STORAGE_REF.getItem(this.namespace + "_" + key + "_value") !== null;
};
/**
 * A test for whether the server has the newer version. This function
 * assumes that the server trip takes about 5 seconds. This method
 * is largely deprecated.
 *
 * @param {String} key - The key to check.
 * @param {Integer} server_time - The server's time as an epoch (in milliseconds)
 */


LocalStorageWrapper.prototype.is_new = function (key, server_time) {
  var stored_time = LOCAL_STORAGE_REF.getItem(this.namespace + "_" + key + "_timestamp");
  return server_time >= stored_time + 5000;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/trace.js":
/*!**********************!*\
  !*** ./src/trace.js ***!
  \**********************/
/*! exports provided: TRACE_HTML, AST_DESCRIPTIONS, BlockPyTrace */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TRACE_HTML", function() { return TRACE_HTML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AST_DESCRIPTIONS", function() { return AST_DESCRIPTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockPyTrace", function() { return BlockPyTrace; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var TRACE_HTML = "\n\n<div class=\"blockpy-trace col-md-6 blockpy-panel\"\n            role=\"region\" aria-label=\"Trace\">\n    \n    <div class=\"clearfix\">\n        <strong>Trace: </strong>\n        \n        <!-- Feedback/Trace Visibility Control -->\n        <button type='button'\n                class='btn btn-sm btn-outline-secondary float-right blockpy-hide-trace'\n                data-bind=\"click: ui.secondRow.advanceState\">\n            <span class='fas fa-eye'></span> Hide Trace\n        </button>\n    </div>\n\n    <div class=\"input-group mb-3 blockpy-trace-controls\">\n        <div class=\"input-group-prepend\">\n            <button type='button' class='btn btn-outline-secondary'\n                data-bind=\"click: ui.trace.first\">\n                <span class='fas fa-step-backward'></span>\n            </button>\n            <button type='button' class='btn btn-outline-secondary'\n                data-bind=\"click: ui.trace.backward\">\n                <span class='fas fa-backward'></span>\n            </button>\n            <span class=\"input-group-text\">Step:</span>\n            <span class=\"input-group-text\">\n                <span data-bind='text: execution.student.currentTraceStep'></span>\n                / <span data-bind='text: execution.student.lastStep'></span>\n            </span>\n        </div>\n        <div class=\"input-group-append\">\n            <button type='button' class='btn btn-outline-secondary'\n                data-bind=\"click: ui.trace.forward\">\n                <span class='fas fa-forward'></span>\n            </button>\n            <button type='button' class='btn btn-outline-secondary'\n                data-bind=\"click: ui.trace.last\">\n                <span class='fas fa-step-forward'></span>\n            </button>\n            <span class=\"input-group-text\">\n                <span data-bind='text: ui.trace.line'></span>\n            </span>\n        </div>\n    </div>\n    <p data-bind=\"text: ui.trace.ast\"></p>\n    <p>Variables after this step:</p>\n    <table class='table table-sm table-striped table-bordered table-hover'>\n        <thead>\n            <tr><th>Name</th><th>Type</th><th>Value</th></tr>\n        </thead>\n        <tbody data-bind=\"foreach: ui.trace.data().properties\">\n            <tr data-bind=\"visible: name != '__file__' && name != '__path__'\">\n                <td data-bind=\"text: name\"></td>\n                <td data-bind=\"text: type\"></td>\n                <td>\n                    <code data-bind=\"text: value\"></code>\n                    <!-- ko if: type == \"List\" -->\n                    \n                    <a href=\"\" data-bind=\"click: //$root.viewExactValue(type, exact_value)\">\n                    <span class='glyphicon glyphicon-new-window'></span>\n                    </a>\n                    <!-- /ko -->\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    \n</div>\n";
var AST_DESCRIPTIONS = {
  "Add": "An addition operator",
  "And": "A boolean AND operator",
  "AnnAssign": "An annotated assignment",
  "Assert": "An assert statement",
  "Assign": "An assignment statement",
  "AsyncFor": "An asychronous for loop",
  "AsyncFunctionDef": "An asychronous function definition",
  "AsyncWith": "An asychronous with statement",
  "Attribute": "An attribute lookup (access a field)",
  "AugAssign": "An augmented assignment",
  "AugLoad": "An augmented load",
  "AugStore": "An augmented store",
  "Await": "An await statement",
  "BinOp": "A binary operator",
  "BitAnd": "A bitwise AND operator",
  "BitOr": "A bitwise OR operator",
  "BitXor": "A bitwise XOR operator",
  "BoolOp": "A boolean operator",
  "Break": "A break statement",
  "Bytes": "A literal bytes string",
  "Call": "A function call",
  "ClassDef": "A class definition",
  "Compare": "A boolean comparison",
  "Constant": "A literal value",
  "Continue": "A continue statement",
  "Del": "A delete statement",
  "Delete": "A deletion",
  "Dict": "A dictionary literal",
  "DictComp": "A dictionary comprehension",
  "Div": "A division operator",
  "Ellipsis": "An ellipsis",
  "Eq": "An equality comparison operator",
  "ExceptHandler": "An except handler",
  "Expr": "An expression used as a statement",
  "Expression": "An evaluated expression",
  "ExtSlice": "A multi-dimensional slice",
  "FloorDiv": "An integer division operator",
  "For": "A FOR loop",
  "FormattedValue": "A formatted value in an f-string",
  "FunctionDef": "A function definition",
  "GeneratorExp": "A generator expression",
  "Global": "A global statement",
  "Gt": "A greater than comparison operator",
  "GtE": "A greater than or equal to comparison operator",
  "If": "An IF statement",
  "IfExp": "An IF expression",
  "Import": "An import statement",
  "ImportFrom": "An import/from statement",
  "In": "An IN operator",
  "Index": "An index",
  "Interactive": "An interactive expression",
  "Invert": "An invert operator",
  "Is": "An IS operator",
  "IsNot": "An IS NOT operator",
  "JoinedStr": "An f-string",
  "LShift": "A left shift operator",
  "Lambda": "A lambda expression",
  "List": "A list literal",
  "ListComp": "A list comprehension",
  "Load": "A load",
  "Lt": "A less than comparison operator",
  "LtE": "A less than or equal to comparison operator",
  "MatMult": "A matrix multiplication operator",
  "Mod": "A modulo operator",
  "Module": "A module",
  "Mult": "A multiplication operator",
  "Name": "A name",
  "NameConstant": "A name constant",
  "Nonlocal": "A nonlocal statement",
  "Not": "A not operator",
  "NotEq": "A not equal to comparison operator",
  "NotIn": "A NOT IN operator",
  "Num": "A numeric literal",
  "Or": "A boolean OR operator",
  "Param": "A parameter",
  "Pass": "A pass statement",
  "Pow": "A power operator",
  "RShift": "A right shift operator",
  "Raise": "A raise statement",
  "Return": "A return statement",
  "Set": "A set literal",
  "SetComp": "A set comprehension",
  "Slice": "A slice",
  "Starred": "A starred argument",
  "Store": "A store",
  "Str": "A string literal",
  "Sub": "A subtraction operator",
  "Subscript": "A subscript",
  "Suite": "A suite",
  "Try": "A try statement",
  "Tuple": "A tuple literal",
  "TypeIgnore": " a type ignore",
  "UAdd": "A unary addition operator",
  "USub": "A unary subtraction operator",
  "UnaryOp": "A unary operator",
  "While": "A while loop",
  "With": "A with statement",
  "Yield": "A yield statement",
  "YieldFrom": "A yield/from statement"
};
var BlockPyTrace = /*#__PURE__*/function () {
  function BlockPyTrace(main, tag) {
    _classCallCheck(this, BlockPyTrace);

    this.main = main;
    this.tag = tag;
    this.IGNORED_GLOBALS = ["__name__", "__doc__", "__package__", "classmethod", "property", "staticmethod", "$free", "$cell"]; // this.trace.click(this.buildTraceTable.bind(this));
  }
  /**
   * Consume a set of variables traced from the execution and parse out any
   * global variables and modules.
   *
   * @param {Object} variables - a mapping of variable names to their Skupt value.
   */


  _createClass(BlockPyTrace, [{
    key: "parseGlobals",
    value: function parseGlobals(variables) {
      var result = [];
      var modules = []; //console.log(variables);

      if (!this.main.model.display.traceExecution()) {
        /*if ("$cell" in variables) {
            variables = {...variables, ...variables.$cell};
        }*/

        /*if ("$free" in variables) {
            variables = {...variables, ...variables.$free};
        }*/
        for (var property in variables) {
          var value = variables[property];

          if (this.IGNORED_GLOBALS.indexOf(property) === -1 && value !== undefined) {
            property = property.replace("_$rw$", "").replace("_$rn$", "");
            var parsed = void 0;

            try {
              parsed = BlockPyTrace.parseValue(property, value);
            } catch (_unused) {
              parsed = {
                "name": property,
                "type": "Unknown",
                "value": value.toString()
              };
            }

            if (parsed !== null) {
              result.push(parsed);
            } else if (value.constructor === Sk.builtin.module) {
              modules.push(value.$d.__name__.v);
            }
          }
        }
      }

      return {
        "properties": result,
        "modules": modules
      };
    }
  }], [{
    key: "parseValue",

    /**
     * Convert a Skulpt value into a more easily printable object.
     *
     * @param {String} property
     * @param {Object} value - the skulpt value
     */
    value: function parseValue(property, value, fullLength) {
      if (value === undefined) {
        return {
          "name": property,
          "type": "Unknown",
          "value": "Undefined"
        };
      }

      switch (property) {
        case "dataclass":
          return {
            name: property,
            type: "Decorator",
            value: "<dataclass decorator>"
          };
      }

      switch (value.constructor) {
        case Sk.builtin.func:
          return {
            "name": property,
            "type": "Function",
            "value": value.func_code.co_varnames !== undefined ? " Parameters: " + value.func_code.co_varnames.join(", ") : " No parameters"
          };

        case Sk.builtin.module:
          return null;

        case Sk.builtin.str:
          if (fullLength || value.v.length <= 32) {
            return {
              "name": property,
              "type": "String",
              "value": value.$r().v
            };
          } else {
            return {
              "name": property,
              "type": "String",
              "value": "[" + value.sq$length() + " characters not shown]"
            };
          }

        case Sk.builtin.none:
          return {
            "name": property,
            "type": "None",
            "value": "None"
          };

        case Sk.builtin.bool:
          return {
            "name": property,
            "type": "Boolean",
            "value": value.$r().v
          };

        case Sk.builtin.nmber:
          return {
            "name": property,
            "type": "int" === value.skType ? "Integer" : "Float",
            "value": value.$r().v
          };

        case Sk.builtin.int_:
          return {
            "name": property,
            "type": "Integer",
            "value": value.$r().v
          };

        case Sk.builtin.float_:
          return {
            "name": property,
            "type": "Float",
            "value": value.$r().v
          };

        case Sk.builtin.tuple:
          return {
            "name": property,
            "type": "Tuple",
            "value": value.$r().v
          };

        case Sk.builtin.list:
          if (value.v.length <= 20) {
            return {
              "name": property,
              "type": "List",
              "value": value.$r().v,
              "exact_value": value
            };
          } else {
            return {
              "name": property,
              "type": "List",
              "value": "[... " + value.v.length + " elements ...]",
              "exact_value": value
            };
          }

        case Sk.builtin.dict:
          return {
            "name": property,
            "type": "Dictionary",
            "value": value.$r().v
          };

        case Number:
          return {
            "name": property,
            "type": value % 1 === 0 ? "Integer" : "Float",
            "value": value
          };

        case String:
          return {
            "name": property,
            "type": "String",
            "value": value
          };

        case Boolean:
          return {
            "name": property,
            "type": "Boolean",
            "value": value ? "True" : "False"
          };

        default:
          return {
            "name": property,
            "type": value.tp$name === undefined ? value : value.tp$name,
            "value": value.$r === undefined ? value : value.$r().v
          };
      }
    }
  }]);

  return BlockPyTrace;
}(); // TODO: viewExactValue

/***/ }),

/***/ "./src/utilities.js":
/*!**************************!*\
  !*** ./src/utilities.js ***!
  \**************************/
/*! exports provided: arrayMove, indent, slug, capitalize, encodeHTML, firstDefinedValue, extractPart, getCurrentTime, pyInt, pyNone, pyStr, pyTuple, pyCallOrSuspend, isTrue, richCompareBool, chain, typeName, setUpModuleMethods, buildNativeClass, TypeError, ValueError, KeyError, IndexError, checkString, asnum$, remapToPy, remapToJs, getAttr, setAttr, chainOrSuspend */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "arrayMove", function() { return arrayMove; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "indent", function() { return indent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "slug", function() { return slug; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "capitalize", function() { return capitalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encodeHTML", function() { return encodeHTML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "firstDefinedValue", function() { return firstDefinedValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extractPart", function() { return extractPart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCurrentTime", function() { return getCurrentTime; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pyInt", function() { return pyInt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pyNone", function() { return pyNone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pyStr", function() { return pyStr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pyTuple", function() { return pyTuple; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pyCallOrSuspend", function() { return pyCallOrSuspend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isTrue", function() { return isTrue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "richCompareBool", function() { return richCompareBool; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chain", function() { return chain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "typeName", function() { return typeName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setUpModuleMethods", function() { return setUpModuleMethods; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildNativeClass", function() { return buildNativeClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TypeError", function() { return _TypeError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValueError", function() { return ValueError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyError", function() { return KeyError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IndexError", function() { return IndexError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "checkString", function() { return checkString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asnum$", function() { return asnum$; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "remapToPy", function() { return remapToPy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "remapToJs", function() { return remapToJs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAttr", function() { return getAttr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setAttr", function() { return setAttr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainOrSuspend", function() { return chainOrSuspend; });
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Move an element from index in an array to a new index.
 * O(n)
 * Courtesy:
 * https://stackoverflow.com/a/73877680/1718155
 * @param arr
 * @param oldIndex
 * @param newIndex
 * @returns {*}
 */
function arrayMove(arr, oldIndex, newIndex) {
  var length = arr.length;
  var itemToMove = arr[oldIndex];

  if (oldIndex === newIndex || oldIndex > length || newIndex > length) {
    return arr;
  }

  return arr.reduce(function (acc, item, index) {
    if (index === oldIndex) {
      return acc;
    }

    if (index === newIndex) {
      return oldIndex < newIndex ? [].concat(_toConsumableArray(acc), [item, itemToMove]) : [].concat(_toConsumableArray(acc), [itemToMove, item]);
    }

    return [].concat(_toConsumableArray(acc), [item]);
  }, []);
}
/**
 * Determines if the element is in the list.
 * @param {anything} needle - The element to look for.
 * @param {Array} haystack - The list to search.
 * @return {Boolean} Whether the element exists
 */

function arrayContains(needle, haystack) {
  return haystack.indexOf(needle) > -1;
}
/**
 * Remove duplicate values from an array, preserving order.
 * Creates a new array, so is non-destructive.
 * Courtesy:
 * https://stackoverflow.com/questions/1584370/how-to-merge-two-arrays-in-javascript-and-de-duplicate-items
 *
 * @param {Array} array - The array to uniquify. Elements compared with ===.
 */


function arrayUnique(array) {
  var a = array.concat();

  for (var i = 0; i < a.length; ++i) {
    for (var j = i + 1; j < a.length; ++j) {
      if (a[i] === a[j]) {
        a.splice(j--, 1);
      }
    }
  }

  return a;
}
/**
 * A helper function for extending an array based
 * on an "addArray" and "removeArray". Any element
 * found in removeArray is removed from the first array
 * and all the elements of addArray are added.
 * Any duplicate items are removed.
 * Creates a new array, so is non-destructive.
 *
 * @param {Array} array - the array to manipulate
 * @param {Array} addArray - the elements to add to the array
 * @param {Array} removeArray - the elements to remove from the array
 * @return {Array} The modified array
 */


function expandArray(array, addArray, removeArray) {
  var copyArray = array.filter(function (item) {
    return removeArray.indexOf(item) === -1;
  });
  return arrayUnique(copyArray.concat(addArray));
}
/**
 * Deeply clones a node
 * @param {Node} node A node to clone
 * @return {Node} A clone of the given node and all its children
 */


function cloneNode(node) {
  // If the node is a text node, then re-create it rather than clone it
  var clone = node.nodeType == 3 ? document.createTextNode(node.nodeValue) : node.cloneNode(false); // Recurse     

  var child = node.firstChild;

  while (child) {
    clone.appendChild(cloneNode(child));
    child = child.nextSibling;
  }

  return clone;
}
/**
 * Indents the given string by 4 spaces. This correctly handles multi-line strings.
 *
 * @param {String} str - The string to be manipulated.
 * @returns {String} The string with four spaces added at the start of every new line.
 */


function indent(str) {
  return str.replace(/^(?=.)/gm, "    ");
}
/**
 * Turns spaces into underscores in the string, makes it lowercase.
 * @param {String} str - the string to be manipulated
 * @returns {string}
 */

function slug(str) {
  return str.replace(/\s/g, "_").toLowerCase();
}
/**
 * Capitalize the first letter of a string.
 * @param {String} s - The string to be capitalized.
 * @returns {string}
 */

function capitalize(s) {
  if (typeof s !== "string") {
    return "";
  }

  return s.charAt(0).toUpperCase() + s.slice(1);
}
/**
 * Return a random integer between [`min`, `max`].
 * 
 * @param {number} min - The lowest possible integer.
 * @param {number} max - The highest possible integer (inclusive).
 * @returns {number} A random integer.
 */

function randomInteger(min, max) {
  return Math.floor(Math.random() * (max - min + 1) + min);
}
/**
 * Encodes some text so that it can be safely written into an HTML box.
 * This includes replacing special HTML characters (&, <, >, etc.).
 *
 * @param {string} str - The text to be converted.
 * @return {string} The HTML-safe text.
 */


function encodeHTML(str) {
  return str.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;");
}
/**
 * Shuffle the blocks in the workspace
 */

if (typeof Blockly !== "undefined") {
  Blockly.WorkspaceSvg.prototype.shuffle = function () {
    var metrics = this.getMetrics();
    var width = metrics.viewWidth / 2,
        height = metrics.viewHeight;
    var blocks = this.getTopBlocks(false);
    var y = 5,
        x = 0,
        maximal_increase = height / blocks.length;

    for (var i = 0; i < blocks.length; i++) {
      // Get a block
      var block = blocks[i];
      var properties = block.getRelativeToSurfaceXY();

      if (i == 0) {
        x = 5;
      } else {
        x = -properties.x + randomInteger(10, width);
      }

      block.moveBy(x, -properties.y + y);
      y = y + randomInteger(5, maximal_increase);
    }
  };
}
/**
 * Move elements from one array to another based on a conditional check.
 * https://stackoverflow.com/questions/31887967/javascript-move-objects-from-one-array-to-another-best-approach
 */


function moveElements(source, target, moveCheck) {
  for (var i = 0; i < source.length; i++) {
    var element = source[i];

    if (moveCheck(element)) {
      source.splice(i, 1);
      target.push(element);
      i--;
    }
  }
}

function firstDefinedValue() {
  for (var i = 0; i < arguments.length; i++) {
    if (arguments[i] != null) {
      return arguments[i];
    }
  }

  return undefined;
}
/**
 * This function checks if the given object is one of the Sk.builtin objects
 * TODO: make this so we don't have to explicitly put out every option
 *          one possible thing we could do is get a string version of the 
 *          of the constructor and look for the substring "return new Sk.builtin"
 *          But I don't know how reliable that is.  Rather, it's kind of hackish.
 *          Should tehoretically belong in Sk.ffi
 * @param {object} obj - the object to be examined
 * @return {boolean} true if the object is one of the Sk.builtin types
**/

function isSkBuiltin(obj) {
  return obj instanceof Sk.builtin.dict || obj instanceof Sk.builtin.list || obj instanceof Sk.builtin.tuple || obj instanceof Sk.builtin.bool || obj instanceof Sk.builtin.int_ || obj instanceof Sk.builtin.float_ || obj instanceof Sk.builtin.str || obj instanceof Sk.builtin.lng; //var cons_str = obj.constructor + "";
  //return cons_str.indexOf("return new Sk.builtin") !== -1;
}

function isAstNode(obj) {
  return obj instanceof Object && "_astname" in obj;
}

var DEFAULT_SECTION_PATTERN = /^(##### Part (.+))$/gm;
/**
 * Finds the given Part ID using the pattern `#### Part whatever` (on its own separate line). If the pattern
 * is not found, then null is returned. If no pattern is given (empty string or null), then the original text
 * is returned without modifications.
 * @param text
 * @param partId
 * @returns {null|*}
 */

function extractPart(text, partId) {
  if (partId === "" || partId == null) {
    return text;
  }

  var parts = text.split(DEFAULT_SECTION_PATTERN);

  for (var i = 2; i < parts.length; i += 3) {
    /* // Unnecessary assertion, but not bad to think about
    if (!parts[i-1].startsWith("#### Part ")) {
        throw "Error: part format is broken!";
    }*/
    if (parts[i] === partId) {
      var body = parts[i + 1];

      if (body && body[0] === "\n") {
        body = body.slice(1);
      }

      if (i !== parts.length - 3 && body && body.slice(-1) === "\n") {
        body = body.slice(0, -1);
      }

      return body;
    }
  }

  return null;
}
/**
 * Should theoretically belong in Sk.ffi, but I put it here instead to not mess up the skulpt files
 * like the normal Sk.ffi.remapToPy, it doesn't work for functions or more complex objects, but it handles
 * cases where the types in obj are a mix of python SIMPLE objects and SIMPLE normal javascript objects
 * @param {object} obj - the object to be converted
 * @return {Sk.builtin.???} - returns the corresponding python object, dropping all functions and things it can't convert
**/

function mixedRemapToPy(obj) {
  var k;
  var kvs;
  var i;
  var arr; //@TODO: should theoretically check if the object is a pyhon dict or array with js objects

  if (isSkBuiltin(obj)) {
    //object is already python ready
    return obj;
  } else if (Object.prototype.toString.call(obj) === "[object Array]") {
    //object is actually a javascript array
    arr = [];

    for (i = 0; i < obj.length; ++i) {
      //for each object, convert it to a python object if it isn't one already
      var subval = obj[i];

      if (!isSkBuiltin(subval)) {
        arr.push(mixedRemapToPy(subval));
      } else {
        arr.push(subval);
      }
    }

    return new Sk.builtin.list(arr);
  } else if (obj === null) {
    //null object
    return Sk.builtin.none.none$;
  } else if (_typeof(obj) === "object") {
    if (!isSkBuiltin(obj)) {
      //assuming it's a standard dictionary
      kvs = []; //Sk.builtin.dict uses an array of key-value,key-value...

      for (k in obj) {
        //convert the key if it needs to be converted
        kvs.push(mixedRemapToPy(k)); //covert corresponding value if it needs to be converted

        kvs.push(mixedRemapToPy(obj[k]));
      } //create the new dictionary


      return new Sk.builtin.dict(kvs);
    } else {
      return obj;
    }
  } else if (typeof obj === "string") {
    return new Sk.builtin.str(obj);
  } else if (typeof obj === "number") {
    return Sk.builtin.assk$(obj);
  } else if (typeof obj === "boolean") {
    return new Sk.builtin.bool(obj);
  } else if (typeof obj === "function") {
    return new Sk.builtin.str(obj.name);
  }
}

function getCurrentTime() {
  var today = new Date();
  var h = Math.floor(today.getHours() % 12);
  var m = today.getMinutes(); //let s = today.getSeconds();

  if (m < 10) {
    m = "0" + m;
  } //if (s < 10) {s = "0" + s;}


  var p = "am";

  if (today.getHours() >= 12) {
    p = "pm";
  }

  return "".concat(h, ":").concat(m).concat(p);
}
var pyInt = Sk.builtin.int_;
var pyNone = Sk.builtin.none.none$;
var pyStr = Sk.builtin.str;
var pyTuple = Sk.builtin.tuple;
var pyCallOrSuspend = Sk.misceval.callsimOrSuspendArray;
var _Sk$misceval = Sk.misceval,
    isTrue = _Sk$misceval.isTrue,
    richCompareBool = _Sk$misceval.richCompareBool,
    chain = _Sk$misceval.chain;

var _Sk$abstr = Sk.abstr,
    typeName = _Sk$abstr.typeName,
    setUpModuleMethods = _Sk$abstr.setUpModuleMethods,
    buildNativeClass = _Sk$abstr.buildNativeClass;

var _Sk$builtin = Sk.builtin,
    _TypeError = _Sk$builtin.TypeError,
    ValueError = _Sk$builtin.ValueError,
    KeyError = _Sk$builtin.KeyError,
    IndexError = _Sk$builtin.IndexError,
    checkString = _Sk$builtin.checkString,
    asnum$ = _Sk$builtin.asnum$;

var _Sk$ffi = Sk.ffi,
    remapToPy = _Sk$ffi.remapToPy,
    remapToJs = _Sk$ffi.remapToJs;

var _Sk$generic = Sk.generic,
    getAttr = _Sk$generic.getAttr,
    setAttr = _Sk$generic.setAttr;

var chainOrSuspend = chain;

/***/ }),

/***/ "filepond":
/*!***************************!*\
  !*** external "FilePond" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_filepond__;

/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_jquery__;

/***/ }),

/***/ "knockout":
/*!*********************!*\
  !*** external "ko" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_knockout__;

/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja3B5L3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9ibG9ja3B5L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2Jsb2NrcHkvLi9zcmMvYmxvY2tweS5qcyIsIndlYnBhY2s6Ly9ibG9ja3B5Ly4vc3JjL2NvbnNvbGUuanMiLCJ3ZWJwYWNrOi8vYmxvY2tweS8uL3NyYy9jb3JnaXMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tweS8uL3NyYy9jc3MvYmxvY2tweS5jc3MiLCJ3ZWJwYWNrOi8vYmxvY2tweS8uL3NyYy9jc3MvYm9vdHN0cmFwX3JldGhlbWUuY3NzIiwid2VicGFjazovL2Jsb2NrcHkvLi9zcmMvZGlhbG9nLmpzIiwid2VicGFjazovL2Jsb2NrcHkvLi9zcmMvZWRpdG9yL2Fic3RyYWN0X2VkaXRvci5qcyIsIndlYnBhY2s6Ly9ibG9ja3B5Ly4vc3JjL2VkaXRvci9hc3NpZ25tZW50X3NldHRpbmdzLmpzIiwid2VicGFjazovL2Jsb2NrcHkvLi9zcmMvZWRpdG9yL2RlZmF1bHRfaGVhZGVyLmpzIiwid2VicGFjazovL2Jsb2NrcHkvLi9zcmMvZWRpdG9yL2ltYWdlcy5qcyIsIndlYnBhY2s6Ly9ibG9ja3B5Ly4vc3JjL2VkaXRvci9qc29uLmpzIiwid2VicGFjazovL2Jsb2NrcHkvLi9zcmMvZWRpdG9yL21hcmtkb3duLmpzIiwid2VicGFjazovL2Jsb2NrcHkvLi9zcmMvZWRpdG9yL3B5dGhvbi5qcyIsIndlYnBhY2s6Ly9ibG9ja3B5Ly4vc3JjL2VkaXRvci9xdWl6LmpzIiwid2VicGFjazovL2Jsb2NrcHkvLi9zcmMvZWRpdG9yL3NhbXBsZV9zdWJtaXNzaW9ucy5qcyIsIndlYnBhY2s6Ly9ibG9ja3B5Ly4vc3JjL2VkaXRvci90YWdzLmpzIiwid2VicGFjazovL2Jsb2NrcHkvLi9zcmMvZWRpdG9yL3RleHQuanMiLCJ3ZWJwYWNrOi8vYmxvY2tweS8uL3NyYy9lZGl0b3IvdG9vbGJveC5qcyIsIndlYnBhY2s6Ly9ibG9ja3B5Ly4vc3JjL2VkaXRvcnMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tweS8uL3NyYy9lbmdpbmUuanMiLCJ3ZWJwYWNrOi8vYmxvY2tweS8uL3NyYy9lbmdpbmUvY29uZmlndXJhdGlvbnMuanMiLCJ3ZWJwYWNrOi8vYmxvY2tweS8uL3NyYy9lbmdpbmUvZXZhbC5qcyIsIndlYnBhY2s6Ly9ibG9ja3B5Ly4vc3JjL2VuZ2luZS9pbnN0cnVjdG9yLmpzIiwid2VicGFjazovL2Jsb2NrcHkvLi9zcmMvZW5naW5lL29uX2NoYW5nZS5qcyIsIndlYnBhY2s6Ly9ibG9ja3B5Ly4vc3JjL2VuZ2luZS9vbl9ldmFsLmpzIiwid2VicGFjazovL2Jsb2NrcHkvLi9zcmMvZW5naW5lL29uX3J1bi5qcyIsIndlYnBhY2s6Ly9ibG9ja3B5Ly4vc3JjL2VuZ2luZS9vbl9zYW1wbGUuanMiLCJ3ZWJwYWNrOi8vYmxvY2tweS8uL3NyYy9lbmdpbmUvcnVuLmpzIiwid2VicGFjazovL2Jsb2NrcHkvLi9zcmMvZW5naW5lL3NhbXBsZS5qcyIsIndlYnBhY2s6Ly9ibG9ja3B5Ly4vc3JjL2VuZ2luZS9zdHVkZW50LmpzIiwid2VicGFjazovL2Jsb2NrcHkvLi9zcmMvZmVlZGJhY2suanMiLCJ3ZWJwYWNrOi8vYmxvY2tweS8uL3NyYy9maWxlcy5qcyIsIndlYnBhY2s6Ly9ibG9ja3B5Ly4vc3JjL2Zvb3Rlci5qcyIsIndlYnBhY2s6Ly9ibG9ja3B5Ly4vc3JjL2hpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vYmxvY2tweS8uL3NyYy9pbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8vYmxvY2tweS8uL3NyYy9zZXJ2ZXIuanMiLCJ3ZWJwYWNrOi8vYmxvY2tweS8uL3NyYy9za3VscHRfbW9kdWxlcy9jb3ZlcmFnZS5qcyIsIndlYnBhY2s6Ly9ibG9ja3B5Ly4vc3JjL3NrdWxwdF9tb2R1bGVzL2ltYWdlLmpzIiwid2VicGFjazovL2Jsb2NrcHkvLi9zcmMvc2t1bHB0X21vZHVsZXMvcGVkYWxfdHJhY2VyLmpzIiwid2VicGFjazovL2Jsb2NrcHkvLi9zcmMvc2t1bHB0X21vZHVsZXMvc2tfbW9kX2luc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmxvY2tweS8uL3NyYy9za3VscHRfbW9kdWxlcy93ZWFrcmVmLmpzIiwid2VicGFjazovL2Jsb2NrcHkvLi9zcmMvc3RvcmFnZS5qcyIsIndlYnBhY2s6Ly9ibG9ja3B5Ly4vc3JjL3RyYWNlLmpzIiwid2VicGFjazovL2Jsb2NrcHkvLi9zcmMvdXRpbGl0aWVzLmpzIiwid2VicGFjazovL2Jsb2NrcHkvZXh0ZXJuYWwgXCJGaWxlUG9uZFwiIiwid2VicGFjazovL2Jsb2NrcHkvZXh0ZXJuYWwgXCJqUXVlcnlcIiIsIndlYnBhY2s6Ly9ibG9ja3B5L2V4dGVybmFsIFwia29cIiJdLCJuYW1lcyI6WyJFRElUT1JfVkVSU0lPTiIsIkJsb2NrUHkiLCJjb25maWd1cmF0aW9uIiwiYXNzaWdubWVudCIsInN1Ym1pc3Npb24iLCJpbml0TW9kZWwiLCJ1bmRlZmluZWQiLCJzZXRBc3NpZ25tZW50IiwiaW5pdE1haW4iLCJpbml0VXRpbGl0aWVzIiwiaW5pdE1vZGVsTWV0aG9kcyIsInR1cm5PbkhhY2tzIiwiaW5pdEludGVyZmFjZSIsImFwcGx5TW9kZWwiLCJpbml0Q29tcG9uZW50cyIsIm1ha2VFeHRyYVN1YnNjcmlwdGlvbnMiLCJzdGFydCIsImtleSIsImRlZmF1bHRWYWx1ZSIsImluaXRpYWxDb25maWd1cmF0aW9uXyIsImxvY2FsU2V0dGluZ3NfIiwiaGFzIiwiZ2V0IiwiTG9jYWxTdG9yYWdlV3JhcHBlciIsIm1vZGVsIiwidXNlciIsImlkIiwia28iLCJvYnNlcnZhYmxlIiwibmFtZSIsInJvbGUiLCJnZXRTZXR0aW5nIiwiY291cnNlSWQiLCJncm91cElkIiwiaW5zdHJ1Y3Rpb25zIiwidXJsIiwidHlwZSIsIkFzc2lnbWVudFR5cGUiLCJCTE9DS1BZIiwicG9pbnRzIiwic3RhcnRpbmdDb2RlIiwib25SdW4iLCJvbkNoYW5nZSIsIm9uRXZhbCIsImV4dHJhSW5zdHJ1Y3RvckZpbGVzIiwib2JzZXJ2YWJsZUFycmF5IiwibG9hZENvbmNhdGVuYXRlZEZpbGUiLCJleHRyYVN0YXJ0aW5nRmlsZXMiLCJmb3JrZWRJZCIsImZvcmtlZFZlcnNpb24iLCJvd25lcklkIiwidmVyc2lvbiIsInRhZ3MiLCJzYW1wbGVTdWJtaXNzaW9ucyIsInJldmlld2VkIiwiaGlkZGVuIiwiaXBSYW5nZXMiLCJzZXR0aW5ncyIsIm1ha2VBc3NpZ25tZW50U2V0dGluZ3NNb2RlbCIsImNvZGUiLCJleHRyYWN0UGFydCIsImV4dHJhRmlsZXMiLCJlbmRwb2ludCIsInNjb3JlIiwiY29ycmVjdCIsInN1Ym1pc3Npb25TdGF0dXMiLCJncmFkaW5nU3RhdHVzIiwiZGlzcGxheSIsImZpbGVuYW1lIiwiaW5zdHJ1Y3RvciIsIm11dGVQcmludGVyIiwicHl0aG9uTW9kZSIsIkRpc3BsYXlNb2RlcyIsIlRFWFQiLCJoaXN0b3J5TW9kZSIsImF1dG9TYXZlIiwiYmlnQ29uc29sZSIsInByZXZpb3VzQ29uc29sZUhlaWdodCIsImN1cnJlbnRDb25zb2xlSGVpZ2h0Iiwic2Vjb25kUm93U2Vjb25kUGFuZWwiLCJTZWNvbmRSb3dTZWNvbmRQYW5lbE9wdGlvbnMiLCJGRUVEQkFDSyIsInByZXZpb3VzU2Vjb25kUm93U2Vjb25kUGFuZWwiLCJ0cmFjZUV4ZWN1dGlvbiIsImxvYWRpbmdEYXRhc2V0cyIsImNoYW5nZWRJbnN0cnVjdGlvbnMiLCJ0cmlnZ2VyT25DaGFuZ2UiLCJkaXJ0eVN1Ym1pc3Npb24iLCJmdWxsc2NyZWVuIiwicGFzc2NvZGUiLCJjbGVhcklucHV0cyIsInJlbmRlckltYWdlcyIsImVkaXRvclZlcnNpb24iLCJyZWFkT25seSIsInRvU3RyaW5nIiwidXBsb2FkZWRGaWxlcyIsImJhY2t1cFN1Ym1pc3Npb25Db2RlIiwic2hvd1JhdGluZyIsImhhc1JhdGVkIiwic3RhdHVzIiwibG9hZEFzc2lnbm1lbnQiLCJTdGF0dXNTdGF0ZSIsIlJFQURZIiwibG9hZEFzc2lnbm1lbnRNZXNzYWdlIiwibG9hZEhpc3RvcnkiLCJsb2FkSGlzdG9yeU1lc3NhZ2UiLCJsb2FkRmlsZSIsImxvYWRGaWxlTWVzc2FnZSIsImxvYWREYXRhc2V0IiwibG9hZERhdGFzZXRNZXNzYWdlIiwibG9nRXZlbnQiLCJsb2dFdmVudE1lc3NhZ2UiLCJzYXZlSW1hZ2UiLCJzYXZlSW1hZ2VNZXNzYWdlIiwic2F2ZUZpbGUiLCJzYXZlRmlsZU1lc3NhZ2UiLCJzYXZlQXNzaWdubWVudCIsInNhdmVBc3NpZ25tZW50TWVzc2FnZSIsInVwZGF0ZVN1Ym1pc3Npb24iLCJ1cGRhdGVTdWJtaXNzaW9uTWVzc2FnZSIsInVwZGF0ZVN1Ym1pc3Npb25TdGF0dXMiLCJ1cGRhdGVTdWJtaXNzaW9uU3RhdHVzTWVzc2FnZSIsImxpc3RVcGxvYWRlZEZpbGVzIiwibGlzdFVwbG9hZGVkRmlsZXNNZXNzYWdlIiwiZG93bmxvYWRGaWxlIiwiZG93bmxvYWRGaWxlTWVzc2FnZSIsInVwbG9hZEZpbGUiLCJ1cGxvYWRGaWxlTWVzc2FnZSIsInJlbmFtZUZpbGUiLCJyZW5hbWVGaWxlTWVzc2FnZSIsImV4dGVybmFsQVBJIiwiZXh0ZXJuYWxBUElNZXNzYWdlIiwib25FeGVjdXRpb24iLCJleGVjdXRpb24iLCJyZXBvcnRzIiwib3V0cHV0IiwiaW5wdXQiLCJpbnB1dEluZGV4Iiwic3R1ZGVudCIsImN1cnJlbnRTdGVwIiwibGFzdFN0ZXAiLCJjdXJyZW50TGluZSIsImxhc3RMaW5lIiwiY3VycmVudFRyYWNlRGF0YSIsImN1cnJlbnRUcmFjZVN0ZXAiLCJyZXN1bHRzIiwiZ2xvYmFscyIsImNhbGxzIiwic3lzbW9kdWxlcyIsImZlZWRiYWNrIiwibWVzc2FnZSIsImNhdGVnb3J5IiwibGFiZWwiLCJsaW5lc0Vycm9yIiwibGluZXNVbmNvdmVyZWQiLCJjYWxsYmFja3MiLCJzZXJ2ZXJDb25uZWN0ZWQiLCJibG9ja2x5UGF0aCIsImF0dGFjaG1lbnRQb2ludCIsImNvbnRhaW5lciIsInVybHMiLCJwYXJ0SWQiLCJhY2Nlc3NUb2tlbiIsImNvbnN0YW50cyIsImd1aSIsIm1ha2VJbnRlcmZhY2UiLCIkIiwiaHRtbCIsImFzc2lnbm1lbnRfaWQiLCJjb21wb25lbnRzIiwic2VydmVyIiwic2FtcGxlcyIsInN0YXJ0aW5nX2NvZGUiLCJleHRyYV9zdGFydGluZ19maWxlcyIsImxvYWROb1N1Ym1pc3Npb24iLCJncmFkaW5nX3N0YXR1cyIsIlN1Ym1pc3Npb25TdGF0dXNlcyIsIlVOS05PV04iLCJzdWJtaXNzaW9uX3N0YXR1cyIsInVzZXJfaWQiLCJjb3Vyc2VfaWQiLCJleHRyYV9maWxlcyIsImRhdGEiLCJjb25zb2xlIiwiZGVidWciLCJyZXNldEludGVyZmFjZSIsImZpbGVTeXN0ZW0iLCJkaXNtb3VudEV4dHJhRmlsZXMiLCJ3YXNTZXJ2ZXJDb25uZWN0ZWQiLCJmb3JrZWRfaWQiLCJmb3JrZWRfdmVyc2lvbiIsImlwX3JhbmdlcyIsIm9uX2NoYW5nZSIsIm5ld0ZpbGUiLCJvbl9ldmFsIiwib25fcnVuIiwib3duZXJfaWQiLCJsb2FkVGFncyIsImxvYWRTYW1wbGVTdWJtaXNzaW9ucyIsInNhbXBsZV9zdWJtaXNzaW9ucyIsImV4dHJhX2luc3RydWN0b3JfZmlsZXMiLCJsb2FkQXNzaWdubWVudFNldHRpbmdzIiwibG9hZFN1Ym1pc3Npb24iLCJjb3JnaXMiLCJsb2FkRGF0YXNldHMiLCJweXRob25FZGl0b3IiLCJibSIsInJlZnJlc2giLCJsb2FkUmVtb3RlRmlsZXMiLCJzZXRTdGF0dXMiLCJzZWxmIiwidWkiLCJzbWFsbExheW91dCIsInB1cmVDb21wdXRlZCIsImlzR3JhZGVyIiwiaXNDaGFuZ2VkIiwiY3VycmVudCIsInV0aWxpdGllcyIsIm1hcmtkb3duIiwicmVzZXQiLCJtZW51IiwidmlzaWJsZSIsIm9ubHlJbnRlcmFjdGl2ZSIsInRleHRGdWxsc2NyZWVuIiwiY2xpY2tGdWxsc2NyZWVuIiwiZWRpdElucHV0cyIsImRpYWxvZyIsIkVESVRfSU5QVVRTIiwidG9nZ2xlSW1hZ2VzIiwidGV4dEVkaXRvciIsImRpc2FibGVJbWFnZXMiLCJlbmFibGVJbWFnZXMiLCJjYW5NYXJrU3VibWl0dGVkIiwiY2FuQ2xvc2UiLCJ0ZXh0TWFya1N1Ym1pdHRlZCIsImlzQ29tcGxldGVkIiwiaXNTdWJtaXR0ZWQiLCJjbGlja01hcmtTdWJtaXR0ZWQiLCJhbGVydCIsImVuZ2luZSIsImRlbGF5ZWRSdW4iLCJ0b0xvd2VyQ2FzZSIsInNob3dRdWV1ZWRJbnB1dHMiLCJoaWRlUXVldWVkSW5wdXRzIiwic2hvd0Nsb2NrIiwiaGFzQ2xvY2siLCJzZWNvbmRSb3ciLCJ3aWR0aCIsImhpZGVUcmFjZUJ1dHRvbiIsImlzQWxsVmlzaWJsZSIsImhpZGVNaWRkbGVQYW5lbCIsImlzRmVlZGJhY2tWaXNpYmxlIiwiaXNUcmFjZVZpc2libGUiLCJUUkFDRSIsImlzQ29uc29sZVNob3dWaXNpYmxlIiwic3dpdGNoTGFiZWwiLCJhZHZhbmNlU3RhdGUiLCJjdXJyZW50UGFuZWwiLCJOT05FIiwibWFrZVdpZGUiLCJyZXN0b3JlUGFuZWwiLCJvbGRQYW5lbCIsInNpemUiLCJoaWRlRXZhbHVhdGUiLCJBQ1RJVkUiLCJiYWRnZSIsInJlc2V0U2NvcmUiLCJwcm92aWRlUmF0aW5ncyIsImZsaXBSYXRpbmciLCJuZXdTdGF0ZSIsInNldCIsInJhdGUiLCJyYXRpbmciLCJmaW5kIiwiZmFkZU91dCIsImZhZGVJbiIsInRoYW5rWW91IiwiYWRkQ2xhc3MiLCJzZXRUaW1lb3V0IiwicmVtb3ZlQ2xhc3MiLCJoYXNSYXRlZENsYXNzIiwidHJhY2UiLCJoaWdobGlnaHRlZExpbmUiLCJzdGVwIiwidHJhY2VEYXRhIiwibGluZSIsImFzdCIsInN1Y2Nlc3MiLCJBU1RfREVTQ1JJUFRJT05TIiwiZmlyc3QiLCJiYWNrd2FyZCIsInByZXZpb3VzIiwiTWF0aCIsIm1heCIsImZvcndhcmQiLCJuZXh0IiwibWluIiwibGFzdCIsImZpbGVzIiwiaGlkZUZpbGVzIiwicHJlbG9hZEFsbEZpbGVzIiwiYWRkSXNWaXNpYmxlIiwiaGFzQ29udGVudHMiLCJwYXRoIiwic29tZSIsImZpbGUiLCJsZW5ndGgiLCJhZGQiLCJub3JtYWxUb29sYm94IiwiYmxvY2tFZGl0b3IiLCJUT09MQk9YRVMiLCJKU09OIiwic3RyaW5naWZ5IiwiU2FtcGxlU3VibWlzc2lvbiIsIkJsYW5rIiwibmV3RmlsZURpYWxvZyIsImRlbGV0ZUZpbGUiLCJyZW5hbWUiLCJuZXdOYW1lIiwiZ2V0U3R1ZGVudENvZGUiLCJwcmVmaXhQeSIsImdldEZpbGUiLCJzdWZmaXhQeSIsImhhbmRsZSIsImV4dHJhU3R1ZGVudEZpbGVzIiwib2JzZXJ2ZUNvbmNhdGVuYXRlZEZpbGUiLCJkaXNwbGF5RmlsZW5hbWUiLCJzdGFydHNXaXRoIiwic2xpY2UiLCJlZGl0b3JzIiwiZ2V0RWRpdG9yIiwidmlldyIsImhpZGVFZGl0b3JzIiwibWFwIiwic3Vic3RyIiwibWFrZU1vZGVsRmlsZSIsImNvbnRlbnRzIiwiY2FuU2F2ZSIsImNhbkRlbGV0ZSIsIlVOREVMRVRBQkxFX0ZJTEVTIiwiaW5kZXhPZiIsImNhblJlbmFtZSIsIlVOUkVOQU1BQkxFX0ZJTEVTIiwidXBsb2FkIiwiYmluZCIsImRvd25sb2FkIiwiaW1wb3J0RGF0YXNldCIsIm9wZW5EaWFsb2ciLCJweXRob24iLCJjb2RlTWlycm9yIiwic2V0T3B0aW9uIiwiZ2V0T3B0aW9uIiwidXBkYXRlTW9kZSIsIm5ld01vZGUiLCJvbGRQeXRob25Nb2RlIiwiaXNIaXN0b3J5QXZhaWxhYmxlIiwiaXNFbmRwb2ludENvbm5lY3RlZCIsInR1cm5PZmZIaXN0b3J5TW9kZSIsInVwZGF0ZUVkaXRvciIsInNldFJlYWRPbmx5IiwidHVybk9uSGlzdG9yeU1vZGUiLCJyZXNwb25zZSIsImhpc3RvcnkiLCJsb2FkIiwiRVJST1JfTE9BRElOR19ISVNUT1JZIiwidG9nZ2xlSGlzdG9yeU1vZGUiLCJtb3ZlVG9TdGFydCIsIm1vdmVQcmV2aW91cyIsIm1vdmVOZXh0IiwibW9zdFJlY2VudCIsIm1vdmVUb01vc3RSZWNlbnQiLCJ1c2UiLCJpbWFnZXMiLCJieU5hbWUiLCJmaWxlSW5mbyIsInJlbG9hZEltYWdlcyIsImNhbkNob29zZVBsYWNlbWVudCIsImNhbk1vZGlmeSIsInBsYWNlbWVudCIsInNhdmUiLCJidWlsZEVkaXRvciIsIm5ld0RPTSIsImluZGV4IiwibmV3RWxlbWVudCIsImVkaXRvciIsImV4ZWN1dGUiLCJpc1J1bm5pbmciLCJydW5MYWJlbCIsInJ1biIsIlB5Z2FtZUxpYiIsInJ1bm5pbmciLCJTdG9wUHlnYW1lIiwicnVuUXVpZXRseUxhYmVsIiwicnVuUXVpZXRseSIsImV2YWx1YXRlIiwibWVzc2FnZXMiLCJjYXBpdGFsaXplIiwiZm9yY2UiLCJldmVudCIsImFzc2lnbm1lbnRGb3JjZUxvYWRCdXR0b24iLCJ0YXJnZXQiLCJwYXJlbnQiLCJmciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJlIiwiYXNzaWdubWVudFN1Ym1pc3Npb24iLCJwYXJzZSIsInJlc3VsdCIsImxvYWRBc3NpZ25tZW50RGF0YV8iLCJmaWxlTmFtZSIsInJlYWRBc1RleHQiLCJ2YWwiLCJsb2ciLCJmb290ZXIiLCJtYWtlRXh0cmFJbnRlcmZhY2VTdWJzY3JpcHRpb25zIiwiU2siLCJidWlsdGluRmlsZXMiLCJpbWFnZU1vZHVsZSIsImFwcGx5QmluZGluZ3MiLCJtYWluIiwidGV4dCIsIkVhc3lNREUiLCJwcm90b3R5cGUiLCJCbG9ja1B5RGlhbG9nIiwiQmxvY2tQeUZlZWRiYWNrIiwiQmxvY2tQeVRyYWNlIiwiQmxvY2tQeUNvbnNvbGUiLCJCbG9ja1B5RW5naW5lIiwiQmxvY2tQeUZpbGVTeXN0ZW0iLCJFZGl0b3JzIiwiQmxvY2tQeVNlcnZlciIsIkJsb2NrUHlDb3JnaXMiLCJCbG9ja1B5SGlzdG9yeSIsInNob3ciLCJoaWRlIiwic3Vic2NyaWJlIiwiY2hhbmdlZCIsImNsb2NrIiwidXBkYXRlQ2xvY2siLCJnZXRDdXJyZW50VGltZSIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImFsdExvZ0VudHJ5IiwidXNlclN1cHBsaWVkUGFzc2NvZGUiLCJwcm9tcHQiLCJTVEFSVF9FVkFMX0hUTUwiLCJORVdfQ09OU09MRV9MSU5FX0hUTUwiLCJDT05TT0xFX0hUTUwiLCJDb25zb2xlTGluZVR5cGUiLCJIVE1MIiwiUExPVCIsIklNQUdFIiwiUFlHQU1FIiwiRFJBRlRFUiIsIlRVUlRMRSIsIkVWQUwiLCJTVEFSVF9FVkFMIiwiVkFMVUUiLCJJTlBVVCIsIlRFU1RfQ0FTRSIsIkNvbnNvbGVMaW5lIiwiY29udGVudCIsIm9yaWdpbiIsImN1cnJGaWxlbmFtZSIsImV4ZWN1dGlvbkJ1ZmZlciIsImZmaSIsInJlbWFwVG9QeSIsInJlbW92ZSIsIkNvbnNvbGVMaW5lVHVydGxlIiwid2hlcmUiLCJwcmVwZW5kIiwidG9wIiwib2Zmc2V0Iiwic2Nyb2xsVG9wIiwiQ29uc29sZUxpbmVEcmFmdGVyIiwiQ29uc29sZUxpbmVQeWdhbWUiLCJweWdhbWVPYmoiLCJpbml0aWFsaXplZCIsImNhbnZhcyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZCIsImNsZWFudXAiLCJjbGVhbnVwRnVuY3Rpb24iLCJsaXN0ZW5lcnMiLCJDb25zb2xlTGluZUltYWdlIiwiQ29uc29sZUxpbmVQbG90IiwiQ29uc29sZUxpbmVUZXh0IiwiZW5jb2RlZFRleHQiLCJlbmNvZGVIVE1MIiwidHJpbSIsImxpbmVEYXRhIiwidG9vbHRpcCIsIkNvbnNvbGVMaW5lVmFsdWUiLCJDb25zb2xlTGluZUlucHV0IiwicHJvbXB0TWVzc2FnZSIsImlucHV0Rm9ybSIsImlucHV0QnRuIiwiaW5wdXRHcm91cCIsImlucHV0Qm94IiwiaW5wdXRNc2ciLCJtYWtlSW50ZXJhY3RpdmUiLCJidXR0b24iLCJyZXNvbHZlT25DbGljayIsInN1Ym1pdHRlZFByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInN1Ym1pdEZvcm0iLCJ1c2VySW5wdXR0ZWRWYWx1ZSIsInF1ZXVlZElucHV0IiwicHVzaCIsInByb3AiLCJjbGljayIsImtleXVwIiwia2V5Q29kZSIsImZvY3VzIiwiQ29uc29sZUxpbmVFdmFsdWF0ZSIsIkNvbnNvbGVMaW5lU3RhcnRFdmFsdWF0ZSIsInRhZyIsInByaW50ZXJUYWciLCJNSU5JTVVNX1dJRFRIIiwiTUlOSU1VTV9IRUlHSFQiLCJERUZBVUxUX0hFSUdIVCIsImhlaWdodCIsImNsZWFyIiwicmVtb3ZlQWxsIiwibGluZUJ1ZmZlciIsInBsb3RCdWZmZXIiLCJlbXB0eSIsInR1cnRsZUxpbmUiLCJUdXJ0bGVHcmFwaGljcyIsImdldFR1cnRsZUxpbmUiLCJnZXRXaWR0aCIsImdldEhlaWdodCIsImFzc2V0cyIsImxvYWRBc3NldCIsInB5Z2FtZUxpbmUiLCJkcmFmdGVyTGluZSIsInJlbmRlciIsImN1cnJlbnRQcmludGVyRGltZW5zaW9uIiwibmV3V2lkdGgiLCJuZXdIZWlnaHQiLCJzYXZlVHVydGxlT3V0cHV0IiwiZGF0YVVybCIsInRvRGF0YVVSTCIsInBhZ2UiLCJlYWNoIiwiYXR0ciIsImxpbmVUZXh0IiwiZmx1c2giLCJjaGFyQXQiLCJzcGxpdExpbmVzIiwic3BsaXQiLCJhZGRDb250ZW50IiwiaSIsInBsb3RzIiwiaW1hZ2VEYXRhIiwiaW1hZ2UiLCJpbWFnZUJ1ZmZlciIsInZhbHVlIiwicHJpbnRlZFZhbHVlIiwiaW5wdXRCdWZmZXIiLCJzdGFydEV2YWx1YXRpb24iLCJhbmltYXRlIiwiX0lNUE9SVEVEX0RBVEFTRVRTIiwiX0lNUE9SVEVEX0NPTVBMRVRFX0RBVEFTRVRTIiwic2V0QnV0dG9uTG9hZGVkIiwiYnRuIiwibG9hZGVkRGF0YXNldHMiLCJzaWxlbnRseSIsImltcG9ydHMiLCJkYXRhc2V0cyIsImZvckVhY2giLCJCbG9ja01pcnJvckJsb2NrRWRpdG9yIiwiRVhUUkFfVE9PTFMiLCJhcHBseSIsInNsdWciLCJ3aGVuIiwiZG9uZSIsImZvcmNlQmxvY2tSZWZyZXNoIiwicmVtYWtlVG9vbGJveCIsImZhaWwiLCJhcmd1bWVudHMiLCJlcnJvciIsImFsd2F5cyIsImZpbmFsaXplU3Vic2NyaXB0aW9ucyIsInVybF9yZXRyaWV2YWxzIiwicm9vdCIsImltcG9ydERhdGFzZXRzIiwiZ2V0RGF0YXNldCIsImdldFNjcmlwdCIsImdldENvbXBsZXRlIiwiZ2V0U2t1bHB0IiwiZ2V0QmxvY2tseSIsInRleHRUb0Jsb2NrcyIsImhpZGRlbkltcG9ydHMiLCJnZXRKU09OIiwiYmxvY2tweSIsImRvY3VtZW50YXRpb24iLCJib2R5IiwiT2JqZWN0Iiwia2V5cyIsInNvcnQiLCJzbHVnZ2VkTmFtZSIsInRpdGxlTmFtZSIsImltZ1NyYyIsInRpdGxlIiwib3ZlcnZpZXciLCJhcHBlbmRUbyIsIkRJQUxPR19IVE1MIiwidGl0bGVUYWciLCJib2R5VGFnIiwiZm9vdGVyVGFnIiwib2theUJ1dHRvbiIsImNsb3NlQnV0dG9uIiwieWVzIiwibm8iLCJtb2RhbCIsImNsb3NlIiwib25jbG9zZSIsImRyYWdnYWJsZSIsIm9uIiwiY29uZmlybSIsInllc1RleHQiLCJBU1NJR05NRU5UX1ZFUlNJT05fQ0hBTkdFRCIsIkVSUk9SX0xPQURJTkdfQVNTSUdOTU5FTlQiLCJyZWFzb24iLCJFUlJPUl9MSVNUSU5HX1VQTE9BREVEX0ZJTEVTIiwiRVJST1JfVVBMT0FESU5HX0ZJTEUiLCJFUlJPUl9ET1dOTE9BRElOR19GSUxFIiwiRVJST1JfUkVOQU1JTkdfRklMRSIsIkVSUk9SX0RFTEVUSU5HX0ZJTEUiLCJFUlJPUl9TQVZJTkdfQVNTSUdOTU5FTlQiLCJFUlJPUl9TSE9XX1NUVURFTlRfRVJST1IiLCJQT1NJVElWRV9GRUVEQkFDS19GVUxMIiwiU0NSRUVOU0hPVF9CTE9DS1MiLCJFUlJPUl9VUERBVElOR19TVUJNSVNTSU9OX1NUQVRVUyIsIk9GRkVSX0ZPUksiLCJzZXR1cFVybCIsImluc3RydWN0aW9uc0Fzc2lnbm1lbnRTZXR1cCIsImlucHV0VGV4dCIsImpvaW4iLCJjaGVja2VkIiwiaW5wdXRzIiwiZmlsZVJlYWRlciIsInNsdWdnaWZ5IiwicmVwbGFjZSIsImV4dGVuc2lvbiIsIm1pbWV0eXBlIiwiYmxvYiIsIkJsb2IiLCJ3aW5kb3ciLCJuYXZpZ2F0b3IiLCJtc1NhdmVPck9wZW5CbG9iIiwibXNTYXZlQmxvYiIsInRlbXBvcmFyeURvd25sb2FkTGluayIsImhyZWYiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJhcHBlbmRDaGlsZCIsInJlbW92ZUNoaWxkIiwiQWJzdHJhY3RFZGl0b3IiLCJjaGFuZ2VFZGl0b3IiLCJ3YXRjaEZpbGUiLCJ1cGRhdGVkIiwib25GaWxlVXBkYXRlZCIsImRlbGV0ZWQiLCJvbkZpbGVEZWxldGVkIiwibmV3RmlsZW5hbWUiLCJvbGRFZGl0b3IiLCJ0cmFja0N1cnJlbnRGaWxlIiwibmV3RWRpdG9yIiwic3RvcFdhdGNoaW5nRmlsZSIsInBhcnNlRmlsZW5hbWUiLCJBU1NJR05NRU5UX1NFVFRJTkdTIiwiTUFaRSIsIlFVSVoiLCJSRUFESU5HIiwiZ2V0RG9jdW1lbnRhdGlvbiIsIm1ha2VTdGFydFZpZXdUYWIiLCJpY29uIiwibW9kZSIsIkFTU0lHTk1FTlRfU0VUVElOR1NfQk9PTEVBTl9DT01QT05FTlRTX0hUTUwiLCJmaWx0ZXIiLCJzZXR0aW5nIiwicHJldHR5TmFtZSIsIndvcmQiLCJ0b1VwcGVyQ2FzZSIsIkFTU0lHTk1FTlRfU0VUVElOR1NfRURJVE9SX0hUTUwiLCJCTE9DSyIsIlNQTElUIiwic2F2ZUFzc2lnbm1lbnRTZXR0aW5ncyIsImNsaWVudE5hbWUiLCJzZXJ2ZXJOYW1lIiwic3RhcnRfdmlldyIsImZpZWxkVHlwZSIsImNvbmZpZ1ZhbHVlIiwiQXNzaWdubWVudFNldHRpbmdzVmlldyIsImRpcnR5IiwiY3VycmVudExpc3RlbmVyIiwidXBkYXRlSGFuZGxlIiwibmV3Q29udGVudHMiLCJBc3NpZ25tZW50U2V0dGluZ3MiLCJleHRlbnNpb25zIiwiY29uc3RydWN0b3IiLCJ0ZW1wbGF0ZSIsImRlZmF1bHRfaGVhZGVyIiwiSU1BR0VfRURJVE9SX0hUTUwiLCJJbWFnZUVkaXRvclZpZXciLCJ0YWdVcGxvYWRGaWxlQnV0dG9uIiwidGFnVXBsb2FkRmlsZVBsYWNlbWVudCIsInRhZ1VwbG9hZEZpbGVOYW1lIiwiY3VycmVudFN1YnNjcmlwdGlvbiIsImNvdXJzZSIsImdldFBsYWNlbWVudERpcmVjdG9yeSIsInF1ZXJ5UGFyYW1zIiwibG9jYXRpb24iLCJzZWFyY2hQYXJhbXMiLCJkaXNwb3NlIiwiSW1hZ2VFZGl0b3IiLCJKU09OX0VESVRPUl9IVE1MIiwiSnNvbkVkaXRvclZpZXciLCJDb2RlTWlycm9yIiwiZnJvbVRleHRBcmVhIiwic2hvd0N1cnNvcldoZW5TZWxlY3RpbmciLCJsaW5lTnVtYmVycyIsImZpcnN0TGluZU51bWJlciIsImluZGVudFVuaXQiLCJ0YWJTaXplIiwiaW5kZW50V2l0aFRhYnMiLCJleHRyYUtleXMiLCJjbSIsImJsdXIiLCJzZXRWYWx1ZSIsImdldFZhbHVlIiwib2ZmIiwiSnNvbkVkaXRvciIsIk1BUktET1dOX0VESVRPUl9IVE1MIiwiTWFya2Rvd25FZGl0b3JWaWV3IiwibWRlIiwiZWxlbWVudCIsImF1dG9Eb3dubG9hZEZvbnRBd2Vzb21lIiwiZm9yY2VTeW5jIiwibWluSGVpZ2h0IiwicmVuZGVyaW5nQ29uZmlnIiwiY29kZVN5bnRheEhpZ2hsaWdodGluZyIsImNvZGVtaXJyb3IiLCJNYXJrZG93bkVkaXRvciIsIm1ha2VUYWIiLCJQWVRIT05fRURJVE9SX0hUTUwiLCJISVNUT1JZX1RPT0xCQVJfSFRNTCIsImNvbnZlcnRJcHluYlRvUHl0aG9uIiwiaXB5bmIiLCJpc1VzYWJsZSIsImNlbGwiLCJjZWxsX3R5cGUiLCJzb3VyY2UiLCJtYWtlUHl0aG9uIiwiY2VsbHMiLCJQeXRob25FZGl0b3JWaWV3IiwiQmxvY2tseSIsInNldFBhcmVudENvbnRhaW5lciIsIkJsb2NrTWlycm9yIiwidG9vbGJveCIsImltYWdlRG93bmxvYWRIb29rIiwib2xkVXJsIiwiaW1hZ2VVcGxvYWRIb29rIiwicmVqZWN0Iiwic3VibWlzc2lvbklkIiwiaW1hZ2VMaXRlcmFsSG9vayIsIm1ha2VTdWJzY3JpcHRpb25zIiwibGluZUVycm9yU3Vic2NyaXB0aW9uIiwibGluZVVuY292ZXJlZFN1YnNjcmlwdGlvbiIsImxpbmVUcmFjZVN1YnNjcmlwdGlvbiIsIm1ha2VQZXJBc3NpZ25tZW50U3Vic2NyaXB0aW9ucyIsIndvcmtzcGFjZSIsImNvbmZpZ3VyZUNvbnRleHRNZW51Iiwib3B0aW9ucyIsImVuYWJsZWQiLCJjYWxsYmFjayIsIm9sZEZpbGVuYW1lIiwiY3VycmVudEJNTGlzdGVuZXIiLCJhZGRDaGFuZ2VMaXN0ZW5lciIsImlzUGFyc29ucyIsImxpbmVzIiwic2V0SGlnaGxpZ2h0ZWRMaW5lcyIsImNsZWFySGlnaGxpZ2h0ZWRMaW5lcyIsImRlbGV0ZUZpbGVMb2NhbGx5XyIsInNldENvZGUiLCJnZXRDb2RlIiwicmVtb3ZlQ2hhbmdlTGlzdGVuZXIiLCJjbGVhckxpbmVTdWJzY3JpcHRpb25zIiwic2V0TW9kZSIsImVuYWJsZUJsb2NrcyIsInJlbG9hZFRvb2xib3giLCJpbWFnZU1vZGUiLCJzZXRJbWFnZU1vZGUiLCJvbGRIZWlnaHQiLCJ1c2VTbWFsbExheW91dCIsInJlc2l6ZVJlc3BvbnNpdmVseSIsInVwZGF0ZUd1dHRlciIsImluZGVudFNpZGViYXIiLCJjdXN0b21Ub29sYm94IiwiZGVjaWRlSWZOb3RFZGl0YWJsZSIsIm9ubHlVcGxvYWRzIiwiaXNSZWFkT25seSIsImVuZHNXaXRoIiwiUHl0aG9uRWRpdG9yIiwiUVVJWl9FRElUT1JfSFRNTCIsIlF1aXpFZGl0b3JWaWV3IiwiUXVpekVkaXRvciIsIlBBU1NFRCIsIkZBSUxFRCIsIkVSUk9SIiwiU0tJUFBFRCIsImNvdW50IiwiU0FNUExFX1NVQk1JU1NJT05TX0hUTUwiLCJiaW5kaW5nSGFuZGxlcnMiLCJjb2RlTWlycm9ySW5zdGFuY2UiLCJpbml0IiwidmFsdWVBY2Nlc3NvciIsImFsbEJpbmRpbmdzIiwidmlld01vZGVsIiwiYmluZGluZ0NvbnRleHQiLCJzZXRTaXplIiwidXBkYXRlIiwiU2FtcGxlU3VibWlzc2lvbnNWaWV3IiwiY29kZU1pcnJvcnMiLCJTYW1wbGVTdWJtaXNzaW9ucyIsIlRBR1NfRURJVE9SX0hUTUwiLCJUYWdzRWRpdG9yVmlldyIsIlRhZ3NFZGl0b3IiLCJURVhUX0VESVRPUl9IVE1MIiwiVGV4dEVkaXRvclZpZXciLCJUZXh0RWRpdG9yIiwiVE9PTEJPWF9FRElUT1JfSFRNTCIsIlRvb2xib3hFZGl0b3JWaWV3IiwiVG9vbGJveEVkaXRvciIsIkVkaXRvcnNFbnVtIiwiU1VCTUlTU0lPTiIsIkFTU0lHTk1FTlQiLCJJTlNUUlVDVElPTlMiLCJPTl9SVU4iLCJPTl9DSEFOR0UiLCJPTl9FVkFMIiwiU1RBUlRJTkdfQ09ERSIsIlNBTVBMRV9TVUJNSVNTSU9OUyIsIklOU1RSVUNUT1JfRklMRSIsIlNQRUNJQUxfTkFNRVNQQUNFUyIsIkFWQUlMQUJMRV9FRElUT1JTIiwiRURJVE9SU19IVE1MIiwicmVnaXN0ZXJlZF8iLCJleHRlbnNpb25zXyIsImJ5TmFtZV8iLCJyZWdpc3RlckVkaXRvciIsImluc3RhbmNlIiwiZXhpdCIsImVudGVyIiwic3BhY2UiLCJhc3NpZ25tZW50VHlwZSIsIkFzc2lnbm1lbnRUeXBlIiwibGFzdEluZGV4T2YiLCJleGVjdXRpb25Nb2RlbCIsImNvbmZpZ3VyYXRpb25zIiwiUnVuQ29uZmlndXJhdGlvbiIsImV2YWwiLCJFdmFsQ29uZmlndXJhdGlvbiIsIk9uUnVuQ29uZmlndXJhdGlvbiIsIk9uQ2hhbmdlQ29uZmlndXJhdGlvbiIsIk9uRXZhbENvbmZpZ3VyYXRpb24iLCJjb25maWd1cmUiLCJnZXRTa3VscHRPcHRpb25zIiwib25FeGVjdXRpb25CZWdpbiIsIm9uRXhlY3V0aW9uRW5kIiwicmVwb3J0IiwidHJhY2luZyIsInJlc2V0U3R1ZGVudE1vZGVsIiwicmVzZXRSZXBvcnRzIiwicmVzZXRFeGVjdXRpb25CdWZmZXIiLCJkaXNhYmxlRmVlZGJhY2siLCJ0aGVuIiwiZmFpbHVyZSIsInByb3ZpZGVTZWNyZXRFcnJvciIsInNob3dFcnJvcnMiLCJleGVjdXRpb25FbmRfIiwiZXZhbHVhdGlvbklucHV0IiwidXNlcklucHV0IiwibWlzY2V2YWwiLCJhc3luY1RvUHJvbWlzZSIsImltcG9ydE1haW5XaXRoQm9keSIsIkZJTEVOQU1FIiwicHJvZ3JhbXMiLCJzYXZlQ29kZSIsInZlcmlmeUNvZGUiLCJ1cGRhdGVQYXJzZSIsInJ1bkluc3RydWN0b3JDb2RlIiwibW9kdWxlIiwiZXhlY3V0aW9uUmVwb3J0cyIsInByZXNlbnRGZWVkYmFjayIsIiRkIiwiRU1QVFlfTU9EVUxFIiwiQ29uZmlndXJhdGlvbiIsImluQnJvd3NlciIsIm9wZW5GaWxlIiwiZmlsZVRvVVJMIiwiZ2V0VXJsRnJvbUZpbGVuYW1lIiwicmVxdWVzdHNHZXQiLCJ0aW1lb3V0Iiwib3BlblVSTCIsInRpbWVvdXRIYW5kbGVyIiwidGltZVBhc3NlZCIsImV4ZWNMaW1pdCIsImRpc2FibGVUaW1lb3V0IiwiZ2V0VGltZW91dFByb21wdCIsImRlbGF5IiwicGFyc2VJbnQiLCJleGVjTGltaXRGdW5jdGlvbiIsIkluZmluaXR5IiwiYmVmb3JlQ2FsbCIsImxvbmdUaW1lb3V0IiwiX19mdXR1cmVfXyIsInB5dGhvbjMiLCJyZWFkIiwiaW1wb3J0RmlsZSIsImZpbGV3cml0ZSIsIndyaXRlRmlsZSIsInByaW50IiwiaW5wdXRmdW4iLCJpbnB1dGZ1blRha2VzUHJvbXB0IiwiaW1hZ2VQcm94eSIsImdldEltYWdlUHJveHkiLCJlbW9qaVByb3h5IiwicGFydCIsInJldGFpbkdsb2JhbHMiLCJmb3VuZCIsImZpbGVzVG9VcmxzIiwiYnVpbHRpbiIsIk9TRXJyb3IiLCJ3YXJuIiwibW9ja1VybERhdGEiLCJJT0Vycm9yIiwiaGFzT3duUHJvcGVydHkiLCJmaWxlRGF0YSIsInJlYWRGaWxlIiwiRXJyb3IiLCJzdG9wIiwiZnVuY3Rpb25OYW1lIiwicG9zYXJncyIsImt3YXJncyIsInN0dWRlbnRNb2RlbCIsImFyZ3MiLCJwb3AiLCJhZnRlclNpbmdsZUV4ZWN1dGlvbiIsInByaW50VmFsdWUiLCJyZW1hcFRvSnMiLCJfIiwiJHIiLCJ4IiwiaXNEb2NzdHJpbmciLCJTdHVkZW50Q29uZmlndXJhdGlvbiIsIlVUSUxJVFlfTU9EVUxFX0NPREUiLCIkc2tfbW9kX2luc3RydWN0b3IiLCJDT1ZFUkFHRV9NT0RVTEVfQ09ERSIsIiRza19tb2RfY292ZXJhZ2UiLCJJbnN0cnVjdG9yQ29uZmlndXJhdGlvbiIsImJlZm9yZUNhbGxCYWNrdXAiLCIkcGVkYWxfdHJhY2VyIiwiY2xlYXJFeGlzdGluZ1N0dWRlbnRJbXBvcnRzIiwiaW5mbyIsImdldEFsbEZpbGVuYW1lcyIsInNrRmlsZW5hbWUiLCJzdHIiLCJwb3AkaXRlbSIsImluY2x1ZGVzIiwiY2hvbXBTcGVjaWFsRmlsZSIsImNsZWFuIiwic2VhcmNoRm9yRmlsZSIsInYiLCJvcGVuYWlQcm94eSIsIm5leHRJbnB1dCIsImNsZWFyVGltZW91dCIsIldSQVBfSU5TVFJVQ1RPUl9DT0RFIiwic3R1ZGVudENvZGUiLCJpbnN0cnVjdG9yQ29kZSIsInF1aWNrIiwiaXNTYWZlIiwic2FmZUNvZGUiLCJJTlNUUlVDVE9SX01BUktFUiIsImRpc2FibGVUaWZhIiwic3R1ZGVudEZpbGVzIiwiZ2V0QWxsU3R1ZGVudEZpbGVzIiwiZXZhbHVhdGlvbiIsImR1bW15T3V0U2FuZGJveCIsImxpbmVPZmZzZXQiLCJmaW5kQWN0dWFsSW5zdHJ1Y3Rvck9mZnNldCIsIlNVQ0NFU1MiLCJTQ09SRSIsIm9sZFNjb3JlIiwiSElERSIsInNjcm9sbGluZyIsInNjcm9sbFRvQm90dG9tIiwidHAkbmFtZSIsInByZXNlbnRJbnRlcm5hbEVycm9yIiwiYmVmb3JlIiwibWF0Y2giLCJORVdfTElORV9SRUdFWCIsInNraXBfdGlmYSIsIk9uU2FtcGxlQ29uZmlndXJhdGlvbiIsImRpc2FibGVTdHVkZW50UnVuIiwiQm9vbGVhbiIsImVudmlyb24iLCJkaWN0Iiwic2V0JGl0ZW0iLCJpbnRfIiwicm91bmQiLCJjbGVhcklucHV0IiwiZmluaXNoVHVydGxlcyIsImJlZ2luRXZhbCIsInBhcnNlciIsInZlcmlmaWVyIiwiU2FtcGxlQ29uZmlndXJhdGlvbiIsImlzRm9yYmlkZGVuIiwibG9jYWxzIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsImFzdE5hbWUiLCJwYXJzZUdsb2JhbHMiLCJwcm9wZXJ0aWVzIiwibW9kdWxlcyIsInZpc2l0ZWRMaW5lcyIsIlNldCIsInZpc2l0Qm9keSIsIm5vZGUiLCJsaW5lbm8iLCJzdGF0ZW1lbnQiLCJvcmVsc2UiLCJmaW5hbGJvZHkiLCJBcnJheSIsImZyb20iLCJhc3RGcm9tUGFyc2UiLCJjc3QiLCJmbGFncyIsImdldExpbmVzIiwicHJlc2VudFJ1bkVycm9yIiwiZXJyb3JCdXR0b24iLCJGRUVEQkFDS19IVE1MIiwiZmVlZGJhY2tNb2RlbCIsInBvc2l0aXZlIiwidmlzaWJpbGl0eUJ1ZmZlciIsInRvcE9mRWxlbWVudCIsImJvdHRvbU9mRWxlbWVudCIsImJvdHRvbU9mU2NyZWVuIiwidG9wT2ZTY3JlZW4iLCJjbGVhclBvc2l0aXZlRmVlZGJhY2siLCJleGVjdXRpb25SZXN1bHRzIiwiTUVTU0FHRSIsIkNBVEVHT1JZIiwiTEFCRUwiLCJEQVRBIiwicG9zaXRpdmVzIiwiUE9TSVRJVkUiLCJoaWRlU2NvcmUiLCJibG9jayIsImhsanMiLCJoaWdobGlnaHRCbG9jayIsImZpbmRGaXJzdEVycm9yTGluZSIsInN0dWRlbnRSZXBvcnQiLCJ1bmNvdmVyZWRMaW5lcyIsInBvc2l0aXZlRGF0YSIsImFkZFBvc2l0aXZlRmVlZGJhY2siLCJjb2xvciIsIm9uY2xpY2siLCJ0b0VuZCIsImNzcyIsImhvdmVyIiwidXBkYXRlRmVlZGJhY2siLCJ1cGRhdGVGdWxsRmVlZGJhY2siLCJub3RpZnlGZWVkYmFja1VwZGF0ZSIsInRwJGdldGF0dHIiLCJweVN0ciIsImtpbmQiLCJhY3RpdmUiLCJpc1RydWUiLCJ1bnVzZWRfbWVzc2FnZSIsImp1c3RpZmljYXRpb24iLCJoYXNQYXJlbnQiLCJjaGVja05vbmUiLCJub25lIiwibm9uZSQiLCJtYWluUmVwb3J0IiwiTUFJTl9SRVBPUlQiLCJmZWVkYmFja3MiLCJpdGVyRm9yIiwidHAkaXRlciIsInByb2Nlc3NTaW5nbGVGZWVkYmFjayIsInBhcmVudHMiLCJNYXAiLCJ1bnNoaWZ0IiwidmFsdWVzIiwiZmxhdCIsInRvZ2dsZUNsYXNzIiwic2hvdWxkU2Nyb2xsSW50b1ZpZXciLCJzY3JvbGxJbnRvVmlldyIsImp1c3RfcmV0dXJuIiwiY29udmVydFNrdWxwdEVycm9yIiwiZmlsZW5hbWVFeGVjdXRlZCIsInRyYWNlYmFjayIsImZyYW1lIiwic2NvcGUiLCJpc0luc3RydWN0b3IiLCJlcnIiLCJhbGxGcmFtZXMiLCJidWlsZFRyYWNlYmFjayIsImZlZWRiYWNrRGF0YSIsInF1aWNrJGxvb2t1cCIsImZyaWVuZGx5TmFtZSIsImhpZGVJZkVtcHR5Iiwibm90SW5zdHJ1Y3RvciIsImluc3RydWN0b3JGaWxlQ2xhc3MiLCJoaWRlSWZOb3RJbnN0cnVjdG9yIiwiRklMRVNfSFRNTCIsIk5FV19JTlNUUlVDVE9SX0ZJTEVfRElBTE9HX0hUTUwiLCJTVEFSVElOR19GSUxFUyIsIkJBU0lDX05FV19GSUxFUyIsIklOU1RSVUNUT1JfRElSRUNUT1JZIiwiU1RVREVOVF9ESVJFQ1RPUlkiLCJTZWFyY2hNb2RlcyIsIkVWRVJZV0hFUkUiLCJTVEFSVF9XSVRIX0lOU1RSVUNUT1IiLCJPTkxZX1NUVURFTlRfRklMRVMiLCJERUxFVEFCTEVfU0lNUExFX0ZJTEVTIiwiQmxvY2tQeUZpbGUiLCJvd25lciIsIm1ha2VNb2NrTW9kZWxGaWxlIiwiY29uY2F0ZW5hdGVkRmlsZSIsIm1vZGVsRmlsZUxpc3QiLCJtb2RlbEZpbGVzIiwiY3JlYXRlQ29uY2F0ZW5hdGVkRmlsZSIsImZpbGVzXyIsIm1vdW50RmlsZXMiLCJ3YXRjaE1vZGVsIiwid2F0Y2hlc18iLCJyZW1vdGVGaWxlc18iLCJmaWxlc3lzdGVtIiwiZmlsZUFycmF5IiwiY2hhbmdlcyIsInNlY29uZCIsImxvY2FsZUNvbXBhcmUiLCJjaGFuZ2UiLCJtb2RlbEZpbGUiLCJub3RpZnlXYXRjaGVzIiwib2JzZXJ2ZUluQXJyYXlfIiwiYXJyYXkiLCJjb2RlQnVuZGxlIiwiZXhpc3RpbmdGaWxlIiwib2JzZXJ2ZUZpbGVfIiwiZGVzdGluYXRpb24iLCJzdHVkZW50U2VhcmNoIiwic2VhcmNoTW9kZSIsInNwZWNpYWxGaWxlIiwic2VhcmNoRm9yU3BlY2lhbEZpbGVzXyIsInN0dWRlbnRWZXJzaW9uIiwic2VhcmNoRm9yRmlsZUluTGlzdF8iLCJnZW5lcmF0ZWRWZXJzaW9uIiwiZGVmYXVsdFZlcnNpb24iLCJoaWRkZW5WZXJzaW9uIiwicmVtb3RlVmVyc2lvbiIsImZpcnN0RGVmaW5lZFZhbHVlIiwiaW5zdHJ1Y3RvclZlcnNpb24iLCJzdGFydGluZ1ZlcnNpb24iLCJtb2RlbExpc3QiLCJmaWxldHlwZSIsIm5hbWVzcGFjZSIsImV4dGVuc2lvblJlZ2V4IiwiZXhlYyIsInByZWZpeCIsInN1Ym1pdCIsInByZXZlbnREZWZhdWx0IiwicHJlbG9hZEZpbGVzIiwiZG93bmxvYWRSZW1vdGVGaWxlcyIsInJlb3JnYW5pemVGaWxlcyIsIm9yZ2FuaXplZCIsImVudHJpZXMiLCJwbGFjZWRGaWxlcyIsImRpcmVjdG9yeSIsIm9sZFJlbWFpbmluZ0ZpbGVzIiwicGxhY2VtZW50RGF0YSIsImRpcmVjdG9yeURhdGEiLCJyZW5hbWVkRmlsZSIsIkZPT1RFUl9IVE1MIiwiY3VycmVudElkIiwiZWRpdEV2ZW50cyIsInNlbGVjdG9yIiwiZWRpdElkIiwiZW50cnkiLCJmaWxlX3BhdGgiLCJldmVudF90eXBlIiwiUkVNQVBfRVZFTlRfVFlQRVMiLCJkaXNwbGF5ZWQiLCJwcmV0dHlQcmludERhdGVUaW1lIiwiY2xpZW50X3RpbWVzdGFtcCIsImRpc2FibGUiLCJvcHRpb24iLCJkaXNhYmxlZCIsImlzRWRpdEV2ZW50IiwiZXZ0IiwibW9udGhOYW1lcyIsIndlZWtEYXlzIiwiaXNTYW1lRGF5IiwiZ2V0RGF0ZSIsImdldE1vbnRoIiwiZ2V0RnVsbFllYXIiLCJ0aW1lU3RyaW5nIiwibm93IiwiRGF0ZSIsInBhc3QiLCJ0b0xvY2FsZVRpbWVTdHJpbmciLCJkYXlTdHIiLCJnZXREYXkiLCJtb250aFN0ciIsImRhdGUiLCJnZXRIaXN0b3J5IiwicmV2ZXJzZSIsInJlZHVjZSIsImNvbXBsZXRlIiwiZWxlbSIsImNvbXBsZXRlX3N0ciIsInRpbWUiLCJuZXdfbGluZSIsImhpZ2hsaWdodFRpbWVvdXQiLCJpc0Z1bGxzY3JlZW4iLCJyZXF1ZXN0RnVsbHNjcmVlbiIsImV4aXRGdWxsc2NyZWVuIiwiVFJBQ0VfSFRNTCIsIlJFVFJZSU5HIiwiT0ZGTElORSIsInN0b3JhZ2UiLCJxdWV1ZSIsImdldERlZmF1bHQiLCJNQVhfUVVFVUVfU0laRSIsIlRJTUVSX0RFTEFZIiwiRkFJTF9ERUxBWSIsInRpbWVycyIsIm92ZXJsYXkiLCJibG9ja2luZ0F0dGVtcHRzIiwiY2FjaGVkRmlsZW5hbWVzIiwiY3JlYXRlU3Vic2NyaXB0aW9ucyIsImNoZWNrQ2FjaGVzIiwiY2hlY2tJUCIsIm9sZElQIiwiaXAiLCJfcG9zdExhdGVzdFJldHJ5IiwicHVzaEFueVF1ZXVlZCIsIl9wb3N0UmV0cnkiLCJjcmVhdGVGaWxlU3Vic2NyaXB0aW9uIiwiY3JlYXRlRXZlbnRMb2dzIiwib25ibHVyIiwib25mb2N1cyIsImF1dGhvcml6ZUhlYWRlciIsImN1cnJlbnRTZXR0aW5ncyIsImhlYWRlcnMiLCJjcmVhdGVTZXJ2ZXJEYXRhIiwibWljcm9zZWNvbmRzIiwiZ2V0VGltZSIsImdldFRpbWV6b25lT2Zmc2V0Iiwic2hvd092ZXJsYXkiLCJhdHRlbXB0IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImhpZGVPdmVybGF5IiwiX2VucXVldWVEYXRhIiwiY2FjaGUiLCJfZGVxdWV1ZURhdGEiLCJzcGxpY2UiLCJwb3N0UmVxdWVzdCIsImFqYXgiLCJ0ZXh0U3RhdHVzIiwiZmFpbHVyZUZ1bmN0aW9uIiwiZG9uZUZ1bmN0aW9uIiwicmVxdWVzdCIsImNhY2hlZFRpbWUiLCJfcG9zdEJsb2NraW5nIiwiYXR0ZW1wdHMiLCJleHRyYVNldHRpbmdzIiwiZXJyb3JUaHJvd24iLCJzdGFydFBvc3NpYmxlRm9yayIsImRlbGV0ZUluc3RlYWQiLCJmZCIsImQiLCJGb3JtRGF0YSIsInByb2Nlc3NEYXRhIiwiY29udGVudFR5cGUiLCJkYXRhVHlwZSIsIm9sZF9maWxlbmFtZSIsIm5ld19maWxlbmFtZSIsIm5ld1N0YXR1cyIsInBvc3RTdGF0dXNDaGFuZ2UiLCJlcnJvckNhbGxiYWNrIiwibG9hZF9maWxlIiwiZm9ya2FibGUiLCJoaWRkZW5PdmVycmlkZSIsImZvcmNlVXBkYXRlIiwiZ2V0UG5nRnJvbUJsb2NrcyIsInBuZ0RhdGEiLCJpbWciLCJvcGVuYWlfZGF0YSIsIm9wZW5haV9wcm94eSIsIiRidWlsdGlubW9kdWxlIiwibW9kIiwic2FtcGxlV3JhcHBlciIsIl9fbmFtZV9fIiwiUElMIiwiSW5zdGFudFByb21pc2UiLCJsYXN0UmVzdWx0IiwibGFzdEVycm9yIiwiY2IiLCJidWlsZEltYWdlIiwiZ2V0QXNzZXQiLCJJbWFnZSIsImNyb3NzT3JpZ2luIiwib25lcnJvciIsInNyYyIsIiRnYmwiLCIkbG9jIiwiX19pbml0X18iLCJmdW5jIiwiZmlsZV9vcl91cmwiLCJweUNoZWNrQXJncyIsInB5Q2hlY2tUeXBlIiwiY2hlY2tTdHJpbmciLCJpbWFnZVByb21pc2UiLCJzdXNwIiwiU3VzcGVuc2lvbiIsInJlc3VtZSIsInByb21pc2UiLCJnZXRDb250ZXh0IiwiZHJhd0ltYWdlIiwicGl4ZWxzIiwiZ2V0SW1hZ2VEYXRhIiwiTmFtZUVycm9yIiwiY29uc29sZURhdGEiLCJwcmludFBJTEltYWdlIiwiZmxpcCIsInN0eWxlIiwidHJhbnNmb3JtIiwiYnVpbGRDbGFzcyIsInByaW9yIiwidGltZWl0IiwiZGlmZmVyZW5jZSIsImNvbnNvbGVfbG9nIiwiY29uc29sZV9kZWJ1ZyIsImdldF9vdXRwdXQiLCJpdGVtIiwidG9Ta3VscHQiLCJsaXN0IiwicmVzZXRfb3V0cHV0IiwiZ2V0X3Byb2dyYW0iLCJnZXRfZXZhbHVhdGlvbiIsInRyYWNlX2xpbmVzIiwicmVhbExpbmVzIiwidHJhY2VfY2FsbHMiLCJzdGFydF90cmFjZSIsInN0b3BfdHJhY2UiLCJnZXRfc3R1ZGVudF9lcnJvciIsInR1cGxlIiwicG9zaXRpb24iLCJoYWRfZXhlY3V0aW9uX3RpbWVfZXJyb3IiLCJiYWNrdXBUaW1lIiwibGltaXRfZXhlY3V0aW9uX3RpbWUiLCJleGVjU3RhcnQiLCJ1bmxpbWl0X2V4ZWN1dGlvbl90aW1lIiwic3VwcHJlc3Nfc2Nyb2xsaW5nIiwiZ2V0X3Bsb3RzIiwib3V0cHV0cyIsImdyYXBoIiwicGxvdCIsIm5ld1Bsb3QiLCJ5IiwiU3R1ZGVudERhdGEiLCJuZXdEaWN0IiwiYWJzdHIiLCJzYXR0ciIsIm9iamVjdFNldEl0ZW0iLCJ1bmZpeFJlc2VydmVkIiwiY2FsbF9mIiwia3dhIiwicHlDaGVja0FyZ3NMZW4iLCJjYWxsIiwiYnVpbHRpbnMiLCJtcCRsb29rdXAiLCJmdW5jdGlvbk9iamVjdCIsInRwJGNhbGwiLCJjb19rd2FyZ3MiLCJjb19uYW1lIiwiZ2V0X25hbWVzX2J5X3R5cGUiLCJleGNsdWRlX2J1aWx0aW5zIiwiY2hlY2tCb29sIiwicHJvcGVydHkiLCJnZXRfdmFsdWVzX2J5X3R5cGUiLCJjYWxsc2ltT3JTdXNwZW5kIiwiZ2V0X3N0dWRlbnRfZGF0YSIsInNldF9pbnN0cnVjdGlvbnMiLCJuZXdJbnN0cnVjdGlvbnMiLCJnZXRfbW9kZWxfaW5mbyIsImNsZWFyX2V4aXN0aW5nX3N0dWRlbnRfaW1wb3J0cyIsImRvd25sb2FkX2ZpbGUiLCJkb3dubG9hZEZpbGVVcmwiLCJjb21iaW5lciIsInByb20iLCJ4bWxodHRwIiwiWE1MSHR0cFJlcXVlc3QiLCJhZGRFdmVudExpc3RlbmVyIiwicmVzcG9uc2VUZXh0Iiwib3BlbiIsInNlbmQiLCJyZXNvbHV0aW9uIiwiV2Vha1NldCIsImNoZWNrSXRlcmFibGUiLCJpdGVyIiwiaXRlcm5leHQiLCJXZWFrUmVmIiwiX19pdGVyX18iLCJ2aWV3T2ZEYXRhIiwiZGVyZWYiLCJMT0NBTF9TVE9SQUdFX1JFRiIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwiX2RhdGEiLCJTdHJpbmciLCJnZXRJdGVtIiwiaXNfbmV3Iiwic2VydmVyX3RpbWUiLCJzdG9yZWRfdGltZSIsIklHTk9SRURfR0xPQkFMUyIsInZhcmlhYmxlcyIsInBhcnNlZCIsInBhcnNlVmFsdWUiLCJmdWxsTGVuZ3RoIiwiZnVuY19jb2RlIiwiY29fdmFybmFtZXMiLCJzcSRsZW5ndGgiLCJib29sIiwibm1iZXIiLCJza1R5cGUiLCJmbG9hdF8iLCJOdW1iZXIiLCJhcnJheU1vdmUiLCJhcnIiLCJvbGRJbmRleCIsIm5ld0luZGV4IiwiaXRlbVRvTW92ZSIsImFjYyIsImFycmF5Q29udGFpbnMiLCJuZWVkbGUiLCJoYXlzdGFjayIsImFycmF5VW5pcXVlIiwiYSIsImNvbmNhdCIsImoiLCJleHBhbmRBcnJheSIsImFkZEFycmF5IiwicmVtb3ZlQXJyYXkiLCJjb3B5QXJyYXkiLCJjbG9uZU5vZGUiLCJjbG9uZSIsIm5vZGVUeXBlIiwiY3JlYXRlVGV4dE5vZGUiLCJub2RlVmFsdWUiLCJjaGlsZCIsImZpcnN0Q2hpbGQiLCJuZXh0U2libGluZyIsImluZGVudCIsInMiLCJyYW5kb21JbnRlZ2VyIiwiZmxvb3IiLCJyYW5kb20iLCJXb3Jrc3BhY2VTdmciLCJzaHVmZmxlIiwibWV0cmljcyIsImdldE1ldHJpY3MiLCJ2aWV3V2lkdGgiLCJ2aWV3SGVpZ2h0IiwiYmxvY2tzIiwiZ2V0VG9wQmxvY2tzIiwibWF4aW1hbF9pbmNyZWFzZSIsImdldFJlbGF0aXZlVG9TdXJmYWNlWFkiLCJtb3ZlQnkiLCJtb3ZlRWxlbWVudHMiLCJtb3ZlQ2hlY2siLCJpc1NrQnVpbHRpbiIsIm9iaiIsImxuZyIsImlzQXN0Tm9kZSIsIkRFRkFVTFRfU0VDVElPTl9QQVRURVJOIiwicGFydHMiLCJtaXhlZFJlbWFwVG9QeSIsImsiLCJrdnMiLCJzdWJ2YWwiLCJhc3NrJCIsInRvZGF5IiwiaCIsImdldEhvdXJzIiwibSIsImdldE1pbnV0ZXMiLCJwIiwicHlJbnQiLCJweU5vbmUiLCJweVR1cGxlIiwicHlDYWxsT3JTdXNwZW5kIiwiY2FsbHNpbU9yU3VzcGVuZEFycmF5IiwicmljaENvbXBhcmVCb29sIiwiY2hhaW4iLCJ0eXBlTmFtZSIsInNldFVwTW9kdWxlTWV0aG9kcyIsImJ1aWxkTmF0aXZlQ2xhc3MiLCJUeXBlRXJyb3IiLCJWYWx1ZUVycm9yIiwiS2V5RXJyb3IiLCJJbmRleEVycm9yIiwiYXNudW0kIiwiZ2VuZXJpYyIsImdldEF0dHIiLCJzZXRBdHRyIiwiY2hhaW5PclN1c3BlbmQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxPO1FDVkE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7OztRQUdBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSwwQ0FBMEMsZ0NBQWdDO1FBQzFFO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0Esd0RBQXdELGtCQUFrQjtRQUMxRTtRQUNBLGlEQUFpRCxjQUFjO1FBQy9EOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSx5Q0FBeUMsaUNBQWlDO1FBQzFFLGdIQUFnSCxtQkFBbUIsRUFBRTtRQUNySTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLDJCQUEyQiwwQkFBMEIsRUFBRTtRQUN2RCxpQ0FBaUMsZUFBZTtRQUNoRDtRQUNBO1FBQ0E7O1FBRUE7UUFDQSxzREFBc0QsK0RBQStEOztRQUVySDtRQUNBOzs7UUFHQTtRQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2xGQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0NBRUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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LElBQU04ZSxNQUFNLEdBQUdwa0MsRUFBRSxDQUFDeWdCLE9BQUgsQ0FBV3VKLElBQVgsQ0FBZ0JDLEtBQS9CO0FBQ0EsSUFBTVQsS0FBSyxHQUFHeHBCLEVBQUUsQ0FBQ3lnQixPQUFILENBQVdtQyxHQUF6QjtBQUNBLElBQU15aEIsT0FBTyxHQUFHcmtDLEVBQUUsQ0FBQ3lnQixPQUFILENBQVcyYSxLQUEzQjtBQUNBLElBQU1rSixlQUFlLEdBQUd0a0MsRUFBRSxDQUFDd2QsUUFBSCxDQUFZK21CLHFCQUFwQzttQkFFMkN2a0MsRUFBRSxDQUFDd2QsUTtJQUF0Q21NLE0sZ0JBQUFBLE07SUFBUTZhLGUsZ0JBQUFBLGU7SUFBaUJDLEssZ0JBQUFBLEs7O2dCQUMwQnprQyxFQUFFLENBQUNvOEIsSztJQUF0RHNJLFEsYUFBQUEsUTtJQUFVQyxrQixhQUFBQSxrQjtJQUFvQkMsZ0IsYUFBQUEsZ0I7O2tCQUN1QzVrQyxFQUFFLENBQUN5Z0IsTztJQUF4RW9rQixVLGVBQUFBLFM7SUFBV0MsVSxlQUFBQSxVO0lBQVlDLFEsZUFBQUEsUTtJQUFVQyxVLGVBQUFBLFU7SUFBWS9MLFcsZUFBQUEsVztJQUFhZ00sTSxlQUFBQSxNOztjQUNqQ2psQyxFQUFFLENBQUNrRCxHO0lBQTVCQyxTLFdBQUFBLFM7SUFBV3dlLFMsV0FBQUEsUzs7a0JBQ1UzaEIsRUFBRSxDQUFDa2xDLE87SUFBeEJDLE8sZUFBQUEsTztJQUFTQyxPLGVBQUFBLE87O0FBQ2pCLElBQU1DLGNBQWMsR0FBR1osS0FBdkIsQzs7Ozs7Ozs7Ozs7QUMxVlAsc0Q7Ozs7Ozs7Ozs7O0FDQUEsb0Q7Ozs7Ozs7Ozs7O0FDQUEsc0QiLCJmaWxlIjoiYmxvY2tweS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIkZpbGVQb25kXCIpLCByZXF1aXJlKFwialF1ZXJ5XCIpLCByZXF1aXJlKFwia29cIikpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJibG9ja3B5XCIsIFtcIkZpbGVQb25kXCIsIFwialF1ZXJ5XCIsIFwia29cIl0sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiYmxvY2tweVwiXSA9IGZhY3RvcnkocmVxdWlyZShcIkZpbGVQb25kXCIpLCByZXF1aXJlKFwialF1ZXJ5XCIpLCByZXF1aXJlKFwia29cIikpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImJsb2NrcHlcIl0gPSBmYWN0b3J5KHJvb3RbXCJGaWxlUG9uZFwiXSwgcm9vdFtcImpRdWVyeVwiXSwgcm9vdFtcImtvXCJdKTtcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX2ZpbGVwb25kX18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfanF1ZXJ5X18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfa25vY2tvdXRfXykge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vc3JjL2Jsb2NrcHkuanNcIik7XG4iLCIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgU3RhcnRpbmcgcG9pbnQgb2YgdGhlIEJsb2NrUHkgYXBwbGljYXRpb24sIGNvbnRhaW5pbmcgdGhlIG1haW5cbiAqIEJsb2NrUHkgY2xhc3MuXG4gKi9cbmltcG9ydCBcIi4vY3NzL2Jsb2NrcHkuY3NzXCI7XG5pbXBvcnQgXCIuL2Nzcy9ib290c3RyYXBfcmV0aGVtZS5jc3NcIjtcbmltcG9ydCAkIGZyb20gXCJqcXVlcnlcIjtcbmltcG9ydCB7JGJ1aWx0aW5tb2R1bGUgYXMgaW1hZ2VNb2R1bGV9IGZyb20gXCJza3VscHRfbW9kdWxlcy9pbWFnZVwiO1xuaW1wb3J0IHskYnVpbHRpbm1vZHVsZSBhcyB3ZWFrcmVmTW9kdWxlfSBmcm9tIFwic2t1bHB0X21vZHVsZXMvd2Vha3JlZlwiO1xuLy9pbXBvcnQgeyRidWlsdGlubW9kdWxlIGFzIG1hdHBsb3RsaWJNb2R1bGV9IGZyb20gXCJza3VscHRfbW9kdWxlcy9tYXRwbG90bGliMlwiO1xuaW1wb3J0IHtMb2NhbFN0b3JhZ2VXcmFwcGVyfSBmcm9tIFwic3RvcmFnZS5qc1wiO1xuaW1wb3J0IHtFZGl0b3JzRW51bX0gZnJvbSBcImVkaXRvcnMuanNcIjtcbmltcG9ydCB7RGlzcGxheU1vZGVzfSBmcm9tIFwiZWRpdG9yL3B5dGhvbi5qc1wiO1xuaW1wb3J0IHtTdGF0dXNTdGF0ZX0gZnJvbSBcInNlcnZlci5qc1wiO1xuaW1wb3J0IHttYWtlSW50ZXJmYWNlLCBtYWtlRXh0cmFJbnRlcmZhY2VTdWJzY3JpcHRpb25zLCBTZWNvbmRSb3dTZWNvbmRQYW5lbE9wdGlvbnN9IGZyb20gXCJpbnRlcmZhY2UuanNcIjtcbmltcG9ydCB7RWRpdG9yc30gZnJvbSBcImVkaXRvcnMuanNcIjtcbmltcG9ydCB7XG4gICAgQmxvY2tQeUZpbGVTeXN0ZW0sXG4gICAgbG9hZENvbmNhdGVuYXRlZEZpbGUsXG4gICAgbWFrZU1vZGVsRmlsZSxcbiAgICBvYnNlcnZlQ29uY2F0ZW5hdGVkRmlsZSxcbiAgICBVTkRFTEVUQUJMRV9GSUxFUyxcbiAgICBVTlJFTkFNQUJMRV9GSUxFU1xufSBmcm9tIFwiLi9maWxlc1wiO1xuaW1wb3J0IHt1cGxvYWRGaWxlLCBkb3dubG9hZEZpbGV9IGZyb20gXCIuL2VkaXRvci9hYnN0cmFjdF9lZGl0b3JcIjtcbmltcG9ydCB7QmxvY2tQeUVuZ2luZX0gZnJvbSBcImVuZ2luZS5qc1wiO1xuaW1wb3J0IHtBU1RfREVTQ1JJUFRJT05TLCBCbG9ja1B5VHJhY2V9IGZyb20gXCIuL3RyYWNlXCI7XG5pbXBvcnQge0Jsb2NrUHlDb25zb2xlfSBmcm9tIFwiLi9jb25zb2xlXCI7XG5pbXBvcnQge0Jsb2NrUHlGZWVkYmFja30gZnJvbSBcImZlZWRiYWNrLmpzXCI7XG5pbXBvcnQge0Jsb2NrUHlTZXJ2ZXJ9IGZyb20gXCIuL3NlcnZlclwiO1xuaW1wb3J0IHtCbG9ja1B5RGlhbG9nfSBmcm9tIFwiLi9kaWFsb2dcIjtcbmltcG9ydCB7QXNzaWdtZW50VHlwZSwgbG9hZEFzc2lnbm1lbnRTZXR0aW5ncywgbWFrZUFzc2lnbm1lbnRTZXR0aW5nc01vZGVsfSBmcm9tIFwiLi9lZGl0b3IvYXNzaWdubWVudF9zZXR0aW5nc1wiO1xuaW1wb3J0IHtCbG9ja1B5Q29yZ2lzLCBfSU1QT1JURURfQ09NUExFVEVfREFUQVNFVFMsIF9JTVBPUlRFRF9EQVRBU0VUU30gZnJvbSBcIi4vY29yZ2lzXCI7XG5pbXBvcnQge0Jsb2NrUHlIaXN0b3J5fSBmcm9tIFwiLi9oaXN0b3J5XCI7XG5pbXBvcnQge2NhcGl0YWxpemUsIGV4dHJhY3RQYXJ0LCBnZXRDdXJyZW50VGltZX0gZnJvbSBcIi4vdXRpbGl0aWVzXCI7XG5pbXBvcnQge1NhbXBsZVN1Ym1pc3Npb24sIFN1Ym1pc3Npb25TdGF0dXNlc30gZnJvbSBcIi4vZWRpdG9yL3NhbXBsZV9zdWJtaXNzaW9uc1wiO1xuXG5leHBvcnQge19JTVBPUlRFRF9DT01QTEVURV9EQVRBU0VUUywgX0lNUE9SVEVEX0RBVEFTRVRTfTtcblxuY29uc3QgRURJVE9SX1ZFUlNJT04gPSBcIjUuMS4yXCI7XG5cbi8qKlxuICogTWFqb3IgZW50cnkgcG9pbnQgZm9yIGNyZWF0aW5nIGEgQmxvY2tQeSBpbnN0YW5jZS5cbiAqIFR3byBtb3N0IGltcG9ydGFudCBmaWVsZHMgYXJlIGBtb2RlbGAgYW5kIGBjb21wb25lbnRzYC5cbiAqIFRoZSBgbW9kZWxgIGhvbGRzIGFsbCB0aGUgZGF0YSBhYm91dCB0aGUgaW50ZXJmYWNlLlxuICogVGhlIGBjb21wb25lbnRzYCBhcmUgcmVmZXJlbmNlcyB0byB0aGUgZGlzcGFyYXRlIHBhcnRzIG9mIEJsb2NrUHkuXG4gKlxuICogTW9zdCBvZiB0aGlzIGNsYXNzZXMgZGVmaW5pdGlvbiBpcyBqdXN0IGluaXRpYWxpemluZyB0aGUgbW9kZWwgYW5kIHVwZGF0aW5nXG4gKiBpdCBvbiBhbiBhc3NpZ25tZW50IHN3aXRjaC5cbiAqL1xuZXhwb3J0IGNsYXNzIEJsb2NrUHkge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWd1cmF0aW9uIC0gVXNlciBsZXZlbCBzZXR0aW5ncyAoZS5nLiwgd2hhdCBlZGl0b3IgbW9kZSwgd2hldGhlciB0byBtdXRlIHNlbWFudGljIGVycm9ycywgZXRjLilcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYXNzaWdubWVudCAtIEFzc2lnbm1lbnQgbGV2ZWwgc2V0dGluZ3MgKGRhdGEgYWJvdXQgdGhlIGxvYWRlZCBhc3NpZ25tZW50LCB1c2VyLCBzdWJtaXNzaW9uLCBldGMuKVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdWJtaXNzaW9uIC0gSW5jbHVkZXMgdGhlIHNvdXJjZSBjb2RlIG9mIGFueSBwcm9ncmFtcyB0byBiZSBsb2FkZWRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb25maWd1cmF0aW9uLCBhc3NpZ25tZW50LCBzdWJtaXNzaW9uKSB7XG4gICAgICAgIHRoaXMuaW5pdE1vZGVsKGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICBpZiAoYXNzaWdubWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNldEFzc2lnbm1lbnQoY29uZmlndXJhdGlvbiwgYXNzaWdubWVudCwgc3VibWlzc2lvbik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbml0TWFpbigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBCbG9ja1B5IG9iamVjdCBieSBpbml0aWFsaXppbmcgaXRzIGludGVyZmFjZSxcbiAgICAgKiBtb2RlbCwgYW5kIGNvbXBvbmVudHMuXG4gICAgICpcbiAgICAgKi9cbiAgICBpbml0TWFpbigpIHtcbiAgICAgICAgdGhpcy5pbml0VXRpbGl0aWVzKCk7XG4gICAgICAgIHRoaXMuaW5pdE1vZGVsTWV0aG9kcygpO1xuICAgICAgICB0aGlzLnR1cm5PbkhhY2tzKCk7XG4gICAgICAgIHRoaXMuaW5pdEludGVyZmFjZSgpO1xuICAgICAgICB0aGlzLmFwcGx5TW9kZWwoKTtcbiAgICAgICAgdGhpcy5pbml0Q29tcG9uZW50cygpO1xuICAgICAgICB0aGlzLm1ha2VFeHRyYVN1YnNjcmlwdGlvbnMoKTtcbiAgICAgICAgdGhpcy5zdGFydCgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYSBkZWZhdWx0IHZhbHVlIG9yXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIHRoZSBrZXkgdG8gbG9vayB1cCBhIHZhbHVlIGZvclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0VmFsdWUgLSBpZiB0aGUga2V5IGlzIG5vdCBmb3VuZCBhbnl3aGVyZSwgdXNlIHRoaXMgdmFsdWVcbiAgICAgKi9cbiAgICBnZXRTZXR0aW5nKGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGhpcy5pbml0aWFsQ29uZmlndXJhdGlvbl8pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmluaXRpYWxDb25maWd1cmF0aW9uX1trZXldO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubG9jYWxTZXR0aW5nc18uaGFzKGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsU2V0dGluZ3NfLmdldChrZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBtb2RlbCB0byBpdHMgZGVmYXVsdHMuXG4gICAgICpcbiAgICAgKiBDYXRlZ29yaWVzOlxuICAgICAqICAgKiB1c2VyOiB2YWx1ZXMgZm9yIHRoZSBjdXJyZW50IHVzZXIgKHN0b3JlZCB0byBzZXJ2ZXIpXG4gICAgICogICAqIGFzc2lnbm1lbnQ6IHZhbHVlcyBmb3IgdGhlIGN1cnJlbnQgYXNzaWdubWVudCAoc3RvcmVkIHRvIHNlcnZlcilcbiAgICAgKiAgICogc3VibWlzc2lvbjogdmFsdWVzIGZvciB0aGUgY3VycmVudCBzdWJtaXNzaW9uIChzdG9yZWQgdG8gc2VydmVyKVxuICAgICAqICAgKiBkaXNwbGF5OiBmbGFncyByZWxhdGVkIHRvIGN1cnJlbnQgdmlzaWJpbGl0eSAoc3RvcmVkIHRvIGxvY2FsU2V0dGluZ3MpXG4gICAgICogICAqIHN0YXR1czogbWVzc2FnZXMgcmVsYXRlZCB0byBjdXJyZW50IHN0YXR1cyAobm90IHN0b3JlZClcbiAgICAgKiAgICogZXhlY3V0aW9uOiB2YWx1ZXMgcmVsYXRlZCB0byBsYXN0IHJ1biAobm90IHN0b3JlZClcbiAgICAgKiAgICogY29uZmlndXJhdGlvbjogY29uc3RhbnQgdmFsdWVzIHJlbGF0ZWQgdG8gc2V0dXAgKG5vdCBzdG9yZWQpXG4gICAgICovXG4gICAgaW5pdE1vZGVsKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgLy8gQ29ubmVjdCB0byBsb2NhbCBzdG9yYWdlXG4gICAgICAgIHRoaXMubG9jYWxTZXR0aW5nc18gPSBuZXcgTG9jYWxTdG9yYWdlV3JhcHBlcihcImxvY2FsU2V0dGluZ3NcIik7XG4gICAgICAgIHRoaXMuaW5pdGlhbENvbmZpZ3VyYXRpb25fID0gY29uZmlndXJhdGlvbjtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhjb25maWd1cmF0aW9uLCBjb25maWd1cmF0aW9uW1wic3VibWlzc2lvbi5jb2RlXCJdLCBjb25maWd1cmF0aW9uW1wicGFydElkXCJdLCBleHRyYWN0UGFydChjb25maWd1cmF0aW9uW1wic3VibWlzc2lvbi5jb2RlXCJdIHx8IFwiXCIsIGNvbmZpZ3VyYXRpb25bXCJwYXJ0SWRcIl0pKTtcblxuICAgICAgICB0aGlzLm1vZGVsID0ge1xuICAgICAgICAgICAgdXNlcjoge1xuICAgICAgICAgICAgICAgIGlkOiBrby5vYnNlcnZhYmxlKGNvbmZpZ3VyYXRpb25bXCJ1c2VyLmlkXCJdKSxcbiAgICAgICAgICAgICAgICBuYW1lOiBrby5vYnNlcnZhYmxlKGNvbmZpZ3VyYXRpb25bXCJ1c2VyLm5hbWVcIl0pLFxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFdoZXRoZXIgeW91IGFyZSBhbiBPd25lciAoY2FuIG1vZGlmeSB0aGUgYXNzaWdubWVudCksIEdyYWRlciAoY2FuIHZpZXdcbiAgICAgICAgICAgICAgICAgKiB0aGUgYXNzaWdubWVudHMnIGluZm9ybWF0aW9uKSBvciBTdHVkZW50IChjYW4gbm90IHNlZSBhbnkgaW5zdHJ1Y3RvciBzdHVmZikuXG4gICAgICAgICAgICAgICAgICogQHR5cGUge2Jvb2x9XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgcm9sZToga28ub2JzZXJ2YWJsZSh0aGlzLmdldFNldHRpbmcoXCJ1c2VyLnJvbGVcIiwgXCJvd25lclwiKSksXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogQ3VycmVudCBjb3Vyc2UgZm9yIHRoaXMgdXNlclxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGNvdXJzZUlkOiBrby5vYnNlcnZhYmxlKGNvbmZpZ3VyYXRpb25bXCJ1c2VyLmNvdXJzZV9pZFwiXSksXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogQ3VycmVudCBhc3NpZ25tZW50IGdyb3VwIHRoYXQgdGhpcyB1c2VyIGlzIGluc2lkZVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGdyb3VwSWQ6IGtvLm9ic2VydmFibGUoY29uZmlndXJhdGlvbltcInVzZXIuZ3JvdXBfaWRcIl0pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXNzaWdubWVudDoge1xuICAgICAgICAgICAgICAgIGlkOiBrby5vYnNlcnZhYmxlKG51bGwpLFxuICAgICAgICAgICAgICAgIG5hbWU6IGtvLm9ic2VydmFibGUoXCJTY3JhdGNoIENhbnZhc1wiKSxcbiAgICAgICAgICAgICAgICBpbnN0cnVjdGlvbnM6IGtvLm9ic2VydmFibGUoXCJXZWxjb21lIHRvIEJsb2NrUHkuIFRyeSBlZGl0aW5nIGFuZCBydW5uaW5nIHRoZSBjb2RlIGJlbG93LlwiKSxcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBUaGUgaHVtYW4tZnJpZW5kbHkgVVJMIHRvIHVzZSBhcyBhIHNob3J0Y3V0IGZvciB0aGlzIGFzc2lnbm1lbnRcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB1cmw6IGtvLm9ic2VydmFibGUoXCJcIiksXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogd2FybmluZyBtZXNzYWdlIGlmIG1hemVcbiAgICAgICAgICAgICAgICB0eXBlOiBrby5vYnNlcnZhYmxlKEFzc2lnbWVudFR5cGUuQkxPQ0tQWSksXG4gICAgICAgICAgICAgICAgcG9pbnRzOiBrby5vYnNlcnZhYmxlKG51bGwpLFxuICAgICAgICAgICAgICAgIHN0YXJ0aW5nQ29kZToga28ub2JzZXJ2YWJsZShjb25maWd1cmF0aW9uW1wiYXNzaWdubWVudC5zdGFydGluZ19jb2RlXCJdIHx8IFwiXCIpLFxuICAgICAgICAgICAgICAgIG9uUnVuOiBrby5vYnNlcnZhYmxlKGNvbmZpZ3VyYXRpb25bXCJhc3NpZ25tZW50Lm9uX3J1blwiXSB8fCBcIlwiKSxcbiAgICAgICAgICAgICAgICBvbkNoYW5nZToga28ub2JzZXJ2YWJsZShjb25maWd1cmF0aW9uW1wiYXNzaWdubWVudC5vbl9jaGFuZ2VcIl0gfHwgbnVsbCksXG4gICAgICAgICAgICAgICAgb25FdmFsOiBrby5vYnNlcnZhYmxlKGNvbmZpZ3VyYXRpb25bXCJhc3NpZ25tZW50Lm9uX2V2YWxcIl0gfHwgbnVsbCksXG4gICAgICAgICAgICAgICAgZXh0cmFJbnN0cnVjdG9yRmlsZXM6IGtvLm9ic2VydmFibGVBcnJheShsb2FkQ29uY2F0ZW5hdGVkRmlsZShjb25maWd1cmF0aW9uW1wiYXNzaWdubWVudC5leHRyYV9pbnN0cnVjdG9yX2ZpbGVzXCJdKSB8fCBbXSksXG4gICAgICAgICAgICAgICAgZXh0cmFTdGFydGluZ0ZpbGVzOiBrby5vYnNlcnZhYmxlQXJyYXkoW10pLFxuICAgICAgICAgICAgICAgIGZvcmtlZElkOiBrby5vYnNlcnZhYmxlKG51bGwpLFxuICAgICAgICAgICAgICAgIGZvcmtlZFZlcnNpb246IGtvLm9ic2VydmFibGUobnVsbCksXG4gICAgICAgICAgICAgICAgb3duZXJJZDoga28ub2JzZXJ2YWJsZShudWxsKSxcbiAgICAgICAgICAgICAgICBjb3Vyc2VJZDoga28ub2JzZXJ2YWJsZShudWxsKSxcbiAgICAgICAgICAgICAgICB2ZXJzaW9uOiBrby5vYnNlcnZhYmxlKG51bGwpLFxuICAgICAgICAgICAgICAgIHRhZ3M6IGtvLm9ic2VydmFibGVBcnJheShbXSksXG4gICAgICAgICAgICAgICAgc2FtcGxlU3VibWlzc2lvbnM6IGtvLm9ic2VydmFibGVBcnJheShbXSksXG4gICAgICAgICAgICAgICAgcmV2aWV3ZWQ6IGtvLm9ic2VydmFibGUoY29uZmlndXJhdGlvbltcImFzc2lnbm1lbnQucmV2aWV3ZWRcIl0pLFxuICAgICAgICAgICAgICAgIHB1YmxpYzoga28ub2JzZXJ2YWJsZShjb25maWd1cmF0aW9uW1wiYXNzaWdubWVudC5wdWJsaWNcIl0pLFxuICAgICAgICAgICAgICAgIGhpZGRlbjoga28ub2JzZXJ2YWJsZShjb25maWd1cmF0aW9uW1wiYXNzaWdubWVudC5oaWRkZW5cIl0pLFxuICAgICAgICAgICAgICAgIGlwUmFuZ2VzOiBrby5vYnNlcnZhYmxlKGNvbmZpZ3VyYXRpb25bXCJhc3NpZ25tZW50LmlwX3Jhbmdlc1wiXSksXG4gICAgICAgICAgICAgICAgc2V0dGluZ3M6IG1ha2VBc3NpZ25tZW50U2V0dGluZ3NNb2RlbChjb25maWd1cmF0aW9uKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN1Ym1pc3Npb246IHtcbiAgICAgICAgICAgICAgICBpZDoga28ub2JzZXJ2YWJsZShudWxsKSxcbiAgICAgICAgICAgICAgICBjb2RlOiBrby5vYnNlcnZhYmxlKGV4dHJhY3RQYXJ0KGNvbmZpZ3VyYXRpb25bXCJzdWJtaXNzaW9uLmNvZGVcIl0gfHwgXCJcIiwgY29uZmlndXJhdGlvbltcInBhcnRJZFwiXSkgfHwgXCJcIiksXG4gICAgICAgICAgICAgICAgZXh0cmFGaWxlczoga28ub2JzZXJ2YWJsZUFycmF5KFtdKSxcbiAgICAgICAgICAgICAgICB1cmw6IGtvLm9ic2VydmFibGUoXCJcIiksXG4gICAgICAgICAgICAgICAgZW5kcG9pbnQ6IGtvLm9ic2VydmFibGUoXCJcIiksXG4gICAgICAgICAgICAgICAgc2NvcmU6IGtvLm9ic2VydmFibGUoMCksXG4gICAgICAgICAgICAgICAgY29ycmVjdDoga28ub2JzZXJ2YWJsZShmYWxzZSksXG4gICAgICAgICAgICAgICAgLy8gYXNzaWdubWVudElkIGluZmVycmVkIGZyb20gYXNzaWdubWVudC5pZFxuICAgICAgICAgICAgICAgIC8vIGNvdXJzZUlkIGluZmVycmVkIGZyb20gdXNlci5jb3Vyc2VJZFxuICAgICAgICAgICAgICAgIC8vIHVzZXJJZCBpbmZlcnJlZCBmcm9tIHVzZXIuaWRcbiAgICAgICAgICAgICAgICAvLyBhc3NpZ25tZW50VmVyc2lvbiBpbmZlcnJlZCBmcm9tIGFzc2lnbm1lbnQudmVyc2lvblxuICAgICAgICAgICAgICAgIHZlcnNpb246IGtvLm9ic2VydmFibGUoMCksXG4gICAgICAgICAgICAgICAgc3VibWlzc2lvblN0YXR1czoga28ub2JzZXJ2YWJsZShcIlN0YXJ0ZWRcIiksXG4gICAgICAgICAgICAgICAgZ3JhZGluZ1N0YXR1czoga28ub2JzZXJ2YWJsZShcIk5vdFJlYWR5XCIpLFxuICAgICAgICAgICAgICAgIG93bmVySWQ6IGtvLm9ic2VydmFibGUobnVsbClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkaXNwbGF5OiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogQ3VycmVudGx5IHZpc2libGUgRmlsZSwgaWYgYXBwbGljYWJsZVxuICAgICAgICAgICAgICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IGtvLm9ic2VydmFibGUobnVsbCksXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogV2hldGhlciBvciBub3QgdG8gYmUgcHJlc2VudGVkIHdpdGggdGhlIGluc3RydWN0b3Igc2V0dGluZ3MgYW5kIGZpbGVzXG4gICAgICAgICAgICAgICAgICogQHR5cGUge2Jvb2x9XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgaW5zdHJ1Y3Rvcjoga28ub2JzZXJ2YWJsZShcIlwiK3RoaXMuZ2V0U2V0dGluZyhcImRpc3BsYXkuaW5zdHJ1Y3RvclwiLCBcImZhbHNlXCIpPT09XCJ0cnVlXCIpLFxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFdoZXRoZXIgb3Igbm90IHRvIHByZXZlbnQgdGhlIHByaW50ZXIgZnJvbSBzaG93aW5nIHRoaW5nc1xuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIG11dGVQcmludGVyOiBrby5vYnNlcnZhYmxlKGZhbHNlKSxcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiAoUHl0aG9uIFZpZXdzKSBUaGUgY3VycmVudCBlZGl0b3IgbW9kZS5cbiAgICAgICAgICAgICAgICAgKiBAdHlwZSB7RGlzcGxheU1vZGVzfVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHB5dGhvbk1vZGU6IGtvLm9ic2VydmFibGUodGhpcy5nZXRTZXR0aW5nKFwiZGlzcGxheS5weXRob24ubW9kZVwiLCBEaXNwbGF5TW9kZXMuVEVYVCkpLFxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFdoZXRoZXIgb3Igbm90IEhpc3RvcnkgbW9kZSBpcyBlbmdhZ2VkLlxuICAgICAgICAgICAgICAgICAqIEB0eXBlIHtib29sfVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGhpc3RvcnlNb2RlOiBrby5vYnNlcnZhYmxlKGZhbHNlKSxcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBXaGV0aGVyIG9yIG5vdCB0byBiZSBhdXRvLXNhdmluZyBjaGFuZ2VzIGluIFB5dGhvbiBlZGl0b3JcbiAgICAgICAgICAgICAgICAgKiBJZiBhbiBpbnRlZ2VyLCBzcGVjaWZpZXMgdGhlIGRlbGF5IHRoYXQgc2hvdWxkIGJlIHVzZWQgKG1pY3Jvc2Vjb25kcykuXG4gICAgICAgICAgICAgICAgICogVGhpcyBpcyBuZXZlciBvbiBpbiBub24tUHl0aG9uIGVkaXRvcnMuXG4gICAgICAgICAgICAgICAgICogQHR5cGUge2Jvb2x8aW50fVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGF1dG9TYXZlOiBrby5vYnNlcnZhYmxlKHRydWUpLFxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFdoZXRoZXIgb3Igbm90IHRoZSBjb25zb2xlIGlzIGZ1bGwgd2lkdGggYW5kIGZlZWRiYWNrIGlzIGhpZGRlblxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGJpZ0NvbnNvbGU6IGtvLm9ic2VydmFibGUoZmFsc2UpLFxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFRoZSBoZWlnaHQgdG8gdXNlIGZvciB0aGUgY29uc29sZS5cbiAgICAgICAgICAgICAgICAgKiAgICBJZiBudWxsLCB0aGVuIGxldCB0aGUgaGVpZ2h0IHJlbWFpbiB1bmNoYW5nZWRcbiAgICAgICAgICAgICAgICAgKiAgICBJZiBhIG51bWJlciwgdGhlbiB0aGVcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBwcmV2aW91c0NvbnNvbGVIZWlnaHQ6IGtvLm9ic2VydmFibGUobnVsbCksXG4gICAgICAgICAgICAgICAgY3VycmVudENvbnNvbGVIZWlnaHQ6IGtvLm9ic2VydmFibGUobnVsbCksXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogV2hpY2ggcGFuZWwgdG8gc2hvdyBpbiB0aGUgc2Vjb25kIHJvdydzIHNlY29uZCBjb2x1bW5cbiAgICAgICAgICAgICAgICAgKiBAdHlwZSB7U2Vjb25kUm93U2Vjb25kUGFuZWxPcHRpb25zfVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHNlY29uZFJvd1NlY29uZFBhbmVsOiBrby5vYnNlcnZhYmxlKFNlY29uZFJvd1NlY29uZFBhbmVsT3B0aW9ucy5GRUVEQkFDSyksXG4gICAgICAgICAgICAgICAgcHJldmlvdXNTZWNvbmRSb3dTZWNvbmRQYW5lbDoga28ub2JzZXJ2YWJsZShudWxsKSxcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBXaGV0aGVyIG9yIG5vdCB0byBiZSB0cmFjaW5nIHRoZSBjb2RlIHJpZ2h0IG5vd1xuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHRyYWNlRXhlY3V0aW9uOiBrby5vYnNlcnZhYmxlKGZhbHNlKSxcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBUaGUgbGlzdCBvZiBwcm9taXNlcyB0byBzdGlsbCByZXNvbHZlIHdoaWxlIGxvYWRpbmcgZGF0YXNldHNcbiAgICAgICAgICAgICAgICAgKiBAdHlwZSB7QXJyYXk8UHJvbWlzZT59XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgbG9hZGluZ0RhdGFzZXRzOiBrby5vYnNlcnZhYmxlQXJyYXkoW10pLFxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFRoZSB0ZW1wb3JhcnkgY2hhbmdlZCB2YWx1ZSBvZiB0aGUgaW5zdHJ1Y3Rpb25zIGhhdmUgYmVlbiBjaGFuZ2VkIGZyb20gd2hhdCBpcyBpbiB0aGUgYXNzaWdubWVudFxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGNoYW5nZWRJbnN0cnVjdGlvbnM6IGtvLm9ic2VydmFibGUobnVsbCksXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogQSBob2xkZXIgZm9yIHRoZSB0aW1lciB0byB0cmlnZ2VyIG9uLWNoYW5nZXNcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB0cmlnZ2VyT25DaGFuZ2U6IG51bGwsXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogV2hldGhlciB0aGUgY3VycmVudCBmZWVkYmFjayBhbmQgb3V0cHV0IGNvcnJlc3BvbmRzIHRvIHRoZSBjdXJyZW50IHN1Ym1pc3Npb24uXG4gICAgICAgICAgICAgICAgICogVGhpcyB3b3VsZCBiZSBmYWxzZSBpZiB0aGVyZSBpcyBubyBmZWVkYmFjay9vdXRwdXQgKGkuZS4sIGNvZGUgaGFzIG5vdCBiZWVuIHJ1biksXG4gICAgICAgICAgICAgICAgICogb3IgaWYgdGhlIHVzZXIgaGFzIG1vZGlmaWVkIHRoZSBzdWJtaXNzaW9uIGFmdGVyIHRoZSBsYXN0IHJ1biAoZS5nLiwgYnkgZWRpdGluZ1xuICAgICAgICAgICAgICAgICAqIHRoZSB0ZXh0KS5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBkaXJ0eVN1Ym1pc3Npb246IGtvLm9ic2VydmFibGUodHJ1ZSksXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogIFdoZXRoZXIgb3Igbm90IHRvIG1ha2UgdGhlIEJsb2NrUHkgZWxlbWVudCBpbiBGVUxMIFNDUkVFTiBtb2RlLiBTYWRseSwgbm90IGZ1bGxzY3JlZW5cbiAgICAgICAgICAgICAgICAgKiAgd2l0aGluIHRoZSB3aW5kb3csIGJ1dCBGVUxMIFNDUkVFTi4gVmVyeSBhZ2dyZXNzaXZlLlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGZ1bGxzY3JlZW46IGtvLm9ic2VydmFibGUoZmFsc2UpLFxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFVzZXItc3VwcGxpZWQgcGFzc2NvZGUgdG8gY29tcGFyZSBvbiB0aGUgc2VydmVyIGFnYWluc3QgdGhlIGN1cnJlbnQgcGFzc2NvZGUuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgcGFzc2NvZGU6IGtvLm9ic2VydmFibGUoXCJcIiksXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogV2hldGhlciBvciBub3QgdG8gY2xlYXIgb3V0IGlucHV0cyBhZnRlciBhIHJ1bi9vbl9ydW4gY3ljbGVcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBjbGVhcklucHV0czoga28ub2JzZXJ2YWJsZSh0cnVlKSxcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBXaGV0aGVyIG9yIG5vdCBpbWFnZXMgc2hvdWxkIGJlIHJlbmRlcmVkICh0cnVlKSwgb3IganVzdCBzdGF5IGFzIHRleHQgY29kZSAoZmFsc2UpLlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHJlbmRlckltYWdlczoga28ub2JzZXJ2YWJsZSh0cnVlKSxcbiAgICAgICAgICAgICAgICBlZGl0b3JWZXJzaW9uOiBFRElUT1JfVkVSU0lPTixcbiAgICAgICAgICAgICAgICByZWFkT25seToga28ub2JzZXJ2YWJsZSh0aGlzLmdldFNldHRpbmcoXCJkaXNwbGF5LnJlYWRfb25seVwiLCBcImZhbHNlXCIpLnRvU3RyaW5nKCk9PT1cInRydWVcIiksXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogVXBsb2FkZWQgZmlsZXMgYXJlIG9uZXMgdGhhdCBoYXZlIGJlZW4gbGlzdGVkIGJ5IHRoZSByZW1vdGVcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB1cGxvYWRlZEZpbGVzOiBrby5vYnNlcnZhYmxlKG51bGwpLFxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIEJhY2t1cCBjb3B5IG9mIHRoZSBsYXRlc3Qga25vd24gZnVsbCBjb2RlIGZvciB0aGUgU3VibWlzc2lvbi4gVGhpcyBpcyByZWxldmFudCBpZiB0aGVyZSB3YXMgYVxuICAgICAgICAgICAgICAgICAqIFBhcnRJRCBzcGVjaWZpZWQsIGluIHdoaWNoIGNhc2UgdGhlIHN1Ym1pc3Npb24uY29kZSBpbiB0aGUgbW9kZWwgaXMgb25seSBzaG93aW5nIHdoYXQgd2Uga25vd1xuICAgICAgICAgICAgICAgICAqIGxvY2FsbHkuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgYmFja3VwU3VibWlzc2lvbkNvZGU6IGtvLm9ic2VydmFibGUoY29uZmlndXJhdGlvbltcInN1Ym1pc3Npb24uY29kZVwiXSB8fCBcIlwiKSxcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBDb250cm9scyB0aGUgcmF0aW5nIHN5c3RlbVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHNob3dSYXRpbmc6IGtvLm9ic2VydmFibGUodGhpcy5nZXRTZXR0aW5nKFwiZGlzcGxheS5zaG93UmF0aW5nXCIsIFwidHJ1ZVwiKS50b1N0cmluZygpPT09XCJ0cnVlXCIpLFxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFdoZXRoZXIgdGhlIHN0dWRlbnQgaGFzIHJhdGVkIHRoaXMgY3VycmVudCBmZWVkYmFja1xuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGhhc1JhdGVkOiBrby5vYnNlcnZhYmxlKGZhbHNlKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGF0dXM6IHtcbiAgICAgICAgICAgICAgICAvLyBAdHlwZSB7U2VydmVyU3RhdHVzfVxuICAgICAgICAgICAgICAgIGxvYWRBc3NpZ25tZW50OiBrby5vYnNlcnZhYmxlKFN0YXR1c1N0YXRlLlJFQURZKSxcbiAgICAgICAgICAgICAgICBsb2FkQXNzaWdubWVudE1lc3NhZ2U6IGtvLm9ic2VydmFibGUoXCJcIiksXG4gICAgICAgICAgICAgICAgLy8gQHR5cGUge1NlcnZlclN0YXR1c31cbiAgICAgICAgICAgICAgICBsb2FkSGlzdG9yeToga28ub2JzZXJ2YWJsZShTdGF0dXNTdGF0ZS5SRUFEWSksXG4gICAgICAgICAgICAgICAgbG9hZEhpc3RvcnlNZXNzYWdlOiBrby5vYnNlcnZhYmxlKFwiXCIpLFxuICAgICAgICAgICAgICAgIC8vIEB0eXBlIHtTZXJ2ZXJTdGF0dXN9XG4gICAgICAgICAgICAgICAgbG9hZEZpbGU6IGtvLm9ic2VydmFibGUoU3RhdHVzU3RhdGUuUkVBRFkpLFxuICAgICAgICAgICAgICAgIGxvYWRGaWxlTWVzc2FnZToga28ub2JzZXJ2YWJsZShcIlwiKSxcbiAgICAgICAgICAgICAgICAvLyBAdHlwZSB7U2VydmVyU3RhdHVzfVxuICAgICAgICAgICAgICAgIGxvYWREYXRhc2V0OiBrby5vYnNlcnZhYmxlKFN0YXR1c1N0YXRlLlJFQURZKSxcbiAgICAgICAgICAgICAgICBsb2FkRGF0YXNldE1lc3NhZ2U6IGtvLm9ic2VydmFibGUoXCJcIiksXG4gICAgICAgICAgICAgICAgLy8gQHR5cGUge1NlcnZlclN0YXR1c31cbiAgICAgICAgICAgICAgICBsb2dFdmVudDoga28ub2JzZXJ2YWJsZShTdGF0dXNTdGF0ZS5SRUFEWSksXG4gICAgICAgICAgICAgICAgbG9nRXZlbnRNZXNzYWdlOiBrby5vYnNlcnZhYmxlKFwiXCIpLFxuICAgICAgICAgICAgICAgIC8vIEB0eXBlIHtTZXJ2ZXJTdGF0dXN9XG4gICAgICAgICAgICAgICAgc2F2ZUltYWdlOiBrby5vYnNlcnZhYmxlKFN0YXR1c1N0YXRlLlJFQURZKSxcbiAgICAgICAgICAgICAgICBzYXZlSW1hZ2VNZXNzYWdlOiBrby5vYnNlcnZhYmxlKFwiXCIpLFxuICAgICAgICAgICAgICAgIC8vIEB0eXBlIHtTZXJ2ZXJTdGF0dXN9XG4gICAgICAgICAgICAgICAgc2F2ZUZpbGU6IGtvLm9ic2VydmFibGUoU3RhdHVzU3RhdGUuUkVBRFkpLFxuICAgICAgICAgICAgICAgIHNhdmVGaWxlTWVzc2FnZToga28ub2JzZXJ2YWJsZShcIlwiKSxcbiAgICAgICAgICAgICAgICAvLyBAdHlwZSB7U2VydmVyU3RhdHVzfVxuICAgICAgICAgICAgICAgIHNhdmVBc3NpZ25tZW50OiBrby5vYnNlcnZhYmxlKFN0YXR1c1N0YXRlLlJFQURZKSxcbiAgICAgICAgICAgICAgICBzYXZlQXNzaWdubWVudE1lc3NhZ2U6IGtvLm9ic2VydmFibGUoXCJcIiksXG4gICAgICAgICAgICAgICAgLy8gQHR5cGUge1NlcnZlclN0YXR1c31cbiAgICAgICAgICAgICAgICB1cGRhdGVTdWJtaXNzaW9uOiBrby5vYnNlcnZhYmxlKFN0YXR1c1N0YXRlLlJFQURZKSxcbiAgICAgICAgICAgICAgICB1cGRhdGVTdWJtaXNzaW9uTWVzc2FnZToga28ub2JzZXJ2YWJsZShcIlwiKSxcbiAgICAgICAgICAgICAgICAvLyBAdHlwZSB7U2VydmVyU3RhdHVzfVxuICAgICAgICAgICAgICAgIHVwZGF0ZVN1Ym1pc3Npb25TdGF0dXM6IGtvLm9ic2VydmFibGUoU3RhdHVzU3RhdGUuUkVBRFkpLFxuICAgICAgICAgICAgICAgIHVwZGF0ZVN1Ym1pc3Npb25TdGF0dXNNZXNzYWdlOiBrby5vYnNlcnZhYmxlKFwiXCIpLFxuICAgICAgICAgICAgICAgIC8vIEB0eXBlIHtTZXJ2ZXJTdGF0dXN9XG4gICAgICAgICAgICAgICAgbGlzdFVwbG9hZGVkRmlsZXM6IGtvLm9ic2VydmFibGUoU3RhdHVzU3RhdGUuUkVBRFkpLFxuICAgICAgICAgICAgICAgIGxpc3RVcGxvYWRlZEZpbGVzTWVzc2FnZToga28ub2JzZXJ2YWJsZShcIlwiKSxcbiAgICAgICAgICAgICAgICAvLyBAdHlwZSB7U2VydmVyU3RhdHVzfVxuICAgICAgICAgICAgICAgIGRvd25sb2FkRmlsZToga28ub2JzZXJ2YWJsZShTdGF0dXNTdGF0ZS5SRUFEWSksXG4gICAgICAgICAgICAgICAgZG93bmxvYWRGaWxlTWVzc2FnZToga28ub2JzZXJ2YWJsZShcIlwiKSxcbiAgICAgICAgICAgICAgICAvLyBAdHlwZSB7U2VydmVyU3RhdHVzfVxuICAgICAgICAgICAgICAgIHVwbG9hZEZpbGU6IGtvLm9ic2VydmFibGUoU3RhdHVzU3RhdGUuUkVBRFkpLFxuICAgICAgICAgICAgICAgIHVwbG9hZEZpbGVNZXNzYWdlOiBrby5vYnNlcnZhYmxlKFwiXCIpLFxuICAgICAgICAgICAgICAgIC8vIEB0eXBlIHtTZXJ2ZXJTdGF0dXN9XG4gICAgICAgICAgICAgICAgcmVuYW1lRmlsZToga28ub2JzZXJ2YWJsZShTdGF0dXNTdGF0ZS5SRUFEWSksXG4gICAgICAgICAgICAgICAgcmVuYW1lRmlsZU1lc3NhZ2U6IGtvLm9ic2VydmFibGUoXCJcIiksXG4gICAgICAgICAgICAgICAgLy8gQHR5cGUge1NlcnZlclN0YXR1c31cbiAgICAgICAgICAgICAgICBleHRlcm5hbEFQSToga28ub2JzZXJ2YWJsZShTdGF0dXNTdGF0ZS5SRUFEWSksXG4gICAgICAgICAgICAgICAgZXh0ZXJuYWxBUElNZXNzYWdlOiBrby5vYnNlcnZhYmxlKFwiXCIpLFxuICAgICAgICAgICAgICAgIC8vIEB0eXBlIHtTZXJ2ZXJTdGF0dXN9XG4gICAgICAgICAgICAgICAgb25FeGVjdXRpb246IGtvLm9ic2VydmFibGUoU3RhdHVzU3RhdGUuUkVBRFkpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGV4ZWN1dGlvbjoge1xuICAgICAgICAgICAgICAgIC8vIEluZm9ybWF0aW9uIGFib3V0IGluLXByb2dyZXNzIGV4ZWN1dGlvbnNcbiAgICAgICAgICAgICAgICByZXBvcnRzOiB7fSxcbiAgICAgICAgICAgICAgICAvLyBsaXN0IG9mIE91dHB1dCBvYmplY3RzXG4gICAgICAgICAgICAgICAgb3V0cHV0OiBrby5vYnNlcnZhYmxlQXJyYXkoW10pLFxuICAgICAgICAgICAgICAgIC8vIExpc3Qgb2YgaW5wdXR0ZWQgc3RyaW5nc1xuICAgICAgICAgICAgICAgIGlucHV0OiBrby5vYnNlcnZhYmxlQXJyYXkoW10pLFxuICAgICAgICAgICAgICAgIGlucHV0SW5kZXg6IGtvLm9ic2VydmFibGUoMCksXG4gICAgICAgICAgICAgICAgLy8gSW5mb3JtYXRpb24gcmVsYXRlZCB0byBhIHN0dWRlbnQgcnVuXG4gICAgICAgICAgICAgICAgc3R1ZGVudDoge1xuICAgICAgICAgICAgICAgICAgICAvLyBzdHI6IHRoZSBmaWxlbmFtZSB0aGF0IHdhcyBsYXN0IGV4ZWN1dGVkIGFuZCBpcyBhc3NvY2lhdGVkIHdpdGggdGhlc2UgcmVzdWx0c1xuICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZToga28ub2JzZXJ2YWJsZShudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgLy8gaW50ZWdlclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3RlcDoga28ub2JzZXJ2YWJsZShudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgLy8gaW50ZWdlclxuICAgICAgICAgICAgICAgICAgICBsYXN0U3RlcDoga28ub2JzZXJ2YWJsZShudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgLy8gaW50ZWdlclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50TGluZToga28ub2JzZXJ2YWJsZShudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgbGFzdExpbmU6IGtvLm9ic2VydmFibGUoMCksXG4gICAgICAgICAgICAgICAgICAgIC8vIGFycmF5IG9mIHNpbXBsZSBvYmplY3RzXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUcmFjZURhdGE6IGtvLm9ic2VydmFibGVBcnJheShbXSksXG4gICAgICAgICAgICAgICAgICAgIC8vIGludGVnZXJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFRyYWNlU3RlcDoga28ub2JzZXJ2YWJsZSgwKSxcbiAgICAgICAgICAgICAgICAgICAgLy8gQWN0dWFsIGV4ZWN1dGlvbiByZXN1bHRzXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHM6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbHM6IGtvLm9ic2VydmFibGUobnVsbCksXG4gICAgICAgICAgICAgICAgICAgIGNhbGxzOiB7fVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5zdHJ1Y3Rvcjoge1xuICAgICAgICAgICAgICAgICAgICBnbG9iYWxzOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBzeXNtb2R1bGVzOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC8vIEluZm9ybWF0aW9uIHJlbGF0ZWQgdG8gZmVlZGJhY2sgZnJvbSB0aGUgaW5zdHJ1Y3RvciBydW5cbiAgICAgICAgICAgICAgICBmZWVkYmFjazoge1xuICAgICAgICAgICAgICAgICAgICAvLyBzdHIgKG1hcmtkb3duKVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBrby5vYnNlcnZhYmxlKFwiUmVhZHlcIiksXG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBrby5vYnNlcnZhYmxlKG51bGwpLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDoga28ub2JzZXJ2YWJsZShudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgaGlkZGVuOiBrby5vYnNlcnZhYmxlKGZhbHNlKSxcbiAgICAgICAgICAgICAgICAgICAgbGluZXNFcnJvcjoga28ub2JzZXJ2YWJsZUFycmF5KFtdKSxcbiAgICAgICAgICAgICAgICAgICAgbGluZXNVbmNvdmVyZWQ6IGtvLm9ic2VydmFibGVBcnJheShbXSksXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSByZXN1bHRzIG9mIHRoZSBsYXN0IGV4ZWN1dGlvblxuICAgICAgICAgICAgICAgICAgICByZXN1bHRzOiBudWxsLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29uZmlndXJhdGlvbjoge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIEZ1bmN0aW9ucyB0byBmaXJlIHdoZW4gY2VydGFpbiBldmVudHMgb2NjdXJcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBjYWxsYmFja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFdoZW4gdGhlIHN0dWRlbnQgZ2V0cyBhIHN1Y2Nlc3NcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIFwic3VjY2Vzc1wiOiB0aGlzLmluaXRpYWxDb25maWd1cmF0aW9uX1tcImNhbGxiYWNrLnN1Y2Nlc3NcIl0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBXaGV0aGVyIG9yIG5vdCB0aGUgc2VydmVyIGlzIGNvbm5lY3RlZC5cbiAgICAgICAgICAgICAgICAgKiBAdHlwZSB7Ym9vbH1cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBzZXJ2ZXJDb25uZWN0ZWQ6IGtvLm9ic2VydmFibGUodGhpcy5nZXRTZXR0aW5nKFwic2VydmVyLmNvbm5lY3RlZFwiLCB0cnVlKSksXG4gICAgICAgICAgICAgICAgLy8gc3RyaW5nXG4gICAgICAgICAgICAgICAgYmxvY2tseVBhdGg6IHRoaXMuaW5pdGlhbENvbmZpZ3VyYXRpb25fW1wiYmxvY2tseS5wYXRoXCJdLFxuICAgICAgICAgICAgICAgIC8vIHN0cmluZ1xuICAgICAgICAgICAgICAgIGF0dGFjaG1lbnRQb2ludDogdGhpcy5pbml0aWFsQ29uZmlndXJhdGlvbl9bXCJhdHRhY2htZW50LnBvaW50XCJdLFxuICAgICAgICAgICAgICAgIC8vIEpRdWVyeSBvYmplY3RcbiAgICAgICAgICAgICAgICBjb250YWluZXI6IG51bGwsXG4gICAgICAgICAgICAgICAgLy8gTWFwcyBjb2RlcyAoJ2xvZ19ldmVudCcsICdzYXZlX2NvZGUnKSB0byBVUkxzXG4gICAgICAgICAgICAgICAgdXJsczogdGhpcy5pbml0aWFsQ29uZmlndXJhdGlvbl9bXCJ1cmxzXCJdIHx8IHt9LFxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFVuaXF1ZSBQYXJ0IElEIHRoYXQgY2FuIGRpc3Rpbmd1aXNoIHRoaXMgZWRpdG9yIGluc3RhbmNlJ3MgcmVnaW9uIG9mIHRoZSBhc3NpZ25tZW50LlxuICAgICAgICAgICAgICAgICAqIEl0J3MgcG9zc2libGUgdGhhdCBvdGhlciBlZGl0b3JzIG1heSBiZSBhdHRhY2hlZCB0byBhIGRpZmZlcmVudCBQYXJ0IG9mIHRoZSBzYW1lIGFzc2lnbm1uZXQsIG9uIHRoZVxuICAgICAgICAgICAgICAgICAqIHNhbWUgcGFnZS5cbiAgICAgICAgICAgICAgICAgKiAqKi9cbiAgICAgICAgICAgICAgICBwYXJ0SWQ6IGtvLm9ic2VydmFibGUoY29uZmlndXJhdGlvbltcInBhcnRJZFwiXSB8fCBcIlwiKSxcbiAgICAgICAgICAgICAgICBhY2Nlc3NUb2tlbjoga28ub2JzZXJ2YWJsZShjb25maWd1cmF0aW9uW1wiYWNjZXNzX3Rva2VuXCJdIHx8IHVuZGVmaW5lZCksXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIGludGVyZmFjZVxuICAgICAqL1xuICAgIGluaXRJbnRlcmZhY2UoKSB7XG4gICAgICAgIGxldCBjb25zdGFudHMgPSB0aGlzLm1vZGVsLmNvbmZpZ3VyYXRpb247XG4gICAgICAgIGxldCBndWkgPSBtYWtlSW50ZXJmYWNlKHRoaXMpO1xuICAgICAgICBjb25zdGFudHMuY29udGFpbmVyID0gJChjb25zdGFudHMuYXR0YWNobWVudFBvaW50KS5odG1sKCQoZ3VpKSk7XG4gICAgfTtcblxuICAgIGxvYWRBc3NpZ25tZW50KGFzc2lnbm1lbnRfaWQpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnRzLnNlcnZlci5sb2FkQXNzaWdubWVudChhc3NpZ25tZW50X2lkKTtcbiAgICB9XG5cbiAgICBsb2FkVGFncyh0YWdzKSB7XG4gICAgICAgIC8vIEFscmVhZHkgYSBKU09OIGxpc3QgcmVwcmVzZW50aW5nIHRhZ3NcbiAgICB9XG5cbiAgICBsb2FkU2FtcGxlU3VibWlzc2lvbnMoc2FtcGxlcykge1xuICAgICAgICAvLyBBbHJlYWR5IGEgSlNPTiBsaXN0IHJlcHJlc2VudGluZyBzYW1wbGVzXG4gICAgfVxuXG4gICAgbG9hZE5vU3VibWlzc2lvbihhc3NpZ25tZW50KSB7XG4gICAgICAgIHRoaXMubW9kZWwuc3VibWlzc2lvbi5jb2RlKGFzc2lnbm1lbnQuc3RhcnRpbmdfY29kZSk7XG4gICAgICAgIGxvYWRDb25jYXRlbmF0ZWRGaWxlKGFzc2lnbm1lbnQuZXh0cmFfc3RhcnRpbmdfZmlsZXMsIHRoaXMubW9kZWwuc3VibWlzc2lvbi5leHRyYUZpbGVzKTtcbiAgICB9XG5cbiAgICBsb2FkU3VibWlzc2lvbihzdWJtaXNzaW9uLCBhc3NpZ25tZW50KSB7XG4gICAgICAgIGlmICghc3VibWlzc2lvbikge1xuICAgICAgICAgICAgLy8gVE9ETzogU2NhcmllciBcIllvdSBhcmUgbm90IGxvZ2dlZCBpbiBtZXNzYWdlXCJcbiAgICAgICAgICAgIHRoaXMubG9hZE5vU3VibWlzc2lvbihhc3NpZ25tZW50KTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPOiBXaGF0IGlmIHN1Ym1pc3Npb25zJyBhc3NpZ25tZW50IHZlcnNpb24gYW5kIHRoZSBhc3NpZ25tZW50cycgdmVyc2lvbiBjb25mbGljdD9cbiAgICAgICAgdGhpcy5tb2RlbC5zdWJtaXNzaW9uLmlkKHN1Ym1pc3Npb24uaWQpO1xuICAgICAgICB0aGlzLm1vZGVsLmRpc3BsYXkuYmFja3VwU3VibWlzc2lvbkNvZGUoc3VibWlzc2lvbi5jb2RlKTtcbiAgICAgICAgdGhpcy5tb2RlbC5zdWJtaXNzaW9uLmNvZGUoZXh0cmFjdFBhcnQoc3VibWlzc2lvbi5jb2RlLCB0aGlzLm1vZGVsLmNvbmZpZ3VyYXRpb24ucGFydElkKCkpIHx8IFwiXCIpO1xuICAgICAgICB0aGlzLm1vZGVsLnN1Ym1pc3Npb24uY29ycmVjdChzdWJtaXNzaW9uLmNvcnJlY3QpO1xuICAgICAgICB0aGlzLm1vZGVsLnN1Ym1pc3Npb24uc2NvcmUoc3VibWlzc2lvbi5zY29yZSk7XG4gICAgICAgIHRoaXMubW9kZWwuc3VibWlzc2lvbi5lbmRwb2ludChzdWJtaXNzaW9uLmVuZHBvaW50KTtcbiAgICAgICAgdGhpcy5tb2RlbC5zdWJtaXNzaW9uLnVybChzdWJtaXNzaW9uLnVybCk7XG4gICAgICAgIHRoaXMubW9kZWwuc3VibWlzc2lvbi52ZXJzaW9uKHN1Ym1pc3Npb24udmVyc2lvbik7XG4gICAgICAgIHRoaXMubW9kZWwuc3VibWlzc2lvbi5ncmFkaW5nU3RhdHVzKHN1Ym1pc3Npb24uZ3JhZGluZ19zdGF0dXMgfHwgU3VibWlzc2lvblN0YXR1c2VzLlVOS05PV04pO1xuICAgICAgICB0aGlzLm1vZGVsLnN1Ym1pc3Npb24uc3VibWlzc2lvblN0YXR1cyhzdWJtaXNzaW9uLnN1Ym1pc3Npb25fc3RhdHVzIHx8IFN1Ym1pc3Npb25TdGF0dXNlcy5VTktOT1dOKTtcbiAgICAgICAgdGhpcy5tb2RlbC5zdWJtaXNzaW9uLm93bmVySWQoc3VibWlzc2lvbi51c2VyX2lkKTtcbiAgICAgICAgdGhpcy5tb2RlbC51c2VyLmNvdXJzZUlkKHN1Ym1pc3Npb24uY291cnNlX2lkKTtcbiAgICAgICAgbG9hZENvbmNhdGVuYXRlZEZpbGUoc3VibWlzc2lvbi5leHRyYV9maWxlcywgdGhpcy5tb2RlbC5zdWJtaXNzaW9uLmV4dHJhRmlsZXMpO1xuICAgIH1cblxuICAgIGxvYWRBc3NpZ25tZW50RGF0YV8oZGF0YSkge1xuICAgICAgICBjb25zb2xlLmRlYnVnKGRhdGEpO1xuICAgICAgICB0aGlzLnJlc2V0SW50ZXJmYWNlKCk7XG4gICAgICAgIHRoaXMuY29tcG9uZW50cy5maWxlU3lzdGVtLmRpc21vdW50RXh0cmFGaWxlcygpO1xuICAgICAgICBsZXQgd2FzU2VydmVyQ29ubmVjdGVkID0gdGhpcy5tb2RlbC5jb25maWd1cmF0aW9uLnNlcnZlckNvbm5lY3RlZCgpO1xuICAgICAgICB0aGlzLm1vZGVsLmNvbmZpZ3VyYXRpb24uc2VydmVyQ29ubmVjdGVkKGZhbHNlKTtcbiAgICAgICAgbGV0IGFzc2lnbm1lbnQgPSBkYXRhLmFzc2lnbm1lbnQ7XG4gICAgICAgIHRoaXMubW9kZWwuYXNzaWdubWVudC5pZChhc3NpZ25tZW50LmlkKTtcbiAgICAgICAgdGhpcy5tb2RlbC5hc3NpZ25tZW50LnZlcnNpb24oYXNzaWdubWVudC52ZXJzaW9uKTtcbiAgICAgICAgdGhpcy5tb2RlbC5hc3NpZ25tZW50LmNvdXJzZUlkKGFzc2lnbm1lbnQuY291cnNlX2lkKTtcbiAgICAgICAgdGhpcy5tb2RlbC5hc3NpZ25tZW50LmZvcmtlZElkKGFzc2lnbm1lbnQuZm9ya2VkX2lkKTtcbiAgICAgICAgdGhpcy5tb2RlbC5hc3NpZ25tZW50LmZvcmtlZFZlcnNpb24oYXNzaWdubWVudC5mb3JrZWRfdmVyc2lvbik7XG4gICAgICAgIHRoaXMubW9kZWwuYXNzaWdubWVudC5oaWRkZW4oYXNzaWdubWVudC5oaWRkZW4pO1xuICAgICAgICB0aGlzLm1vZGVsLmFzc2lnbm1lbnQucmV2aWV3ZWQoYXNzaWdubWVudC5yZXZpZXdlZCk7XG4gICAgICAgIHRoaXMubW9kZWwuYXNzaWdubWVudC5wdWJsaWMoYXNzaWdubWVudC5wdWJsaWMpO1xuICAgICAgICB0aGlzLm1vZGVsLmFzc2lnbm1lbnQudHlwZShhc3NpZ25tZW50LnR5cGUpO1xuICAgICAgICB0aGlzLm1vZGVsLmFzc2lnbm1lbnQudXJsKGFzc2lnbm1lbnQudXJsKTtcbiAgICAgICAgdGhpcy5tb2RlbC5hc3NpZ25tZW50LnBvaW50cyhhc3NpZ25tZW50LnBvaW50cyk7XG4gICAgICAgIHRoaXMubW9kZWwuYXNzaWdubWVudC5pcFJhbmdlcyhhc3NpZ25tZW50LmlwX3Jhbmdlcyk7XG4gICAgICAgIHRoaXMubW9kZWwuYXNzaWdubWVudC5pbnN0cnVjdGlvbnMoYXNzaWdubWVudC5pbnN0cnVjdGlvbnMpO1xuICAgICAgICB0aGlzLm1vZGVsLmFzc2lnbm1lbnQubmFtZShhc3NpZ25tZW50Lm5hbWUpO1xuICAgICAgICB0aGlzLm1vZGVsLmFzc2lnbm1lbnQub25DaGFuZ2UoYXNzaWdubWVudC5vbl9jaGFuZ2UgfHwgbnVsbCk7XG4gICAgICAgIGlmIChhc3NpZ25tZW50Lm9uX2NoYW5nZSkge1xuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRzLmZpbGVTeXN0ZW0ubmV3RmlsZShcIiFvbl9jaGFuZ2UucHlcIiwgYXNzaWdubWVudC5vbl9jaGFuZ2UpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubW9kZWwuYXNzaWdubWVudC5vbkV2YWwoYXNzaWdubWVudC5vbl9ldmFsIHx8IG51bGwpO1xuICAgICAgICBpZiAoYXNzaWdubWVudC5vbl9ldmFsKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudHMuZmlsZVN5c3RlbS5uZXdGaWxlKFwiIW9uX2V2YWwucHlcIiwgYXNzaWdubWVudC5vbl9ldmFsKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1vZGVsLmFzc2lnbm1lbnQub25SdW4oYXNzaWdubWVudC5vbl9ydW4pO1xuICAgICAgICB0aGlzLm1vZGVsLmFzc2lnbm1lbnQuc3RhcnRpbmdDb2RlKGFzc2lnbm1lbnQuc3RhcnRpbmdfY29kZSk7XG4gICAgICAgIHRoaXMubW9kZWwuYXNzaWdubWVudC5vd25lcklkKGFzc2lnbm1lbnQub3duZXJfaWQpO1xuICAgICAgICB0aGlzLmxvYWRUYWdzKGFzc2lnbm1lbnQudGFncyk7XG4gICAgICAgIHRoaXMubG9hZFNhbXBsZVN1Ym1pc3Npb25zKGFzc2lnbm1lbnQuc2FtcGxlX3N1Ym1pc3Npb25zKTtcbiAgICAgICAgbG9hZENvbmNhdGVuYXRlZEZpbGUoYXNzaWdubWVudC5leHRyYV9pbnN0cnVjdG9yX2ZpbGVzLCB0aGlzLm1vZGVsLmFzc2lnbm1lbnQuZXh0cmFJbnN0cnVjdG9yRmlsZXMpO1xuICAgICAgICBsb2FkQ29uY2F0ZW5hdGVkRmlsZShhc3NpZ25tZW50LmV4dHJhX3N0YXJ0aW5nX2ZpbGVzLCB0aGlzLm1vZGVsLmFzc2lnbm1lbnQuZXh0cmFTdGFydGluZ0ZpbGVzKTtcbiAgICAgICAgbG9hZEFzc2lnbm1lbnRTZXR0aW5ncyh0aGlzLm1vZGVsLCBhc3NpZ25tZW50LnNldHRpbmdzKTtcbiAgICAgICAgdGhpcy5sb2FkU3VibWlzc2lvbihkYXRhLnN1Ym1pc3Npb24sIGFzc2lnbm1lbnQpO1xuICAgICAgICB0aGlzLm1vZGVsLmRpc3BsYXkuZGlydHlTdWJtaXNzaW9uKHRydWUpO1xuICAgICAgICB0aGlzLm1vZGVsLmRpc3BsYXkuY2hhbmdlZEluc3RydWN0aW9ucyhudWxsKTtcbiAgICAgICAgdGhpcy5tb2RlbC5jb25maWd1cmF0aW9uLnNlcnZlckNvbm5lY3RlZCh3YXNTZXJ2ZXJDb25uZWN0ZWQpO1xuICAgICAgICB0aGlzLmNvbXBvbmVudHMuY29yZ2lzLmxvYWREYXRhc2V0cyh0cnVlKTtcbiAgICAgICAgdGhpcy5jb21wb25lbnRzLnB5dGhvbkVkaXRvci5ibS5yZWZyZXNoKCk7XG4gICAgICAgIHRoaXMuY29tcG9uZW50cy5maWxlU3lzdGVtLmxvYWRSZW1vdGVGaWxlcygpO1xuXG4gICAgICAgIHRoaXMuY29tcG9uZW50cy5zZXJ2ZXIuc2V0U3RhdHVzKFwic2F2ZUZpbGVcIiwgU3RhdHVzU3RhdGUuUkVBRFkpO1xuICAgIH1cblxuICAgIGluaXRNb2RlbE1ldGhvZHMoKSB7XG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgbGV0IG1vZGVsID0gdGhpcy5tb2RlbDtcbiAgICAgICAgbW9kZWwudWkgPSB7XG4gICAgICAgICAgICBzbWFsbExheW91dDoga28ucHVyZUNvbXB1dGVkKCgpPT5cbiAgICAgICAgICAgICAgICAhbW9kZWwuZGlzcGxheS5pbnN0cnVjdG9yKCkgJiYgbW9kZWwuYXNzaWdubWVudC5zZXR0aW5ncy5zbWFsbExheW91dCgpKSxcbiAgICAgICAgICAgIHJvbGU6IHtcbiAgICAgICAgICAgICAgICBpc0dyYWRlcjoga28ucHVyZUNvbXB1dGVkKCgpPT5cbiAgICAgICAgICAgICAgICAgICAgbW9kZWwudXNlci5yb2xlKCkgPT09IFwib3duZXJcIiB8fCBtb2RlbC51c2VyLnJvbGUoKSA9PT0gXCJncmFkZXJcIilcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbnN0cnVjdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBpc0NoYW5nZWQ6IGtvLnB1cmVDb21wdXRlZCgoKSA9PlxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5kaXNwbGF5LmNoYW5nZWRJbnN0cnVjdGlvbnMoKSAhPT0gbnVsbFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgY3VycmVudDoga28ucHVyZUNvbXB1dGVkKCgpID0+XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLnVpLmluc3RydWN0aW9ucy5pc0NoYW5nZWQoKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnV0aWxpdGllcy5tYXJrZG93bihtb2RlbC5kaXNwbGF5LmNoYW5nZWRJbnN0cnVjdGlvbnMoKSkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi51dGlsaXRpZXMubWFya2Rvd24obW9kZWwuYXNzaWdubWVudC5pbnN0cnVjdGlvbnMoKSlcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIHJlc2V0OiAoKSA9PlxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5kaXNwbGF5LmNoYW5nZWRJbnN0cnVjdGlvbnMobnVsbClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtZW51OiB7XG4gICAgICAgICAgICAgICAgdmlzaWJsZToga28ucHVyZUNvbXB1dGVkKFxuICAgICAgICAgICAgICAgICAgICAoKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuZGlzcGxheS5pbnN0cnVjdG9yKCkgfHwgIW1vZGVsLmFzc2lnbm1lbnQuc2V0dGluZ3Mub25seUludGVyYWN0aXZlKClcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIHRleHRGdWxsc2NyZWVuOiBrby5wdXJlQ29tcHV0ZWQoKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgKG1vZGVsLmRpc3BsYXkuZnVsbHNjcmVlbigpKSA/IFwiZmEtY29tcHJlc3MtYXJyb3dzLWFsdFwiIDogXCJmYS1leHBhbmQtYXJyb3dzLWFsdFwiXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBjbGlja0Z1bGxzY3JlZW46ICgpID0+e1xuICAgICAgICAgICAgICAgICAgICBtb2RlbC5kaXNwbGF5LmZ1bGxzY3JlZW4oIW1vZGVsLmRpc3BsYXkuZnVsbHNjcmVlbigpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVkaXRJbnB1dHM6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wb25lbnRzLmRpYWxvZy5FRElUX0lOUFVUUygpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9nZ2xlSW1hZ2VzOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtb2RlbC5kaXNwbGF5LnJlbmRlckltYWdlcygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbXBvbmVudHMucHl0aG9uRWRpdG9yLmJtLnRleHRFZGl0b3IuZGlzYWJsZUltYWdlcygpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jb21wb25lbnRzLnB5dGhvbkVkaXRvci5ibS50ZXh0RWRpdG9yLmVuYWJsZUltYWdlcygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLmRpc3BsYXkucmVuZGVySW1hZ2VzKCFtb2RlbC5kaXNwbGF5LnJlbmRlckltYWdlcygpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhbk1hcmtTdWJtaXR0ZWQ6IGtvLnB1cmVDb21wdXRlZCgoKSA9PlxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5hc3NpZ25tZW50LmhpZGRlbigpIHx8IG1vZGVsLmFzc2lnbm1lbnQucmV2aWV3ZWQoKSB8fFxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5hc3NpZ25tZW50LnNldHRpbmdzLmNhbkNsb3NlKClcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIHRleHRNYXJrU3VibWl0dGVkOiBrby5wdXJlQ29tcHV0ZWQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAobW9kZWwudWkubWVudS5pc0NvbXBsZXRlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9kZWwudXNlci5ncm91cElkKCkgPyBcIlByb2JsZW0gY2xvc2VkXCIgOiBcIkFzc2lnbm1lbnQgY2xvc2VkXCI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobW9kZWwudWkubWVudS5pc1N1Ym1pdHRlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJSZW9wZW4gZm9yIGVkaXRpbmdcIjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtb2RlbC5kaXNwbGF5LmRpcnR5U3VibWlzc2lvbigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJSdW5cIjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbW9kZWwuYXNzaWdubWVudC5oaWRkZW4oKSAmJiBtb2RlbC5zdWJtaXNzaW9uLmNvcnJlY3QoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlN1Ym1pdFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJTdWJtaXQgZWFybHlcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGNsaWNrTWFya1N1Ym1pdHRlZDogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAobW9kZWwudWkubWVudS5pc0NvbXBsZXRlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIllvdSBjYW5ub3QgcmVvcGVuIGNsb3NlZCBhc3NpZ25tZW50cy4gQ29udGFjdCBhIGdyYWRlciFcIik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobW9kZWwudWkubWVudS5pc1N1Ym1pdHRlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbXBvbmVudHMuc2VydmVyLnVwZGF0ZVN1Ym1pc3Npb25TdGF0dXMoXCJpblByb2dyZXNzXCIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1vZGVsLmRpc3BsYXkuZGlydHlTdWJtaXNzaW9uKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY29tcG9uZW50cy5lbmdpbmUuZGVsYXllZFJ1bigpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jb21wb25lbnRzLnNlcnZlci51cGRhdGVTdWJtaXNzaW9uU3RhdHVzKFwiU3VibWl0dGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpc1N1Ym1pdHRlZDoga28ucHVyZUNvbXB1dGVkKCgpID0+XG4gICAgICAgICAgICAgICAgICAgIChtb2RlbC5hc3NpZ25tZW50LnJldmlld2VkKCkgfHwgbW9kZWwuYXNzaWdubWVudC5zZXR0aW5ncy5jYW5DbG9zZSgpKSAmJlxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJtaXNzaW9uLnN1Ym1pc3Npb25TdGF0dXMoKS50b0xvd2VyQ2FzZSgpID09PSBcInN1Ym1pdHRlZFwiXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBpc0NvbXBsZXRlZDoga28ucHVyZUNvbXB1dGVkKCgpPT5cbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3VibWlzc2lvbi5zdWJtaXNzaW9uU3RhdHVzKCkudG9Mb3dlckNhc2UoKSA9PT0gXCJjb21wbGV0ZWRcIlxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgc2hvd1F1ZXVlZElucHV0czoga28ucHVyZUNvbXB1dGVkKCgpID0+XG4gICAgICAgICAgICAgICAgICAgICFtb2RlbC5hc3NpZ25tZW50LnNldHRpbmdzLmhpZGVRdWV1ZWRJbnB1dHMoKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgc2hvd0Nsb2NrOiBrby5wdXJlQ29tcHV0ZWQoKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgIW1vZGVsLmFzc2lnbm1lbnQuc2V0dGluZ3MuaGFzQ2xvY2soKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZWNvbmRSb3c6IHtcbiAgICAgICAgICAgICAgICB3aWR0aDoga28ucHVyZUNvbXB1dGVkKCgpPT5cbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuZGlzcGxheS5pbnN0cnVjdG9yKCkgfHwgIW1vZGVsLmFzc2lnbm1lbnQuc2V0dGluZ3Muc21hbGxMYXlvdXQoKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbC1tZC0xMlwiIDogXCJjb2wtbWQtNVwiXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBoaWRlVHJhY2VCdXR0b246IGtvLnB1cmVDb21wdXRlZCgoKT0+XG4gICAgICAgICAgICAgICAgICAgICFtb2RlbC5kaXNwbGF5Lmluc3RydWN0b3IoKSAmJiBtb2RlbC5hc3NpZ25tZW50LnNldHRpbmdzLmhpZGVUcmFjZUJ1dHRvbigpXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBpc0FsbFZpc2libGU6IGtvLnB1cmVDb21wdXRlZCgoKSA9PlxuICAgICAgICAgICAgICAgICAgICAhbW9kZWwuYXNzaWdubWVudC5zZXR0aW5ncy5oaWRlTWlkZGxlUGFuZWwoKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgaXNGZWVkYmFja1Zpc2libGU6IGtvLnB1cmVDb21wdXRlZCgoKSA9PlxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5kaXNwbGF5LnNlY29uZFJvd1NlY29uZFBhbmVsKCkgPT09IFNlY29uZFJvd1NlY29uZFBhbmVsT3B0aW9ucy5GRUVEQkFDS1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgaXNUcmFjZVZpc2libGU6IGtvLnB1cmVDb21wdXRlZCgoKSA9PlxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5kaXNwbGF5LnNlY29uZFJvd1NlY29uZFBhbmVsKCkgPT09IFNlY29uZFJvd1NlY29uZFBhbmVsT3B0aW9ucy5UUkFDRVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgaXNDb25zb2xlU2hvd1Zpc2libGU6IGtvLnB1cmVDb21wdXRlZCgoKSA9PlxuICAgICAgICAgICAgICAgICAgICBtb2RlbC51aS5zZWNvbmRSb3cuaXNGZWVkYmFja1Zpc2libGUoKSB8fCBtb2RlbC51aS5zZWNvbmRSb3cuaXNUcmFjZVZpc2libGUoKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgc3dpdGNoTGFiZWw6IGtvLnB1cmVDb21wdXRlZCgoKSA9PlxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5leGVjdXRpb24uc3R1ZGVudC5sYXN0U3RlcCgpICE9PSBudWxsID9cbiAgICAgICAgICAgICAgICAgICAgICAgIFwiVmlldyBUcmFjZVwiIDogXCJcIlxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgYWR2YW5jZVN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJyZW50UGFuZWwgPSBtb2RlbC5kaXNwbGF5LnNlY29uZFJvd1NlY29uZFBhbmVsO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFBhbmVsKCkgPT09IFNlY29uZFJvd1NlY29uZFBhbmVsT3B0aW9ucy5OT05FKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UGFuZWwoU2Vjb25kUm93U2Vjb25kUGFuZWxPcHRpb25zLkZFRURCQUNLKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50UGFuZWwoKSA9PT0gU2Vjb25kUm93U2Vjb25kUGFuZWxPcHRpb25zLlRSQUNFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UGFuZWwoU2Vjb25kUm93U2Vjb25kUGFuZWxPcHRpb25zLk5PTkUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1vZGVsLmV4ZWN1dGlvbi5zdHVkZW50Lmxhc3RTdGVwKCkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQYW5lbChTZWNvbmRSb3dTZWNvbmRQYW5lbE9wdGlvbnMuVFJBQ0UpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBhbmVsKFNlY29uZFJvd1NlY29uZFBhbmVsT3B0aW9ucy5OT05FKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbWFrZVdpZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFBhbmVsID0gbW9kZWwuZGlzcGxheS5zZWNvbmRSb3dTZWNvbmRQYW5lbDtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuZGlzcGxheS5wcmV2aW91c1NlY29uZFJvd1NlY29uZFBhbmVsKGN1cnJlbnRQYW5lbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFBhbmVsKFNlY29uZFJvd1NlY29uZFBhbmVsT3B0aW9ucy5OT05FKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlc3RvcmVQYW5lbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9sZFBhbmVsID0gbW9kZWwuZGlzcGxheS5wcmV2aW91c1NlY29uZFJvd1NlY29uZFBhbmVsO1xuICAgICAgICAgICAgICAgICAgICBpZiAob2xkUGFuZWwoKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuZGlzcGxheS5zZWNvbmRSb3dTZWNvbmRQYW5lbChvbGRQYW5lbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sZFBhbmVsKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnNvbGU6IHtcbiAgICAgICAgICAgICAgICBzaXplOiBrby5wdXJlQ29tcHV0ZWQoKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgKCFtb2RlbC5kaXNwbGF5Lmluc3RydWN0b3IoKSAmJiBtb2RlbC5hc3NpZ25tZW50LnNldHRpbmdzLnNtYWxsTGF5b3V0KCkpIHx8XG4gICAgICAgICAgICAgICAgICAgIChtb2RlbC5kaXNwbGF5LnNlY29uZFJvd1NlY29uZFBhbmVsKCkgPT09IFNlY29uZFJvd1NlY29uZFBhbmVsT3B0aW9ucy5OT05FKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbC1tZC0xMlwiIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29sLW1kLTZcIlxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgaGlkZUV2YWx1YXRlOiBrby5wdXJlQ29tcHV0ZWQoICgpPT5cbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuYXNzaWdubWVudC5zZXR0aW5ncy5oaWRlRXZhbHVhdGUoKSB8fCAhbW9kZWwuZXhlY3V0aW9uLnN0dWRlbnQuZ2xvYmFscygpIHx8XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLnN0YXR1cy5vbkV4ZWN1dGlvbigpID09PSBTdGF0dXNTdGF0ZS5BQ1RJVkVcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmVlZGJhY2s6IHtcbiAgICAgICAgICAgICAgICBiYWRnZToga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGVsLmV4ZWN1dGlvbi5mZWVkYmFjay5jYXRlZ29yeSgpID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJsYWJlbC1ub25lXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChtb2RlbC5leGVjdXRpb24uZmVlZGJhY2suY2F0ZWdvcnkoKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm5vbmVcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJsYWJlbC1ub25lXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwicnVudGltZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImxhYmVsLXJ1bnRpbWUtZXJyb3JcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzeW50YXhcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJsYWJlbC1zeW50YXgtZXJyb3JcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlZGl0b3JcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJsYWJlbC1zeW50YXgtZXJyb3JcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpbnRlcm5hbFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImxhYmVsLWludGVybmFsLWVycm9yXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwic2VtYW50aWNcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhbmFseXplclwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImxhYmVsLXNlbWFudGljLWVycm9yXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZmVlZGJhY2tcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpbnN0cnVjdG9yXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwibGFiZWwtZmVlZGJhY2stZXJyb3JcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjb21wbGV0ZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImxhYmVsLXByb2JsZW0tY29tcGxldGVcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpbnN0cnVjdGlvbnNcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJsYWJlbC1pbnN0cnVjdGlvbnNcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJubyBlcnJvcnNcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJsYWJlbC1uby1lcnJvcnNcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobW9kZWwuZXhlY3V0aW9uLmZlZWRiYWNrLmNhdGVnb3J5KCkgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobW9kZWwuZXhlY3V0aW9uLmZlZWRiYWNrLmNhdGVnb3J5KCkudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJub25lXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwicnVudGltZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlJ1bnRpbWUgRXJyb3JcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzeW50YXhcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJTeW50YXggRXJyb3JcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlZGl0b3JcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJFZGl0b3IgRXJyb3JcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpbnRlcm5hbFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkludGVybmFsIEVycm9yXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwic2VtYW50aWNcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhbmFseXplclwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkFsZ29yaXRobSBFcnJvclwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImZlZWRiYWNrXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaW5zdHJ1Y3Rpb25zXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiSW5zdHJ1Y3Rpb25zXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaW5zdHJ1Y3RvclwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkluY29ycmVjdCBBbnN3ZXJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjb21wbGV0ZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkNvbXBsZXRlXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibm8gZXJyb3JzXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiTm8gZXJyb3JzXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICByZXNldFNjb3JlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1Ym1pc3Npb24uc2NvcmUoMCk7XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1Ym1pc3Npb24uY29ycmVjdChmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY29tcG9uZW50cy5zZXJ2ZXIudXBkYXRlU3VibWlzc2lvbihtb2RlbC5zdWJtaXNzaW9uLnNjb3JlKCksIG1vZGVsLnN1Ym1pc3Npb24uY29ycmVjdCgpLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHByb3ZpZGVSYXRpbmdzOiBrby5wdXJlQ29tcHV0ZWQoKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgIW1vZGVsLmFzc2lnbm1lbnQuaGlkZGVuKClcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIGZsaXBSYXRpbmc6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3U3RhdGUgPSAhbW9kZWwuZGlzcGxheS5zaG93UmF0aW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLmRpc3BsYXkuc2hvd1JhdGluZyhuZXdTdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYubG9jYWxTZXR0aW5nc18uc2V0KFwiZGlzcGxheS5zaG93UmF0aW5nXCIsIG5ld1N0YXRlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmF0ZTogKHJhdGluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbXBvbmVudHMuc2VydmVyLmxvZ0V2ZW50KFwiWC1SYXRpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5leGVjdXRpb24uZmVlZGJhY2suY2F0ZWdvcnkoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5leGVjdXRpb24uZmVlZGJhY2subGFiZWwoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXRpbmcpO1xuICAgICAgICAgICAgICAgICAgICBtb2RlbC5jb25maWd1cmF0aW9uLmNvbnRhaW5lci5maW5kKFwiLmJsb2NrcHktcmF0aW5nXCIpLmZhZGVPdXQoNTAwLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuZmFkZUluKDUwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5kaXNwbGF5Lmhhc1JhdGVkKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGhhbmtZb3UgPSBtb2RlbC5jb25maWd1cmF0aW9uLmNvbnRhaW5lci5maW5kKFwiLmJsb2NrcHktZmVlZGJhY2stdGhhbmsteW91XCIpO1xuICAgICAgICAgICAgICAgICAgICB0aGFua1lvdS5hZGRDbGFzcyhcInNob3dcIik7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhbmtZb3UucmVtb3ZlQ2xhc3MoXCJzaG93XCIpO1xuICAgICAgICAgICAgICAgICAgICB9LCAxMDAwKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhhc1JhdGVkQ2xhc3M6IGtvLnB1cmVDb21wdXRlZCgoKSA9PlxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5kaXNwbGF5Lmhhc1JhdGVkKCkgPyBcImZhclwiIDogXCJmYXNcIlxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHJhY2U6IHtcbiAgICAgICAgICAgICAgICBoYXM6IGtvLnB1cmVDb21wdXRlZCgoKSA9PlxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5leGVjdXRpb24uc3R1ZGVudC5jdXJyZW50VHJhY2VEYXRhKCkgIT09IG51bGxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIGhpZ2hsaWdodGVkTGluZToga28ucHVyZUNvbXB1dGVkKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGVsLmRpc3BsYXkuc2Vjb25kUm93U2Vjb25kUGFuZWwoKSAhPT0gU2Vjb25kUm93U2Vjb25kUGFuZWxPcHRpb25zLlRSQUNFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0ZXAgPSBtb2RlbC5leGVjdXRpb24uc3R1ZGVudC5jdXJyZW50VHJhY2VTdGVwKCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBsYXN0U3RlcCA9IG1vZGVsLmV4ZWN1dGlvbi5zdHVkZW50Lmxhc3RTdGVwKCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0cmFjZURhdGEgPSBtb2RlbC5leGVjdXRpb24uc3R1ZGVudC5jdXJyZW50VHJhY2VEYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJhY2VEYXRhIHx8IHN0ZXAgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGVwID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3RyYWNlRGF0YVtzdGVwLTFdLmxpbmVdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbGluZToga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0ZXAgPSBtb2RlbC5leGVjdXRpb24uc3R1ZGVudC5jdXJyZW50VHJhY2VTdGVwKCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBsYXN0U3RlcCA9IG1vZGVsLmV4ZWN1dGlvbi5zdHVkZW50Lmxhc3RTdGVwKCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0cmFjZURhdGEgPSBtb2RlbC5leGVjdXRpb24uc3R1ZGVudC5jdXJyZW50VHJhY2VEYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJhY2VEYXRhIHx8IHN0ZXAgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIk5vIHRyYWNlXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0ZXAgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkJlZm9yZSBydW5cIjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGVwID09PSBsYXN0U3RlcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiRmluaXNoZWQgcnVuXCI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiB3aHkgYXJlIHRoZXNlIG51bWJlcnMgd29ua3k/XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJMaW5lIFwiKyh0cmFjZURhdGFbc3RlcC0xXS5saW5lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGFzdDoga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0ZXAgPSBtb2RlbC5leGVjdXRpb24uc3R1ZGVudC5jdXJyZW50VHJhY2VTdGVwKCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBsYXN0U3RlcCA9IG1vZGVsLmV4ZWN1dGlvbi5zdHVkZW50Lmxhc3RTdGVwKCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0cmFjZURhdGEgPSBtb2RlbC5leGVjdXRpb24uc3R1ZGVudC5jdXJyZW50VHJhY2VEYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJhY2VEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJOb3RoaW5nIHRyYWNlZC5cIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHN0ZXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJTdGFydGluZyBleGVjdXRpb25cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgbGFzdFN0ZXA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtb2RlbC5leGVjdXRpb24ucmVwb3J0cy5zdHVkZW50LnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiRXhlY3V0aW9uIGhhbHRlZCAoZXJyb3IpXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkZpbmlzaGVkIGV4ZWN1dGlvblwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJDdXJyZW50IHN0ZXA6IFwiICsgQVNUX0RFU0NSSVBUSU9OU1t0cmFjZURhdGFbc3RlcC0xXS5hc3RdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgZmlyc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuZXhlY3V0aW9uLnN0dWRlbnQuY3VycmVudFRyYWNlU3RlcCgwKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJhY2t3YXJkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwcmV2aW91cyA9IE1hdGgubWF4KDAsIG1vZGVsLmV4ZWN1dGlvbi5zdHVkZW50LmN1cnJlbnRUcmFjZVN0ZXAoKSAtIDEpO1xuICAgICAgICAgICAgICAgICAgICBtb2RlbC5leGVjdXRpb24uc3R1ZGVudC5jdXJyZW50VHJhY2VTdGVwKHByZXZpb3VzKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZvcndhcmQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5leHQgPSBNYXRoLm1pbihtb2RlbC5leGVjdXRpb24uc3R1ZGVudC5sYXN0U3RlcCgpLCBtb2RlbC5leGVjdXRpb24uc3R1ZGVudC5jdXJyZW50VHJhY2VTdGVwKCkgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuZXhlY3V0aW9uLnN0dWRlbnQuY3VycmVudFRyYWNlU3RlcChuZXh0KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxhc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuZXhlY3V0aW9uLnN0dWRlbnQuY3VycmVudFRyYWNlU3RlcChtb2RlbC5leGVjdXRpb24uc3R1ZGVudC5sYXN0U3RlcCgpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRhdGE6IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzdGVwID0gbW9kZWwuZXhlY3V0aW9uLnN0dWRlbnQuY3VycmVudFRyYWNlU3RlcCgpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbGFzdFN0ZXAgPSBtb2RlbC5leGVjdXRpb24uc3R1ZGVudC5sYXN0U3RlcCgpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdHJhY2VEYXRhID0gbW9kZWwuZXhlY3V0aW9uLnN0dWRlbnQuY3VycmVudFRyYWNlRGF0YSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRyYWNlRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoc3RlcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgbGFzdFN0ZXA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyYWNlRGF0YVtzdGVwIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cmFjZURhdGFbc3RlcF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWxlczoge1xuICAgICAgICAgICAgICAgIHZpc2libGU6IGtvLnB1cmVDb21wdXRlZCgoKSA9PlxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5kaXNwbGF5Lmluc3RydWN0b3IoKSB8fCAhbW9kZWwuYXNzaWdubWVudC5zZXR0aW5ncy5oaWRlRmlsZXMoKSB8fCBtb2RlbC5hc3NpZ25tZW50LnNldHRpbmdzLnByZWxvYWRBbGxGaWxlcygpXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBhZGRJc1Zpc2libGU6IGtvLnB1cmVDb21wdXRlZCgoKSA9PlxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5kaXNwbGF5Lmluc3RydWN0b3IoKSB8fCAhbW9kZWwuYXNzaWdubWVudC5zZXR0aW5ncy5oaWRlRmlsZXMoKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgd2lkdGg6IGtvLnB1cmVDb21wdXRlZCgoKT0+XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLmRpc3BsYXkuaW5zdHJ1Y3RvcigpIHx8ICFtb2RlbC5hc3NpZ25tZW50LnNldHRpbmdzLnNtYWxsTGF5b3V0KCkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb2wtbWQtMTJcIiA6IFwiY29sLW1kLTZcIlxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgaGFzQ29udGVudHM6IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChwYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYW5zd2VyLnB5XCI6IHJldHVybiBtb2RlbC5zdWJtaXNzaW9uLmNvZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIhaW5zdHJ1Y3Rpb25zLm1kXCI6IHJldHVybiBtb2RlbC5hc3NpZ25tZW50Lmluc3RydWN0aW9ucygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIiFvbl9jaGFuZ2UucHlcIjogcmV0dXJuIG1vZGVsLmFzc2lnbm1lbnQub25DaGFuZ2UoKSAhPT0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIhb25fZXZhbC5weVwiOiByZXR1cm4gbW9kZWwuYXNzaWdubWVudC5vbkV2YWwoKSAhPT0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCI/bW9ja191cmxzLmJsb2NrcHlcIjogcmV0dXJuIG1vZGVsLmFzc2lnbm1lbnQuZXh0cmFJbnN0cnVjdG9yRmlsZXMoKS5zb21lKGZpbGUgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlLmZpbGVuYW1lKCkgPT09IFwiP21vY2tfdXJscy5ibG9ja3B5XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImltYWdlcy5ibG9ja3B5XCI6IHJldHVybiBtb2RlbC5hc3NpZ25tZW50LmV4dHJhSW5zdHJ1Y3RvckZpbGVzKCkuc29tZShmaWxlID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS5maWxlbmFtZSgpID09PSBcImltYWdlcy5ibG9ja3B5XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIiFhbnN3ZXJfcHJlZml4LnB5XCI6IHJldHVybiBtb2RlbC5hc3NpZ25tZW50LmV4dHJhSW5zdHJ1Y3RvckZpbGVzKCkuc29tZShmaWxlID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS5maWxlbmFtZSgpID09PSBcIiFhbnN3ZXJfcHJlZml4LnB5XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIiFhbnN3ZXJfc3VmZml4LnB5XCI6IHJldHVybiBtb2RlbC5hc3NpZ25tZW50LmV4dHJhSW5zdHJ1Y3RvckZpbGVzKCkuc29tZShmaWxlID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS5maWxlbmFtZSgpID09PSBcIiFhbnN3ZXJfc3VmZml4LnB5XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIj90b29sYm94LmJsb2NrcHlcIjogcmV0dXJuIG1vZGVsLmFzc2lnbm1lbnQuZXh0cmFJbnN0cnVjdG9yRmlsZXMoKS5zb21lKGZpbGUgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlLmZpbGVuYW1lKCkgPT09IFwiP3Rvb2xib3guYmxvY2tweVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIhdGFncy5ibG9ja3B5XCI6IHJldHVybiBtb2RlbC5hc3NpZ25tZW50LnRhZ3MoKS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiIXNhbXBsZV9zdWJtaXNzaW9ucy5ibG9ja3B5XCI6IHJldHVybiBtb2RlbC5hc3NpZ25tZW50LnNhbXBsZVN1Ym1pc3Npb25zKCkubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhZGQ6IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChwYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiP21vY2tfdXJscy5ibG9ja3B5XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiIWFuc3dlcl9wcmVmaXgucHlcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIhYW5zd2VyX3N1ZmZpeC5weVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIj90YWdzLmJsb2NrcHlcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCI/c2V0dGluZ3MuYmxvY2tweVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY29tcG9uZW50cy5maWxlU3lzdGVtLm5ld0ZpbGUocGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaW1hZ2VzLmJsb2NrcHlcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbXBvbmVudHMuZmlsZVN5c3RlbS5uZXdGaWxlKHBhdGgsIFwie31cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiP3Rvb2xib3guYmxvY2tweVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBub3JtYWxUb29sYm94ID0gc2VsZi5jb21wb25lbnRzLnB5dGhvbkVkaXRvci5ibS5ibG9ja0VkaXRvci5UT09MQk9YRVNbXCJub3JtYWxcIl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsVG9vbGJveCA9IEpTT04uc3RyaW5naWZ5KG5vcm1hbFRvb2xib3gsIG51bGwsIDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY29tcG9uZW50cy5maWxlU3lzdGVtLm5ld0ZpbGUocGF0aCwgbm9ybWFsVG9vbGJveCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiIXNhbXBsZV9zdWJtaXNzaW9ucy5ibG9ja3B5XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuYXNzaWdubWVudC5zYW1wbGVTdWJtaXNzaW9ucyhbU2FtcGxlU3VibWlzc2lvbi5CbGFuaygpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jb21wb25lbnRzLmZpbGVTeXN0ZW0ubmV3RmlsZShwYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIhb25fY2hhbmdlLnB5XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuYXNzaWdubWVudC5vbkNoYW5nZShcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbXBvbmVudHMuZmlsZVN5c3RlbS5uZXdGaWxlKHBhdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE8gZml4IGV4dHJhZmlsZXMgZm9yIGluc3RydWN0b3IgYW5kIHN0dWRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIhb25fZXZhbC5weVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLmFzc2lnbm1lbnQub25FdmFsKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY29tcG9uZW50cy5maWxlU3lzdGVtLm5ld0ZpbGUocGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaW5zdHJ1Y3RvclwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY29tcG9uZW50cy5maWxlU3lzdGVtLm5ld0ZpbGVEaWFsb2coXCJpbnN0cnVjdG9yXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzdHVkZW50XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jb21wb25lbnRzLmZpbGVTeXN0ZW0ubmV3RmlsZURpYWxvZyhcInN0dWRlbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInN0YXJ0aW5nXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jb21wb25lbnRzLmZpbGVTeXN0ZW0ubmV3RmlsZURpYWxvZyhcInN0YXJ0aW5nXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5kaXNwbGF5LmZpbGVuYW1lKHBhdGgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGVsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuY29tcG9uZW50cy5maWxlU3lzdGVtLmRlbGV0ZUZpbGUobW9kZWwuZGlzcGxheS5maWxlbmFtZSgpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlbmFtZTogKG5ld05hbWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuY29tcG9uZW50cy5maWxlU3lzdGVtLnJlbmFtZUZpbGUobW9kZWwuZGlzcGxheS5maWxlbmFtZSgpLCBuZXdOYW1lKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFN0dWRlbnRDb2RlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByZWZpeFB5ID0gc2VsZi5jb21wb25lbnRzLmZpbGVTeXN0ZW0uZ2V0RmlsZShcIiFhbnN3ZXJfcHJlZml4LnB5XCIpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3VmZml4UHkgPSBzZWxmLmNvbXBvbmVudHMuZmlsZVN5c3RlbS5nZXRGaWxlKFwiIWFuc3dlcl9zdWZmaXgucHlcIik7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjb2RlID0gc2VsZi5tb2RlbC5zdWJtaXNzaW9uLmNvZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZWZpeFB5ICYmIHByZWZpeFB5LmhhbmRsZSAmJiBwcmVmaXhQeS5oYW5kbGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZSA9IHByZWZpeFB5LmhhbmRsZSgpICsgY29kZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3VmZml4UHkgJiYgc3VmZml4UHkuaGFuZGxlICYmIHN1ZmZpeFB5LmhhbmRsZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlID0gY29kZSArIHN1ZmZpeFB5LmhhbmRsZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2RlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXh0cmFTdHVkZW50RmlsZXM6IG9ic2VydmVDb25jYXRlbmF0ZWRGaWxlKG1vZGVsLnN1Ym1pc3Npb24uZXh0cmFGaWxlcyksXG4gICAgICAgICAgICAgICAgZXh0cmFJbnN0cnVjdG9yRmlsZXM6IG9ic2VydmVDb25jYXRlbmF0ZWRGaWxlKG1vZGVsLmFzc2lnbm1lbnQuZXh0cmFJbnN0cnVjdG9yRmlsZXMpLFxuICAgICAgICAgICAgICAgIGV4dHJhU3RhcnRpbmdGaWxlczogb2JzZXJ2ZUNvbmNhdGVuYXRlZEZpbGUobW9kZWwuYXNzaWdubWVudC5leHRyYVN0YXJ0aW5nRmlsZXMpLFxuICAgICAgICAgICAgICAgIGRpc3BsYXlGaWxlbmFtZTogZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocGF0aCA9PT0gXCI/bW9ja191cmxzLmJsb2NrcHlcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiVVJMIERhdGFcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocGF0aCA9PT0gXCJpbWFnZXMuYmxvY2tweVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJJbWFnZXNcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocGF0aCA9PT0gXCIhYW5zd2VyX3ByZWZpeC5weVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJBbnN3ZXIgUHJlZml4XCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhdGggPT09IFwiIWFuc3dlcl9zdWZmaXgucHlcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiQW5zd2VyIFN1ZmZpeFwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXRoID09PSBcIj90b29sYm94LmJsb2NrcHlcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiVG9vbGJveFwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXRoLnN0YXJ0c1dpdGgoXCImXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGF0aC5zbGljZSgxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVkaXRvcnM6IHtcbiAgICAgICAgICAgICAgICBjdXJyZW50OiBrby5wdXJlQ29tcHV0ZWQoICgpPT5cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jb21wb25lbnRzLmVkaXRvcnMuZ2V0RWRpdG9yKG1vZGVsLmRpc3BsYXkuZmlsZW5hbWUoKSlcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBrby5wdXJlQ29tcHV0ZWQoKCk9PlxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5kaXNwbGF5Lmluc3RydWN0b3IoKSB8fCAhbW9kZWwuYXNzaWdubWVudC5zZXR0aW5ncy5zbWFsbExheW91dCgpID9cbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29sLW1kLTEyXCIgOiBcImNvbC1tZC03XCJcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIHZpZXc6IGtvLnB1cmVDb21wdXRlZCgoKSA9PlxuICAgICAgICAgICAgICAgICAgICAoIW1vZGVsLmRpc3BsYXkuaW5zdHJ1Y3RvcigpICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLmFzc2lnbm1lbnQuc2V0dGluZ3MuaGlkZUVkaXRvcnMoKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuYXNzaWdubWVudC5zZXR0aW5ncy5vbmx5SW50ZXJhY3RpdmUoKSkpID8gXCJOb25lXCIgOlxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5kaXNwbGF5LmZpbGVuYW1lKCkgPyBtb2RlbC51aS5lZGl0b3JzLmN1cnJlbnQoKSA6IFwiTm9uZVwiXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY29tcG9uZW50cy5zZXJ2ZXIubG9nRXZlbnQoXCJYLUZpbGUuUmVzZXRcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJhbnN3ZXIucHlcIik7XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1Ym1pc3Npb24uY29kZShtb2RlbC5hc3NpZ25tZW50LnN0YXJ0aW5nQ29kZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3VibWlzc2lvbi5leHRyYUZpbGVzKG1vZGVsLmFzc2lnbm1lbnQuZXh0cmFTdGFydGluZ0ZpbGVzKCkubWFwKFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbGVuYW1lID0gZmlsZS5maWxlbmFtZSgpLnN1YnN0cigxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFrZU1vZGVsRmlsZShmaWxlbmFtZSwgZmlsZS5jb250ZW50cygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYW5TYXZlOiBrby5wdXJlQ29tcHV0ZWQoKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgIW1vZGVsLmRpc3BsYXkuYXV0b1NhdmUoKSksXG4gICAgICAgICAgICAgICAgY2FuRGVsZXRlOiBrby5wdXJlQ29tcHV0ZWQoKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgKCFtb2RlbC5hc3NpZ25tZW50LnNldHRpbmdzLmhpZGVGaWxlcygpIHx8IG1vZGVsLmRpc3BsYXkuaW5zdHJ1Y3RvcigpKSAmJlxuICAgICAgICAgICAgICAgICAgICBVTkRFTEVUQUJMRV9GSUxFUy5pbmRleE9mKG1vZGVsLmRpc3BsYXkuZmlsZW5hbWUoKSkgPT09IC0xKSxcbiAgICAgICAgICAgICAgICBjYW5SZW5hbWU6IGtvLnB1cmVDb21wdXRlZCgoKSA9PlxuICAgICAgICAgICAgICAgICAgICAoIW1vZGVsLmFzc2lnbm1lbnQuc2V0dGluZ3MuaGlkZUZpbGVzKCkgfHwgbW9kZWwuZGlzcGxheS5pbnN0cnVjdG9yKCkpICYmXG4gICAgICAgICAgICAgICAgICAgIFVOUkVOQU1BQkxFX0ZJTEVTLmluZGV4T2YobW9kZWwuZGlzcGxheS5maWxlbmFtZSgpKSA9PT0gLTEpLFxuICAgICAgICAgICAgICAgIHVwbG9hZDogdXBsb2FkRmlsZS5iaW5kKHNlbGYpLFxuICAgICAgICAgICAgICAgIGRvd25sb2FkOiBkb3dubG9hZEZpbGUuYmluZChzZWxmKSxcbiAgICAgICAgICAgICAgICBpbXBvcnREYXRhc2V0OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY29tcG9uZW50cy5jb3JnaXMub3BlbkRpYWxvZygpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcHl0aG9uOiB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bGxzY3JlZW46ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb2RlTWlycm9yID0gc2VsZi5jb21wb25lbnRzLnB5dGhvbkVkaXRvci5ibS50ZXh0RWRpdG9yLmNvZGVNaXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29kZU1pcnJvci5zZXRPcHRpb24oXCJmdWxsU2NyZWVuXCIsICFjb2RlTWlycm9yLmdldE9wdGlvbihcImZ1bGxTY3JlZW5cIikpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVNb2RlOiAobmV3TW9kZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jb21wb25lbnRzLnNlcnZlci5sb2dFdmVudChcIlgtVmlldy5DaGFuZ2VcIiwgXCJcIiwgXCJcIiwgbmV3TW9kZSwgbW9kZWwuZGlzcGxheS5maWxlbmFtZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLmRpc3BsYXkucHl0aG9uTW9kZShuZXdNb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb2RlbC5kaXNwbGF5LmZpbGVuYW1lKCkgPT09IFwiYW5zd2VyLnB5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbXBvbmVudHMucHl0aG9uRWRpdG9yLm9sZFB5dGhvbk1vZGUgPSBuZXdNb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBpc0hpc3RvcnlBdmFpbGFibGU6IGtvLnB1cmVDb21wdXRlZCgoKT0+XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC51aS5zZXJ2ZXIuaXNFbmRwb2ludENvbm5lY3RlZChcImxvYWRIaXN0b3J5XCIpKSxcbiAgICAgICAgICAgICAgICAgICAgdHVybk9mZkhpc3RvcnlNb2RlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbXBvbmVudHMucHl0aG9uRWRpdG9yLnVwZGF0ZUVkaXRvcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jb21wb25lbnRzLnB5dGhvbkVkaXRvci5zZXRSZWFkT25seShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5kaXNwbGF5Lmhpc3RvcnlNb2RlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdHVybk9uSGlzdG9yeU1vZGU6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY29tcG9uZW50cy5zZXJ2ZXIubG9hZEhpc3RvcnkoKHJlc3BvbnNlKSA9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbXBvbmVudHMuaGlzdG9yeS5sb2FkKHJlc3BvbnNlLmhpc3RvcnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5kaXNwbGF5Lmhpc3RvcnlNb2RlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbXBvbmVudHMucHl0aG9uRWRpdG9yLnNldFJlYWRPbmx5KHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY29tcG9uZW50cy5kaWFsb2cuRVJST1JfTE9BRElOR19ISVNUT1JZKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZUhpc3RvcnlNb2RlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9kZWwuZGlzcGxheS5oaXN0b3J5TW9kZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwudWkuZWRpdG9ycy5weXRob24udHVybk9mZkhpc3RvcnlNb2RlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnVpLmVkaXRvcnMucHl0aG9uLnR1cm5Pbkhpc3RvcnlNb2RlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGhpc3Rvcnk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiAoKT0+eyBzZWxmLmNvbXBvbmVudHMuaGlzdG9yeS5tb3ZlVG9TdGFydCgpOyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXM6ICgpPT57IHNlbGYuY29tcG9uZW50cy5oaXN0b3J5Lm1vdmVQcmV2aW91cygpOyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDogKCk9Pnsgc2VsZi5jb21wb25lbnRzLmhpc3RvcnkubW92ZU5leHQoKTsgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vc3RSZWNlbnQ6ICgpPT57IHNlbGYuY29tcG9uZW50cy5oaXN0b3J5Lm1vdmVUb01vc3RSZWNlbnQoKTsgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZTogKCk9Pnsgc2VsZi5jb21wb25lbnRzLmhpc3RvcnkudXNlKCk7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgICAgICAgIHVwbG9hZEZpbGU6ICgpID0+IHNlbGYuY29tcG9uZW50cy5lZGl0b3JzLmJ5TmFtZShcImltYWdlXCIpLnVwbG9hZEZpbGUoKSxcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlRmlsZTogKGZpbGVJbmZvKSA9PiBzZWxmLmNvbXBvbmVudHMuZWRpdG9ycy5ieU5hbWUoXCJpbWFnZVwiKS5kZWxldGVGaWxlKGZpbGVJbmZvKSxcbiAgICAgICAgICAgICAgICAgICAgcmVuYW1lRmlsZTogKGZpbGVJbmZvKSA9PiBzZWxmLmNvbXBvbmVudHMuZWRpdG9ycy5ieU5hbWUoXCJpbWFnZVwiKS5yZW5hbWVGaWxlKGZpbGVJbmZvKSxcbiAgICAgICAgICAgICAgICAgICAgcmVsb2FkSW1hZ2VzOiAoKSA9PiBzZWxmLmNvbXBvbmVudHMuZWRpdG9ycy5ieU5hbWUoXCJpbWFnZVwiKS5yZWxvYWRJbWFnZXMoKSxcbiAgICAgICAgICAgICAgICAgICAgY2FuQ2hvb3NlUGxhY2VtZW50OiBrby5wdXJlQ29tcHV0ZWQoKCkgPT4gbW9kZWwuZGlzcGxheS5pbnN0cnVjdG9yKCkpLFxuICAgICAgICAgICAgICAgICAgICBjYW5Nb2RpZnk6IChwbGFjZW1lbnQpID0+IG1vZGVsLmRpc3BsYXkuaW5zdHJ1Y3RvcigpIHx8IHBsYWNlbWVudCA9PT0gXCJzdWJtaXNzaW9uXCIgfHwgcGxhY2VtZW50ID09PSBcInVzZXJcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNhdmU6ICgpID0+IHNlbGYuY29tcG9uZW50cy5zZXJ2ZXIuc2F2ZUFzc2lnbm1lbnQoKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2FtcGxlU3VibWlzc2lvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgYnVpbGRFZGl0b3I6IChuZXdET00sIGluZGV4LCBuZXdFbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZWRpdG9yID0gc2VsZi5jb21wb25lbnRzLmVkaXRvcnMuYnlOYW1lKFwiU2FtcGxlIFN1Ym1pc3Npb25zXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLmJ1aWxkRWRpdG9yKG5ld0RPTSwgaW5kZXgsIG5ld0VsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBleGVjdXRlOiB7XG4gICAgICAgICAgICAgICAgaXNSdW5uaW5nOiBrby5wdXJlQ29tcHV0ZWQoKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3RhdHVzLm9uRXhlY3V0aW9uKCkgPT09IFN0YXR1c1N0YXRlLkFDVElWRVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgcnVuTGFiZWw6IGtvLnB1cmVDb21wdXRlZCgoKSA9PlxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdGF0dXMub25FeGVjdXRpb24oKSA9PT0gU3RhdHVzU3RhdGUuQUNUSVZFID8gXCJTdG9wXCIgOiBcIlJ1blwiXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBydW46ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGVsLnN0YXR1cy5vbkV4ZWN1dGlvbigpID09PSBTdGF0dXNTdGF0ZS5BQ1RJVkUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgUHlnYW1lTGliICE9PSBcInVuZGVmaW5lZFwiICYmIFB5Z2FtZUxpYi5ydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUHlnYW1lTGliLlN0b3BQeWdhbWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN0YXR1cy5vbkV4ZWN1dGlvbihTdGF0dXNTdGF0ZS5SRUFEWSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbXBvbmVudHMuZW5naW5lLmRlbGF5ZWRSdW4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcnVuUXVpZXRseUxhYmVsOiBrby5wdXJlQ29tcHV0ZWQoKCk9PlxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdGF0dXMub25FeGVjdXRpb24oKSA9PT0gU3RhdHVzU3RhdGUuQUNUSVZFID8gXCJTdG9wXCIgOiBcIlJ1biB3aXRob3V0IGZlZWRiYWNrXCJcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIHJ1blF1aWV0bHk6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGVsLnN0YXR1cy5vbkV4ZWN1dGlvbigpID09PSBTdGF0dXNTdGF0ZS5BQ1RJVkUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgUHlnYW1lTGliICE9PSBcInVuZGVmaW5lZFwiICYmIFB5Z2FtZUxpYi5ydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUHlnYW1lTGliLlN0b3BQeWdhbWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN0YXR1cy5vbkV4ZWN1dGlvbihTdGF0dXNTdGF0ZS5SRUFEWSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbXBvbmVudHMuZW5naW5lLmRlbGF5ZWRSdW4odHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGV2YWx1YXRlOiAoKSA9PlxuICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbXBvbmVudHMuZW5naW5lLmV2YWx1YXRlKClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXJ2ZXI6IHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6IChlbmRwb2ludCA9PlxuICAgICAgICAgICAgICAgICAgICBcInNlcnZlci1zdGF0dXMtXCIgKyBtb2RlbC5zdGF0dXNbZW5kcG9pbnRdKClcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIGlzRW5kcG9pbnRDb25uZWN0ZWQ6IChlbmRwb2ludCkgPT5cbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuY29uZmlndXJhdGlvbi5zZXJ2ZXJDb25uZWN0ZWQoKSAmJlxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5jb25maWd1cmF0aW9uLnVybHMgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5jb25maWd1cmF0aW9uLnVybHNbZW5kcG9pbnRdICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgbWVzc2FnZXM6IGtvLnB1cmVDb21wdXRlZCgoKSA9PlxuICAgICAgICAgICAgICAgICAgICBjYXBpdGFsaXplKG1vZGVsLnN0YXR1cy5sb2FkQXNzaWdubWVudE1lc3NhZ2UoKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3RhdHVzLnNhdmVBc3NpZ25tZW50TWVzc2FnZSgpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdGF0dXMubG9hZEhpc3RvcnlNZXNzYWdlKCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN0YXR1cy5sb2FkRmlsZU1lc3NhZ2UoKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3RhdHVzLnNhdmVGaWxlTWVzc2FnZSgpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdGF0dXMubG9hZERhdGFzZXRNZXNzYWdlKCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN0YXR1cy5sb2dFdmVudE1lc3NhZ2UoKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3RhdHVzLnNhdmVJbWFnZSgpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdGF0dXMudXBkYXRlU3VibWlzc2lvbk1lc3NhZ2UoKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3RhdHVzLmV4dGVybmFsQVBJKCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN0YXR1cy51cGRhdGVTdWJtaXNzaW9uU3RhdHVzTWVzc2FnZSgpIHx8IFwiXCIpXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBmb3JjZToge1xuICAgICAgICAgICAgICAgICAgICBsb2FkQXNzaWdubWVudDogKGRhdGEsIGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2xldCBmaWxlSGFuZGxlciA9ICQoXCIuYmxvY2tweS1mb3JjZS1sb2FkLWFzc2lnbm1lbnQtZmlsZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhc3NpZ25tZW50Rm9yY2VMb2FkQnV0dG9uID0gJChldmVudC50YXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9maWxlSGFuZGxlci5jbGljaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJChldmVudC50YXJnZXQpLnBhcmVudCgpLmZhZGVPdXQoMTAwKS5mYWRlSW4oMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFsbG93IHVzZXIgdG8gdXBsb2FkIGEgZmlsZSBjb250YWluaW5nIGFuIGFzc2lnbm1lbnQgc3VibWlzc2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlcyA9IGFzc2lnbm1lbnRGb3JjZUxvYWRCdXR0b25bMF0uZmlsZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBmci5vbmxvYWQgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFzc2lnbm1lbnRTdWJtaXNzaW9uID0gSlNPTi5wYXJzZShlLnRhcmdldC5yZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9hZEFzc2lnbm1lbnREYXRhXyhhc3NpZ25tZW50U3VibWlzc2lvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgZnIuZmlsZU5hbWUgPSBmaWxlc1swXS5uYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgZnIucmVhZEFzVGV4dChmaWxlc1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25tZW50Rm9yY2VMb2FkQnV0dG9uLnZhbChcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlU3VibWlzc2lvbjogKGRhdGEsIGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbXBvbmVudHMuc2VydmVyLnVwZGF0ZVN1Ym1pc3Npb24oc2VsZi5tb2RlbC5zdWJtaXNzaW9uLnNjb3JlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5tb2RlbC5zdWJtaXNzaW9uLmNvcnJlY3QoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKGV2ZW50LnRhcmdldCkuZmFkZU91dCgxMDApLmZhZGVJbigxMDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZvb3Rlcjoge1xuICAgICAgICAgICAgICAgIHZpc2libGU6IGtvLnB1cmVDb21wdXRlZChcbiAgICAgICAgICAgICAgICAgICAgKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLmRpc3BsYXkuaW5zdHJ1Y3RvcigpIHx8ICFtb2RlbC51aS5zbWFsbExheW91dCgpXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgbWFrZUV4dHJhSW50ZXJmYWNlU3Vic2NyaXB0aW9ucyhzZWxmLCBtb2RlbCk7XG4gICAgfVxuXG4gICAgdHVybk9uSGFja3MoKSB7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJUT0RPXCIpO1xuICAgICAgICBTay5idWlsdGluRmlsZXMuZmlsZXNbXCJzcmMvbGliL2ltYWdlLmpzXCJdID0gaW1hZ2VNb2R1bGUudG9TdHJpbmcoKTtcbiAgICAgICAgLy9Tay5idWlsdGluRmlsZXMuZmlsZXNbXCJzcmMvbGliL3dlYWtyZWYuanNcIl0gPSB3ZWFrcmVmTW9kdWxlLnRvU3RyaW5nKCk7XG4gICAgICAgIC8vU2suYnVpbHRpbkZpbGVzLmZpbGVzW1wic3JjL2xpYi9tYXRwbG90bGliL3B5cGxvdC9fX2luaXRfXy5qc1wiXSA9IG1hdHBsb3RsaWJNb2R1bGUudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBcHBseXMgdGhlIEtub2Nrb3V0SlMgYmluZGluZ3MgdG8gdGhlIG1vZGVsLCBpbnN0YW50aWF0aW5nIHRoZSB2YWx1ZXMgaW50byB0aGVcbiAgICAgKiBIVE1MLlxuICAgICAqL1xuICAgIGFwcGx5TW9kZWwoKSB7XG4gICAgICAgIGtvLmFwcGx5QmluZGluZ3ModGhpcy5tb2RlbCwgdGhpcy5tb2RlbC5jb25maWd1cmF0aW9uLmNvbnRhaW5lclswXSk7XG4gICAgfVxuXG4gICAgaW5pdFV0aWxpdGllcygpIHtcbiAgICAgICAgbGV0IG1haW4gPSB0aGlzO1xuICAgICAgICB0aGlzLnV0aWxpdGllcyA9IHtcbiAgICAgICAgICAgIG1hcmtkb3duOiAodGV4dCkgPT4gdGV4dCA/IEVhc3lNREUucHJvdG90eXBlLm1hcmtkb3duKHRleHQpIDogXCI8cD48L3A+XCJcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBpbml0Q29tcG9uZW50cygpIHtcbiAgICAgICAgbGV0IGNvbnRhaW5lciA9IHRoaXMubW9kZWwuY29uZmlndXJhdGlvbi5jb250YWluZXI7XG4gICAgICAgIGxldCBjb21wb25lbnRzID0gdGhpcy5jb21wb25lbnRzID0ge307XG4gICAgICAgIGxldCBtYWluID0gdGhpcztcbiAgICAgICAgLy8gRWFjaCBvZiB0aGVzZSBjb21wb25lbnRzIHdpbGwgdGFrZSB0aGUgQmxvY2tQeSBpbnN0YW5jZSwgYW5kIHBvc3NpYmx5IGFcbiAgICAgICAgLy8gcmVmZXJlbmNlIHRvIHRoZSByZWxldmFudCBIVE1MIGxvY2F0aW9uIHdoZXJlIGl0IHdpbGwgYmUgZW1iZWRkZWQuXG4gICAgICAgIGNvbXBvbmVudHMuZGlhbG9nID0gbmV3IEJsb2NrUHlEaWFsb2cobWFpbiwgY29udGFpbmVyLmZpbmQoXCIuYmxvY2tweS1kaWFsb2dcIikpO1xuICAgICAgICBjb21wb25lbnRzLmZlZWRiYWNrID0gbmV3IEJsb2NrUHlGZWVkYmFjayhtYWluLCBjb250YWluZXIuZmluZChcIi5ibG9ja3B5LWZlZWRiYWNrXCIpKTtcbiAgICAgICAgY29tcG9uZW50cy50cmFjZSA9IG5ldyBCbG9ja1B5VHJhY2UobWFpbik7XG4gICAgICAgIGNvbXBvbmVudHMuY29uc29sZSA9IG5ldyBCbG9ja1B5Q29uc29sZShtYWluLCBjb250YWluZXIuZmluZChcIi5ibG9ja3B5LWNvbnNvbGVcIikpO1xuICAgICAgICBjb21wb25lbnRzLmVuZ2luZSA9IG5ldyBCbG9ja1B5RW5naW5lKG1haW4pO1xuICAgICAgICBjb21wb25lbnRzLmZpbGVTeXN0ZW0gPSBuZXcgQmxvY2tQeUZpbGVTeXN0ZW0obWFpbik7XG4gICAgICAgIGNvbXBvbmVudHMuZWRpdG9ycyA9IG5ldyBFZGl0b3JzKG1haW4sIGNvbnRhaW5lci5maW5kKFwiLmJsb2NrcHktZWRpdG9yXCIpKTtcbiAgICAgICAgLy8gQ29udmVuaWVudCBzaG9ydGN1dCBkaXJlY3RseSB0byBQeXRob25FZGl0b3JcbiAgICAgICAgY29tcG9uZW50cy5weXRob25FZGl0b3IgPSB0aGlzLmNvbXBvbmVudHMuZWRpdG9ycy5ieU5hbWUoXCJweXRob25cIik7XG4gICAgICAgIGNvbXBvbmVudHMuc2VydmVyID0gbmV3IEJsb2NrUHlTZXJ2ZXIobWFpbik7XG4gICAgICAgIGNvbXBvbmVudHMuY29yZ2lzID0gbmV3IEJsb2NrUHlDb3JnaXMobWFpbik7XG4gICAgICAgIGNvbXBvbmVudHMuaGlzdG9yeSA9IG5ldyBCbG9ja1B5SGlzdG9yeShtYWluLCBjb250YWluZXIuZmluZChcIi5ibG9ja3B5LWhpc3RvcnktdG9vbGJhclwiKSk7XG4gICAgfVxuXG4gICAgc2hvdygpIHtcbiAgICAgICAgdGhpcy5tb2RlbC5jb25maWd1cmF0aW9uLmNvbnRhaW5lci5zaG93KCk7XG4gICAgICAgIC8vdGhpcy5tb2RlbC5jb25maWd1cmF0aW9uLmNvbnRhaW5lci5maW5kKFwiLmJsb2NrcHktZmlsZS1pbnN0cnVjdG9yXCIpLnRvZ2dsZSh0aGlzLm1vZGVsLmRpc3BsYXkuaW5zdHJ1Y3RvcigpKTtcbiAgICB9XG5cbiAgICBoaWRlKCkge1xuICAgICAgICB0aGlzLm1vZGVsLmNvbmZpZ3VyYXRpb24uY29udGFpbmVyLmhpZGUoKTtcbiAgICB9XG5cbiAgICBtYWtlRXh0cmFTdWJzY3JpcHRpb25zKCkge1xuICAgICAgICB0aGlzLm1vZGVsLmRpc3BsYXkuY2hhbmdlZEluc3RydWN0aW9ucy5zdWJzY3JpYmUoKGNoYW5nZWQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50cy5zZXJ2ZXIubG9nRXZlbnQoXCJYLUluc3RydWN0aW9ucy5DaGFuZ2VcIiwgXCJcIiwgXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlZCwgXCJpbnN0cnVjdGlvbnMubWRcIik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNsb2NrID0gbnVsbDtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5tb2RlbC5jb25maWd1cmF0aW9uLmNvbnRhaW5lcjtcbiAgICAgICAgY29uc3QgdXBkYXRlQ2xvY2sgPSAoKSA9PiBjb250YWluZXIuZmluZChcIi5ibG9ja3B5LW1lbnUtY2xvY2tcIikudGV4dChnZXRDdXJyZW50VGltZSgpKTtcbiAgICAgICAgaWYgKHRoaXMubW9kZWwudWkubWVudS5zaG93Q2xvY2soKSkge1xuICAgICAgICAgICAgdGhpcy5jbG9jayA9IHNldEludGVydmFsKHVwZGF0ZUNsb2NrLCAxMDAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubW9kZWwudWkubWVudS5zaG93Q2xvY2suc3Vic2NyaWJlKChjaGFuZ2VkKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5tb2RlbC51aS5tZW51LnNob3dDbG9jaygpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2xvY2spIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmNsb2NrKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9jayA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2xvY2spIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9jayA9IHNldEludGVydmFsKHVwZGF0ZUNsb2NrLCAxMDAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXJ0KCkge1xuICAgICAgICB0aGlzLm1vZGVsLmRpc3BsYXkuZmlsZW5hbWUoXCJhbnN3ZXIucHlcIik7XG4gICAgfVxuXG4gICAgcmVzZXRJbnRlcmZhY2UoKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50cy5lbmdpbmUucmVzZXQoKTtcbiAgICAgICAgLy8gRGlzYWJsZSBhbnkgYWx0ZXJuYXRpdmUgbG9nRW50cnkgZnVuY3Rpb25zIHdlIGhhdmUgYmVlbiBnaXZlblxuICAgICAgICB0aGlzLmNvbXBvbmVudHMuc2VydmVyLmFsdExvZ0VudHJ5ID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXF1ZXN0UGFzc2NvZGUoKSB7XG4gICAgICAgIGxldCB1c2VyU3VwcGxpZWRQYXNzY29kZSA9IHByb21wdChcIlBsZWFzZSBlbnRlciB0aGUgcGFzc2NvZGUuXCIpO1xuICAgICAgICB0aGlzLm1vZGVsLmRpc3BsYXkucGFzc2NvZGUodXNlclN1cHBsaWVkUGFzc2NvZGUpO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG5cbiAgICB9XG5cbn1cblxuIiwiaW1wb3J0IHtlbmNvZGVIVE1MfSBmcm9tIFwiLi91dGlsaXRpZXNcIjtcblxuLyoqXG4gKiBFdmFsdWF0ZSBidXR0b24gSFRNTCB0ZW1wbGF0ZVxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgU1RBUlRfRVZBTF9IVE1MID0gYFxuPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1vdXRsaW5lIGZsb2F0LXJpZ2h0IGJsb2NrcHktYnRuLWV2YWxcIj5cbiAgICBFdmFsdWF0ZVxuPC9idXR0b24+YDtcblxuLyoqXG4gKiBIVE1MIHRlbXBsYXRlIGZvciBhIG5ldyBsaW5lIGluIHRoZSBjb25zb2xlLlxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgTkVXX0NPTlNPTEVfTElORV9IVE1MID0gXCI8ZGl2PjwvZGl2PlwiO1xuXG4vKipcbiAqIEhUTUwgdGVtcGxhdGUgZm9yIHRoZSBlbnRpcmUgY29uc29sZSBhcmVhXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgQ09OU09MRV9IVE1MID0gYFxuICAgIDxkaXYgY2xhc3M9J2Jsb2NrcHktcGFuZWwgYmxvY2tweS1jb25zb2xlJ1xuICAgICAgICAgIHJvbGU9XCJyZWdpb25cIiBhcmlhLWxhYmVsPVwiQ29uc29sZVwiXG4gICAgICAgICAgZGF0YS1iaW5kPVwiY2xhc3M6IHVpLmNvbnNvbGUuc2l6ZVwiPlxuICAgICAgICAgIFxuICAgICAgICA8IS0tIEZlZWRiYWNrL1RyYWNlIFZpc2liaWxpdHkgQ29udHJvbCAtLT5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPSdidXR0b24nXG4gICAgICAgICAgICAgICAgY2xhc3M9J2J0biBidG4tc20gYnRuLW91dGxpbmUtc2Vjb25kYXJ5IGZsb2F0LXJpZ2h0IGJsb2NrcHktc2hvdy1mZWVkYmFjaydcbiAgICAgICAgICAgICAgICBkYXRhLWJpbmQ9XCJoaWRkZW46IHVpLnNlY29uZFJvdy5pc0NvbnNvbGVTaG93VmlzaWJsZSwgY2xpY2s6IHVpLnNlY29uZFJvdy5hZHZhbmNlU3RhdGVcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdmYXMgZmEtZXllJz48L3NwYW4+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIFxuICAgICAgICA8c3Ryb25nPkNvbnNvbGU6PC9zdHJvbmc+XG4gICAgICAgIFxuICAgICAgICA8ZGl2IGNsYXNzPSdibG9ja3B5LXByaW50ZXIgYmxvY2tweS1wcmludGVyLWRlZmF1bHQnPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgXG4gICAgIDwvZGl2PmA7XG5cbi8qKlxuICogQWxsIHRoZSBwb3NzaWJsZSB0eXBlcyBmb3IgYSBsaW5lIGluIHRoZSBjb25zb2xlLlxuICogQGVudW1cbiAqL1xuZXhwb3J0IGxldCBDb25zb2xlTGluZVR5cGUgPSB7XG4gICAgVEVYVDogXCJ0ZXh0XCIsXG4gICAgSFRNTDogXCJodG1sXCIsXG4gICAgUExPVDogXCJwbG90XCIsXG4gICAgSU1BR0U6IFwiaW1hZ2VcIixcbiAgICBQWUdBTUU6IFwicHlnYW1lXCIsXG4gICAgRFJBRlRFUjogXCJkcmFmdGVyXCIsXG4gICAgVFVSVExFOiBcInR1cnRsZVwiLFxuICAgIEVWQUw6IFwiZXZhbFwiLFxuICAgIFNUQVJUX0VWQUw6IFwic3RhcnRfZXZhbFwiLFxuICAgIFZBTFVFOiBcInZhbHVlXCIsXG4gICAgSU5QVVQ6IFwiaW5wdXRcIixcbiAgICBURVNUX0NBU0U6IFwidGVzdF9jYXNlXCJcbn07XG5cbi8qKlxuICogQWJzdHJhY3QgdmVyc2lvbiBvZiBhIGxpbmUgaW4gdGhlIGNvbnNvbGUuIEFsbCBvdGhlciBjb25zb2xlIGxpbmVzXG4gKiBzaG91bGQgZXh0ZW5kIHRoaXMgY2xhc3MuIENyaXRpY2FsbHksIHRoZXkgbmVlZCB0byBpbXBsZW1lbnQgYSByZW5kZXIgZnVuY3Rpb24uXG4gKi9cbmNsYXNzIENvbnNvbGVMaW5lIHtcbiAgICBjb25zdHJ1Y3RvcihtYWluLCB0eXBlLCBjb250ZW50KSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZWZlcmVuY2UgYmFjayB0byB0aGUgbWFpbiBCbG9ja1B5IGluc3RhbmNlLlxuICAgICAgICAgKiBAY29uc3RcbiAgICAgICAgICogQHR5cGUge0Jsb2NrUHl9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1haW4gPSBtYWluO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ2F0ZWdvcml6ZXMgd2hhdCBraW5kIG9mIGxpbmUgdGhpcyBpcyAodGV4dC9odG1sL3Bsb3QvZXRjLilcbiAgICAgICAgICogQHR5cGUge0NvbnNvbGVMaW5lVHlwZX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgYWN0dWFsIGRhdGEgc3RvcmVkIG9uIHRoaXMgbGluZS5cbiAgICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY29udGVudCA9IGNvbnRlbnQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNZXRhZGF0YSBhYm91dCB3aGVyZSB0aGUgbGluZSBvcmlnaW5hdGVkIGZyb20gaW4gdGhlIGNvZGUuXG4gICAgICAgICAqIEB0eXBlIHt7ZmlsZW5hbWU6IHN0cmluZywgbGluZTogbnVtYmVyLCBzdGVwOiBudW1iZXJ9fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vcmlnaW4gPSB7XG4gICAgICAgICAgICBmaWxlbmFtZTogU2suY3VyckZpbGVuYW1lLFxuICAgICAgICAgICAgc3RlcDogbWFpbi5jb21wb25lbnRzLmVuZ2luZS5leGVjdXRpb25CdWZmZXIuc3RlcCxcbiAgICAgICAgICAgIGxpbmU6IG1haW4uY29tcG9uZW50cy5lbmdpbmUuZXhlY3V0aW9uQnVmZmVyLmxpbmVcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBIVE1MIGNvbnRlbnQgc3RvcmVkIG9uIHRoaXMgbGluZSwgbWVhbnQgdG8gYmUgcmVuZGVyZWRcbiAgICAgICAgICogdG8gdGhlIHVzZXIuXG4gICAgICAgICAqIEB0eXBlIHsqfGpRdWVyeS5mbi5pbml0fGpRdWVyeXxIVE1MRWxlbWVudH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaHRtbCA9ICQoXCI8ZGl2PjwvZGl2PlwiLCB7XG4gICAgICAgICAgICBcImNsYXNzXCI6ICBcImJsb2NrcHktcHJpbnRlci1vdXRwdXRcIixcbiAgICAgICAgICAgIFwiZGF0YS1jb250YWluZXJcIjogbWFpbi5tb2RlbC5jb25maWd1cmF0aW9uLmF0dGFjaG1lbnRQb2ludCxcbiAgICAgICAgICAgIFwiZGF0YS10b2dnbGVcIjogXCJ0b29sdGlwXCIsXG4gICAgICAgICAgICBcImRhdGEtcGxhY2VtZW50XCI6IFwiYXV0b1wiLFxuICAgICAgICAgICAgXCJkYXRhLXN0ZXBcIjogdGhpcy5vcmlnaW4uc3RlcCxcbiAgICAgICAgICAgIFwidGl0bGVcIjogXCJTdGVwIFwiICsgdGhpcy5vcmlnaW4uc3RlcCArIFwiLCBMaW5lIFwiICsgdGhpcy5vcmlnaW4ubGluZVxuICAgICAgICB9KTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZXRoZXIgb3Igbm90IHRoaXMgbGluZSBzaG91bGQgYmUgdmlzaWJsZVxuICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudmlzaWJsZSA9ICFtYWluLm1vZGVsLmRpc3BsYXkubXV0ZVByaW50ZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmluZGV4ID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBTa3VscHQgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBjb25zb2xlIGxpbmUncyBjb250ZW50LlxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIHRvU2t1bHB0KCkge1xuICAgICAgICByZXR1cm4gU2suZmZpLnJlbWFwVG9QeSh0aGlzLmNvbnRlbnQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGlzIGNvbnNvbGUgbGluZSBieSBkZWxldGluZyBpdHMgSFRNTCByZXByZXNlbnRhdGlvbi5cbiAgICAgKi9cbiAgICBkZWxldGUoKSB7XG4gICAgICAgIHRoaXMuaHRtbC5yZW1vdmUoKTtcbiAgICB9XG59XG5cbmNsYXNzIENvbnNvbGVMaW5lVHVydGxlIGV4dGVuZHMgQ29uc29sZUxpbmUge1xuICAgIC8vIFRPRE86IENhcHR1cmUgdHVydGxlIGNvbW1hbmRzIGZvciB0cmFjaW5nIHB1cnBvc2VzXG4gICAgY29uc3RydWN0b3IobWFpbikge1xuICAgICAgICBzdXBlcihtYWluLCBDb25zb2xlTGluZVR5cGUuVFVSVExFKTtcbiAgICAgICAgdGhpcy5odG1sLmFkZENsYXNzKFwiYmxvY2tweS1jb25zb2xlLXR1cnRsZS1vdXRwdXRcIik7XG4gICAgfVxuXG4gICAgcmVuZGVyKHdoZXJlKSB7XG4gICAgICAgIGlmICh0aGlzLnZpc2libGUpIHtcbiAgICAgICAgICAgIHdoZXJlLnByZXBlbmQodGhpcy5odG1sKTtcbiAgICAgICAgICAgIC8vdGhpcy5odG1sWzBdLnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6IFwic21vb3RoXCIgfSk7XG4gICAgICAgICAgICB2YXIgdG9wID0gdGhpcy5odG1sLm9mZnNldCgpLnRvcDtcbiAgICAgICAgICAgIC8vJCgnaHRtbCcpLnNjcm9sbFRvcCh0b3ApO1xuICAgICAgICAgICAgJChcImh0bWxcIikuc2Nyb2xsVG9wKHRvcCk7XG4gICAgICAgICAgICAvL3RoaXMuaHRtbC50b29sdGlwKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIENvbnNvbGVMaW5lRHJhZnRlciBleHRlbmRzIENvbnNvbGVMaW5lIHtcbiAgICBjb25zdHJ1Y3RvcihtYWluLCBzaXplLCBmdWxsc2NyZWVuKSB7XG4gICAgICAgIHN1cGVyKG1haW4sIENvbnNvbGVMaW5lVHlwZS5EUkFGVEVSKTtcbiAgICAgICAgdGhpcy5odG1sLmFkZENsYXNzKFwiYmxvY2tweS1jb25zb2xlLWRyYWZ0ZXItb3V0cHV0XCIpO1xuICAgICAgICB0aGlzLnNpemUgPSBzaXplO1xuICAgICAgICB0aGlzLmZ1bGxzY3JlZW4gPSBmdWxsc2NyZWVuO1xuICAgIH1cblxuICAgIHJlbmRlcih3aGVyZSkge1xuICAgICAgICBpZiAodGhpcy52aXNpYmxlKSB7XG4gICAgICAgICAgICB3aGVyZS5wcmVwZW5kKHRoaXMuaHRtbCk7XG4gICAgICAgICAgICB2YXIgdG9wID0gdGhpcy5odG1sLm9mZnNldCgpLnRvcDtcbiAgICAgICAgICAgICQoXCJodG1sXCIpLnNjcm9sbFRvcCh0b3ApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xlYW51cCgpIHtcbiAgICAgICAgLy8gU3RhcnRzIG9mZiBhcyBhIG5vLW9wXG4gICAgfVxuXG4gICAgc3RvcCgpIHtcbiAgICAgICAgdGhpcy5tYWluLm1vZGVsLnVpLnNlY29uZFJvdy5yZXN0b3JlUGFuZWwoKTtcbiAgICB9XG59XG5cbmNsYXNzIENvbnNvbGVMaW5lUHlnYW1lIGV4dGVuZHMgQ29uc29sZUxpbmUge1xuICAgIGNvbnN0cnVjdG9yKG1haW4sIHNpemUsIGZ1bGxzY3JlZW4sIHB5Z2FtZU9iaikge1xuICAgICAgICBzdXBlcihtYWluLCBDb25zb2xlTGluZVR5cGUuUFlHQU1FKTtcbiAgICAgICAgdGhpcy5odG1sLmFkZENsYXNzKFwiYmxvY2tweS1jb25zb2xlLXB5Z2FtZS1vdXRwdXRcIik7XG4gICAgICAgIHRoaXMuc2l6ZSA9IHNpemU7XG4gICAgICAgIHRoaXMuZnVsbHNjcmVlbiA9IGZ1bGxzY3JlZW47XG4gICAgICAgIHRoaXMucHlnYW1lT2JqID0gcHlnYW1lT2JqO1xuICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgICAgLy9Tay5tYWluX2NhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXlDYW52YXNcIik7XG4gICAgfVxuXG4gICAgcmVuZGVyKHdoZXJlKSB7XG4gICAgICAgIGlmICh0aGlzLnZpc2libGUpIHtcbiAgICAgICAgICAgIHRoaXMuaHRtbC5hcHBlbmQodGhpcy5jYW52YXMpO1xuICAgICAgICAgICAgd2hlcmUucHJlcGVuZCh0aGlzLmh0bWwpO1xuICAgICAgICAgICAgdmFyIHRvcCA9IHRoaXMuaHRtbC5vZmZzZXQoKS50b3A7XG4gICAgICAgICAgICAkKFwiaHRtbFwiKS5zY3JvbGxUb3AodG9wKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsZWFudXAoKSB7XG4gICAgICAgIC8vIFN0YXJ0cyBvZmYgYXMgYSBuby1vcFxuICAgIH1cblxuICAgIHN0b3AoKSB7XG4gICAgICAgIHRoaXMuY2xlYW51cCA9ICgpID0+IHt9O1xuICAgICAgICB0aGlzLm1haW4ubW9kZWwudWkuc2Vjb25kUm93LnJlc3RvcmVQYW5lbCgpO1xuICAgIH1cblxuICAgIGZpbmFsaXplKGNsZWFudXBGdW5jdGlvbiwgbGlzdGVuZXJzKSB7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmNsZWFudXAgPSAoKSA9PiBjbGVhbnVwRnVuY3Rpb24odGhpcy5weWdhbWVPYmosIGxpc3RlbmVycyk7XG4gICAgfVxuXG59XG5cbmNsYXNzIENvbnNvbGVMaW5lSW1hZ2UgZXh0ZW5kcyBDb25zb2xlTGluZSB7XG4gICAgY29uc3RydWN0b3IobWFpbiwgY29udGVudCkge1xuICAgICAgICBzdXBlcihtYWluLCBDb25zb2xlTGluZVR5cGUuSU1BR0UsIGNvbnRlbnQpO1xuICAgICAgICB0aGlzLmh0bWwuYWRkQ2xhc3MoXCJibG9ja3B5LWNvbnNvbGUtaW1hZ2Utb3V0cHV0XCIpO1xuICAgIH1cblxuICAgIHJlbmRlcih3aGVyZSkge1xuICAgICAgICBpZiAodGhpcy52aXNpYmxlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmNvbnRlbnQpO1xuICAgICAgICAgICAgdGhpcy5odG1sLmFwcGVuZCh0aGlzLmNvbnRlbnQpO1xuICAgICAgICAgICAgd2hlcmUuYXBwZW5kKHRoaXMuaHRtbCk7XG4gICAgICAgICAgICAvL3RoaXMuaHRtbC50b29sdGlwKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIENvbnNvbGVMaW5lUGxvdCBleHRlbmRzIENvbnNvbGVMaW5lIHtcbiAgICBjb25zdHJ1Y3RvcihtYWluLCBjb250ZW50KSB7XG4gICAgICAgIHN1cGVyKG1haW4sIENvbnNvbGVMaW5lVHlwZS5QTE9ULCBjb250ZW50KTtcbiAgICAgICAgdGhpcy5odG1sLmFkZENsYXNzKFwiYmxvY2tweS1jb25zb2xlLXBsb3Qtb3V0cHV0XCIpO1xuICAgIH1cblxuICAgIHJlbmRlcih3aGVyZSkge1xuICAgICAgICBpZiAodGhpcy52aXNpYmxlKSB7XG4gICAgICAgICAgICB3aGVyZS5hcHBlbmQodGhpcy5odG1sKTtcbiAgICAgICAgICAgIC8vdGhpcy5odG1sLnRvb2x0aXAoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY2xhc3MgQ29uc29sZUxpbmVUZXh0IGV4dGVuZHMgQ29uc29sZUxpbmUge1xuXG4gICAgYWRkQ29udGVudChjb250ZW50KSB7XG4gICAgICAgIHRoaXMuY29udGVudCA9IHRoaXMuY29udGVudCArIGNvbnRlbnQ7XG4gICAgfVxuXG4gICAgcmVuZGVyKHdoZXJlKSB7XG4gICAgICAgIGlmICh0aGlzLnZpc2libGUpIHtcbiAgICAgICAgICAgIGxldCBlbmNvZGVkVGV4dCA9IGVuY29kZUhUTUwodGhpcy5jb250ZW50KTtcbiAgICAgICAgICAgIGlmICghZW5jb2RlZFRleHQgfHwgZW5jb2RlZFRleHQudHJpbSgpLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgZW5jb2RlZFRleHQgPSBcIlxcblwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGxpbmVEYXRhID0gJChcIjxzYW1wPjwvc2FtcD5cIiwgeyBcImh0bWxcIjogZW5jb2RlZFRleHQgfSk7XG4gICAgICAgICAgICB0aGlzLmh0bWwuYXBwZW5kKGxpbmVEYXRhKTtcbiAgICAgICAgICAgIHdoZXJlLmFwcGVuZCh0aGlzLmh0bWwpO1xuICAgICAgICAgICAgdGhpcy5odG1sLnRvb2x0aXAoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY2xhc3MgQ29uc29sZUxpbmVWYWx1ZSBleHRlbmRzIENvbnNvbGVMaW5lIHtcblxuICAgIGNvbnN0cnVjdG9yKG1haW4sIGNvbnRlbnQpIHtcbiAgICAgICAgc3VwZXIobWFpbiwgQ29uc29sZUxpbmVUeXBlLlZBTFVFLCBjb250ZW50KTtcbiAgICB9XG5cbiAgICByZW5kZXIod2hlcmUpIHtcbiAgICAgICAgaWYgKHRoaXMudmlzaWJsZSkge1xuICAgICAgICAgICAgbGV0IGVuY29kZWRUZXh0ID0gZW5jb2RlSFRNTCh0aGlzLmNvbnRlbnQpO1xuICAgICAgICAgICAgbGV0IGxpbmVEYXRhID0gJChcIjxjb2RlPjwvY29kZT5cIiwgeyBcImh0bWxcIjogZW5jb2RlZFRleHQgfSk7XG4gICAgICAgICAgICB0aGlzLmh0bWwuYXBwZW5kKGxpbmVEYXRhKTtcbiAgICAgICAgICAgIHdoZXJlLmFwcGVuZCh0aGlzLmh0bWwpO1xuICAgICAgICAgICAgdGhpcy5odG1sLnRvb2x0aXAoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY2xhc3MgQ29uc29sZUxpbmVJbnB1dCBleHRlbmRzIENvbnNvbGVMaW5lIHtcbiAgICBjb25zdHJ1Y3RvcihtYWluLCBwcm9tcHRNZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1haW4sIENvbnNvbGVMaW5lVHlwZS5JTlBVVCwgcHJvbXB0TWVzc2FnZSk7XG4gICAgICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBJbnB1dCBib3ggZm9yIHJlY2VpdmluZyBpbnB1dCgpIGZyb20gdGhlIHVzZXIuXG4gICAgICpcbiAgICAgKi9cbiAgICByZW5kZXIod2hlcmUpIHtcbiAgICAgICAgLy8gUGVyZm9ybSBhbnkgbmVjZXNzYXJ5IGNsZWFuaW5nXG4gICAgICAgIGlmICh0aGlzLnZpc2libGUpIHtcbiAgICAgICAgICAgIC8vIElucHV0IGZvcm1cbiAgICAgICAgICAgIGxldCBpbnB1dEZvcm0gPSAkKFwiPGlucHV0IHR5cGU9J3RleHQnIC8+XCIpO1xuICAgICAgICAgICAgLy8gRW50ZXIgYnV0dG9uXG4gICAgICAgICAgICBsZXQgaW5wdXRCdG4gPSAkKFwiPGJ1dHRvbj48L2J1dHRvbj5cIiwge1wiaHRtbFwiOiBcIkVudGVyXCJ9KTtcbiAgICAgICAgICAgIC8vIEdyb3VwIGZvcm0gYW5kIGJ1dHRvblxuICAgICAgICAgICAgbGV0IGlucHV0R3JvdXAgPSAkKFwiPGRpdj48L2Rpdj5cIiwge1wiY2xhc3NcIjogXCJibG9ja3B5LWNvbnNvbGUtaW5wdXRcIn0pO1xuICAgICAgICAgICAgaW5wdXRHcm91cC5hcHBlbmQoaW5wdXRGb3JtKTtcbiAgICAgICAgICAgIGlucHV0R3JvdXAuYXBwZW5kKGlucHV0QnRuKTtcbiAgICAgICAgICAgIC8vIFByb21wdCBib3gsIG5ldyBsaW5lLCBpbnB1dCBncm91cFxuICAgICAgICAgICAgbGV0IGlucHV0Qm94ID0gJChcIjxkaXY+PC9kaXY+XCIpO1xuICAgICAgICAgICAgaWYgKHRoaXMuY29udGVudCAhPT0gXCJcXG5cIikge1xuICAgICAgICAgICAgICAgIGxldCBlbmNvZGVkVGV4dCA9IGVuY29kZUhUTUwodGhpcy5jb250ZW50KTtcbiAgICAgICAgICAgICAgICBsZXQgaW5wdXRNc2cgPSAkKFwiPHNhbXA+PC9zYW1wPlwiLCAge1wiaHRtbFwiOiBlbmNvZGVkVGV4dH0pO1xuICAgICAgICAgICAgICAgIGlucHV0Qm94LmFwcGVuZChpbnB1dE1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnB1dEJveC5hcHBlbmQoJChcIjxicj5cIikpXG4gICAgICAgICAgICAgICAgLmFwcGVuZChpbnB1dEdyb3VwKTtcbiAgICAgICAgICAgIC8vIFJlbmRlclxuICAgICAgICAgICAgdGhpcy5odG1sLmFwcGVuZChpbnB1dEJveCk7XG4gICAgICAgICAgICB3aGVyZS5hcHBlbmQodGhpcy5odG1sKTtcbiAgICAgICAgICAgIC8vIE1ha2UgaXQgaW50ZXJhY3RpdmVcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VJbnRlcmFjdGl2ZShpbnB1dEZvcm0sIGlucHV0QnRuKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9O1xuXG4gICAgbWFrZUludGVyYWN0aXZlKGlucHV0LCBidXR0b24pIHtcbiAgICAgICAgbGV0IHJlc29sdmVPbkNsaWNrO1xuICAgICAgICBsZXQgc3VibWl0dGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlT25DbGljayA9IHJlc29sdmU7XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgaW5wdXRJbmRleCA9IHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24uaW5wdXRJbmRleCgpO1xuICAgICAgICBsZXQgc3VibWl0Rm9ybSA9ICgpID0+IHtcbiAgICAgICAgICAgIGxldCB1c2VySW5wdXR0ZWRWYWx1ZSA9IGlucHV0LnZhbCgpO1xuICAgICAgICAgICAgU2sucXVldWVkSW5wdXQucHVzaCh1c2VySW5wdXR0ZWRWYWx1ZSk7XG4gICAgICAgICAgICB0aGlzLm1haW4ubW9kZWwuZXhlY3V0aW9uLmlucHV0SW5kZXgoaW5wdXRJbmRleCsxKTtcbiAgICAgICAgICAgIHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24uaW5wdXQoKS5wdXNoKHVzZXJJbnB1dHRlZFZhbHVlKTtcbiAgICAgICAgICAgIHJlc29sdmVPbkNsaWNrKHVzZXJJbnB1dHRlZFZhbHVlKTtcbiAgICAgICAgICAgIGlucHV0LnByb3AoXCJkaXNhYmxlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgIGJ1dHRvbi5wcm9wKFwiZGlzYWJsZWRcIiwgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLmh0bWwudG9vbHRpcCgpO1xuICAgICAgICB9O1xuICAgICAgICBidXR0b24uY2xpY2soc3VibWl0Rm9ybSk7XG4gICAgICAgIGlucHV0LmtleXVwKChlKSA9PiB7XG4gICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAxMykge1xuICAgICAgICAgICAgICAgIHN1Ym1pdEZvcm0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlucHV0LmZvY3VzKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGlucHV0SW5kZXgsIHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24uaW5wdXQoKS5sZW5ndGgpO1xuICAgICAgICBpZiAoaW5wdXRJbmRleCA8IHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24uaW5wdXQoKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxldCB1c2VySW5wdXR0ZWRWYWx1ZSA9IHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24uaW5wdXQoKVtpbnB1dEluZGV4XTtcbiAgICAgICAgICAgIGlucHV0LnZhbCh1c2VySW5wdXR0ZWRWYWx1ZSk7XG4gICAgICAgICAgICB0aGlzLm1haW4ubW9kZWwuZXhlY3V0aW9uLmlucHV0SW5kZXgoaW5wdXRJbmRleCsxKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlucHV0LnByb3AoXCJkaXNhYmxlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBidXR0b24ucHJvcChcImRpc2FibGVkXCIsIHRydWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuaHRtbC50b29sdGlwKCk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh1c2VySW5wdXR0ZWRWYWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VibWl0dGVkUHJvbWlzZTtcbiAgICB9XG59XG5cbmNsYXNzIENvbnNvbGVMaW5lRXZhbHVhdGUgZXh0ZW5kcyBDb25zb2xlTGluZUlucHV0IHtcbiAgICBjb25zdHJ1Y3RvcihtYWluKSB7XG4gICAgICAgIHN1cGVyKG1haW4sIFwiRXZhbHVhdGU6XCIpO1xuICAgIH1cbn1cblxuY2xhc3MgQ29uc29sZUxpbmVTdGFydEV2YWx1YXRlIGV4dGVuZHMgQ29uc29sZUxpbmUge1xuICAgIGNvbnN0cnVjdG9yKG1haW4pIHtcbiAgICAgICAgc3VwZXIobWFpbiwgQ29uc29sZUxpbmVUeXBlLlNUQVJUX0VWQUwpO1xuICAgICAgICB0aGlzLmh0bWwuYXBwZW5kKCQoU1RBUlRfRVZBTF9IVE1MKSk7XG4gICAgICAgIHRoaXMuaHRtbC5jbGljaygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1haW4ubW9kZWwudWkuZXhlY3V0ZS5ldmFsdWF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5kZWxldGUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKHdoZXJlKSB7XG4gICAgICAgIHdoZXJlLmFwcGVuZCh0aGlzLmh0bWwpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJsb2NrUHlDb25zb2xlIHtcblxuICAgIC8qKlxuICAgICAqIEFuIG9iamVjdCBmb3IgbWFuYWdpbmcgdGhlIGNvbnNvbGUsIHdpdGggZmVhdHVyZXMgZm9yIHRoaW5ncyBsaWtlIHByaW50aW5nLCBwbG90dGluZywgZXZhbGluZywgaW5wdXRpbmcuXG4gICAgICogVGhlIFwicHJpbnRlclwiIGlzIHRoZSByZWdpb24gd2hlcmUgd2UgcHV0IHRoaW5ncywgYXMgb3Bwb3NlZCB0byB0aGUgY29uc29sZSBhcyBhIHdob2xlLlxuICAgICAqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG1haW4gLSBUaGUgbWFpbiBCbG9ja1B5IGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFnIC0gVGhlIEhUTUwgb2JqZWN0IHRoaXMgaXMgYXR0YWNoZWQgdG8uXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgKG1haW4sIHRhZykge1xuICAgICAgICB0aGlzLm1haW4gPSBtYWluO1xuICAgICAgICB0aGlzLnRhZyA9IHRhZztcbiAgICAgICAgdGhpcy5wcmludGVyVGFnID0gdGFnLmZpbmQoXCIuYmxvY2tweS1wcmludGVyXCIpO1xuXG4gICAgICAgIHRoaXMuTUlOSU1VTV9XSURUSCA9IDIwMDtcbiAgICAgICAgdGhpcy5NSU5JTVVNX0hFSUdIVCA9IDIwMDtcbiAgICAgICAgdGhpcy5ERUZBVUxUX0hFSUdIVCA9IHRoaXMucHJpbnRlclRhZy5oZWlnaHQoKTsgLy8gTGV0IENTUyBkZWZpbmUgdGhpc1xuICAgICAgICB0aGlzLm1haW4ubW9kZWwuZGlzcGxheS5wcmV2aW91c0NvbnNvbGVIZWlnaHQodGhpcy5ERUZBVUxUX0hFSUdIVCk7XG5cbiAgICAgICAgdGhpcy5vdXRwdXQgPSB0aGlzLm1haW4ubW9kZWwuZXhlY3V0aW9uLm91dHB1dDtcbiAgICAgICAgLy90aGlzLmlucHV0ID0gdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5pbnB1dDtcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHt9O1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG5cbiAgICAgICAgLy8gVE9ETzogSWYgdGhlIHVzZXIgbW9kaWZpZXMgYSBmaWxlLCB0aGVuIG1ha2UgdGhlIGNvbnNvbGUgbG9vayBmYWRlZCBhIGxpdHRsZVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXNldCB0aGUgc3RhdHVzIG9mIHRoZSBwcmludGVyLCBpbmNsdWRpbmcgcmVtb3ZpbmcgYW55IHRleHQgaW4gaXQgYW5kXG4gICAgICogZml4aW5nIGl0cyBzaXplLlxuICAgICAqL1xuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLm91dHB1dC5yZW1vdmVBbGwoKTtcblxuICAgICAgICB0aGlzLmxpbmVCdWZmZXIgPSBudWxsO1xuICAgICAgICB0aGlzLnBsb3RCdWZmZXIgPSBudWxsO1xuICAgICAgICB0aGlzLnByaW50ZXJUYWcuZW1wdHkoKTtcbiAgICAgICAgLy8gSWYgdGhlIHVzZXIgaGFzbid0IGNoYW5nZWQgdGhlIGNvbnNvbGUgc2l6ZSwgd2UnbGwgcmVzZXQgaXRcbiAgICAgICAgaWYgKHRoaXMubWFpbi5tb2RlbC5kaXNwbGF5LnByZXZpb3VzQ29uc29sZUhlaWdodCgpID09PSB0aGlzLnByaW50ZXJUYWcuaGVpZ2h0KCkpIHtcbiAgICAgICAgICAgIHRoaXMucHJpbnRlclRhZy5oZWlnaHQodGhpcy5ERUZBVUxUX0hFSUdIVCk7XG4gICAgICAgICAgICB0aGlzLm1haW4ubW9kZWwuZGlzcGxheS5wcmV2aW91c0NvbnNvbGVIZWlnaHQodGhpcy5wcmludGVyVGFnLmhlaWdodCgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHVydGxlTGluZSA9IG51bGw7XG4gICAgICAgIFNrLlR1cnRsZUdyYXBoaWNzID0ge1xuICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLmdldFR1cnRsZUxpbmUuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLmdldFdpZHRoKCksXG4gICAgICAgICAgICBoZWlnaHQ6IHRoaXMuZ2V0SGVpZ2h0KCksXG4gICAgICAgICAgICBhc3NldHM6IHRoaXMubG9hZEFzc2V0LmJpbmQodGhpcylcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnB5Z2FtZUxpbmUgPSBudWxsO1xuICAgICAgICB0aGlzLmRyYWZ0ZXJMaW5lID0gbnVsbDtcbiAgICB9O1xuXG4gICAgbG9hZEFzc2V0KG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuXG4gICAgZ2V0VHVydGxlTGluZSgpIHtcbiAgICAgICAgaWYgKHRoaXMudHVydGxlTGluZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy50dXJ0bGVMaW5lID0gbmV3IENvbnNvbGVMaW5lVHVydGxlKHRoaXMubWFpbik7XG4gICAgICAgICAgICB0aGlzLnR1cnRsZUxpbmUucmVuZGVyKHRoaXMucHJpbnRlclRhZyk7XG4gICAgICAgICAgICAvLyBJZiB0aGUgdXNlciBoYXNuJ3QgY2hhbmdlZCB0aGUgY29uc29sZSBzaXplLCB3ZSdsbCBkbyBzb1xuICAgICAgICAgICAgaWYgKHRoaXMubWFpbi5tb2RlbC5kaXNwbGF5LnByZXZpb3VzQ29uc29sZUhlaWdodCgpID09PSB0aGlzLnByaW50ZXJUYWcuaGVpZ2h0KCkpIHtcbiAgICAgICAgICAgICAgICBsZXQgY3VycmVudFByaW50ZXJEaW1lbnNpb24gPSB0aGlzLnByaW50ZXJUYWcud2lkdGgoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnByaW50ZXJUYWcuaGVpZ2h0KGN1cnJlbnRQcmludGVyRGltZW5zaW9uKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1haW4ubW9kZWwuZGlzcGxheS5wcmV2aW91c0NvbnNvbGVIZWlnaHQodGhpcy5wcmludGVyVGFnLmhlaWdodCgpKTtcbiAgICAgICAgICAgICAgICBTay5UdXJ0bGVHcmFwaGljcy5oZWlnaHQgPSBjdXJyZW50UHJpbnRlckRpbWVuc2lvbi00MDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy50dXJ0bGVMaW5lLmh0bWxbMF07XG4gICAgfVxuXG4gICAgaGFuZGxlUHlnYW1lUmVzaXplKG5ld1dpZHRoLCBuZXdIZWlnaHQpIHtcbiAgICAgICAgLy8gSWYgdGhlIHVzZXIgaGFzbid0IGNoYW5nZWQgdGhlIGNvbnNvbGUgc2l6ZSwgYW5kIHRoZSBuZXdIZWlnaHQgaXMgYmlnZ2VyIHRoYW4gZGVmYXVsdCwgd2UnbGwgY2hhbmdlIGl0XG4gICAgICAgIGlmICh0aGlzLm1haW4ubW9kZWwuZGlzcGxheS5wcmV2aW91c0NvbnNvbGVIZWlnaHQoKSA9PT0gdGhpcy5wcmludGVyVGFnLmhlaWdodCgpICYmXG4gICAgICAgICAgICBuZXdIZWlnaHQgPiB0aGlzLkRFRkFVTFRfSEVJR0hUKSB7XG4gICAgICAgICAgICB0aGlzLnByaW50ZXJUYWcuaGVpZ2h0KDMwK25ld0hlaWdodCk7XG4gICAgICAgICAgICB0aGlzLm1haW4ubW9kZWwuZGlzcGxheS5wcmV2aW91c0NvbnNvbGVIZWlnaHQodGhpcy5wcmludGVyVGFnLmhlaWdodCgpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGUgcHlnYW1lIHdpbmRvdyBpcyB3aWRlciB0aGFuIHRoZSBjb25zb2xlLCB3ZSdsbCBleHBhbmQgdGVtcG9yYXJpbHkuXG4gICAgICAgIGlmIChuZXdXaWR0aCA+IHRoaXMucHJpbnRlclRhZy53aWR0aCgpKSB7XG4gICAgICAgICAgICB0aGlzLm1haW4ubW9kZWwudWkuc2Vjb25kUm93Lm1ha2VXaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmaW5pc2hUdXJ0bGVzKCkge1xuICAgICAgICBpZiAodGhpcy5tYWluLm1vZGVsLmFzc2lnbm1lbnQuc2V0dGluZ3Muc2F2ZVR1cnRsZU91dHB1dCgpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy50dXJ0bGVMaW5lKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNhbnZhcyA9IHRoaXMudHVydGxlTGluZS5odG1sLmZpbmQoXCJjYW52YXNcIikubGFzdCgpWzBdO1xuICAgICAgICAgICAgICAgIGxldCBkYXRhVXJsID0gY2FudmFzLnRvRGF0YVVSTChcImltYWdlL3BuZ1wiKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1haW4uY29tcG9uZW50cy5zZXJ2ZXIuc2F2ZUltYWdlKFwidHVydGxlX291dHB1dFwiLCBkYXRhVXJsKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5weWdhbWVMaW5lKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNhbnZhcyA9IHRoaXMucHlnYW1lTGluZS5jYW52YXM7XG4gICAgICAgICAgICAgICAgbGV0IGRhdGFVcmwgPSBjYW52YXMudG9EYXRhVVJMKFwiaW1hZ2UvcG5nXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLnNlcnZlci5zYXZlSW1hZ2UoXCJ0dXJ0bGVfb3V0cHV0XCIsIGRhdGFVcmwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBXaGF0IGlmIHRoZXJlIGFyZSBubyB0dXJ0bGVzIHRvIHNhdmU/XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUT0RPOiB0dXJ0bGVzIHNob3VsZCBiZSBiYXNlZCBvbiB0aGUgY3VycmVudCB3aWR0aFxuICAgIG5ld1R1cnRsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0V2lkdGgoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heCh0aGlzLk1JTklNVU1fV0lEVEgsIHRoaXMucHJpbnRlclRhZy53aWR0aCgpLTQwKTtcbiAgICB9XG5cbiAgICBnZXRIZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heCh0aGlzLk1JTklNVU1fSEVJR0hULCB0aGlzLnByaW50ZXJUYWcuaGVpZ2h0KCkrNDApO1xuICAgIH1cblxuICAgIGlzTXV0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1haW4ubW9kZWwuZGlzcGxheS5tdXRlUHJpbnRlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgZWFjaCBwcmludGVkIGVsZW1lbnQgaW4gdGhlIHByaW50ZXIgYW5kIG1ha2VzIGl0IGhpZGRlblxuICAgICAqIG9yIHZpc2libGUsIGRlcGVuZGluZyBvbiB3aGF0IHN0ZXAgd2UncmUgb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RlcCAtIFRoZSBjdXJyZW50IHN0ZXAgb2YgdGhlIGV4ZWN1dGVkIHByb2dyYW0gdGhhdCB3ZSdyZSBvbjsgZWFjaCBlbGVtZW50IGluIHRoZSBwcmludGVyIG11c3QgYmUgbWFya2VkIHdpdGggYSBcImRhdGEtc3RlcFwiIHByb3BlcnR5IHRvIHJlc29sdmUgdGhpcy5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcGFnZSAtIERlcHJlY2F0ZWQsIG5vdCBzdXJlIHdoYXQgdGhpcyBldmVuIGRvZXMuXG4gICAgICovXG4gICAgc3RlcFByaW50ZXIoc3RlcCwgcGFnZSkge1xuICAgICAgICB0aGlzLnByaW50ZXJUYWcuZmluZChcIi5ibG9ja3B5LXByaW50ZXItb3V0cHV0XCIpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoJCh0aGlzKS5hdHRyKFwiZGF0YS1zdGVwXCIpIDw9IHN0ZXApIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLnNob3coKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5oaWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQcmludCBhIGxpbmUgdG8gdGhlIG9uLXNjcmVlbiBwcmludGVyLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBsaW5lVGV4dCAtIEEgbGluZSBvZiB0ZXh0IHRvIGJlIHByaW50ZWQgb3V0LlxuICAgICAqL1xuICAgIHByaW50KGxpbmVUZXh0KSB7XG4gICAgICAgIC8vIEVtcHR5IHN0cmluZ3MgbWVhbnMgZG8gbm90aGluZy5cbiAgICAgICAgLy8gcHJpbnQoXCJcIiwgZW5kPVwiXCIpXG4gICAgICAgIGlmICghbGluZVRleHQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZmx1c2ggPSBmYWxzZTtcbiAgICAgICAgaWYgKGxpbmVUZXh0LmNoYXJBdChsaW5lVGV4dC5sZW5ndGgtMSkgPT09IFwiXFxuXCIpIHtcbiAgICAgICAgICAgIGZsdXNoID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc3BsaXRMaW5lcyA9IGxpbmVUZXh0LnNwbGl0KFwiXFxuXCIpO1xuICAgICAgICBpZiAodGhpcy5saW5lQnVmZmVyID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmxpbmVCdWZmZXIgPSBuZXcgQ29uc29sZUxpbmVUZXh0KHRoaXMubWFpbiwgQ29uc29sZUxpbmVUeXBlLlRFWFQsIHNwbGl0TGluZXNbMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5saW5lQnVmZmVyLmFkZENvbnRlbnQoc3BsaXRMaW5lc1swXSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaT0xOyBpIDwgc3BsaXRMaW5lcy5sZW5ndGgtMTsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLm91dHB1dC5wdXNoKHRoaXMubGluZUJ1ZmZlcik7XG4gICAgICAgICAgICB0aGlzLmxpbmVCdWZmZXIucmVuZGVyKHRoaXMucHJpbnRlclRhZyk7XG4gICAgICAgICAgICB0aGlzLmxpbmVCdWZmZXIgPSBuZXcgQ29uc29sZUxpbmVUZXh0KHRoaXMubWFpbiwgQ29uc29sZUxpbmVUeXBlLlRFWFQsIHNwbGl0TGluZXNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmbHVzaCkge1xuICAgICAgICAgICAgdGhpcy5vdXRwdXQucHVzaCh0aGlzLmxpbmVCdWZmZXIpO1xuICAgICAgICAgICAgdGhpcy5saW5lQnVmZmVyLnJlbmRlcih0aGlzLnByaW50ZXJUYWcpO1xuICAgICAgICAgICAgdGhpcy5saW5lQnVmZmVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG5cblxuICAgIHBsb3QocGxvdHMpIHtcbiAgICAgICAgdGhpcy5wbG90QnVmZmVyID0gbmV3IENvbnNvbGVMaW5lUGxvdCh0aGlzLm1haW4sIHBsb3RzKTtcbiAgICAgICAgdGhpcy5wbG90QnVmZmVyLnJlbmRlcih0aGlzLnByaW50ZXJUYWcpO1xuICAgICAgICByZXR1cm4gdGhpcy5wbG90QnVmZmVyO1xuICAgIH1cblxuICAgIHB5Z2FtZShzaXplLCBmdWxsc2NyZWVuLCBweWdhbWVPYmopIHtcbiAgICAgICAgaWYgKHRoaXMucHlnYW1lTGluZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5weWdhbWVMaW5lID0gbmV3IENvbnNvbGVMaW5lUHlnYW1lKHRoaXMubWFpbiwgc2l6ZSwgZnVsbHNjcmVlbiwgcHlnYW1lT2JqKTtcbiAgICAgICAgICAgIHRoaXMucHlnYW1lTGluZS5yZW5kZXIodGhpcy5wcmludGVyVGFnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5weWdhbWVMaW5lO1xuICAgIH1cblxuICAgIGRyYWZ0ZXIoc2l6ZSwgZnVsbHNjcmVlbikge1xuICAgICAgICBpZiAodGhpcy5kcmFmdGVyTGluZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5kcmFmdGVyTGluZSA9IG5ldyBDb25zb2xlTGluZURyYWZ0ZXIodGhpcy5tYWluLCBzaXplLCBmdWxsc2NyZWVuKTtcbiAgICAgICAgICAgIHRoaXMuZHJhZnRlckxpbmUucmVuZGVyKHRoaXMucHJpbnRlclRhZyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZHJhZnRlckxpbmU7XG4gICAgfVxuXG4gICAgcHJpbnRQSUxJbWFnZShpbWFnZURhdGEpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJURVNUXCIsIGltYWdlRGF0YS5pbWFnZSk7XG4gICAgICAgIHRoaXMuaW1hZ2VCdWZmZXIgPSBuZXcgQ29uc29sZUxpbmVJbWFnZSh0aGlzLm1haW4sIGltYWdlRGF0YS5pbWFnZSk7XG4gICAgICAgIHRoaXMuaW1hZ2VCdWZmZXIucmVuZGVyKHRoaXMucHJpbnRlclRhZyk7XG4gICAgICAgIHJldHVybiB0aGlzLmltYWdlQnVmZmVyO1xuICAgIH1cblxuICAgIHByaW50VmFsdWUodmFsdWUpIHtcbiAgICAgICAgbGV0IHByaW50ZWRWYWx1ZSA9IG5ldyBDb25zb2xlTGluZVZhbHVlKHRoaXMubWFpbiwgdmFsdWUpO1xuICAgICAgICBwcmludGVkVmFsdWUucmVuZGVyKHRoaXMucHJpbnRlclRhZyk7XG4gICAgICAgIHJldHVybiBwcmludGVkVmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgcmVnaXN0ZXJzIGEgUHJvbWlzZSBmcm9tIHRoZSBJbnB1dCBib3hcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvbXB0TWVzc2FnZSAtIE1lc3NhZ2UgdG8gZGlzcGxheSB0byB0aGUgdXNlci5cbiAgICAgKlxuICAgICAqL1xuICAgIGlucHV0KHByb21wdE1lc3NhZ2UpIHtcbiAgICAgICAgdGhpcy5pbnB1dEJ1ZmZlciA9IG5ldyBDb25zb2xlTGluZUlucHV0KHRoaXMubWFpbiwgcHJvbXB0TWVzc2FnZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmlucHV0QnVmZmVyLnJlbmRlcih0aGlzLnByaW50ZXJUYWcpO1xuICAgIH07XG5cblxuICAgIGV2YWx1YXRlKCkge1xuICAgICAgICB0aGlzLmlucHV0QnVmZmVyID0gbmV3IENvbnNvbGVMaW5lRXZhbHVhdGUodGhpcy5tYWluKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRCdWZmZXIucmVuZGVyKHRoaXMucHJpbnRlclRhZyk7XG4gICAgfVxuXG4gICAgYmVnaW5FdmFsKCkge1xuICAgICAgICBsZXQgc3RhcnRFdmFsdWF0aW9uID0gbmV3IENvbnNvbGVMaW5lU3RhcnRFdmFsdWF0ZSh0aGlzLm1haW4pO1xuICAgICAgICByZXR1cm4gc3RhcnRFdmFsdWF0aW9uLnJlbmRlcih0aGlzLnByaW50ZXJUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVuY29uZGl0aW9uYWxseSBzY3JvbGwgdG8gdGhlIGJvdHRvbSBvZiB0aGUgd2luZG93LlxuICAgICAqXG4gICAgICovXG4gICAgc2Nyb2xsVG9Cb3R0b20oKSB7XG4gICAgICAgIHRoaXMudGFnLmFuaW1hdGUoe1xuICAgICAgICAgICAgc2Nyb2xsVG9wOiB0aGlzLnRhZy5wcm9wKFwic2Nyb2xsSGVpZ2h0XCIpIC0gdGhpcy50YWcucHJvcChcImNsaWVudEhlaWdodFwiKVxuICAgICAgICB9LCA1MDApO1xuICAgIH07XG5cbn0iLCJpbXBvcnQge3NsdWd9IGZyb20gXCIuL3V0aWxpdGllc1wiO1xuXG4vLyBUT0RPOiBlZGl0b3IuYm0uYmxvY2tFZGl0b3IuZXh0cmFUb29sc1tdXG5cbmV4cG9ydCBsZXQgX0lNUE9SVEVEX0RBVEFTRVRTID0ge307XG5leHBvcnQgbGV0IF9JTVBPUlRFRF9DT01QTEVURV9EQVRBU0VUUyA9IHt9O1xuXG4vKipcbiAqIFRoaXMgaXMgYSB2ZXJ5IHNpbXBsaXN0aWMgaGVscGVyIGZ1bmN0aW9uIHRoYXQgd2lsbCB0cmFuc2Zvcm1cbiAqIGEgZ2l2ZW4gYnV0dG9uIGludG8gYSBcIkxvYWRlZFwiIHN0YXRlIChkaXNhYmxlZCwgcHJlc3NlZCBzdGF0ZSwgZXRjLikuXG4gKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gYnRuIC0gQW4gSFRNTCBlbGVtZW50IHRvIGNoYW5nZSB0aGUgdGV4dCBvZi5cbiAqL1xubGV0IHNldEJ1dHRvbkxvYWRlZCA9IGZ1bmN0aW9uIChidG4pIHtcbiAgICBidG4uYWRkQ2xhc3MoXCJhY3RpdmVcIilcbiAgICAgICAgLmFkZENsYXNzKFwiYnRuLXN1Y2Nlc3NcIilcbiAgICAgICAgLnJlbW92ZUNsYXNzKFwiYnRuLXByaW1hcnlcIilcbiAgICAgICAgLnByb3AoXCJkaXNhYmxlZFwiLCB0cnVlKVxuICAgICAgICAudGV4dChcIkxvYWRlZFwiKVxuICAgICAgICAuYXR0cihcImFyaWEtcHJlc3NlZFwiLCBcInRydWVcIik7XG59O1xuXG5cbi8qKlxuICogTW9kdWxlIHRoYXQgY29ubmVjdHMgdG8gdGhlIENPUkdJUyBkYXRhc2V0cyBhbmQgbWFuYWdlcyBpbnRlcmFjdGlvbnNcbiAqIHdpdGggdGhlbS4gVGhpcyBpbmNsdWRlcyBsb2FkaW5nIGluIGRhdGFzZXRzIGF0IGxhdW5jaCBhbmQgb24tdGhlLWZseS5cbiAqIE5vdGUgdGhhdCB0aGlzIGhhcyBubyBwcmVzZW5jZSBvbiBzY3JlZW4sIHNvIGl0IGRvZXMgbm90IGhhdmUgYSB0YWcuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAdGhpcyB7QmxvY2tQeUNvcmdpc31cbiAqIEBwYXJhbSB7T2JqZWN0fSBtYWluIC0gVGhlIG1haW4gQmxvY2tQeSBpbnN0YW5jZVxuICovXG5leHBvcnQgZnVuY3Rpb24gQmxvY2tQeUNvcmdpcyhtYWluKSB7XG4gICAgdGhpcy5tYWluID0gbWFpbjtcblxuICAgIHRoaXMubG9hZGVkRGF0YXNldHMgPSBbXTtcbiAgICB0aGlzLmxvYWREYXRhc2V0cygpO1xufVxuXG5CbG9ja1B5Q29yZ2lzLnByb3RvdHlwZS5sb2FkRGF0YXNldHMgPSBmdW5jdGlvbiAoc2lsZW50bHkpIHtcbiAgICAvLyBMb2FkIGluIGVhY2ggdGhlIGRhdGFzZXRzXG4gICAgbGV0IG1vZGVsID0gdGhpcy5tYWluLm1vZGVsLFxuICAgICAgICBlZGl0b3IgPSB0aGlzLm1haW4uY29tcG9uZW50cy5weXRob25FZGl0b3IsXG4gICAgICAgIHNlcnZlciA9IHRoaXMubWFpbi5jb21wb25lbnRzLnNlcnZlcjtcbiAgICBsZXQgaW1wb3J0cyA9IFtdO1xuICAgIG1vZGVsLmFzc2lnbm1lbnQuc2V0dGluZ3MuZGF0YXNldHMoKS5zcGxpdChcIixcIikuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgICBpZiAobmFtZSAmJiAhKG5hbWUgaW4gQmxvY2tNaXJyb3JCbG9ja0VkaXRvci5FWFRSQV9UT09MUykpIHtcbiAgICAgICAgICAgIGltcG9ydHMucHVzaC5hcHBseShpbXBvcnRzLCB0aGlzLmltcG9ydERhdGFzZXQoc2x1ZyhuYW1lKSwgbmFtZSwgc2lsZW50bHkpKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gV2hlbiBkYXRhc2V0cyBhcmUgbG9hZGVkLCB1cGRhdGUgdGhlIHRvb2xib3guXG4gICAgJC53aGVuLmFwcGx5KCQsIGltcG9ydHMpLmRvbmUoZnVuY3Rpb24gKCkge1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwiVFJJR0dFUkVEXCIpO1xuICAgICAgICBlZGl0b3IuYm0uZm9yY2VCbG9ja1JlZnJlc2goKTtcbiAgICAgICAgZWRpdG9yLmJtLmJsb2NrRWRpdG9yLnJlbWFrZVRvb2xib3goKTtcbiAgICB9KS5mYWlsKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGFyZ3VtZW50cyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgfSkuYWx3YXlzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VydmVyLmZpbmFsaXplU3Vic2NyaXB0aW9ucygpO1xuICAgIH0pO1xufTtcblxuLyoqXG4gKiBMb2FkcyB0aGUgZGVmaW5pdGlvbnMgZm9yIGEgZGF0YXNldCBpbnRvIHRoZSBlbnZpcm9ubWVudCwgaW5jbHVkaW5nXG4gKiB0aGUgZGF0YXNldCAoYXMgYSBKUyBmaWxlKSwgdGhlIHNrdWxwdCBiaW5kaW5ncywgYW5kIHRoZSBibG9ja2x5XG4gKiBiaW5kaW5ncy4gVGhpcyByZXF1aXJlcyBhY2Nlc3MgdG8gYSBDT1JHSVMgc2VydmVyLCBhbmQgb2NjdXJzXG4gKiBhc3luY2hyb25vdXNseS4gVGhlIHJlcXVlc3RzIGFyZSBmaXJlZCBhbmQgdGhlaXIgZGVmZXJyZWQgb2JqZWN0c1xuICogYXJlIHJldHVybmVkIC0gY2FsbGVycyBjYW4gdXNlIHRoaXMgaW5mb3JtYXRpb24gdG8gcGVyZm9ybSBhbiBhY3Rpb25cbiAqIG9uIGNvbXBsZXRpb24gb2YgdGhlIGltcG9ydC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc2x1ZyAtIFRoZSBVUkwgc2FmZSB2ZXJzaW9uIG9mIHRoZSBkYXRhc2V0IG5hbWVcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIC0gVGhlIHVzZXItZnJpZW5kbHkgdmVyc2lvbiBvZiB0aGUgZGF0YXNldCBuYW1lLlxuICogQHJldHVybnMge0FycmF5LjxEZWZlcnJlZD59IC0gUmV0dXJucyB0aGUgYXN5bmMgcmVxdWVzdHMgYXMgZGVmZXJyZWQgb2JqZWN0cy5cbiAqL1xuQmxvY2tQeUNvcmdpcy5wcm90b3R5cGUuaW1wb3J0RGF0YXNldCA9IGZ1bmN0aW9uIChzbHVnLCBuYW1lKSB7XG4gICAgbGV0IHVybF9yZXRyaWV2YWxzID0gW107XG4gICAgaWYgKHRoaXMubWFpbi5tb2RlbC51aS5zZXJ2ZXIuaXNFbmRwb2ludENvbm5lY3RlZChcImltcG9ydERhdGFzZXRzXCIpKSB7XG4gICAgICAgIGxldCByb290ID0gdGhpcy5tYWluLm1vZGVsLmNvbmZpZ3VyYXRpb24udXJscy5pbXBvcnREYXRhc2V0cyArIFwiYmxvY2tweS9cIiArIHNsdWcgKyBcIi9cIiArIHNsdWc7XG4gICAgICAgIHRoaXMubWFpbi5tb2RlbC5kaXNwbGF5LmxvYWRpbmdEYXRhc2V0cy5wdXNoKG5hbWUpO1xuICAgICAgICAvLyBBY3R1YWxseSBnZXQgZGF0YVxuICAgICAgICBsZXQgZ2V0RGF0YXNldCA9ICQuZ2V0U2NyaXB0KHJvb3QgKyBcIl9kYXRhc2V0LmpzXCIpO1xuICAgICAgICAvLyBMb2FkIGdldENvbXBsZXRlIHNpbGVudGx5IGluIHRoZSBiYWNrZ3JvdW5kIGJlY2F1c2UgaXRzIGJpZyA6KFxuICAgICAgICBsZXQgZ2V0Q29tcGxldGUgPSAkLmdldFNjcmlwdChyb290ICsgXCJfY29tcGxldGUuanNcIik7XG4gICAgICAgIGxldCBnZXRTa3VscHQgPSAkLmdldChyb290ICsgXCJfc2t1bHB0LmpzXCIsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBTay5idWlsdGluRmlsZXNbXCJmaWxlc1wiXVtcInNyYy9saWIvXCIgKyBzbHVnICsgXCIvX19pbml0X18uanNcIl0gPSBkYXRhO1xuICAgICAgICB9KTtcbiAgICAgICAgbGV0IGdldEJsb2NrbHkgPSAkLmdldFNjcmlwdChyb290ICsgXCJfYmxvY2tseS5qc1wiKTtcbiAgICAgICAgLy8gT24gY29tcGxldGlvbiwgdXBkYXRlIG1lbnVzLlxuICAgICAgICAkLndoZW4oZ2V0RGF0YXNldCwgZ2V0U2t1bHB0LCBnZXRCbG9ja2x5KS5kb25lKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9hZGVkRGF0YXNldHMucHVzaChzbHVnKTtcbiAgICAgICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLnB5dGhvbkVkaXRvci5ibS50ZXh0VG9CbG9ja3MuaGlkZGVuSW1wb3J0cy5wdXNoKHNsdWcpO1xuICAgICAgICAgICAgdGhpcy5tYWluLmNvbXBvbmVudHMucHl0aG9uRWRpdG9yLmJtLmZvcmNlQmxvY2tSZWZyZXNoKCk7XG4gICAgICAgICAgICB0aGlzLm1haW4uY29tcG9uZW50cy5weXRob25FZGl0b3IuYm0uYmxvY2tFZGl0b3IucmVtYWtlVG9vbGJveCgpO1xuICAgICAgICAgICAgdGhpcy5tYWluLm1vZGVsLmRpc3BsYXkubG9hZGluZ0RhdGFzZXRzLnJlbW92ZShuYW1lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHVybF9yZXRyaWV2YWxzLnB1c2goZ2V0RGF0YXNldCwgZ2V0U2t1bHB0LCBnZXRCbG9ja2x5KTtcbiAgICB9XG4gICAgcmV0dXJuIHVybF9yZXRyaWV2YWxzO1xufTtcblxuLyoqXG4gKiBPcGVucyBhIGRpYWxvZyBib3ggdG8gcHJlc2VudCB0aGUgdXNlciB3aXRoIHRoZSBkYXRhc2V0cyBhdmFpbGFibGVcbiAqIHRocm91Z2ggdGhlIENPUkdJUyBzZXJ2ZXIuIFRoaXMgcmVxdWlyZXMgYSBjYWxsLCBzbyB0aGlzIG1ldGhvZFxuICogY29tcGxldGVzIGFzeW5jaHJvbm91c2x5LiBUaGUgZGlhbG9nIGlzIGNvbXBvc2VkIG9mIGEgdGFibGUgd2l0aFxuICogYnV0dG9ucyB0byBsb2FkIHRoZSBkYXRhc2V0cyAoTW9yZSB0aGFuIG9uZSBkYXRhc2V0IGNhbiBiZSBsb2FkZWRcbiAqIGZyb20gd2l0aGluIHRoZSBkaWFsb2cgYXQgYSB0aW1lKS5cbiAqL1xuQmxvY2tQeUNvcmdpcy5wcm90b3R5cGUub3BlbkRpYWxvZyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5tYWluLm1vZGVsLnVpLnNlcnZlci5pc0VuZHBvaW50Q29ubmVjdGVkKFwiaW1wb3J0RGF0YXNldHNcIikpIHtcbiAgICAgICAgbGV0IHJvb3QgPSB0aGlzLm1haW4ubW9kZWwuY29uZmlndXJhdGlvbi51cmxzLmltcG9ydERhdGFzZXRzO1xuICAgICAgICAkLmdldEpTT04ocm9vdCArIFwiaW5kZXguanNvblwiLCAgKGRhdGEpID0+IHtcbiAgICAgICAgICAgIC8vIE1ha2UgdXAgdGhlIEJvZHlcbiAgICAgICAgICAgIGxldCBkYXRhc2V0cyA9IGRhdGEuYmxvY2tweTtcbiAgICAgICAgICAgIGxldCBkb2N1bWVudGF0aW9uID0gcm9vdCtcImJsb2NrcHkvaW5kZXguaHRtbFwiO1xuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gJChgPHA+RG9jdW1lbnRhdGlvbiBpcyBhdmFpbGFibGUgYXQgPGEgaHJlZj0nJHtkb2N1bWVudGF0aW9ufScgdGFyZ2V0PV9ibGFuaz51cmw8L2E+PC9wPmApO1xuICAgICAgICAgICAgbGV0IGJvZHkgPSAkKFwiPHRhYmxlPjwvdGFibGU+XCIsIHtcImNsYXNzXCI6IFwidGFibGUgdGFibGUtYm9yZGVyZWQgdGFibGUtc20gdGFibGUtc3RyaXBlZFwifSk7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhkYXRhc2V0cykuc29ydCgpLm1hcCgobmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBzbHVnZ2VkTmFtZSA9IHNsdWcoZGF0YXNldHNbbmFtZV0ubmFtZSk7XG4gICAgICAgICAgICAgICAgbGV0IHRpdGxlTmFtZSA9IG5hbWU7XG4gICAgICAgICAgICAgICAgbGV0IGJ0biA9ICQoJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgZGF0YS10b2dnbGU9XCJidXR0b25cIiBhcmlhLXByZXNzZWQ9XCJmYWxzZVwiIGF1dG9jb21wbGV0ZT1cIm9mZlwiPkxvYWQ8L2J1dHRvbj4nKTtcbiAgICAgICAgICAgICAgICBsZXQgaW1nU3JjID0gcm9vdCtcIi4uL2ltYWdlcy9kYXRhc2V0cy9cIituYW1lK1wiLWljb24ucG5nXCI7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubG9hZGVkRGF0YXNldHMuaW5kZXhPZihzbHVnZ2VkTmFtZSkgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICBzZXRCdXR0b25Mb2FkZWQoYnRuKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBidG4uY2xpY2soICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW1wb3J0RGF0YXNldChzbHVnZ2VkTmFtZSwgXCJEYXRhIC0gXCIgKyBkYXRhc2V0c1tuYW1lXS50aXRsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRCdXR0b25Mb2FkZWQoYnRuKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vbGV0IGltZyA9IGA8aW1nIHNyYz0nJHtpbWdTcmN9JyBjbGFzcz1cImNvcmdpcy1pY29uXCI+YDtcbiAgICAgICAgICAgICAgICAkKFwiPHRyPjwvdHI+XCIpXG4gICAgICAgICAgICAgICAgICAgIC8vLmFwcGVuZCgkKFwiPHRkPlwiICsgaW1nICsgXCI8L3RkPlwiKSlcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKFwiPHRkPlwiICsgZGF0YXNldHNbbmFtZV0udGl0bGUgKyBcIjwvdGQ+XCIpKVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoXCI8dGQ+XCIgKyBkYXRhc2V0c1tuYW1lXS5vdmVydmlldyArIFwiPC90ZD5cIikpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJChcIjx0ZD48L3RkPlwiKS5hcHBlbmQoYnRuKSlcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZFRvKGJvZHkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBib2R5LmFwcGVuZFRvKHN0YXJ0KTtcbiAgICAgICAgICAgIC8vIFNob3cgdGhlIGFjdHVhbCBkaWFsb2dcbiAgICAgICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLmRpYWxvZy5zaG93KFwiSW1wb3J0IERhdGFzZXRzXCIsIHN0YXJ0LCBudWxsKTtcbiAgICAgICAgfSk7XG4gICAgfVxufTtcblxuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTcyNzg3ODczMjY5M1xuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCJDOi9Vc2Vycy9hY2Jhci9Qcm9qZWN0cy9ibG9ja3B5LWVkdS9ibG9ja3B5L25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcInB1YmxpY1BhdGhcIjpcIi4uL1wiLFwiaG1yXCI6dHJ1ZSxcImxvY2Fsc1wiOmZhbHNlfSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTtcbiAgICB9XG4gICIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE3Mjc4Nzg3MzI2OTdcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiQzovVXNlcnMvYWNiYXIvUHJvamVjdHMvYmxvY2tweS1lZHUvYmxvY2tweS9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9obXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanNcIikobW9kdWxlLmlkLCB7XCJwdWJsaWNQYXRoXCI6XCIuLi9cIixcImhtclwiOnRydWUsXCJsb2NhbHNcIjpmYWxzZX0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7XG4gICAgfVxuICAiLCIvLyBUT0RPOiBEeWFubWljYWxseSBwb3B1bGF0ZSBhcmlhLWxhYmVsbGVkYnkgaW4gdGhpcyBhbmQgb3RoZXIgcGxhY2VzXG5cbmV4cG9ydCBsZXQgRElBTE9HX0hUTUwgPSBgXG4gICAgPGRpdiBjbGFzcz0nYmxvY2tweS1kaWFsb2cgbW9kYWwgaGlkZGVuJ1xuICAgICAgICAgcm9sZT1cImRpYWxvZ1wiXG4gICAgICAgICBhcmlhLWxhYmVsPSdEaWFsb2cnXG4gICAgICAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgICAgICAgYXJpYS1tb2RhbD1cInRydWVcIj5cbiAgICAgICAgPGRpdiBjbGFzcz0nbW9kYWwtZGlhbG9nIG1vZGFsLWxnJyByb2xlPVwiZG9jdW1lbnRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9J21vZGFsLWNvbnRlbnQnIHJvbGU9J3JlZ2lvbicgYXJpYS1sYWJlbD0nRGlhbG9nIGNvbnRlbnQnPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J21vZGFsLWhlYWRlcic+XG4gICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0nbW9kYWwtdGl0bGUnPkR5bmFtaWMgQ29udGVudDwvaDQ+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0nYnV0dG9uJyBjbGFzcz0nY2xvc2UnIGRhdGEtZGlzbWlzcz0nbW9kYWwnIGFyaWEtaGlkZGVuPSd0cnVlJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPiZ0aW1lczs8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J21vZGFsLWJvZHknIHN0eWxlPSdtYXgtd2lkdGg6MTAwJTsgbWF4LWhlaWdodDo0MDBweCc+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbW9kYWwtZm9vdGVyJz5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzPSdidG4gYnRuLXdoaXRlIG1vZGFsLWNsb3NlJyBkYXRhLWRpc21pc3M9J21vZGFsJz5DbG9zZTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9J2J1dHRvbicgY2xhc3M9J2J0biBidG4tc3VjY2VzcyBtb2RhbC1va2F5JyBkYXRhLWRpc21pc3M9J21vZGFsJz5Pa2F5PC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+ICAgIFxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuYDtcblxuLyoqXG4gKiBBIHV0aWxpdHkgb2JqZWN0IGZvciBxdWlja2x5IGFuZCBjb252ZW5pZW50bHkgZ2VuZXJhdGluZyBkaWFsb2cgYm94ZXMuXG4gKiBVbmZvcnR1bmF0ZWx5LCB0aGlzIGRvZXNuJ3QgZHluYW1pY2FsbHkgY3JlYXRlIG5ldyBib3hlczsgaXQgcmV1c2VzIHRoZSBzYW1lIG9uZVxuICogb3ZlciBhbmQgb3ZlciBhZ2Fpbi4gSXQgdHVybnMgb3V0IGR5bmFtaWNhbGx5IGdlbmVyYXRpbmcgbmV3IGRpYWxvZyBib3hlc1xuICogaXMgYSBwYWluISBTbyB3ZSBjYW4ndCBzdGFjayB0aGVtLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHRoaXMge0Jsb2NrUHlEaWFsb2d9XG4gKiBAcGFyYW0ge09iamVjdH0gbWFpbiAtIFRoZSBtYWluIEJsb2NrUHkgaW5zdGFuY2VcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHRhZyAtIFRoZSBIVE1MIG9iamVjdCB0aGlzIGlzIGF0dGFjaGVkIHRvLlxuICovXG5leHBvcnQgZnVuY3Rpb24gQmxvY2tQeURpYWxvZyhtYWluLCB0YWcpIHtcbiAgICB0aGlzLm1haW4gPSBtYWluO1xuICAgIHRoaXMudGFnID0gdGFnO1xuXG4gICAgdGhpcy50aXRsZVRhZyA9IHRhZy5maW5kKFwiLm1vZGFsLXRpdGxlXCIpO1xuICAgIHRoaXMuYm9keVRhZyA9IHRhZy5maW5kKFwiLm1vZGFsLWJvZHlcIik7XG4gICAgdGhpcy5mb290ZXJUYWcgPSB0YWcuZmluZChcIi5tb2RhbC1mb290ZXJcIik7XG4gICAgdGhpcy5va2F5QnV0dG9uID0gdGFnLmZpbmQoXCIubW9kYWwtb2theVwiKTtcbiAgICB0aGlzLmNsb3NlQnV0dG9uID0gdGFnLmZpbmQoXCIubW9kYWwtY2xvc2VcIik7XG5cbiAgICB0aGlzLnllcyA9ICgpID0+IHt9O1xuICAgIHRoaXMubm8gPSAoKSA9PiB7fTtcbiAgICB0aGlzLm9rYXlCdXR0b24uY2xpY2soKCkgPT4ge1xuICAgICAgICB0aGlzLnllcygpO1xuICAgICAgICB0aGlzLnRhZy5tb2RhbChcImhpZGVcIik7XG4gICAgfSk7XG4gICAgdGhpcy5jbG9zZUJ1dHRvbi5jbGljaygoKSA9PiB7XG4gICAgICAgIHRoaXMubm8oKTtcbiAgICAgICAgLy90aGlzLnRhZy5tb2RhbChcImhpZGVcIik7XG4gICAgfSk7XG59XG5cbkJsb2NrUHlEaWFsb2cucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudGFnLm1vZGFsKFwiaGlkZVwiKTtcbn07XG5cbi8qKlxuICogQSBzaW1wbGUgZXh0ZXJuYWxseSBhdmFpbGFibGUgZnVuY3Rpb24gZm9yIHBvcHBpbmcgdXAgYSBkaWFsb2dcbiAqIG1lc3NhZ2UuIFRoaXMgbWVudSB3aWxsIGJlIGRyYWdnYWJsZSBieSBpdHMgdGl0bGUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHRpdGxlIC0gVGhlIHRpdGxlIG9mIHRoZSBtZXNzYWdlIGRpYWxvZy4gQ2FuIGhhdmUgSFRNTC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBib2R5IC0gVGhlIGJvZHkgb2YgdGhlIG1lc3NhZ2UgZGlhbG9nLiBDYW4gaGF2ZSBIVE1MLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gb25jbG9zZSAtIEEgZnVuY3Rpb24gdG8gYmUgcnVuIHdoZW4gdGhlIHVzZXIgY2xvc2VzIHRoZSBkaWFsb2cuXG4gKi9cbkJsb2NrUHlEaWFsb2cucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAodGl0bGUsIGJvZHksIG9uY2xvc2UpIHtcbiAgICB0aGlzLnRpdGxlVGFnLmh0bWwodGl0bGUpO1xuICAgIHRoaXMuYm9keVRhZy5odG1sKGJvZHkpO1xuICAgIHRoaXMudGFnLm1vZGFsKFwic2hvd1wiKTtcbiAgICB0aGlzLm9rYXlCdXR0b24uaGlkZSgpO1xuICAgIHRoaXMudGFnLmRyYWdnYWJsZSh7XG4gICAgICAgIFwiaGFuZGxlXCI6IFwiLm1vZGFsLXRpdGxlXCJcbiAgICB9KTtcblxuICAgIHRoaXMudGFnLm9uKFwiaGlkZGVuLmJzLm1vZGFsXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChvbmNsb3NlICE9PSB1bmRlZmluZWQgJiYgb25jbG9zZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgb25jbG9zZSgpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5CbG9ja1B5RGlhbG9nLnByb3RvdHlwZS5jb25maXJtID0gZnVuY3Rpb24gKHRpdGxlLCBib2R5LCB5ZXMsIG5vLCB5ZXNUZXh0KSB7XG4gICAgaWYgKHllc1RleHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB5ZXNUZXh0ID0gXCJPa2F5XCI7XG4gICAgfVxuICAgIHRoaXMuc2hvdyh0aXRsZSwgYm9keSwgbm8pO1xuICAgIHRoaXMueWVzID0geWVzO1xuICAgIHRoaXMubm8gPSBubztcbiAgICB0aGlzLm9rYXlCdXR0b24uc2hvdygpLmh0bWwoeWVzVGV4dCk7XG4gICAgLy8gVE9ETzogYWRkIG9rYXkgYnV0dG9uIGFuZCBjYW5jZWwgYnV0dG9uXG59O1xuXG5CbG9ja1B5RGlhbG9nLnByb3RvdHlwZS5BU1NJR05NRU5UX1ZFUlNJT05fQ0hBTkdFRCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmNvbmZpcm0oXCJBc3NpZ25tZW50IENoYW5nZWRcIiwgXCJZb3VyIGluc3RydWN0b3IgaGFzIG1hZGUgY2hhbmdlcyB0byB0aGlzIGFzc2lnbm1lbnQuIFdvdWxkIHlvdSBsaWtlIHRvIHJlbG9hZD8gQWxsIHlvdXIgd29yayBoYXMgYmVlbiBzYXZlZC5cIiwpO1xufTtcblxuQmxvY2tQeURpYWxvZy5wcm90b3R5cGUuRVJST1JfTE9BRElOR19BU1NJR05NTkVOVCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICB0aGlzLnNob3coXCJFcnJvciBMb2FkaW5nIEFzc2lnbm1lbnRcIiwgYEJsb2NrUHkgZW5jb3VudGVyZWQgYW4gZXJyb3Igd2hpbGUgbG9hZGluZyB0aGUgYXNzaWdubWVudC48YnI+XG5QbGVhc2UgcmVsb2FkIHRoZSBwYWdlIGFuZCB0cnkgYWdhaW4uPGJyPlJlc3BvbnNlIGZyb20gc2VydmVyIHdhczo8YnI+PHByZT4ke3JlYXNvbn08L3ByZT5gLCk7XG59O1xuXG5CbG9ja1B5RGlhbG9nLnByb3RvdHlwZS5FUlJPUl9MSVNUSU5HX1VQTE9BREVEX0ZJTEVTID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIHRoaXMuc2hvdyhcIkVycm9yIExpc3RpbmcgVXBsb2FkZWQgRmlsZXNcIiwgYEJsb2NrUHkgZW5jb3VudGVyZWQgYW4gZXJyb3Igd2hpbGUgbGlzdGluZyB0aGUgdXBsb2FkZWQgZmlsZXMuPGJyPlxuUGxlYXNlIHJlbG9hZCB0aGUgcGFnZSBhbmQgdHJ5IGFnYWluLjxicj5SZXNwb25zZSBmcm9tIHNlcnZlciB3YXM6PGJyPjxwcmU+JHtyZWFzb259PC9wcmU+YCwpO1xufTtcblxuQmxvY2tQeURpYWxvZy5wcm90b3R5cGUuRVJST1JfVVBMT0FESU5HX0ZJTEUgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgdGhpcy5zaG93KFwiRXJyb3IgVXBsb2FkZWQgRmlsZVwiLCBgQmxvY2tQeSBlbmNvdW50ZXJlZCBhbiBlcnJvciB3aGlsZSB1cGxvYWRpbmcgdGhlIGZpbGUuPGJyPlxuUGxlYXNlIHRyeSBhZ2Fpbi48YnI+UmVzcG9uc2UgZnJvbSBzZXJ2ZXIgd2FzOjxicj48cHJlPiR7cmVhc29ufTwvcHJlPmAsKTtcbn07XG5cbkJsb2NrUHlEaWFsb2cucHJvdG90eXBlLkVSUk9SX0RPV05MT0FESU5HX0ZJTEUgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgdGhpcy5zaG93KFwiRXJyb3IgRG93bmxvYWRpbmcgRmlsZVwiLCBgQmxvY2tQeSBlbmNvdW50ZXJlZCBhbiBlcnJvciB3aGlsZSBkb3dubG9hZGluZyBhIGZpbGUuPGJyPlxuUGxlYXNlIHRyeSBhZ2Fpbi48YnI+UmVzcG9uc2UgZnJvbSBzZXJ2ZXIgd2FzOjxicj48cHJlPiR7cmVhc29ufTwvcHJlPmAsKTtcbn07XG5cbkJsb2NrUHlEaWFsb2cucHJvdG90eXBlLkVSUk9SX1JFTkFNSU5HX0ZJTEUgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgdGhpcy5zaG93KFwiRXJyb3IgUmVuYW1pbmcgRmlsZVwiLCBgQmxvY2tQeSBlbmNvdW50ZXJlZCBhbiBlcnJvciB3aGlsZSByZW5hbWluZyBhIGZpbGUuPGJyPlxuUGxlYXNlIHRyeSBhZ2Fpbi48YnI+UmVzcG9uc2UgZnJvbSBzZXJ2ZXIgd2FzOjxicj48cHJlPiR7cmVhc29ufTwvcHJlPmAsKTtcbn07XG5cbkJsb2NrUHlEaWFsb2cucHJvdG90eXBlLkVSUk9SX0RFTEVUSU5HX0ZJTEUgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgdGhpcy5zaG93KFwiRXJyb3IgRGVsZXRpbmcgRmlsZVwiLCBgQmxvY2tQeSBlbmNvdW50ZXJlZCBhbiBlcnJvciB3aGlsZSBkZWxldGluZyBhIGZpbGUuPGJyPlxuUGxlYXNlIHRyeSBhZ2Fpbi48YnI+UmVzcG9uc2UgZnJvbSBzZXJ2ZXIgd2FzOjxicj48cHJlPiR7cmVhc29ufTwvcHJlPmAsKTtcbn07XG5cbkJsb2NrUHlEaWFsb2cucHJvdG90eXBlLkVSUk9SX1NBVklOR19BU1NJR05NTkVOVCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICB0aGlzLnNob3coXCJFcnJvciBTYXZpbmcgQXNzaWdubWVudFwiLCBgQmxvY2tQeSBlbmNvdW50ZXJlZCBhbiBlcnJvciB3aGlsZSBzYXZpbmcgdGhlIGFzc2lnbm1lbnQuPGJyPlxuUGxlYXNlIHJlbG9hZCB0aGUgcGFnZSBhbmQgdHJ5IGFnYWluLjxicj5SZXNwb25zZSBmcm9tIHNlcnZlciB3YXM6PGJyPjxwcmU+JHtyZWFzb259PC9wcmU+YCwpO1xufTtcblxuQmxvY2tQeURpYWxvZy5wcm90b3R5cGUuRVJST1JfU0hPV19TVFVERU5UX0VSUk9SID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgdGhpcy5zaG93KFwiT3JpZ2luYWwgRXJyb3JcIiwgYFdoZW4gSSByYW4geW91ciBjb2RlLCBJIGVuY291bnRlcmVkIGFuIGVycm9yOlxcblxcbjxkaXYgY2xhc3M9XCJibG9ja3B5LWRpYWxvZy1zdHVkZW50LWVycm9yLW1lc3NhZ2VcIj4ke2Vycm9yfTwvZGl2PmApO1xufTtcblxuQmxvY2tQeURpYWxvZy5wcm90b3R5cGUuUE9TSVRJVkVfRkVFREJBQ0tfRlVMTCA9IGZ1bmN0aW9uICh0aXRsZSwgbWVzc2FnZSkge1xuICAgIHRoaXMuc2hvdyh0aXRsZSwgbWVzc2FnZSk7XG59O1xuXG5CbG9ja1B5RGlhbG9nLnByb3RvdHlwZS5TQ1JFRU5TSE9UX0JMT0NLUyA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBUT0RPXG59O1xuXG5CbG9ja1B5RGlhbG9nLnByb3RvdHlwZS5FUlJPUl9VUERBVElOR19TVUJNSVNTSU9OX1NUQVRVUyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnNob3coXCJFcnJvciBVcGRhdGluZyBTdWJtaXNzaW9uIFN0YXR1c1wiLCBgQmxvY2tQeSBlbmNvdW50ZXJlZCBhbiBlcnJvciB3aGlsZSB1cGRhdGluZyB5b3VyIHN1Ym1pc3Npb24gc3RhdHVzLjxicj5cblBsZWFzZSByZWxvYWQgdGhlIHBhZ2UgYW5kIHRyeSBhZ2Fpbi5gKTtcbn07XG5cbkJsb2NrUHlEaWFsb2cucHJvdG90eXBlLkVSUk9SX0xPQURJTkdfSElTVE9SWSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnNob3coXCJFcnJvciBMb2FkaW5nIEhpc3RvcnlcIiwgYEJsb2NrUHkgZW5jb3VudGVyZWQgYW4gZXJyb3Igd2hpbGUgbG9hZGluZyB5b3VyIGhpc3RvcnkuPGJyPlxuUGxlYXNlIHJlbG9hZCB0aGUgcGFnZSBhbmQgdHJ5IGFnYWluLmApO1xufTtcblxuQmxvY2tQeURpYWxvZy5wcm90b3R5cGUuT0ZGRVJfRk9SSyA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgc2V0dXBVcmwgPSB0aGlzLm1haW4ubW9kZWwuY29uZmlndXJhdGlvbi51cmxzLmluc3RydWN0aW9uc0Fzc2lnbm1lbnRTZXR1cDtcbiAgICBzZXR1cFVybCA9IHNldHVwVXJsID8gYCAoPGEgaHJlZj1cIiR7c2V0dXBVcmx9XCIgdGFyZ2V0PVwiX2JsYW5rXCI+SG93IGRvIEkgZG8gdGhhdD88L2E+KWAgOiBcIlwiO1xuICAgIHRoaXMuc2hvdyhcIkFzc2lnbm1lbnQgTm90IE93bmVkOyBGb3JrP1wiLCBgXG4gICAgPGRpdiBjbGFzcz1cIm1iLTRcIj5cbiAgICAgICAgSXQgbG9va3MgbGlrZSB5b3Ugd2FudCB0byBlZGl0IHRoaXMgYXNzaWdubWVudCwgYnV0IHlvdSBhcmUgbm90IGFuIGluc3RydWN0b3JcbiAgICBvciBkZXNpZ25lciBpbiB0aGUgY291cnNlIHRoYXQgb3ducyBpdCAoXCJDb3Vyc2UgTmFtZVwiKS4gV291bGQgeW91IGxpa2UgdG8gZm9ya1xuICAgIHRoaXMgYXNzaWdubWVudCAob3IgaXRzIGVudGlyZSBncm91cCkgc28gdGhhdCB5b3UgY2FuIHNhdmUgeW91ciBtb2RpZmljYXRpb25zP1xuICAgIDwvZGl2PlxuICAgIFxuICAgIDxkaXYgY2xhc3M9XCJtYi00XCI+XG4gICAgICAgIFJlbWVtYmVyIHRvIHVwZGF0ZSB0aGUgTGF1bmNoIFVSTCBpbiB0aGUgYXNzaWdubWVudHMnIHNldHRpbmdzIG9uIENhbnZhcyEke3NldHVwVXJsfVxuICAgIDwvZGl2PlxuICAgIFxuICAgIDxkaXY+PGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzPSdidG4gYnRuLXdoaXRlJz5Gb3JrIGVudGlyZSBhc3NpZ25tZW50IGdyb3VwPC9idXR0b24+PC9kaXY+XG4gICAgPGRpdj48YnV0dG9uIHR5cGU9J2J1dHRvbicgY2xhc3M9J2J0biBidG4td2hpdGUnPkZvcmsganVzdCB0aGlzIGFzc2lnbm1lbnQ8L2J1dHRvbj48L2Rpdj5cbiAgICA8ZGl2PjxidXR0b24gdHlwZT0nYnV0dG9uJyBjbGFzcz0nYnRuIGJ0bi1kYW5nZXInPlJlc2V0IG15IGxvY2FsIGNoYW5nZXM8L2J1dHRvbj48L2Rpdj5cbiAgICBcbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1jaGVja1wiPlxuICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCJcbiAgICAgICAgICAgICAgICBuYW1lPVwiYmxvY2tweS10cmFuc2Zlci1zdWJtaXNzaW9uc1wiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCIgZm9yPVwiYmxvY2tweS10cmFuc2Zlci1zdWJtaXNzaW9uc1wiPlRyYW5zZmVyIFN0dWRlbnQgU3VibWlzc2lvbnMgZm9yIHRoaXMgY291cnNlPC9sYWJlbD5cbiAgICA8L2Rpdj5cbiAgICBcbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1jaGVja1wiPlxuICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tdGV4dFwiIGZvcj1cImJsb2NrcHktY291cnNlLWlkXCI+TmV3IG93bmluZyBjb3Vyc2UgaWQ6IDwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJibG9ja3B5LWNvdXJzZS1pZFwiIHZhbHVlPVwiJHt0aGlzLm1haW4ubW9kZWwudXNlci5jb3Vyc2VJZCgpfVwiPlxuICAgIDwvZGl2PlxuICAgIGApO1xufTtcblxuQmxvY2tQeURpYWxvZy5wcm90b3R5cGUuRURJVF9JTlBVVFMgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGlucHV0VGV4dCA9IHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24uaW5wdXQoKS5qb2luKFwiXFxuXCIpO1xuICAgIGxldCBjbGVhcklucHV0cyA9IHRoaXMubWFpbi5tb2RlbC5kaXNwbGF5LmNsZWFySW5wdXRzKCkgPyBcIlwiIDogXCJjaGVja2VkXCI7XG4gICAgbGV0IHllcyA9ICgpID0+IHtcbiAgICAgICAgbGV0IGNoZWNrZWQgPSB0aGlzLnRhZy5maW5kKFwiLmJsb2NrcHktcmVtZW1iZXItaW5wdXRzXCIpLnByb3AoXCJjaGVja2VkXCIpO1xuICAgICAgICBsZXQgaW5wdXRzID0gdGhpcy50YWcuZmluZChcIi5ibG9ja3B5LWlucHV0LWxpc3RcIikudmFsKCkuc3BsaXQoXCJcXG5cIik7XG4gICAgICAgIHRoaXMubWFpbi5tb2RlbC5kaXNwbGF5LmNsZWFySW5wdXRzKCFjaGVja2VkKTtcbiAgICAgICAgdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5pbnB1dChpbnB1dHMpO1xuICAgIH07XG4gICAgdGhpcy5jb25maXJtKFwiRWRpdCBSZW1lbWJlcmVkIElucHV0c1wiLCBgXG5cbjxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrXCI+XG48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJibG9ja3B5LXJlbWVtYmVyLWlucHV0cyBmb3JtLWNoZWNrLWlucHV0XCJcbiAgICAgICAgbmFtZT1cImJsb2NrcHktcmVtZW1iZXItaW5wdXRzXCIgJHtjbGVhcklucHV0c30+XG48bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCIgZm9yPVwiYmxvY2tweS1yZW1lbWJlci1pbnB1dHNcIj5SZXVzZSBpbnB1dHMgZm9yIG5leHQgZXhlY3V0aW9uPC9sYWJlbD5cbjwvZGl2PlxuXG48dGV4dGFyZWEgY2xhc3M9XCJibG9ja3B5LWlucHV0LWxpc3QgZm9ybS1jb250cm9sXCIgcm93cz1cIjRcIj4ke2lucHV0VGV4dH08L3RleHRhcmVhPjxicj5cbkVkaXQgdGhlIGlucHV0cyBhYm92ZSB0byBzdG9yZSBhbmQgcmV1c2UgdGhlbSBhY3Jvc3MgbXVsdGlwbGUgZXhlY3V0aW9ucy5cbkVhY2ggaW5wdXQgc2hvdWxkIGJlIHB1dCBvbiBpdHMgb3duIGxpbmUuXG5Zb3UgZG8gbm90IG5lZWQgcXVvdGVzOyB0aGUgdGV4dCB3aWxsIGJlIGVudGVyZWQgbGl0ZXJhbGx5LlxuIFxuYCwgeWVzLCB0aGlzLm5vLCBcIlNhdmVcIik7XG4gICAgLy8gVE9ETzogQWxsb3cgdXNlciB0byBzcGVjaWZ5IHRoZSBpbmZpbml0ZSBzdHJpbmcgdG8ga2VlcCBnaXZpbmcgd2hlbiB0aGUgb3RoZXJzIHJ1biBvdXRcbn07IiwiaW1wb3J0IHtFZGl0b3JzfSBmcm9tIFwiLi4vZWRpdG9yc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gdXBsb2FkRmlsZShtb2RlbCwgZXZlbnQpIHtcbiAgICBsZXQgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgbGV0IGZpbGVzID0gZXZlbnQudGFyZ2V0LmZpbGVzO1xuICAgIGZpbGVSZWFkZXIub25sb2FkID0gKGUgPT5cbiAgICAgICAgbW9kZWwudWkuZWRpdG9ycy5jdXJyZW50KCkudXBsb2FkRmlsZShlKVxuICAgICk7XG4gICAgZmlsZVJlYWRlci5maWxlTmFtZSA9IGZpbGVzWzBdLm5hbWU7XG4gICAgZmlsZVJlYWRlci5yZWFkQXNUZXh0KGZpbGVzWzBdKTtcbiAgICBldmVudC50YXJnZXQudmFsdWUgPSBcIlwiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2x1Z2dpZnkodGV4dCkge1xuICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoL1teYS16MC05XS9naSwgXCJfXCIpLnRvTG93ZXJDYXNlKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkb3dubG9hZEZpbGUobW9kZWwsIGV2ZW50KSB7XG4gICAgbGV0IHtuYW1lLCBleHRlbnNpb24sIGNvbnRlbnRzLCBtaW1ldHlwZX0gPSBtb2RlbC51aS5lZGl0b3JzLmN1cnJlbnQoKS5kb3dubG9hZEZpbGUoKTtcbiAgICAvLyBNYWtlIHNhZmVcbiAgICBuYW1lID0gc2x1Z2dpZnkobmFtZSk7XG4gICAgbmFtZSA9IG5hbWUgKyBleHRlbnNpb247XG4gICAgLy8gTWFrZSB0aGUgZGF0YSBkb3dubG9hZCBhcyBhIGZpbGVcbiAgICBsZXQgYmxvYiA9IG5ldyBCbG9iKFtjb250ZW50c10sIHt0eXBlOiBtaW1ldHlwZX0pO1xuICAgIGlmICh3aW5kb3cubmF2aWdhdG9yLm1zU2F2ZU9yT3BlbkJsb2IpIHtcbiAgICAgICAgd2luZG93Lm5hdmlnYXRvci5tc1NhdmVCbG9iKGJsb2IsIG5hbWUpO1xuICAgIH0gZWxzZXtcbiAgICAgICAgbGV0IHRlbXBvcmFyeURvd25sb2FkTGluayA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICAgICAgdGVtcG9yYXJ5RG93bmxvYWRMaW5rLmhyZWYgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICAgICAgdGVtcG9yYXJ5RG93bmxvYWRMaW5rLmRvd25sb2FkID0gbmFtZTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0ZW1wb3JhcnlEb3dubG9hZExpbmspO1xuICAgICAgICB0ZW1wb3JhcnlEb3dubG9hZExpbmsuY2xpY2soKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0ZW1wb3JhcnlEb3dubG9hZExpbmspO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFic3RyYWN0RWRpdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihtYWluLCB0YWcpIHtcbiAgICAgICAgdGhpcy5tYWluID0gbWFpbjtcbiAgICAgICAgdGhpcy50YWcgPSB0YWc7XG5cbiAgICAgICAgdGhpcy5maWxlU3lzdGVtID0gbWFpbi5jb21wb25lbnRzLmZpbGVTeXN0ZW07XG4gICAgICAgIHRoaXMuZmlsZW5hbWUgPSBudWxsO1xuICAgICAgICB0aGlzLmZpbGUgPSBudWxsO1xuICAgIH1cblxuICAgIGRlbGV0ZUZpbGUoKSB7XG4gICAgICAgIHRoaXMuZmlsZVN5c3RlbS5kZWxldGVGaWxlKHRoaXMuZmlsZW5hbWUpO1xuICAgICAgICB0aGlzLm1haW4ubW9kZWwuZGlzcGxheS5maWxlbmFtZShcImFuc3dlci5weVwiKTtcbiAgICAgICAgdGhpcy5tYWluLmNvbXBvbmVudHMuZWRpdG9ycy5jaGFuZ2VFZGl0b3IoXCJhbnN3ZXIucHlcIik7XG4gICAgfVxuXG4gICAgb25GaWxlRGVsZXRlZCgpIHtcbiAgICAgICAgLy8gVE9ETzogU3dpdGNoIHRvIHRoZSBwcmV2aW91cyBmaWxlIGluc3RlYWQgb2YgYSBkZWZhdWx0IGZpbGVcbiAgICAgICAgdGhpcy5tYWluLm1vZGVsLmRpc3BsYXkuZmlsZW5hbWUoXCJhbnN3ZXIucHlcIik7XG4gICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLmVkaXRvcnMuY2hhbmdlRWRpdG9yKFwiYW5zd2VyLnB5XCIpO1xuICAgIH1cblxuICAgIG9uRmlsZVVwZGF0ZWQoZmlsZSkge1xuICAgICAgICBpZiAoZmlsZS5maWxlbmFtZSA9PT0gdGhpcy5maWxlbmFtZSkge1xuICAgICAgICAgICAgLy90aGlzLmZpbGUgPSBmaWxlO1xuICAgICAgICAgICAgdGhpcy5tYWluLmNvbXBvbmVudHMuZWRpdG9ycy5jaGFuZ2VFZGl0b3IodGhpcy5maWxlbmFtZSk7XG4gICAgICAgICAgICAvL3RoaXMuZmlsZVN5c3RlbS5zdG9wV2F0Y2hpbmdGaWxlKHRoaXMuZmlsZW5hbWUpO1xuICAgICAgICAgICAgLy90aGlzLnRyYWNrQ3VycmVudEZpbGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRyYWNrQ3VycmVudEZpbGUoKSB7XG4gICAgICAgIHRoaXMuZmlsZVN5c3RlbS53YXRjaEZpbGUodGhpcy5maWxlbmFtZSwge1xuICAgICAgICAgICAgdXBkYXRlZDogdGhpcy5vbkZpbGVVcGRhdGVkLmJpbmQodGhpcyksXG4gICAgICAgICAgICBkZWxldGVkOiB0aGlzLm9uRmlsZURlbGV0ZWQuYmluZCh0aGlzKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBlbnRlcihuZXdGaWxlbmFtZSwgb2xkRWRpdG9yKSB7XG4gICAgICAgIHRoaXMuZmlsZW5hbWUgPSBuZXdGaWxlbmFtZTtcbiAgICAgICAgdGhpcy5maWxlID0gdGhpcy5maWxlU3lzdGVtLmdldEZpbGUobmV3RmlsZW5hbWUpO1xuICAgICAgICB0aGlzLnRyYWNrQ3VycmVudEZpbGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBuZXdGaWxlbmFtZSAtIHRoZSBmaWxlbmFtZSB0aGF0IHRoZSBvdGhlciBlZGl0b3Igd2lsbCBiZSBzd2l0Y2hpbmcgdG9cbiAgICAgKiBAcGFyYW0gb2xkRWRpdG9yXG4gICAgICogQHBhcmFtIG5ld0VkaXRvclxuICAgICAqL1xuICAgIGV4aXQobmV3RmlsZW5hbWUsIG9sZEVkaXRvciwgbmV3RWRpdG9yKSB7XG4gICAgICAgIHRoaXMuZmlsZVN5c3RlbS5zdG9wV2F0Y2hpbmdGaWxlKHRoaXMuZmlsZW5hbWUpO1xuICAgICAgICB0aGlzLmZpbGUgPSBudWxsO1xuICAgICAgICB0aGlzLmZpbGVuYW1lID0gbnVsbDtcbiAgICB9XG5cbiAgICB1cGxvYWRGaWxlKGV2ZW50KSB7XG4gICAgICAgIGxldCBmaWxlbmFtZSA9IGV2ZW50LnRhcmdldC5maWxlTmFtZTtcbiAgICAgICAgbGV0IGNvbnRlbnRzID0gZXZlbnQudGFyZ2V0LnJlc3VsdDtcbiAgICAgICAgdGhpcy5maWxlLmhhbmRsZShjb250ZW50cyk7XG4gICAgfVxuXG4gICAgZG93bmxvYWRGaWxlKCkge1xuICAgICAgICBsZXQgZmlsZW5hbWUgPSBFZGl0b3JzLnBhcnNlRmlsZW5hbWUodGhpcy5maWxlbmFtZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiBmaWxlbmFtZS5uYW1lLFxuICAgICAgICAgICAgZXh0ZW5zaW9uOiBmaWxlbmFtZS50eXBlLFxuICAgICAgICAgICAgY29udGVudHM6IHRoaXMuZmlsZS5oYW5kbGUoKSxcbiAgICAgICAgICAgIG1pbWV0eXBlOiBcInRleHQvcGxhaW5cIlxuICAgICAgICB9O1xuICAgIH1cbn0iLCJpbXBvcnQge0Fic3RyYWN0RWRpdG9yfSBmcm9tIFwiLi9hYnN0cmFjdF9lZGl0b3JcIjtcbmltcG9ydCB7RGlzcGxheU1vZGVzfSBmcm9tIFwiLi9weXRob25cIjtcblxuY29uc3QgQVNTSUdOTUVOVF9TRVRUSU5HUyA9IFtcbiAgICBbXCJ0b29sYm94XCIsIFwidG9vbGJveFwiLCBcIm5vcm1hbFwiLCBcInRvb2xib3hcIiwgXCJXaGljaCB2ZXJzaW9uIG9mIHRoZSB0b29sYm94IHRvIHByZXNlbnQgdG8gdGhlIHVzZXIuXCJdLFxuICAgIFtcInR5cGVcIiwgXCJ0eXBlXCIsIFwiYmxvY2tweVwiLCBcInR5cGVcIiwgXCJUaGUgdHlwZSBvZiBxdWVzdGlvbjsgQmxvY2tQeSBwcm9ncmFtbWluZyBwcm9ibGVtcyBhcmUgdGhlIGRlZmF1bHQsIGJ1dCB3ZSBhbHNvIHN1cHBvcnQgc3RhdGljIHJlYWRpbmdzLCBxdWl6IHF1ZXN0aW9ucywgYW5kIGEgTWF6ZSBnYW1lLlwiXSxcbiAgICBbXCJwYXNzY29kZVwiLCBcInBhc3Njb2RlXCIsIFwiXCIsIFwic3RyaW5nXCIsIFwiQSBzdHJpbmcgdGhhdCB0aGUgdXNlciBtdXN0IGVudGVyIHRvIGFjY2VzcyB0aGUgcHJvYmxlbS4gSWYgYmxhbmssIHRoZW4gbm8gcGFzc2NvZGUgaXMgcHJvbXB0ZWQuXCJdLFxuICAgIC8vW1widG9vbGJveExldmVsXCIsIFwidG9vbGJveF9sZXZlbFwiLCBcIm5vcm1hbFwiLCBcInRvb2xib3hcIiwgXCJJTkNPTVBMRVRFOiBXaGF0IGxldmVsIG9mIHRvb2xib3ggdG8gcHJlc2VudCB0byB0aGUgdXNlciAoaGlkaW5nIGFuZCBzaG93aW5nIGNhdGVnb3JpZXMpLlwiXSxcbiAgICBbXCJzdGFydFZpZXdcIiwgXCJzdGFydF92aWV3XCIsIERpc3BsYXlNb2Rlcy5URVhULCBEaXNwbGF5TW9kZXMsIFwiVGhlIFB5dGhvbiBlZGl0b3IgbW9kZSB0byBzdGFydCBpbiB3aGVuIHRoZSBzdHVkZW50IHN0YXJ0cyB0aGUgcHJvYmxlbS5cIl0sXG4gICAgW1wiZGF0YXNldHNcIiwgXCJkYXRhc2V0c1wiLCBcIlwiLCBcInN0cmluZ1wiLCBcIlRoZSBjdXJyZW50IGxpc3Qgb2YgZGF0YXNldHMgYXZhaWxhYmxlIG9uIGxvYWQgYXMgYSBjb21tYS1zZXBhcmF0ZWQgc3RyaW5nLlwiXSxcbiAgICBbXCJkaXNhYmxlVGltZW91dFwiLCBcImRpc2FibGVfdGltZW91dFwiLCBmYWxzZSwgXCJib29sXCIsIFwiSWYgY2hlY2tlZCwgdGhlbiBzdHVkZW50cyBjb2RlIGlzIGFsbG93ZWQgdG8gcnVuIHdpdGhvdXQgdGltZW91dHMgKHBvdGVudGlhbGx5IGFsbG93aW5nIGluZmluaXRlIGxvb3BzKS5cIl0sXG4gICAgW1wicGFydElkXCIsIFwicGFydF9pZFwiLCBcIlwiLCBcInN0cmluZ1wiLCBcIlRoZSBQYXJ0IElEIG9mIGFuIEFzc2lnbm1lbnQgdGhhdCB0aGlzIGVkaXRvciBpcyByZXNwb25zaWJsZSBmb3IuIEFzc2lnbm1lbnRzIGNhbiBoYXZlIHJlZ2lvbnMgKFxcXCJQYXJ0c1xcXCIpIHRoYXQgYmVoYXZlIGluZGVwZW5kZW50bHkgdG8gdGhlIHVzZXIgYnV0IGFsbCBjb3JyZXNwb25kIHRvIHRoZSBzYW1lIGFzc2lnbm1lbnQgb24gdGhlIGJhY2tlbmQuIEJsYW5rIGNvcnJlc3BvbmRzIHRvIHRoZSBmdWxsIGRvY3VtZW50LiBOb3RlIHRoYXQgbW9zdCBhc3NpZ25tZW50IHNldHRpbmdzIHdpbGwgYXBwbHkgVU5JVkVSU0FMTFkgYWNyb3NzIGFsbCBwYXJ0cywgaW5jbHVkaW5nIHRoZSBvbl9ydW4ucHkgYW5kIHRoZSBvdGhlciBzZXR0aW5ncyBvbiB0aGlzIHBhZ2UuXCJdLFxuICAgIFtcImlzUGFyc29uc1wiLCBcImlzX3BhcnNvbnNcIiwgZmFsc2UsIFwiYm9vbFwiLCBcIklmIGNoZWNrZWQsIHRoZW4gdGhpcyBpcyBhIHBhcnNvbidzIHN0eWxlIHF1ZXN0aW9uIChqdW1ibGVkKS5cIl0sXG4gICAgW1wic2F2ZVR1cnRsZU91dHB1dFwiLCBcInNhdmVfdHVydGxlX291dHB1dFwiLCBmYWxzZSwgXCJib29sXCIsIFwiSWYgY2hlY2tlZCwgdGhlbiB0dXJ0bGUgKGFuZCBweWdhbWUpIG91dHB1dCBpcyBzYXZlZCB3aGVuZXZlciB0aGUgcHJvZ3JhbSB1c2VzIGl0LlwiXSxcbiAgICBbXCJkaXNhYmxlRmVlZGJhY2tcIiwgXCJkaXNhYmxlX2ZlZWRiYWNrXCIsIGZhbHNlLCBcImJvb2xcIiwgXCJJZiBjaGVja2VkLCB0aGVuIG5vIGluc3RydWN0b3Igc2NyaXB0cyBhcmUgcnVuIChlLmcuLCBvbl9ydW4gYW5kIG9uX2V2YWwpLlwiXSxcbiAgICBbXCJkaXNhYmxlSW5zdHJ1Y3RvclJ1blwiLCBcImRpc2FibGVfaW5zdHJ1Y3Rvcl9ydW5cIiwgZmFsc2UsIFwiYm9vbFwiLCBcIklmIGNoZWNrZWQsIHRoZW4gdGhlIGluc3RydWN0b3Igb25fcnVuIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgcnVuIHRoZSBzdHVkZW50cycgY29kZS4gVGhpcyBzdGlsbCBydW5zIHRoZSBzdHVkZW50cycgY29kZSBvbmNlIGJlZm9yZWhhbmQsIGJ1dCB0aGUgb3V0cHV0L2RhdGEgd2lsbCBub3QgYmUgYXZhaWxhYmxlIHRvIHRoZSBpbnN0cnVjdG9yJ3Mgb25fcnVuLnB5IHNjcmlwdC5cIl0sXG4gICAgW1wiZGlzYWJsZVN0dWRlbnRSdW5cIiwgXCJkaXNhYmxlX3N0dWRlbnRfcnVuXCIsIGZhbHNlLCBcImJvb2xcIiwgXCJJZiBjaGVja2VkLCB0aGVuIHRoZSBydW4gYnV0dG9uIG5vIGxvbmdlciBydW4gdGhlIHN0dWRlbnRzJyBjb2RlLiBUaGlzIHN0aWxsIHJ1bnMgdGhlIGluc3RydWN0b3IncyBmZWVkYmFjayBvbl9ydW4gc2NyaXB0LlwiXSxcbiAgICBbXCJkaXNhYmxlVGlmYVwiLCBcImRpc2FibGVfdGlmYVwiLCBmYWxzZSwgXCJib29sXCIsIFwiSWYgY2hlY2tlZCwgdGhlbiBkbyBub3QgYXV0b21hdGljYWxseSBydW4gVGlmYSAod2hpY2ggY2FuIGJlIHNsb3cpLlwiXSxcbiAgICBbXCJkaXNhYmxlVHJhY2VcIiwgXCJkaXNhYmxlX3RyYWNlXCIsIGZhbHNlLCBcImJvb2xcIiwgXCJJZiBjaGVja2VkLCB0aGVuIHRoZSBzdHVkZW50cyBjb2RlIHdpbGwgbm90IGhhdmUgaXRzIGV4ZWN1dGlvbiB0cmFjZWQgKG5vIHZhcmlhYmxlcyByZWNvcmRlZCwgbm8gY292ZXJhZ2UgdHJhY2tlZCkuXCJdLFxuICAgIFtcImRpc2FibGVFZGl0XCIsIFwiZGlzYWJsZV9lZGl0XCIsIGZhbHNlLCBcImJvb2xcIiwgXCJJZiBjaGVja2VkLCB0aGVuIHRoZSBzdHVkZW50cycgZmlsZSB3aWxsIG5vdCBiZSBlZGl0YWJsZS5cIl0sXG4gICAgW1wicHJlbG9hZEFsbEZpbGVzXCIsIFwicHJlbG9hZF9hbGxfZmlsZXNcIiwgZmFsc2UsIFwiYm9vbFwiLCBcIklmIGNoZWNrZWQsIHRoZW4gdGhlIHN0dWRlbnRzIGNhbiB1cGxvYWQgYW5kIHVzZSBpbWFnZXMgYW5kIG90aGVyIGZpbGVzLiBUaGlzIHByZWxvYWRzIGFsbCBhdmFpbGFibGUgZmlsZXMgYW5kIGltYWdlcy4gWW91IGNhbiBmaWx0ZXIgdGhlbSB1c2luZyB0aGUgUHJlbG9hZGVkIEZpbGVzIHNldHRpbmcuXCJdLFxuICAgIFtcImVuYWJsZUltYWdlc1wiLCBcImNhbl9pbWFnZVwiLCBmYWxzZSwgXCJib29sXCIsIFwiSWYgY2hlY2tlZCwgdGhlbiB1c2VycyBjYW4gY29weS9wYXN0ZSBpbWFnZXMgZGlyZWN0bHkgaW50byB0aGUgdGV4dCBlZGl0b3IuXCJdLFxuICAgIFtcImVuYWJsZUJsb2Nrc1wiLCBcImNhbl9ibG9ja3NcIiwgdHJ1ZSwgXCJib29sXCIsIFwiSWYgY2hlY2tlZCwgdGhlbiB0aGUgc3R1ZGVudCBjYW4gZWRpdCB0aGUgYmxvY2sgaW50ZXJmYWNlIChpZiBub3QsIHRoZW4gaXQgaXMgdmlzaWJsZSBidXQgbm90IGVkaXRhYmxlKS5cIl0sXG4gICAgW1wiY2FuQ2xvc2VcIiwgXCJjYW5fY2xvc2VcIiwgZmFsc2UsIFwiYm9vbFwiLCBcIklmIGNoZWNrZWQsIHRoZW4gdGhlIHN0dWRlbnQgc2hvdWxkIG1hcmsgdGhlaXIgc3VibWlzc2lvbiBjbG9zZWQgd2hlbiB0aGV5IGFyZSBkb25lLiBUaGVyZSBpcyBubyB3YXkgdG8gZm9yY2UgYSBzdHVkZW50IHRvIGRvIHNvLiBVbmxpa2UgUmV2aWV3ZWQsIHRoaXMgc3RpbGwgc3VibWl0cyB0aGUgY29ycmVjdG5lc3MuXCJdLFxuICAgIFtcIm9ubHlJbnRlcmFjdGl2ZVwiLCBcIm9ubHlfaW50ZXJhY3RpdmVcIiwgZmFsc2UsIFwiYm9vbFwiLCBcIklmIGNoZWNrZWQsIHRoZSBlZGl0b3JzIGFyZSBoaWRkZW4sIHRoZSBwcm9ncmFtIGlzIGF1dG9tYXRpY2FsbHkgcnVuLCBhbmQgdGhlbiB0aGUgY29uc29sZSBlbnRlcnMgRXZhbCBtb2RlIChpbnRlcmFjdGl2ZSkuXCJdLFxuICAgIFtcIm9ubHlVcGxvYWRzXCIsIFwib25seV91cGxvYWRzXCIsIGZhbHNlLCBcImJvb2xcIiwgXCJJZiBjaGVja2VkLCB0aGVuIHRoZSBzdHVkZW50cycgZmlsZSB3aWxsIG5vdCBiZSBkaXJlY3RseSBlZGl0YWJsZSAodGhleSB3aWxsIGhhdmUgdG8gdXBsb2FkIHN1Ym1pc3Npb25zKS5cIl0sXG4gICAgLy8gV2hhdCBtZW51cy9mZWVkYmFjayB0byBzaG93IGFuZCBoaWRlXG4gICAgW1wiaGlkZVN1Ym1pc3Npb25cIiwgXCJoaWRlX3N1Ym1pc3Npb25cIiwgZmFsc2UsIFwiYm9vbFwiLCBcIklmIGNoZWNrZWQsIHRoZW4gc3R1ZGVudHMgd2lsbCBub3QgYmUgYWJsZSB0byBzZWUgdGhlaXIgc3VibWlzc2lvbidzIGNvZGUgb3IgaGlzdG9yeSBvbiBDYW52YXMuXCJdLFxuICAgIFtcImhpZGVGaWxlc1wiLCBcImhpZGVfZmlsZXNcIiwgdHJ1ZSwgXCJib29sXCIsIFwiSWYgY2hlY2tlZCwgdGhlbiBzdHVkZW50cyB3aWxsIG5vdCBzZWUgdGhlIFZpZXcgRmlsZXMgdG9vbGJhci5cIl0sXG4gICAgW1wiaGlkZVF1ZXVlZElucHV0c1wiLCBcImhpZGVfcXVldWVkX2lucHV0c1wiLCBmYWxzZSwgXCJib29sXCIsIFwiSWYgY2hlY2tlZCwgdGhlbiB0aGUgc3R1ZGVudHMgY2Fubm90IGFjY2VzcyB0aGUgcXVldWVkIGlucHV0cyBib3ggKG1ha2VzIHJlcGVhdGVkIGRlYnVnZ2luZyBlYXNpZXIgZm9yIHRoZSBpbnB1dCBmdW5jdGlvbikuXCJdLFxuICAgIFtcImhpZGVFZGl0b3JzXCIsIFwiaGlkZV9lZGl0b3JzXCIsIGZhbHNlLCBcImJvb2xcIiwgXCJJZiBjaGVja2VkLCB0aGVuIGFsbCBvZiB0aGUgZWRpdG9ycyBhcmUgaGlkZGVuLlwiXSxcbiAgICBbXCJoaWRlTWlkZGxlUGFuZWxcIiwgXCJoaWRlX21pZGRsZV9wYW5lbFwiLCBmYWxzZSwgXCJib29sXCIsIFwiSWYgY2hlY2tlZCwgdGhlbiB0aGUgY29uc29sZSBhbmQgZmVlZGJhY2sgYXJlYXMgaXMgaGlkZGVuLlwiXSxcbiAgICBbXCJoaWRlQWxsXCIsIFwiaGlkZV9hbGxcIiwgZmFsc2UsIFwiYm9vbFwiLCBcIklOQ09NUExFVEU6IElmIGNoZWNrZWQsIHRoZW4gdGhlIGVudGlyZSBpbnRlcmZhY2UgaXMgaGlkZGVuLlwiXSxcbiAgICBbXCJoaWRlRXZhbHVhdGVcIiwgXCJoaWRlX2V2YWx1YXRlXCIsIGZhbHNlLCBcImJvb2xcIiwgXCJJZiBjaGVja2VkLCB0aGVuIHRoZSBFdmFsdWF0ZSBidXR0b24gaXMgbm90IHNob3duIG9uIHRoZSBjb25zb2xlLlwiXSxcbiAgICBbXCJoaWRlSW1wb3J0RGF0YXNldHNCdXR0b25cIiwgXCJoaWRlX2ltcG9ydF9kYXRhc2V0c19idXR0b25cIiwgZmFsc2UsIFwiYm9vbFwiLCBcIklmIGNoZWNrZWQsIHRoZW4gc3R1ZGVudHMgY2Fubm90IHNlZSB0aGUgaW1wb3J0IGRhdGFzZXRzIGJ1dHRvbi5cIl0sXG4gICAgLy8gVE9ETzogRml4IHRoaXMgb25lIHRvIGJlIHNldHRhYmxlXG4gICAgW1wiaGlkZUltcG9ydFN0YXRlbWVudHNcIiwgXCJoaWRlX2ltcG9ydF9zdGF0ZW1lbnRzXCIsIGZhbHNlLCBcImJvb2xcIiwgXCJJTkNPTVBMRVRFOiBJZiBjaGVja2VkLCBjZXJ0YWluIGtpbmRzIG9mIGltcG9ydCBzdGF0ZW1lbnRzIChtYXRwbG90bGliLCB0dXJ0bGUsIGRhdGFzZXRzKSBhcmUgbm90IHNob3duIGluIHRoZSBibG9jayBpbnRlcmZhY2UuXCJdLFxuICAgIFtcImhpZGVDb3ZlcmFnZUJ1dHRvblwiLCBcImhpZGVfY292ZXJhZ2VfYnV0dG9uXCIsIGZhbHNlLCBcImJvb2xcIiwgXCJJTkNPTVBMRVRFOiBJZiBjaGVja2VkLCB0aGUgY292ZXJhZ2UgYnV0dG9uIGlzIG5vdCBzaG93bi5cIl0sXG4gICAgW1wiaGlkZVRyYWNlQnV0dG9uXCIsIFwiaGlkZV90cmFjZV9idXR0b25cIiwgZmFsc2UsIFwiYm9vbFwiLCBcIklmIGNoZWNrZWQsIHRoZW4gdGhlIFRyYWNlIGJ1dHRvbiBpcyBub3Qgc2hvd24uXCJdLFxuICAgIFtcInNtYWxsTGF5b3V0XCIsIFwic21hbGxfbGF5b3V0XCIsIGZhbHNlLCBcImJvb2xcIiwgXCJJZiBjaGVja2VkLCB0aGVuIHRoZSBpbnRlcmZhY2UgZml0cyBpbnRvIGEgc21hbGxlciByZWdpb24uXCJdLFxuICAgIFtcImhhc0Nsb2NrXCIsIFwiaGFzX2Nsb2NrXCIsIGZhbHNlLCBcImJvb2xcIiwgXCJJZiBjaGVja2VkLCB0aGVuIGEgY2xvY2sgaXMgc2hvd24gaW4gdGhlIHRvcCByaWdodCBjb3JuZXIuXCJdLFxuICAgIFtcInByZWxvYWRGaWxlc1wiLCBcInByZWxvYWRfZmlsZXNcIiwgXCJcIiwgXCJzdHJpbmdcIiwgXCJBIEpTT04gc3RydWN0dXJlIHJlcHJlc2VudGluZyB0aGUgZmlsZXMgdGhhdCBzaG91bGQgYmUgbG9hZGVkIG9uIHN0YXJ0IGZyb20gdGhlIHJlbW90ZSwgYXMgaWYgdGhleSB3ZXJlIGxvY2FsLlwiXVxuXTtcblxuZXhwb3J0IGxldCBBc3NpZ21lbnRUeXBlID0ge1xuICAgIEJMT0NLUFk6IFwiYmxvY2tweVwiLFxuICAgIE1BWkU6IFwibWF6ZVwiLFxuICAgIFFVSVo6IFwicXVpelwiLFxuICAgIFJFQURJTkc6IFwicmVhZGluZ1wiXG59O1xuXG5mdW5jdGlvbiBnZXREb2N1bWVudGF0aW9uKG5hbWUpIHtcbiAgICBmb3IgKGxldCBpPTA7IGkgPCBBU1NJR05NRU5UX1NFVFRJTkdTLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChBU1NJR05NRU5UX1NFVFRJTkdTW2ldWzBdID09PSBuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gQVNTSUdOTUVOVF9TRVRUSU5HU1tpXVs0XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gXCJEb2N1bWVudGF0aW9uIG5vdCBmb3VuZCBmb3IgZmllbGRcIjtcbn1cblxuZnVuY3Rpb24gbWFrZVN0YXJ0Vmlld1RhYihuYW1lLCBpY29uLCBtb2RlKSB7XG4gICAgcmV0dXJuIGA8bGFiZWwgY2xhc3M9XCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5IGJsb2NrcHktbW9kZS1zZXQtYmxvY2tzXCJcbiAgICAgICAgICAgICAgICBkYXRhLWJpbmQ9XCJjc3M6IHthY3RpdmU6IGFzc2lnbm1lbnQuc2V0dGluZ3Muc3RhcnRWaWV3KCkgPT09ICcke21vZGV9J30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogYXNzaWdubWVudC5zZXR0aW5ncy5zdGFydFZpZXcuYmluZCgkZGF0YSwgJyR7bW9kZX0nKVwiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdmYXMgZmEtJHtpY29ufSc+PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwiYmxvY2tweS1zdGFydC12aWV3LXNldFwiIGF1dG9jb21wbGV0ZT1cIm9mZlwiIGNoZWNrZWQ+ICR7bmFtZX1cbiAgICAgICAgICAgIDwvbGFiZWw+YDtcbn1cblxuY29uc3QgQVNTSUdOTUVOVF9TRVRUSU5HU19CT09MRUFOX0NPTVBPTkVOVFNfSFRNTCA9IEFTU0lHTk1FTlRfU0VUVElOR1NcbiAgICAvLyBPbmx5IGhhbmRsZSB0aGUgc2ltcGxlIGJvb2xlYW5zIHRoaXMgd2F5XG4gICAgLmZpbHRlcigoc2V0dGluZykgPT4gc2V0dGluZ1szXSA9PT0gXCJib29sXCIpXG4gICAgLm1hcCgoc2V0dGluZykgPT4ge1xuICAgICAgICBsZXQgcHJldHR5TmFtZSA9IHNldHRpbmdbMV0uc3BsaXQoXCJfXCIpLm1hcCh3b3JkPT4od29yZC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSt3b3JkLnNsaWNlKDEpKSkuam9pbihcIiBcIik7XG4gICAgICAgIHJldHVybiBgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIHJvd1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0yIHRleHQtcmlnaHRcIj5cbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCIgZm9yPVwiYmxvY2tweS1zZXR0aW5ncy0ke3NldHRpbmdbMF19XCI+JHtwcmV0dHlOYW1lfTwvbGFiZWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiB0eXBlPVwiY2hlY2tib3hcIiBpZD1cImJsb2NrcHktc2V0dGluZ3MtJHtzZXR0aW5nWzBdfVwiXG4gICAgICAgICAgICAgICAgICAgIGRhdGEtYmluZD1cImNoZWNrZWQ6IGFzc2lnbm1lbnQuc2V0dGluZ3MuJHtzZXR0aW5nWzBdfVwiPlxuICAgICAgICAgICAgICAgIDwvZGl2PiAgXG4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICBcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tOVwiPlxuICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz1cImZvcm0tdGV4dCB0ZXh0LW11dGVkXCI+XG4gICAgICAgICAgICAgICAgICAgICR7c2V0dGluZ1s0XX1cbiAgICAgICAgICAgICAgICA8L3NtYWxsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICBgO1xuICAgIH0pLmpvaW4oXCJcXG5cXG5cIik7XG5cbmV4cG9ydCBjb25zdCBBU1NJR05NRU5UX1NFVFRJTkdTX0VESVRPUl9IVE1MID0gYFxuICAgIDxkaXYgY2xhc3M9XCJibG9ja3B5LXZpZXctc2V0dGluZ3NcIj5cbiAgICBcbiAgICA8Zm9ybT5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCByb3dcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTIgbXgtYXV0b1wiPlxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zdWNjZXNzXCJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS1iaW5kPVwiY2xpY2s6IHVpLmVkaXRvcnMuc2V0dGluZ3Muc2F2ZVwiPlNhdmUgY2hhbmdlczwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIFxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCByb3dcIj5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJibG9ja3B5LXNldHRpbmdzLW5hbWVcIiBjbGFzcz1cImNvbC1zbS0yIGNvbC1mb3JtLWxhYmVsIHRleHQtcmlnaHRcIj5OYW1lOjwvbGFiZWw+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEwXCI+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBpZD1cImJsb2NrcHktc2V0dGluZ3MtbmFtZVwiXG4gICAgICAgICAgICAgICAgZGF0YS1iaW5kPVwidmFsdWU6IGFzc2lnbm1lbnQubmFtZVwiPlxuICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz1cImZvcm0tdGV4dCB0ZXh0LW11dGVkXCI+XG4gICAgICAgICAgICAgICAgICAgIFRoZSBzdHVkZW50LWZhY2luZyBuYW1lIG9mIHRoZSBhc3NpZ25tZW50LiBBc3NpZ25tZW50cyB3aXRoaW4gYSBncm91cCBhcmUgb3JkZXJlZCBhbHBoYWJldGljYWxseVxuICAgICAgICAgICAgICAgICAgICBieSB0aGVpciBuYW1lLCBzbyB5b3UgbWF5IHdhbnQgdG8gdXNlIGEgbmFtaW5nIHNjaGVtZSBsaWtlIFwiIzQzLjUpIFdoYXRldmVyXCIuXG4gICAgICAgICAgICAgICAgPC9zbWFsbD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIHJvd1wiPlxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cImJsb2NrcHktc2V0dGluZ3MtdXJsXCIgY2xhc3M9XCJjb2wtc20tMiBjb2wtZm9ybS1sYWJlbCB0ZXh0LXJpZ2h0XCI+VVJMOjwvbGFiZWw+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEwXCI+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBpZD1cImJsb2NrcHktc2V0dGluZ3MtdXJsXCJcbiAgICAgICAgICAgICAgICBkYXRhLWJpbmQ9XCJ2YWx1ZTogYXNzaWdubWVudC51cmxcIj5cbiAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9XCJmb3JtLXRleHQgdGV4dC1tdXRlZFwiPlxuICAgICAgICAgICAgICAgICAgICBUaGUgY291cnNlLXVuaXF1ZSBVUkwgdGhhdCBjYW4gYmUgdXNlZCB0byBjb25zaXN0ZW50bHkgcmVmZXIgdG8gdGhpcyBhc3NpZ25tZW50LiBcbiAgICAgICAgICAgICAgICA8L3NtYWxsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICBcbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTIgdGV4dC1yaWdodFwiPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIiBmb3I9XCJibG9ja3B5LXNldHRpbmdzLXB1YmxpY1wiPlB1YmxpYzo8L2xhYmVsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTFcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1jaGVja1wiPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCJibG9ja3B5LXNldHRpbmdzLXB1YmxpY1wiXG4gICAgICAgICAgICAgICAgICAgIGRhdGEtYmluZD1cImNoZWNrZWQ6IGFzc2lnbm1lbnQucHVibGljXCI+XG4gICAgICAgICAgICAgICAgPC9kaXY+ICBcbiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS05XCI+XG4gICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPVwiZm9ybS10ZXh0IHRleHQtbXV0ZWRcIj5cbiAgICAgICAgICAgICAgICAgICAgSWYgbm90IHB1YmxpYywgdXNlcnMgb3V0c2lkZSBvZiB0aGUgY291cnNlIHdpbGwgbm90IGJlIGFibGUgdG8gc2VlIHRoZSBhc3NpZ25tZW50IGluIGNvdXJzZSBsaXN0aW5ncy5cbiAgICAgICAgICAgICAgICA8L3NtYWxsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICBcbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTIgdGV4dC1yaWdodFwiPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIiBmb3I9XCJibG9ja3B5LXNldHRpbmdzLWhpZGRlblwiPkhpZGRlbjo8L2xhYmVsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTFcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1jaGVja1wiPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCJibG9ja3B5LXNldHRpbmdzLWhpZGRlblwiXG4gICAgICAgICAgICAgICAgICAgIGRhdGEtYmluZD1cImNoZWNrZWQ6IGFzc2lnbm1lbnQuaGlkZGVuXCI+XG4gICAgICAgICAgICAgICAgPC9kaXY+ICBcbiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS05XCI+XG4gICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPVwiZm9ybS10ZXh0IHRleHQtbXV0ZWRcIj5cbiAgICAgICAgICAgICAgICAgICAgSWYgaGlkZGVuLCBzdHVkZW50cyB3aWxsIG5vdCBiZSBhYmxlIHRvIHNlZSB0aGVpciBncmFkZSB3aGlsZSB3b3JraW5nIG9uIHRoZSBhc3NpZ25tZW50LlxuICAgICAgICAgICAgICAgIDwvc21hbGw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIFxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCByb3dcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMiB0ZXh0LXJpZ2h0XCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiIGZvcj1cImJsb2NrcHktc2V0dGluZ3MtcmV2aWV3ZWRcIj5SZXZpZXdlZDo8L2xhYmVsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTFcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1jaGVja1wiPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCJibG9ja3B5LXNldHRpbmdzLXJldmlld2VkXCJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS1iaW5kPVwiY2hlY2tlZDogYXNzaWdubWVudC5yZXZpZXdlZFwiPlxuICAgICAgICAgICAgICAgIDwvZGl2PiAgXG4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICBcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tOVwiPlxuICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz1cImZvcm0tdGV4dCB0ZXh0LW11dGVkXCI+XG4gICAgICAgICAgICAgICAgICAgIElmIHJldmlld2VkLCB0aGUgYXNzaWdubWVudCBuZWVkIHRvIGJlIGNvbW1lbnRlZCB1cG9uIGFuZCByZWdyYWRlZCBieSB0aGUgc3RhZmYgYWZ0ZXIgc3VibWlzc2lvbi5cbiAgICAgICAgICAgICAgICA8L3NtYWxsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICBcbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCI+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwiYmxvY2tweS1zZXR0aW5ncy1wb2ludHNcIiBjbGFzcz1cImNvbC1zbS0yIGNvbC1mb3JtLWxhYmVsIHRleHQtcmlnaHRcIj5Qb2ludHM6PC9sYWJlbD5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTBcIj5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgaWQ9XCJibG9ja3B5LXNldHRpbmdzLXBvaW50c1wiXG4gICAgICAgICAgICAgICAgZGF0YS1iaW5kPVwidmFsdWU6IGFzc2lnbm1lbnQucG9pbnRzXCI+XG4gICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPVwiZm9ybS10ZXh0IHRleHQtbXV0ZWRcIj5cbiAgICAgICAgICAgICAgICAgICAgVGhlIG51bWJlciBvZiBwb2ludHMgdGhpcyBhc3NpZ25tZW50IGlzIHdvcnRoOyBkZWZhdWx0cyB0byAxIHBvaW50LiBcbiAgICAgICAgICAgICAgICA8L3NtYWxsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICBcbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTIgdGV4dC1yaWdodFwiPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIiBmb3I9XCJibG9ja3B5LXNldHRpbmdzLXJldmlld2VkXCI+U3RhcnRpbmcgVmlldzo8L2xhYmVsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTNcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwIGJ0bi1ncm91cC10b2dnbGUgbXItMlwiIGRhdGEtdG9nZ2xlPVwiYnV0dG9uc1wiPlxuICAgICAgICAgICAgICAgICAgICAke21ha2VTdGFydFZpZXdUYWIoXCJCbG9ja3NcIiwgXCJ0aC1sYXJnZVwiLCBEaXNwbGF5TW9kZXMuQkxPQ0spfVxuICAgICAgICAgICAgICAgICAgICAke21ha2VTdGFydFZpZXdUYWIoXCJTcGxpdFwiLCBcImNvbHVtbnNcIiwgRGlzcGxheU1vZGVzLlNQTElUKX1cbiAgICAgICAgICAgICAgICAgICAgJHttYWtlU3RhcnRWaWV3VGFiKFwiVGV4dFwiLCBcImFsaWduLWxlZnRcIiwgRGlzcGxheU1vZGVzLlRFWFQpfVxuICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS03XCI+XG4gICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPVwiZm9ybS10ZXh0IHRleHQtbXV0ZWRcIj5cbiAgICAgICAgICAgICAgICAgICAgJHtnZXREb2N1bWVudGF0aW9uKFwic3RhcnRWaWV3XCIpfVxuICAgICAgICAgICAgICAgIDwvc21hbGw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIFxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCByb3dcIj5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJibG9ja3B5LXNldHRpbmdzLWlwLXJhbmdlc1wiIGNsYXNzPVwiY29sLXNtLTIgY29sLWZvcm0tbGFiZWwgdGV4dC1yaWdodFwiPklQIFJhbmdlczo8L2xhYmVsPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0xMFwiPlxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgaWQ9XCJibG9ja3B5LXNldHRpbmdzLWlwLXJhbmdlc1wiXG4gICAgICAgICAgICAgICAgZGF0YS1iaW5kPVwidmFsdWU6IGFzc2lnbm1lbnQuaXBSYW5nZXNcIj5cbiAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9XCJmb3JtLXRleHQgdGV4dC1tdXRlZFwiPlxuICAgICAgICAgICAgICAgICAgICBQcm92aWRlIGEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgSVAgQWRkcmVzc2VzIHRoYXQgd2lsbCBiZSBleHBsaWNpdGx5IGFsbG93ZWQuIElmIGJsYW5rLFxuICAgICAgICAgICAgICAgICAgICB0aGVuIGFsbCBhZGRyZXNzZXMgYXJlIGFsbG93ZWQuIElmIGFuIGFkZHJlc3Mgc3RhcnRzIHdpdGggPGNvZGU+XjwvY29kZT4gdGhlbiBpdCBpdCBpcyBleHBsaWNpdGx5XG4gICAgICAgICAgICAgICAgICAgIGJsYWNrbGlzdGVkLCBidXQgdGhhdCBjYW4gYmUgb3ZlcnJpZGRlbiBpbiB0dXJuIHdpdGggYSA8Y29kZT4hPC9jb2RlPi4gQWRkcmVzc2VzIGNhbiBhbHNvXG4gICAgICAgICAgICAgICAgICAgIGluY2x1ZGUgYSBiaXQgbWFzayB0byBhbGxvdyBhIHJhbmdlIG9mIGFkZHJlc3Nlcy5cbiAgICAgICAgICAgICAgICA8L3NtYWxsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICBcbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCI+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwiYmxvY2tweS1zZXR0aW5ncy1wYXNzY29kZVwiIGNsYXNzPVwiY29sLXNtLTIgY29sLWZvcm0tbGFiZWwgdGV4dC1yaWdodFwiPlBhc3Njb2RlOjwvbGFiZWw+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEwXCI+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBpZD1cImJsb2NrcHktc2V0dGluZ3MtcGFzc2NvZGVcIlxuICAgICAgICAgICAgICAgIGRhdGEtYmluZD1cInZhbHVlOiBhc3NpZ25tZW50LnNldHRpbmdzLnBhc3Njb2RlXCI+XG4gICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPVwiZm9ybS10ZXh0IHRleHQtbXV0ZWRcIj5cbiAgICAgICAgICAgICAgICAgICAgJHtnZXREb2N1bWVudGF0aW9uKFwicGFzc2NvZGVcIil9XG4gICAgICAgICAgICAgICAgPC9zbWFsbD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIHJvd1wiPlxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cImJsb2NrcHktc2V0dGluZ3MtZGF0YXNldHNcIiBjbGFzcz1cImNvbC1zbS0yIGNvbC1mb3JtLWxhYmVsIHRleHQtcmlnaHRcIj5QcmVsb2FkZWQgRGF0YXNldHM6PC9sYWJlbD5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTBcIj5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIGlkPVwiYmxvY2tweS1zZXR0aW5ncy1kYXRhc2V0c1wiXG4gICAgICAgICAgICAgICAgZGF0YS1iaW5kPVwidmFsdWU6IGFzc2lnbm1lbnQuc2V0dGluZ3MuZGF0YXNldHNcIj5cbiAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9XCJmb3JtLXRleHQgdGV4dC1tdXRlZFwiPlxuICAgICAgICAgICAgICAgICAgICAke2dldERvY3VtZW50YXRpb24oXCJkYXRhc2V0c1wiKX1cbiAgICAgICAgICAgICAgICA8L3NtYWxsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICBcbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCI+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwiYmxvY2tweS1zZXR0aW5ncy1wcmVsb2FkLWZpbGVzXCIgY2xhc3M9XCJjb2wtc20tMiBjb2wtZm9ybS1sYWJlbCB0ZXh0LXJpZ2h0XCI+UHJlbG9hZGVkIEZpbGVzOjwvbGFiZWw+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEwXCI+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBpZD1cImJsb2NrcHktc2V0dGluZ3MtcHJlbG9hZC1maWxlc1wiXG4gICAgICAgICAgICAgICAgZGF0YS1iaW5kPVwidmFsdWU6IGFzc2lnbm1lbnQuc2V0dGluZ3MucHJlbG9hZEZpbGVzXCI+XG4gICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPVwiZm9ybS10ZXh0IHRleHQtbXV0ZWRcIj5cbiAgICAgICAgICAgICAgICAgICAgJHtnZXREb2N1bWVudGF0aW9uKFwicHJlbG9hZEZpbGVzXCIpfVxuICAgICAgICAgICAgICAgIDwvc21hbGw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIFxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCByb3dcIj5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJibG9ja3B5LXNldHRpbmdzLXRvb2xib3hcIiBjbGFzcz1cImNvbC1zbS0yIGNvbC1mb3JtLWxhYmVsIHRleHQtcmlnaHRcIj5CbG9jayBUb29sYm94OjwvbGFiZWw+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEwXCI+XG4gICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz1cImZvcm0tY29udHJvbFwiIGlkPVwiYmxvY2tweS1zZXR0aW5ncy10b29sYm94XCJcbiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1iaW5kPVwidmFsdWU6IGFzc2lnbm1lbnQuc2V0dGluZ3MudG9vbGJveFwiPlxuICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJub3JtYWxcIj5Ob3JtYWwgVG9vbGJveDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJjdFwiPkNUQFZUIFRvb2xib3g8L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiY3QyXCI+Q1RAVlQgVG9vbGJveCBWMjwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJtaW5pbWFsXCI+TWluaW1hbCBTZXQ8L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiZnVsbFwiPkFsbCBCbG9ja3M8L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiY3VzdG9tXCI+Q3VzdG9tPC9vcHRpb24+XG4gICAgICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPVwiZm9ybS10ZXh0IHRleHQtbXV0ZWRcIj5cbiAgICAgICAgICAgICAgICAgICAgJHtnZXREb2N1bWVudGF0aW9uKFwidG9vbGJveFwiKX1cbiAgICAgICAgICAgICAgICA8L3NtYWxsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICBcbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCI+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwiYmxvY2tweS1zZXR0aW5ncy10eXBlXCIgY2xhc3M9XCJjb2wtc20tMiBjb2wtZm9ybS1sYWJlbCB0ZXh0LXJpZ2h0XCI+UHJvYmxlbSBUeXBlOjwvbGFiZWw+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEwXCI+XG4gICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz1cImZvcm0tY29udHJvbFwiIGlkPVwiYmxvY2tweS1zZXR0aW5ncy10eXBlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1iaW5kPVwidmFsdWU6IGFzc2lnbm1lbnQudHlwZVwiPlxuICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJibG9ja3B5XCI+QmxvY2tQeTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJtYXplXCI+TWF6ZTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJxdWl6XCI+UXVpeiBRdWVzdGlvbjwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJyZWFkaW5nXCI+UmVhZGluZzwvb3B0aW9uPlxuICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz1cImZvcm0tdGV4dCB0ZXh0LW11dGVkXCI+XG4gICAgICAgICAgICAgICAgICAgICR7Z2V0RG9jdW1lbnRhdGlvbihcInR5cGVcIil9XG4gICAgICAgICAgICAgICAgPC9zbWFsbD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIHJvd1wiPlxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cImJsb2NrcHktc2V0dGluZ3MtcGFydC1pZFwiIGNsYXNzPVwiY29sLXNtLTIgY29sLWZvcm0tbGFiZWwgdGV4dC1yaWdodFwiPlBhcnQgSUQ6PC9sYWJlbD5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTBcIj5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIGlkPVwiYmxvY2tweS1zZXR0aW5ncy1wYXJ0LWlkXCJcbiAgICAgICAgICAgICAgICBkYXRhLWJpbmQ9XCJ2YWx1ZTogY29uZmlndXJhdGlvbi5wYXJ0SWRcIj5cbiAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9XCJmb3JtLXRleHQgdGV4dC1tdXRlZFwiPlxuICAgICAgICAgICAgICAgICAgICAke2dldERvY3VtZW50YXRpb24oXCJwYXJ0SWRcIil9XG4gICAgICAgICAgICAgICAgPC9zbWFsbD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgXG4gICAgICAgICR7QVNTSUdOTUVOVF9TRVRUSU5HU19CT09MRUFOX0NPTVBPTkVOVFNfSFRNTH1cbiAgICA8L2Zvcm0+XG4gICAgXG4gICAgPC9kaXY+XG5gO1xuXG5leHBvcnQgZnVuY3Rpb24gc2F2ZUFzc2lnbm1lbnRTZXR0aW5ncyhtb2RlbCkge1xuICAgIGxldCBzZXR0aW5ncyA9IHt9O1xuICAgIEFTU0lHTk1FTlRfU0VUVElOR1MuZm9yRWFjaChzZXR0aW5nID0+IHtcbiAgICAgICAgbGV0IGNsaWVudE5hbWUgPSBzZXR0aW5nWzBdLCBzZXJ2ZXJOYW1lID0gc2V0dGluZ1sxXSwgZGVmYXVsdFZhbHVlID0gc2V0dGluZ1syXTtcbiAgICAgICAgbGV0IHZhbHVlID0gbW9kZWwuYXNzaWdubWVudC5zZXR0aW5nc1tjbGllbnROYW1lXSgpO1xuICAgICAgICAvLyBPbmx5IHN0b3JlIHRoaXMgc2V0dGluZyBpZiBpdHMgZGlmZmVyZW50IGZyb20gdGhlIGRlZmF1bHRcbiAgICAgICAgaWYgKHZhbHVlICE9PSBkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICAgIHNldHRpbmdzW3NlcnZlck5hbWVdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc2V0dGluZ3MpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZEFzc2lnbm1lbnRTZXR0aW5ncyhtb2RlbCwgc2V0dGluZ3MpIHtcbiAgICBpZiAoc2V0dGluZ3MpIHtcbiAgICAgICAgc2V0dGluZ3MgPSBKU09OLnBhcnNlKHNldHRpbmdzKTtcbiAgICAgICAgQVNTSUdOTUVOVF9TRVRUSU5HUy5mb3JFYWNoKHNldHRpbmcgPT4ge1xuICAgICAgICAgICAgbGV0IGNsaWVudE5hbWUgPSBzZXR0aW5nWzBdLCBzZXJ2ZXJOYW1lID0gc2V0dGluZ1sxXTtcbiAgICAgICAgICAgIGlmIChzZXJ2ZXJOYW1lIGluIHNldHRpbmdzKSB7XG4gICAgICAgICAgICAgICAgbW9kZWwuYXNzaWdubWVudC5zZXR0aW5nc1tjbGllbnROYW1lXShzZXR0aW5nc1tzZXJ2ZXJOYW1lXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1vZGVsLmFzc2lnbm1lbnQuc2V0dGluZ3NbY2xpZW50TmFtZV0oc2V0dGluZ1syXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChzZXR0aW5ncy5zdGFydF92aWV3KSB7XG4gICAgICAgICAgICBtb2RlbC5kaXNwbGF5LnB5dGhvbk1vZGUoc2V0dGluZ3Muc3RhcnRfdmlldyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlQXNzaWdubWVudFNldHRpbmdzTW9kZWwoY29uZmlndXJhdGlvbikge1xuICAgIGxldCBzZXR0aW5ncyA9IHt9O1xuICAgIEFTU0lHTk1FTlRfU0VUVElOR1MuZm9yRWFjaChzZXR0aW5nID0+IHtcbiAgICAgICAgbGV0IGNsaWVudE5hbWUgPSBzZXR0aW5nWzBdLCBzZXJ2ZXJOYW1lID0gc2V0dGluZ1sxXSwgZGVmYXVsdFZhbHVlID0gc2V0dGluZ1syXSxcbiAgICAgICAgICAgIGZpZWxkVHlwZSA9IHNldHRpbmdbM107XG4gICAgICAgIGlmIChjb25maWd1cmF0aW9uW1wiYXNzaWdubWVudC5zZXR0aW5ncy5cIitzZXJ2ZXJOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzZXR0aW5nc1tjbGllbnROYW1lXSA9IGtvLm9ic2VydmFibGUoZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBjb25maWdWYWx1ZSA9IGNvbmZpZ3VyYXRpb25bXCJhc3NpZ25tZW50LnNldHRpbmdzLlwiK3NlcnZlck5hbWVdO1xuICAgICAgICAgICAgaWYgKGZpZWxkVHlwZSA9PT0gXCJib29sXCIpIHtcbiAgICAgICAgICAgICAgICBjb25maWdWYWx1ZSA9IGNvbmZpZ1ZhbHVlLnRvTG93ZXJDYXNlKCkgPT09IFwidHJ1ZVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0dGluZ3NbY2xpZW50TmFtZV0gPSBrby5vYnNlcnZhYmxlKGNvbmZpZ1ZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNldHRpbmdzO1xufVxuXG5jbGFzcyBBc3NpZ25tZW50U2V0dGluZ3NWaWV3IGV4dGVuZHMgQWJzdHJhY3RFZGl0b3Ige1xuICAgIGNvbnN0cnVjdG9yKG1haW4sIHRhZykge1xuICAgICAgICBzdXBlcihtYWluLCB0YWcpO1xuICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgZW50ZXIobmV3RmlsZW5hbWUsIG9sZEVkaXRvcikge1xuICAgICAgICBzdXBlci5lbnRlcihuZXdGaWxlbmFtZSwgb2xkRWRpdG9yKTtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgICAgICAvL1RPRE86IHRoaXMudXBkYXRlRWRpdG9yKHRoaXMuZmlsZS5oYW5kbGUoKSk7XG4gICAgICAgIC8vIFN1YnNjcmliZSB0byB0aGUgcmVsZXZhbnQgRmlsZVxuICAgICAgICAvLyB0aGlzLmN1cnJlbnRTdWJzY3JpcHRpb24gPSB0aGlzLmZpbGUuaGFuZGxlLnN1YnNjcmliZSh0aGlzLnVwZGF0ZUVkaXRvci5iaW5kKHRoaXMpKTtcbiAgICAgICAgLy8gTm90aWZ5IHJlbGV2YW50IGZpbGUgb2YgY2hhbmdlcyB0byBCTVxuICAgICAgICB0aGlzLmN1cnJlbnRMaXN0ZW5lciA9IHRoaXMudXBkYXRlSGFuZGxlLmJpbmQodGhpcyk7XG5cbiAgICAgICAgLy9UT0RPOiB0aGlzLmNvZGVNaXJyb3Iub24oXCJjaGFuZ2VcIiwgdGhpcy5jdXJyZW50TGlzdGVuZXIpO1xuICAgIH1cblxuICAgIHVwZGF0ZUVkaXRvcihuZXdDb250ZW50cykge1xuICAgICAgICB0aGlzLmRpcnR5ID0gIXRoaXMuZGlydHk7XG4gICAgICAgIGlmICh0aGlzLmRpcnR5KSB7XG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIFRPRE86IERvIHVwZGF0ZVxuXG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVIYW5kbGUoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5kaXJ0eSA9ICF0aGlzLmRpcnR5O1xuICAgICAgICBpZiAodGhpcy5kaXJ0eSkge1xuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICAvL3RoaXMuZmlsZS5oYW5kbGUodGhpcy5jb2RlTWlycm9yLnZhbHVlKCkpO1xuICAgICAgICAgICAgLy8gVE9ETzogVXBkYXRlXG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleGl0KG5ld0ZpbGVuYW1lLCBvbGRFZGl0b3IsIG5ld0VkaXRvcikge1xuICAgICAgICAvLyBSZW1vdmUgc3Vic2NyaWJlclxuICAgICAgICAvL3RoaXMuY3VycmVudFN1YnNjcmlwdGlvbi5kaXNwb3NlKCk7XG4gICAgICAgIC8vIFRPRE86IHVwZGF0ZVxuICAgICAgICAvL3RoaXMuY29kZU1pcnJvci5vZmYoXCJjaGFuZ2VcIiwgdGhpcy5jdXJyZW50TGlzdGVuZXIpO1xuICAgICAgICBzdXBlci5leGl0KG5ld0ZpbGVuYW1lLCBvbGRFZGl0b3IpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IEFzc2lnbm1lbnRTZXR0aW5ncyA9IHtcbiAgICBuYW1lOiBcIkFzc2lnbm1lbnQgU2V0dGluZ3NcIixcbiAgICBleHRlbnNpb25zOiBbXCIhYXNzaWdubWVudF9zZXR0aW5ncy5ibG9ja3B5XCJdLFxuICAgIGNvbnN0cnVjdG9yOiBBc3NpZ25tZW50U2V0dGluZ3NWaWV3LFxuICAgIHRlbXBsYXRlOiBBU1NJR05NRU5UX1NFVFRJTkdTX0VESVRPUl9IVE1MXG59OyIsIlxyXG5cclxuZXhwb3J0IGNvbnN0IGRlZmF1bHRfaGVhZGVyID0gYFxyXG48ZGl2IGNsYXNzPVwiYmxvY2tweS1weXRob24tdG9vbGJhciBjb2wtbWQtMTIgYnRuLXRvb2xiYXJcIlxyXG4gICAgIHJvbGU9XCJ0b29sYmFyXCIgYXJpYS1sYWJlbD1cIlB5dGhvbiBUb29sYmFyXCI+XHJcbiAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cCBtci0yXCI+XHJcbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeVwiPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImZhcyBmYS1maWxlLXVwbG9hZFwiPjwvc3Bhbj4gVXBsb2FkXHJcbiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImJsb2NrcHktdG9vbGJhci11cGxvYWRcIiB0eXBlPVwiZmlsZVwiXHJcbiAgICAgICAgICAgICAgICBoaWRkZW5cclxuICAgICAgICAgICAgICAgIGRhdGEtYmluZD1cImV2ZW50OiB7Y2hhbmdlOiB1aS5lZGl0b3JzLnVwbG9hZH1cIj5cclxuICAgICAgICAgPC9sYWJlbD5cclxuXHJcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5IGRyb3Bkb3duLXRvZ2dsZSBkcm9wZG93bi10b2dnbGUtc3BsaXRcIlxyXG4gICAgICAgICAgICBkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCIgYXJpYS1oYXNwb3B1cD1cInRydWVcIiBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIj5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjYXJldFwiPjwvc3Bhbj5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5XCI+VG9nZ2xlIERyb3Bkb3duPC9zcGFuPlxyXG4gICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgIFxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtcmlnaHRcIj5cclxuICAgICAgICAgICAgPGEgY2xhc3M9J2Ryb3Bkb3duLWl0ZW0gYmxvY2tweS10b29sYmFyLWRvd25sb2FkJ1xyXG4gICAgICAgICAgICAgICAgZGF0YS1iaW5kPVwiY2xpY2s6IHVpLmVkaXRvcnMuZG93bmxvYWRcIj5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9J2ZhcyBmYS1kb3dubG9hZCc+PC9zcGFuPiBEb3dubG9hZFxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICAgIFxyXG4gICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cCBtci0yXCIgcm9sZT1cImdyb3VwXCIgYXJpYS1sYWJlbD1cIkRlbGV0ZSBHcm91cFwiXHJcbiAgICAgICAgZGF0YS1iaW5kPVwidmlzaWJsZTogdWkuZWRpdG9ycy5jYW5EZWxldGVcIj5cclxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tb3V0bGluZS1zZWNvbmRhcnlcIixcclxuICAgICAgICAgICAgZGF0YS1iaW5kPVwiY2xpY2s6IHVpLmZpbGVzLmRlbGV0ZVwiPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImZhcyBmYS10cmFzaFwiPjwvc3Bhbj4gRGVsZXRlXHJcbiAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgIDwvZGl2PlxyXG4gPC9kaXY+XHJcbmA7XHJcbiIsImltcG9ydCB7QWJzdHJhY3RFZGl0b3J9IGZyb20gXCIuL2Fic3RyYWN0X2VkaXRvclwiO1xyXG5pbXBvcnQgKiBhcyBGaWxlUG9uZCBmcm9tIFwiZmlsZXBvbmRcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBJTUFHRV9FRElUT1JfSFRNTCA9IGBcclxuICAgICA8ZGl2PlxyXG4gICAgICAgIDxzdHJvbmc+QXZhaWxhYmxlIEZpbGVzPC9zdHJvbmc+PGJyPlxyXG4gICAgICAgICAgICBBbGwgdGhlIGZpbGVzIGF2YWlsYWJsZSB0byBvcGVuIHdpdGggPGNvZGU+UElMPC9jb2RlPiBmb3IgdGhpcyBhc3NpZ25tZW50OlxyXG4gICAgICAgICAgICA8YnV0dG9uIGRhdGEtYmluZD1cImNsaWNrOiB1aS5lZGl0b3JzLmltYWdlcy5yZWxvYWRJbWFnZXNcIlxyXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5IGZsb2F0LXJpZ2h0XCJcclxuICAgICAgICAgICAgPlJlbG9hZCBBdmFpbGFibGUgSW1hZ2VzPC9idXR0b24+XHJcbiAgICAgICAgPCEtLSBrbyBpZjogZGlzcGxheS51cGxvYWRlZEZpbGVzKCkgIT09IG51bGwgLS0+XHJcbiAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICAgIDwhLS0ga28gZm9yZWFjaDogeyBkYXRhOiBPYmplY3Qua2V5cyhkaXNwbGF5LnVwbG9hZGVkRmlsZXMoKSksIGFzOiAncGxhY2VtZW50JyB9IC0tPlxyXG4gICAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzdHJvbmcgZGF0YS1iaW5kPVwidGV4dDogJGRhdGFbMF0udG9VcHBlckNhc2UoKSArICRkYXRhLnNsaWNlKDEpXCI+PC9zdHJvbmc+OlxyXG4gICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz1cInRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgdGFibGUtaG92ZXIgdGFibGUtc21cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5GaWxlbmFtZTwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlByZXZpZXc8L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5BY3Rpb25zPC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgICAgICAgICAgICA8IS0tIGtvIGZvcmVhY2g6IHsgZGF0YTogJHJvb3QuZGlzcGxheS51cGxvYWRlZEZpbGVzKClbcGxhY2VtZW50XSwgYXM6ICdmaWxlbmFtZScgfSAtLT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIGRhdGEtYmluZD1cInRleHQ6IGZpbGVuYW1lWzBdXCI+PC9jb2RlPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGV0YWlscz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN1bW1hcnk+PGltZyBkYXRhLWJpbmQ9XCJhdHRyOiB7IHNyYzogZmlsZW5hbWVbMV0sIGFsdDogZmlsZW5hbWVbMV0gfVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD1cIjMwcHhcIiBoZWlnaHQ9XCIzMHB4XCIgb25lcnJvcj1cInRoaXMuc3R5bGUuZGlzcGxheT0nbm9uZSdcIi8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3VtbWFyeT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBkYXRhLWJpbmQ9XCJhdHRyOiB7IHNyYzogZmlsZW5hbWVbMV0sIGFsdDogZmlsZW5hbWVbMV0gfVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmVycm9yPVwidGhpcy5zdHlsZS5kaXNwbGF5PSdub25lJ1wiLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2RldGFpbHM+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWRhbmdlclwiIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWJpbmQ9XCJjbGljazogJHJvb3QudWkuZWRpdG9ycy5pbWFnZXMuZGVsZXRlRmlsZS5iaW5kKGZpbGVuYW1lWzBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiAkcm9vdC51aS5lZGl0b3JzLmltYWdlcy5jYW5Nb2RpZnkocGxhY2VtZW50KVwiPkRlbGV0ZTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWRhbmdlclwiIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWJpbmQ9XCJjbGljazogJHJvb3QudWkuZWRpdG9ycy5pbWFnZXMucmVuYW1lRmlsZS5iaW5kKGZpbGVuYW1lWzBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiAkcm9vdC51aS5lZGl0b3JzLmltYWdlcy5jYW5Nb2RpZnkocGxhY2VtZW50KVwiPlJlbmFtZTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8IS0tIC9rbyAtLT5cclxuICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPlxyXG4gICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgIDwhLS0gL2tvIC0tPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgIDwhLS0gL2tvIC0tPlxyXG4gICAgICAgIFxyXG4gICAgICAgIDxzdHJvbmc+QWRkIG1vcmUgZmlsZXM8L3N0cm9uZz48YnI+XHJcbiAgICAgICAgVXBsb2FkIG1vcmUgZmlsZXMgdXNpbmcgdGhlIGZvcm1zIGJlbG93OlxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMiB0ZXh0LXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWxhYmVsXCIgZm9yPVwiYmxvY2tweS1lZGl0b3ItaW1hZ2VzLXVwbG9hZC1maWxlXCI+RmlsZTo8L2xhYmVsPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0xMFwiPlxyXG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJmaWxlXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2wgYmxvY2tweS1lZGl0b3ItaW1hZ2VzLXVwbG9hZC1maWxlXCIgaWQ9XCJibG9ja3B5LWVkaXRvci1pbWFnZXMtdXBsb2FkLWZpbGVcIlxyXG4gICAgICAgICAgICBuYW1lPVwiYmxvY2tweS1lZGl0b3ItaW1hZ2VzLXVwbG9hZC1maWxlXCI+XHJcbiAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9XCJmb3JtLXRleHQgdGV4dC1tdXRlZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIFRoZSBmaWxlIHRvIG1ha2UgYXZhaWxhYmxlIGluIHlvdXIgY29kZVxyXG4gICAgICAgICAgICAgICAgPC9zbWFsbD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCIgZGF0YS1iaW5kPVwidmlzaWJsZTogdWkuZWRpdG9ycy5pbWFnZXMuY2FuQ2hvb3NlUGxhY2VtZW50KClcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0yIHRleHQtcmlnaHRcIj5cclxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tbGFiZWxcIiBmb3I9XCJibG9ja3B5LWVkaXRvci1pbWFnZXMtdXBsb2FkLXBsYWNlbWVudFwiPlBsYWNlbWVudDo8L2xhYmVsPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0xMFwiPlxyXG4gICAgICAgICAgICAgICAgPHNlbGVjdCBpZD1cImJsb2NrcHktZWRpdG9yLWltYWdlcy11cGxvYWQtcGxhY2VtZW50XCIgbmFtZT1cImJsb2NrcHktZWRpdG9yLWltYWdlcy11cGxvYWQtcGxhY2VtZW50XCJcclxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImZvcm0tY29udHJvbCBibG9ja3B5LWVkaXRvci1pbWFnZXMtdXBsb2FkLXBsYWNlbWVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJzdWJtaXNzaW9uXCIgc2VsZWN0ZWQ+T25seSB5b3VyIHN1Ym1pc3Npb248L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiYXNzaWdubWVudFwiPkZvciBhbGwgc3VibWlzc2lvbnMgb2YgdGhpcyBhc3NpZ25tZW50PC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImNvdXJzZVwiPkFjcm9zcyB0aGUgZW50aXJlIGNvdXJzZTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJ1c2VyXCI+Rm9yIGp1c3QgeW91ciB1c2VyIGFjY291bnQ8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPVwiZm9ybS10ZXh0IHRleHQtbXV0ZWRcIj5cclxuICAgICAgICAgICAgICAgICAgICBUaGUgcGxhY2VtZW50IG9mIHRoZSBmaWxlIGluIHRoZSBzeXN0ZW0uIFRoaXMgY29udHJvbHMgd2hldGhlciBvdGhlciB1c2VycyBjYW4gc2VlIHRoZSBmaWxlLlxyXG4gICAgICAgICAgICAgICAgICAgIElmIHlvdSB3YW50IHRvIHByb3ZpZGUgYSBmaWxlIHRvIGFsbCBzdHVkZW50cyBmb3IganVzdCB0aGlzIHNwZWNpZmljIHByb2JsZW0sIHRoZW4geW91IHNob3VsZFxyXG4gICAgICAgICAgICAgICAgICAgIHVzZSA8Y29kZT5Gb3IgYWxsIHN1Ym1pc3Npb25zIG9mIHRoaXMgYXNzaWdubWVudDwvY29kZT4uIElmIHlvdSB3YW50IHRvIHVzZSB0aGlzIHNhbWUgaW1hZ2VcclxuICAgICAgICAgICAgICAgICAgICBhY3Jvc3Mgb3RoZXIgYXNzaWdubWVudHMgKGluY2x1ZGluZyBhc3NpZ25tZW50cyB3aXRoaW4gdGhpcyBhc3NpZ25tZW50IGdyb3VwKSwgdGhlbiB5b3Ugc2hvdWxkXHJcbiAgICAgICAgICAgICAgICAgICAgdXNlIDxjb2RlPkFjcm9zcyB0aGUgZW50aXJlIGNvdXJzZTwvY29kZT4uXHJcbiAgICAgICAgICAgICAgICA8L3NtYWxsPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCByb3dcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0yIHRleHQtcmlnaHRcIj5cclxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tbGFiZWxcIiBmb3I9XCJibG9ja3B5LWVkaXRvci1pbWFnZXMtdXBsb2FkLWZpbGVuYW1lXCI+RmlsZW5hbWU6PC9sYWJlbD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTBcIj5cclxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sIGJsb2NrcHktZWRpdG9yLWltYWdlcy11cGxvYWQtZmlsZW5hbWVcIiBpZD1cImJsb2NrcHktZWRpdG9yLWltYWdlcy11cGxvYWQtZmlsZW5hbWVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJibG9ja3B5LWVkaXRvci1pbWFnZXMtdXBsb2FkLWZpbGVuYW1lXCI+XHJcbiAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9XCJmb3JtLXRleHQgdGV4dC1tdXRlZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIFRoZSBmaWxlbmFtZSB0aGF0IHdpbGwgYmUgbWFkZSBhdmFpbGFibGUgaW4gdGhlIGNvZGUuIFRoaXMgc2hvdWxkIGJlIGEgdmFsaWQgZmlsZW5hbWUgZm9yIHRoZVxyXG4gICAgICAgICAgICAgICAgICAgIHN5c3RlbSwgYW5kIHNob3VsZCBub3QgY29udGFpbiBzcGFjZXMgb3Igc3BlY2lhbCBjaGFyYWN0ZXJzLiBJdCBzaG91bGQgYWxzbyBoYXZlIGEgdmFsaWQgZmlsZVxyXG4gICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbiAoZS5nLiwgPGNvZGU+LnBuZzwvY29kZT4sIDxjb2RlPi5qcGc8L2NvZGU+LCA8Y29kZT4udHh0PC9jb2RlPikuXHJcbiAgICAgICAgICAgICAgICA8L3NtYWxsPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCByb3dcIj5cclxuICAgICAgICAgICAgPGJ1dHRvbiBkYXRhLWJpbmQ9XCJjbGljazogdWkuZWRpdG9ycy5pbWFnZXMudXBsb2FkRmlsZVwiIGNsYXNzPVwiYnRuIGJ0bi1zdWNjZXNzXCI+VXBsb2FkPC9idXR0b24+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuYDtcclxuXHJcbmNsYXNzIEltYWdlRWRpdG9yVmlldyBleHRlbmRzIEFic3RyYWN0RWRpdG9yIHtcclxuICAgIGNvbnN0cnVjdG9yKG1haW4sIHRhZykge1xyXG4gICAgICAgIHN1cGVyKG1haW4sIHRhZyk7XHJcblxyXG4gICAgICAgIHRoaXMudGFnVXBsb2FkRmlsZUJ1dHRvbiA9IHRoaXMudGFnLmZpbmQoXCIuYmxvY2tweS1lZGl0b3ItaW1hZ2VzLXVwbG9hZC1maWxlXCIpO1xyXG4gICAgICAgIHRoaXMudGFnVXBsb2FkRmlsZVBsYWNlbWVudCA9IHRoaXMudGFnLmZpbmQoXCIuYmxvY2tweS1lZGl0b3ItaW1hZ2VzLXVwbG9hZC1wbGFjZW1lbnRcIik7XHJcbiAgICAgICAgdGhpcy50YWdVcGxvYWRGaWxlTmFtZSA9IHRoaXMudGFnLmZpbmQoXCIuYmxvY2tweS1lZGl0b3ItaW1hZ2VzLXVwbG9hZC1maWxlbmFtZVwiKTtcclxuXHJcbiAgICAgICAgdGhpcy50YWdVcGxvYWRGaWxlQnV0dG9uLm9uKFwiY2hhbmdlXCIsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRhZ1VwbG9hZEZpbGVOYW1lLnZhbChldmVudC50YXJnZXQuZmlsZXNbMF0ubmFtZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZW50ZXIobmV3RmlsZW5hbWUsIG9sZEVkaXRvcikge1xyXG4gICAgICAgIHN1cGVyLmVudGVyKG5ld0ZpbGVuYW1lLCBvbGRFZGl0b3IpO1xyXG5cclxuICAgICAgICBsZXQgdXBsb2FkZWRGaWxlcyA9IHRoaXMubWFpbi5tb2RlbC5kaXNwbGF5LnVwbG9hZGVkRmlsZXMoKTtcclxuICAgICAgICBpZiAodXBsb2FkZWRGaWxlcyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbG9hZEltYWdlcygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jdXJyZW50U3Vic2NyaXB0aW9uID0gdGhpcy5maWxlLmhhbmRsZS5zdWJzY3JpYmUodGhpcy51cGRhdGVFZGl0b3IuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgIC8vIGNvbnN0IHRhcmdldCA9IHRoaXMudGFnLmZpbmQoXCIuYmxvY2tweS1lZGl0b3ItaW1hZ2VzLWZpbGVwb25kXCIpWzBdO1xyXG4gICAgICAgIC8vY29uc29sZS5sb2codGFyZ2V0KTtcclxuICAgICAgICAvKmNvbnN0IHVwbG9hZFVybCA9IG5ldyBVUkwodGhpcy5tYWluLm1vZGVsLmNvbmZpZ3VyYXRpb24udXJsc1tcInVwbG9hZEZpbGVcIl0pO1xyXG4gICAgICAgIHVwbG9hZFVybC5zZWFyY2hQYXJhbXMuc2V0KFwiZGlyZWN0b3J5XCIsIHRoaXMubWFpbi5tb2RlbC5hc3NpZ25tZW50LmlkKCkpO1xyXG4gICAgICAgIHVwbG9hZFVybC5zZWFyY2hQYXJhbXMuc2V0KFwicGxhY2VtZW50XCIsIFwic3VibWlzc2lvblwiKTsqL1xyXG4gICAgICAgIC8vIHRoaXMuZmlsZXBvbmQgPSBGaWxlUG9uZC5jcmVhdGUodGFyZ2V0LCB7XHJcbiAgICAgICAgLy8gICAgIC8vZmlsZXM6IFtdLFxyXG4gICAgICAgIC8vICAgICBhbGxvd011bHRpcGxlOiB0cnVlLFxyXG4gICAgICAgIC8vICAgICBzZXJ2ZXI6IHtcclxuICAgICAgICAvLyAgICAgICAgIHVybDogdGhpcy5tYWluLm1vZGVsLmNvbmZpZ3VyYXRpb24udXJsc1tcImRvd25sb2FkRmlsZVwiXSxcclxuICAgICAgICAvLyAgICAgICAgIGxvYWQ6IChzb3VyY2UsIGxvYWQpID0+IHtcclxuICAgICAgICAvLyAgICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMKHNvdXJjZSwgd2luZG93LmxvY2F0aW9uLm9yaWdpbikuc2VhcmNoUGFyYW1zO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLnNlcnZlci5kb3dubG9hZEZpbGUoXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIHBhcmFtcy5nZXQoXCJwbGFjZW1lbnRcIiksXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIHBhcmFtcy5nZXQoXCJkaXJlY3RvcnlcIiksXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIHBhcmFtcy5nZXQoXCJmaWxlbmFtZVwiKSxcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgKHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBsb2FkKG5ldyBGaWxlKFtyZXNwb25zZV0sIHBhcmFtcy5nZXQoXCJmaWxlbmFtZVwiKSkpO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgKTtcclxuICAgICAgICAvLyAgICAgICAgICAgICBjb25zb2xlLmxvZyhzb3VyY2UsIGxvYWQpO1xyXG4gICAgICAgIC8vICAgICAgICAgfSxcclxuICAgICAgICAvLyAgICAgICAgIHByb2Nlc3M6IHtcclxuICAgICAgICAvLyAgICAgICAgICAgICB1cmw6IHRoaXMubWFpbi5tb2RlbC5jb25maWd1cmF0aW9uLnVybHNbXCJ1cGxvYWRGaWxlXCJdLFxyXG4gICAgICAgIC8vICAgICAgICAgICAgIC8vIHVybDogXCJibG9ja3B5L3VwbG9hZF9maWxlP3BsYWNlbWVudD1hc3NpZ25tZW50JmRpcmVjdG9yeT1cIit0aGlzLm1haW4ubW9kZWwuYXNzaWdubWVudC5pZCgpLFxyXG4gICAgICAgIC8vICAgICAgICAgfVxyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5maWxlcG9uZCk7XHJcbiAgICAgICAgLypcclxuICAgICAgICB0aGlzLnVwZGF0ZUVkaXRvcih0aGlzLmZpbGUuaGFuZGxlKCkpO1xyXG4gICAgICAgIC8vIFN1YnNjcmliZSB0byB0aGUgcmVsZXZhbnQgRmlsZVxyXG5cclxuICAgICAgICAvLyBOb3RpZnkgcmVsZXZhbnQgZmlsZSBvZiBjaGFuZ2VzIHRvIEJNXHJcbiAgICAgICAgdGhpcy5jdXJyZW50TGlzdGVuZXIgPSB0aGlzLnVwZGF0ZUhhbmRsZS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuY29kZU1pcnJvci5vbihcImNoYW5nZVwiLCB0aGlzLmN1cnJlbnRMaXN0ZW5lcik7Ki9cclxuICAgIH1cclxuXHJcbiAgICByZWxvYWRJbWFnZXMoKSB7XHJcbiAgICAgICAgdGhpcy5tYWluLmNvbXBvbmVudHMuc2VydmVyLmxpc3RVcGxvYWRlZEZpbGVzKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tYWluLm1vZGVsLmRpc3BsYXkudXBsb2FkZWRGaWxlcyhyZXNwb25zZS5maWxlcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1haW4uY29tcG9uZW50cy5maWxlU3lzdGVtLmxvYWRSZW1vdGVGaWxlcyhyZXNwb25zZS5maWxlcyk7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zdCBhbGxGaWxlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgLy8gT2JqZWN0LmVudHJpZXMocmVzcG9uc2UuZmlsZXMpLmZvckVhY2goKFtncm91cCwgZmlsZXNdKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgZmlsZXMuZm9yRWFjaCgoW2ZpbGVuYW1lLCB1cmxdKSA9PiBhbGxGaWxlcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgc291cmNlOiB1cmwsXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIHR5cGU6IFwibG9jYWxcIlxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzLmZpbGVwb25kLmFkZEZpbGVzKGFsbEZpbGVzKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLmRpYWxvZy5FUlJPUl9MSVNUSU5HX1VQTE9BREVEX0ZJTEVTKHJlc3BvbnNlLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlRWRpdG9yKG5ld0NvbnRlbnRzKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUhhbmRsZShldmVudCkge1xyXG4gICAgICAgIC8qdGhpcy5kaXJ0eSA9ICF0aGlzLmRpcnR5O1xyXG4gICAgICAgIGlmICh0aGlzLmRpcnR5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmZpbGUuaGFuZGxlKHRoaXMuY29kZU1pcnJvci5nZXRWYWx1ZSgpKTtcclxuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xyXG4gICAgICAgIH0qL1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBsYWNlbWVudERpcmVjdG9yeShwbGFjZW1lbnQpIHtcclxuICAgICAgICBzd2l0Y2ggKHBsYWNlbWVudCkge1xyXG4gICAgICAgICAgICBjYXNlIFwic3VibWlzc2lvblwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFpbi5tb2RlbC5zdWJtaXNzaW9uLmlkKCk7XHJcbiAgICAgICAgICAgIGNhc2UgXCJhc3NpZ25tZW50XCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYWluLm1vZGVsLmFzc2lnbm1lbnQuaWQoKTtcclxuICAgICAgICAgICAgY2FzZSBcImNvdXJzZVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFpbi5tb2RlbC5jb3Vyc2UuaWQoKTtcclxuICAgICAgICAgICAgY2FzZSBcInVzZXJcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1haW4ubW9kZWwudXNlci5pZCgpO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwbG9hZEZpbGUoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLm1haW4uY29tcG9uZW50cy5zZXJ2ZXIudXBsb2FkRmlsZShcclxuICAgICAgICAgICAgdGhpcy50YWdVcGxvYWRGaWxlUGxhY2VtZW50LnZhbCgpLFxyXG4gICAgICAgICAgICB0aGlzLmdldFBsYWNlbWVudERpcmVjdG9yeSh0aGlzLnRhZ1VwbG9hZEZpbGVQbGFjZW1lbnQudmFsKCkpLFxyXG4gICAgICAgICAgICB0aGlzLnRhZ1VwbG9hZEZpbGVOYW1lLnZhbCgpLFxyXG4gICAgICAgICAgICB0aGlzLnRhZ1VwbG9hZEZpbGVCdXR0b25bMF0uZmlsZXNbMF0sXHJcbiAgICAgICAgICAgIChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbG9hZEltYWdlcygpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1haW4uY29tcG9uZW50cy5kaWFsb2cuRVJST1JfVVBMT0FESU5HX0ZJTEUocmVzcG9uc2UubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZUZpbGUoZmlsZUluZm8pIHtcclxuICAgICAgICBjb25zdCBbZmlsZW5hbWUsIHVybF0gPSBmaWxlSW5mbztcclxuICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IG5ldyBVUkwodXJsLCB3aW5kb3cubG9jYXRpb24ub3JpZ2luKS5zZWFyY2hQYXJhbXM7XHJcbiAgICAgICAgdGhpcy5tYWluLmNvbXBvbmVudHMuc2VydmVyLnVwbG9hZEZpbGUoXHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1zLmdldChcInBsYWNlbWVudFwiKSxcclxuICAgICAgICAgICAgcXVlcnlQYXJhbXMuZ2V0KFwiZGlyZWN0b3J5XCIpLFxyXG4gICAgICAgICAgICBmaWxlbmFtZSxcclxuICAgICAgICAgICAgXCJcIixcclxuICAgICAgICAgICAgKHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVsb2FkSW1hZ2VzKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLmRpYWxvZy5FUlJPUl9ERUxFVElOR19GSUxFKHJlc3BvbnNlLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuICAgIHJlbmFtZUZpbGUoZmlsZUluZm8pIHtcclxuICAgICAgICBjb25zdCBbZmlsZW5hbWUsIHVybF0gPSBmaWxlSW5mbztcclxuICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IG5ldyBVUkwodXJsLCB3aW5kb3cubG9jYXRpb24ub3JpZ2luKS5zZWFyY2hQYXJhbXM7XHJcbiAgICAgICAgY29uc3QgbmV3RmlsZW5hbWUgPSBwcm9tcHQoXCJFbnRlciB0aGUgbmV3IGZpbGVuYW1lIGZvciB0aGlzIGZpbGU6XCIsIGZpbGVuYW1lKTtcclxuICAgICAgICBpZiAobmV3RmlsZW5hbWUpIHtcclxuICAgICAgICAgICAgdGhpcy5tYWluLmNvbXBvbmVudHMuc2VydmVyLnJlbmFtZUZpbGUoXHJcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtcy5nZXQoXCJwbGFjZW1lbnRcIiksXHJcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtcy5nZXQoXCJkaXJlY3RvcnlcIiksXHJcbiAgICAgICAgICAgICAgICBmaWxlbmFtZSxcclxuICAgICAgICAgICAgICAgIG5ld0ZpbGVuYW1lLFxyXG4gICAgICAgICAgICAgICAgKHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWxvYWRJbWFnZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1haW4uY29tcG9uZW50cy5kaWFsb2cuRVJST1JfUkVOQU1JTkdfRklMRShyZXNwb25zZS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4aXQobmV3RmlsZW5hbWUsIG9sZEVkaXRvciwgbmV3RWRpdG9yKSB7XHJcbiAgICAgICAgLy8gUmVtb3ZlIHN1YnNjcmliZXJcclxuICAgICAgICB0aGlzLmN1cnJlbnRTdWJzY3JpcHRpb24uZGlzcG9zZSgpO1xyXG4gICAgICAgIHN1cGVyLmV4aXQobmV3RmlsZW5hbWUsIG9sZEVkaXRvcik7XHJcbiAgICAgICAgLy8gaWYgKHRoaXMuZmlsZXBvbmQpIHtcclxuICAgICAgICAvLyAgICAgdGhpcy5maWxlcG9uZC5kZXN0cm95KCk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgSW1hZ2VFZGl0b3IgPSB7XHJcbiAgICBuYW1lOiBcIkltYWdlXCIsXHJcbiAgICBleHRlbnNpb25zOiBbXCJpbWFnZXMuYmxvY2tweVwiXSxcclxuICAgIGNvbnN0cnVjdG9yOiBJbWFnZUVkaXRvclZpZXcsXHJcbiAgICB0ZW1wbGF0ZTogSU1BR0VfRURJVE9SX0hUTUxcclxufTsiLCJpbXBvcnQge0Fic3RyYWN0RWRpdG9yfSBmcm9tIFwiLi9hYnN0cmFjdF9lZGl0b3JcIjtcclxuaW1wb3J0IHtkZWZhdWx0X2hlYWRlcn0gZnJvbSBcIi4vZGVmYXVsdF9oZWFkZXJcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBKU09OX0VESVRPUl9IVE1MID0gYFxyXG4gICAgJHtkZWZhdWx0X2hlYWRlcn1cclxuICAgICA8ZGl2PlxyXG4gICAgICAgIDx0ZXh0YXJlYSBjbGFzcz1cImJsb2NrcHktZWRpdG9yLWpzb25cIj48L3RleHRhcmVhPlxyXG4gICAgPC9kaXY+XHJcbmA7XHJcblxyXG5jbGFzcyBKc29uRWRpdG9yVmlldyBleHRlbmRzIEFic3RyYWN0RWRpdG9yIHtcclxuICAgIGNvbnN0cnVjdG9yKG1haW4sIHRhZykge1xyXG4gICAgICAgIHN1cGVyKG1haW4sIHRhZyk7XHJcbiAgICAgICAgdGhpcy5jb2RlTWlycm9yID0gQ29kZU1pcnJvci5mcm9tVGV4dEFyZWEodGFnLmZpbmQoXCIuYmxvY2tweS1lZGl0b3ItanNvblwiKVswXSwge1xyXG4gICAgICAgICAgICBzaG93Q3Vyc29yV2hlblNlbGVjdGluZzogdHJ1ZSxcclxuICAgICAgICAgICAgbGluZU51bWJlcnM6IHRydWUsXHJcbiAgICAgICAgICAgIGZpcnN0TGluZU51bWJlcjogMSxcclxuICAgICAgICAgICAgaW5kZW50VW5pdDogNCxcclxuICAgICAgICAgICAgdGFiU2l6ZTogNCxcclxuICAgICAgICAgICAgaW5kZW50V2l0aFRhYnM6IGZhbHNlLFxyXG4gICAgICAgICAgICBtb2RlOiBcImpzb25cIixcclxuICAgICAgICAgICAgZXh0cmFLZXlzOiB7XHJcbiAgICAgICAgICAgICAgICBcIlRhYlwiOiBcImluZGVudE1vcmVcIixcclxuICAgICAgICAgICAgICAgIFwiU2hpZnQtVGFiXCI6IFwiaW5kZW50TGVzc1wiLFxyXG4gICAgICAgICAgICAgICAgXCJFc2NcIjogZnVuY3Rpb24gKGNtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNtLmdldE9wdGlvbihcImZ1bGxTY3JlZW5cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY20uc2V0T3B0aW9uKFwiZnVsbFNjcmVlblwiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY20uZGlzcGxheS5pbnB1dC5ibHVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIFwiRjExXCI6IGZ1bmN0aW9uIChjbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNtLnNldE9wdGlvbihcImZ1bGxTY3JlZW5cIiwgIWNtLmdldE9wdGlvbihcImZ1bGxTY3JlZW5cIikpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGVudGVyKG5ld0ZpbGVuYW1lLCBvbGRFZGl0b3IpIHtcclxuICAgICAgICBzdXBlci5lbnRlcihuZXdGaWxlbmFtZSwgb2xkRWRpdG9yKTtcclxuICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy51cGRhdGVFZGl0b3IodGhpcy5maWxlLmhhbmRsZSgpKTtcclxuICAgICAgICAvLyBTdWJzY3JpYmUgdG8gdGhlIHJlbGV2YW50IEZpbGVcclxuICAgICAgICB0aGlzLmN1cnJlbnRTdWJzY3JpcHRpb24gPSB0aGlzLmZpbGUuaGFuZGxlLnN1YnNjcmliZSh0aGlzLnVwZGF0ZUVkaXRvci5iaW5kKHRoaXMpKTtcclxuICAgICAgICAvLyBOb3RpZnkgcmVsZXZhbnQgZmlsZSBvZiBjaGFuZ2VzIHRvIEJNXHJcbiAgICAgICAgdGhpcy5jdXJyZW50TGlzdGVuZXIgPSB0aGlzLnVwZGF0ZUhhbmRsZS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuY29kZU1pcnJvci5vbihcImNoYW5nZVwiLCB0aGlzLmN1cnJlbnRMaXN0ZW5lcik7XHJcbiAgICAgICAgaWYgKG9sZEVkaXRvciAhPT0gdGhpcykge1xyXG4gICAgICAgICAgICAvLyBEZWxheSBzbyB0aGF0IGV2ZXJ5dGhpbmcgaXMgcmVuZGVyZWRcclxuICAgICAgICAgICAgc2V0VGltZW91dCh0aGlzLmNvZGVNaXJyb3IucmVmcmVzaC5iaW5kKHRoaXMuY29kZU1pcnJvciksIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUT0RPOiB1cGRhdGUgZHluYW1pY2FsbHkgd2hlbiBjaGFuZ2luZyBpbnN0cnVjdG9yIHN0YXR1c1xyXG4gICAgICAgIHRoaXMuY29kZU1pcnJvci5zZXRPcHRpb24oXCJyZWFkT25seVwiLCBuZXdGaWxlbmFtZS5zdGFydHNXaXRoKFwiJlwiKSAmJiAhdGhpcy5tYWluLm1vZGVsLmRpc3BsYXkuaW5zdHJ1Y3RvcigpKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlRWRpdG9yKG5ld0NvbnRlbnRzKSB7XHJcbiAgICAgICAgdGhpcy5kaXJ0eSA9ICF0aGlzLmRpcnR5O1xyXG4gICAgICAgIGlmICh0aGlzLmRpcnR5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmNvZGVNaXJyb3Iuc2V0VmFsdWUobmV3Q29udGVudHMpO1xyXG4gICAgICAgICAgICB0aGlzLmNvZGVNaXJyb3IucmVmcmVzaCgpO1xyXG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUhhbmRsZShldmVudCkge1xyXG4gICAgICAgIHRoaXMuZGlydHkgPSAhdGhpcy5kaXJ0eTtcclxuICAgICAgICBpZiAodGhpcy5kaXJ0eSkge1xyXG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5maWxlLmhhbmRsZSh0aGlzLmNvZGVNaXJyb3IuZ2V0VmFsdWUoKSk7XHJcbiAgICAgICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhpdChuZXdGaWxlbmFtZSwgb2xkRWRpdG9yLCBuZXdFZGl0b3IpIHtcclxuICAgICAgICAvLyBSZW1vdmUgc3Vic2NyaWJlclxyXG4gICAgICAgIHRoaXMuY3VycmVudFN1YnNjcmlwdGlvbi5kaXNwb3NlKCk7XHJcbiAgICAgICAgdGhpcy5jb2RlTWlycm9yLm9mZihcImNoYW5nZVwiLCB0aGlzLmN1cnJlbnRMaXN0ZW5lcik7XHJcbiAgICAgICAgdGhpcy5jb2RlTWlycm9yLnNldE9wdGlvbihcInJlYWRPbmx5XCIsIGZhbHNlKTtcclxuICAgICAgICBzdXBlci5leGl0KG5ld0ZpbGVuYW1lLCBvbGRFZGl0b3IpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgSnNvbkVkaXRvciA9IHtcclxuICAgIG5hbWU6IFwiSlNPTlwiLFxyXG4gICAgZXh0ZW5zaW9uczogW1wiLmpzb25cIl0sXHJcbiAgICBjb25zdHJ1Y3RvcjogSnNvbkVkaXRvclZpZXcsXHJcbiAgICB0ZW1wbGF0ZTogSlNPTl9FRElUT1JfSFRNTFxyXG59OyIsImltcG9ydCB7QWJzdHJhY3RFZGl0b3J9IGZyb20gXCIuL2Fic3RyYWN0X2VkaXRvclwiO1xuaW1wb3J0IHtkZWZhdWx0X2hlYWRlcn0gZnJvbSBcIi4vZGVmYXVsdF9oZWFkZXJcIjtcblxuZXhwb3J0IGNvbnN0IE1BUktET1dOX0VESVRPUl9IVE1MID0gYFxuICAgICR7ZGVmYXVsdF9oZWFkZXJ9XG4gICAgPHRleHRhcmVhIGNsYXNzPVwiYmxvY2tweS1lZGl0b3ItbWFya2Rvd25cIj48L3RleHRhcmVhPiAgICBcbmA7XG5cblxuY2xhc3MgTWFya2Rvd25FZGl0b3JWaWV3IGV4dGVuZHMgQWJzdHJhY3RFZGl0b3Ige1xuICAgIGNvbnN0cnVjdG9yKG1haW4sIHRhZykge1xuICAgICAgICBzdXBlcihtYWluLCB0YWcpO1xuICAgICAgICB0aGlzLm1kZSA9IG5ldyBFYXN5TURFKHtcbiAgICAgICAgICAgIGVsZW1lbnQ6IHRhZy5maW5kKFwiLmJsb2NrcHktZWRpdG9yLW1hcmtkb3duXCIpWzBdLFxuICAgICAgICAgICAgYXV0b0Rvd25sb2FkRm9udEF3ZXNvbWU6IGZhbHNlLFxuICAgICAgICAgICAgZm9yY2VTeW5jOiB0cnVlLFxuICAgICAgICAgICAgbWluSGVpZ2h0OiBcIjMwMHB4XCIsXG4gICAgICAgICAgICAvL3Njcm9sbGJhclN0eWxlOiBcIm5hdGl2ZVwiLFxuICAgICAgICAgICAgLy8gVE9ETzogaW1hZ2VVcGxvYWRGdW5jdGlvblxuICAgICAgICAgICAgcmVuZGVyaW5nQ29uZmlnOiB7XG4gICAgICAgICAgICAgICAgY29kZVN5bnRheEhpZ2hsaWdodGluZzogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbmRlbnRXaXRoVGFiczogZmFsc2UsXG4gICAgICAgICAgICB0YWJTaXplOiA0LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGVudGVyKG5ld0ZpbGVuYW1lLCBvbGRFZGl0b3IpIHtcbiAgICAgICAgc3VwZXIuZW50ZXIobmV3RmlsZW5hbWUsIG9sZEVkaXRvcik7XG4gICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy51cGRhdGVFZGl0b3IodGhpcy5maWxlLmhhbmRsZSgpKTtcbiAgICAgICAgLy8gU3Vic2NyaWJlIHRvIHRoZSByZWxldmFudCBGaWxlXG4gICAgICAgIHRoaXMuY3VycmVudFN1YnNjcmlwdGlvbiA9IHRoaXMuZmlsZS5oYW5kbGUuc3Vic2NyaWJlKHRoaXMudXBkYXRlRWRpdG9yLmJpbmQodGhpcykpO1xuICAgICAgICAvLyBOb3RpZnkgcmVsZXZhbnQgZmlsZSBvZiBjaGFuZ2VzIHRvIEJNXG4gICAgICAgIHRoaXMuY3VycmVudExpc3RlbmVyID0gdGhpcy51cGRhdGVIYW5kbGUuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5tZGUuY29kZW1pcnJvci5vbihcImNoYW5nZVwiLCB0aGlzLmN1cnJlbnRMaXN0ZW5lcik7XG4gICAgICAgIGlmIChvbGRFZGl0b3IgIT09IHRoaXMpIHtcbiAgICAgICAgICAgIC8vIERlbGF5IHNvIHRoYXQgZXZlcnl0aGluZyBpcyByZW5kZXJlZFxuICAgICAgICAgICAgc2V0VGltZW91dCh0aGlzLm1kZS5jb2RlbWlycm9yLnJlZnJlc2guYmluZCh0aGlzLm1kZS5jb2RlbWlycm9yKSwgMSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVFZGl0b3IobmV3Q29udGVudHMpIHtcbiAgICAgICAgdGhpcy5kaXJ0eSA9ICF0aGlzLmRpcnR5O1xuICAgICAgICBpZiAodGhpcy5kaXJ0eSkge1xuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLm1kZS52YWx1ZShuZXdDb250ZW50cyk7XG4gICAgICAgICAgICB0aGlzLm1kZS5jb2RlbWlycm9yLnJlZnJlc2goKTtcbiAgICAgICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZUhhbmRsZShldmVudCkge1xuICAgICAgICB0aGlzLmRpcnR5ID0gIXRoaXMuZGlydHk7XG4gICAgICAgIGlmICh0aGlzLmRpcnR5KSB7XG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuZmlsZS5oYW5kbGUodGhpcy5tZGUudmFsdWUoKSk7XG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleGl0KG5ld0ZpbGVuYW1lLCBvbGRFZGl0b3IsIG5ld0VkaXRvcikge1xuICAgICAgICAvLyBSZW1vdmUgc3Vic2NyaWJlclxuICAgICAgICB0aGlzLmN1cnJlbnRTdWJzY3JpcHRpb24uZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLm1kZS5jb2RlbWlycm9yLm9mZihcImNoYW5nZVwiLCB0aGlzLmN1cnJlbnRMaXN0ZW5lcik7XG4gICAgICAgIHN1cGVyLmV4aXQobmV3RmlsZW5hbWUsIG9sZEVkaXRvcik7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgTWFya2Rvd25FZGl0b3IgPSB7XG4gICAgbmFtZTogXCJNYXJrZG93blwiLFxuICAgIGV4dGVuc2lvbnM6IFtcIi5tZFwiXSxcbiAgICBjb25zdHJ1Y3RvcjogTWFya2Rvd25FZGl0b3JWaWV3LFxuICAgIHRlbXBsYXRlOiBNQVJLRE9XTl9FRElUT1JfSFRNTFxufTsiLCIvKipcbiAqIFRPRE86IHJlbmFtZSBmaWxlcywgbWFudWFsIHNhdmUsIHRhZ3MsIHNhbXBsZV9zdWJtaXNzaW9ucywgb25fZXZhbCwgbm9uLWJ1aWx0aW4gZmlsZXNcbiAqIFRPRE86IGltcG9ydCBkYXRhLCBoaXN0b3J5LCBydW4sIHVybF9kYXRhLCBhc3NpZ25tZW50X3NldHRpbmdzLCBwYXJzb25zX21vZGVcbiAqIFRPRE86IGRlbGV0ZSBiZWNvbWVzIFwiY2xlYXJcIiBmb3IgaW5zdHJ1Y3RvciBmaWxlc1xuICovXG5cbi8qKlxuICpcbiAqIEBlbnVtIHtzdHJ9XG4gKi9cbmltcG9ydCB7QWJzdHJhY3RFZGl0b3IsIHNsdWdnaWZ5fSBmcm9tIFwiLi9hYnN0cmFjdF9lZGl0b3JcIjtcbmltcG9ydCB7SElTVE9SWV9UT09MQkFSX0hUTUx9IGZyb20gXCIuLi9oaXN0b3J5XCI7XG5pbXBvcnQge1NlY29uZFJvd1NlY29uZFBhbmVsT3B0aW9uc30gZnJvbSBcIi4uL2ludGVyZmFjZVwiO1xuXG5leHBvcnQgbGV0IERpc3BsYXlNb2RlcyA9IHtcbiAgICBCTE9DSzogXCJibG9ja1wiLFxuICAgIFNQTElUOiBcInNwbGl0XCIsXG4gICAgVEVYVDogXCJ0ZXh0XCJcbn07XG5cbmZ1bmN0aW9uIG1ha2VUYWIobmFtZSwgaWNvbiwgbW9kZSkge1xuICAgIHJldHVybiBgPGxhYmVsIGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSBibG9ja3B5LW1vZGUtc2V0LWJsb2Nrc1wiXG4gICAgICAgICAgICAgICAgZGF0YS1iaW5kPVwiY3NzOiB7YWN0aXZlOiBkaXNwbGF5LnB5dGhvbk1vZGUoKSA9PT0gJyR7bW9kZX0nfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiB1aS5lZGl0b3JzLnB5dGhvbi51cGRhdGVNb2RlLmJpbmQoJGRhdGEsICcke21vZGV9JylcIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nZmFzIGZhLSR7aWNvbn0nPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cImJsb2NrcHktbW9kZS1zZXRcIiBhdXRvY29tcGxldGU9XCJvZmZcIiBjaGVja2VkPiAke25hbWV9XG4gICAgICAgICAgICA8L2xhYmVsPmA7XG59XG5cbmV4cG9ydCBjb25zdCBQWVRIT05fRURJVE9SX0hUTUwgPSBgXG5cbiAgICA8ZGl2IGNsYXNzPVwiYmxvY2tweS1weXRob24tdG9vbGJhciBjb2wtbWQtMTIgYnRuLXRvb2xiYXJcIlxuICAgICAgICAgcm9sZT1cInRvb2xiYXJcIiBhcmlhLWxhYmVsPVwiUHl0aG9uIFRvb2xiYXJcIj5cblxuICAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cCBtci0yXCIgcm9sZT1cImdyb3VwXCIgYXJpYS1sYWJlbD1cIlJ1biBHcm91cFwiPiAgICAgICAgIFxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYmxvY2tweS1ydW4gbm90cmFuc2l0aW9uXCJcbiAgICAgICAgICAgICAgICBkYXRhLWJpbmQ9XCJjbGljazogdWkuZXhlY3V0ZS5ydW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzOiB7J2Jsb2NrcHktcnVuLXJ1bm5pbmcnOiB1aS5leGVjdXRlLmlzUnVubmluZ31cIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImZhcyBmYS1wbGF5XCI+PC9zcGFuPiA8c3BhbiBkYXRhLWJpbmQ9XCJ0ZXh0OiB1aS5leGVjdXRlLnJ1bkxhYmVsXCI+PC9zcGFuPlxuICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgPC9kaXY+XG4gICAgICAgICBcbiAgICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXAgYnRuLWdyb3VwLXRvZ2dsZSBtci0yXCIgZGF0YS10b2dnbGU9XCJidXR0b25zXCI+XG4gICAgICAgICAgICA8IS0tIGtvIGlmOiAkcm9vdC5hc3NpZ25tZW50LnNldHRpbmdzLmVuYWJsZUJsb2NrcygpIC0tPlxuICAgICAgICAgICAgJHttYWtlVGFiKFwiQmxvY2tzXCIsIFwidGgtbGFyZ2VcIiwgRGlzcGxheU1vZGVzLkJMT0NLKX1cbiAgICAgICAgICAgICR7bWFrZVRhYihcIlNwbGl0XCIsIFwiY29sdW1uc1wiLCBEaXNwbGF5TW9kZXMuU1BMSVQpfVxuICAgICAgICAgICAgJHttYWtlVGFiKFwiVGV4dFwiLCBcImFsaWduLWxlZnRcIiwgRGlzcGxheU1vZGVzLlRFWFQpfVxuICAgICAgICAgICAgPCEtLSAva28gLS0+XG4gICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cCBtci0yXCIgcm9sZT1cImdyb3VwXCIgYXJpYS1sYWJlbD1cIlJlc2V0IEdyb3VwXCI+XG4gICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5XCJcbiAgICAgICAgICAgICAgICAgZGF0YS1iaW5kPVwiY2xpY2s6IHVpLmVkaXRvcnMucmVzZXRcIj5cbiAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvc3Bhbj4gUmVzZXRcbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICA8L2Rpdj5cbiAgICAgICAgIFxuICAgICAgICAgPCEtLSBrbyBpZjogIWFzc2lnbm1lbnQuc2V0dGluZ3MuaGlkZUltcG9ydERhdGFzZXRzQnV0dG9uKCkgJiYgIXVpLnNtYWxsTGF5b3V0KCktLT5cbiAgICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXAgbXItMlwiIHJvbGU9XCJncm91cFwiIGFyaWEtbGFiZWw9XCJJbXBvcnQgR3JvdXBcIj5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeVwiXG4gICAgICAgICAgICAgICAgZGF0YS1iaW5kPVwiY2xpY2s6IHVpLmVkaXRvcnMuaW1wb3J0RGF0YXNldFwiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZmFzIGZhLWNsb3VkLWRvd25sb2FkLWFsdFwiPjwvc3Bhbj4gSW1wb3J0IGRhdGFzZXRzXG4gICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICA8L2Rpdj5cbiAgICAgICAgIDwhLS0gL2tvIC0tPlxuICAgICAgICAgXG4gICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwIG1yLTJcIiBkYXRhLWJpbmQ9XCJoaWRkZW46IHVpLnNtYWxsTGF5b3V0XCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeVwiPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImZhcyBmYS1maWxlLXVwbG9hZFwiPjwvc3Bhbj4gVXBsb2FkXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImJsb2NrcHktdG9vbGJhci11cGxvYWRcIiB0eXBlPVwiZmlsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBoaWRkZW5cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYmluZD1cImV2ZW50OiB7Y2hhbmdlOiB1aS5lZGl0b3JzLnVwbG9hZH1cIj5cbiAgICAgICAgICAgICAgICAgPC9sYWJlbD5cblxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSBkcm9wZG93bi10b2dnbGUgZHJvcGRvd24tdG9nZ2xlLXNwbGl0XCJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9XCJkcm9wZG93blwiIGFyaWEtaGFzcG9wdXA9XCJ0cnVlXCIgYXJpYS1leHBhbmRlZD1cImZhbHNlXCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY2FyZXRcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seVwiPlRvZ2dsZSBEcm9wZG93bjwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LXJpZ2h0XCI+XG4gICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdkcm9wZG93bi1pdGVtIGJsb2NrcHktdG9vbGJhci1kb3dubG9hZCdcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYmluZD1cImNsaWNrOiB1aS5lZGl0b3JzLmRvd25sb2FkXCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdmYXMgZmEtZG93bmxvYWQnPjwvc3Bhbj4gRG93bmxvYWRcbiAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICBcbiAgICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXAgbXItMlwiIHJvbGU9XCJncm91cFwiIGFyaWEtbGFiZWw9XCJIaXN0b3J5IEdyb3VwXCIgZGF0YS1iaW5kPVwiaGlkZGVuOiB1aS5zbWFsbExheW91dFwiPlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5XCJcbiAgICAgICAgICAgICAgICBhcmlhLXByZXNzZWQ9XCJmYWxzZVwiXG4gICAgICAgICAgICAgICAgZGF0YS1iaW5kPVwiY2xpY2s6IHVpLmVkaXRvcnMucHl0aG9uLnRvZ2dsZUhpc3RvcnlNb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlOiB1aS5lZGl0b3JzLnB5dGhvbi5pc0hpc3RvcnlBdmFpbGFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjc3M6IHsgYWN0aXZlOiBkaXNwbGF5Lmhpc3RvcnlNb2RlIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyOiB7ICdhcmlhLXByZXNzZWQnOiBkaXNwbGF5Lmhpc3RvcnlNb2RlIH1cIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImZhcyBmYS1oaXN0b3J5XCI+PC9zcGFuPiBIaXN0b3J5XG4gICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICA8L2Rpdj5cbiAgICAgICAgIFxuICAgICAgICAgPCEtLSBGdWxseSBmdW5jdGlvbmFsLCBidXQgYSBsaXR0bGUgdG9vLi4gSW52YXNpdmUgXG4gICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwIG1yLTJcIiByb2xlPVwiZ3JvdXBcIiBhcmlhLWxhYmVsPVwiRnVsbHNjcmVlbiBHcm91cFwiXG4gICAgICAgICAgICBkYXRhLWJpbmQ9XCJ2aXNpYmxlOiBkaXNwbGF5LnB5dGhvbk1vZGUoKSA9PT0gJ3RleHQnXCI+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tb3V0bGluZS1zZWNvbmRhcnlcIlxuICAgICAgICAgICAgICAgIGRhdGEtYmluZD1cImNsaWNrOiB1aS5lZGl0b3JzLnB5dGhvbi5mdWxsc2NyZWVuXCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJmYXMgZmEtZXhwYW5kLWFycm93cy1hbHRcIj48L3NwYW4+IEZ1bGxzY3JlZW5cbiAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgIDwvZGl2PlxuICAgICAgICAgLS0+XG4gICAgICAgICBcbiAgICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXAgbXItMlwiIHJvbGU9XCJncm91cFwiIGFyaWEtbGFiZWw9XCJTYXZlIEdyb3VwXCJcbiAgICAgICAgICAgIGRhdGEtYmluZD1cInZpc2libGU6IHVpLmVkaXRvcnMuY2FuU2F2ZVwiPlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5XCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJmYXMgZmEtc2F2ZVwiPjwvc3Bhbj4gU2F2ZVxuICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgPC9kaXY+XG4gICAgICAgICBcbiAgICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXAgbXItMlwiIHJvbGU9XCJncm91cFwiIGFyaWEtbGFiZWw9XCJEZWxldGUgR3JvdXBcIlxuICAgICAgICAgICAgZGF0YS1iaW5kPVwidmlzaWJsZTogdWkuZWRpdG9ycy5jYW5EZWxldGVcIj5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeVwiLFxuICAgICAgICAgICAgICAgIGRhdGEtYmluZD1cImNsaWNrOiB1aS5maWxlcy5kZWxldGVcIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImZhcyBmYS10cmFzaFwiPjwvc3Bhbj4gRGVsZXRlXG4gICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICA8L2Rpdj5cbiAgICAgICAgIFxuICAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cCBtci0yXCI+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5IGRyb3Bkb3duLXRvZ2dsZSBkcm9wZG93bi10b2dnbGUtc3BsaXRcIlxuICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCIgYXJpYS1oYXNwb3B1cD1cInRydWVcIiBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJmYXMgZmEtZWxsaXBzaXMtdlwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5XCI+VG9nZ2xlIEV4dHJhIEZlYXR1cmVzPC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtcmlnaHRcIj5cbiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2Ryb3Bkb3duLWl0ZW0gYmxvY2tweS10b29sYmFyLXJ1bi1xdWlldGx5IG5vdHJhbnNpdGlvbicgcm9sZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICBocmVmPVwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYmluZD1cImNsaWNrOiB1aS5leGVjdXRlLnJ1blF1aWV0bHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3M6IHsnYmxvY2tweS1ydW4tcnVubmluZyc6IHVpLmV4ZWN1dGUuaXNSdW5uaW5nfVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJmYXMgZmEtY29tbWVudC1zbGFzaFwiPjwvc3Bhbj4gPHNwYW4gZGF0YS1iaW5kPVwidGV4dDogdWkuZXhlY3V0ZS5ydW5RdWlldGx5TGFiZWxcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgXG4gICAgICAgICA8IS0tPGRpdiBjbGFzcz1cImJ0bi1ncm91cCBtci0yXCIgcm9sZT1cImdyb3VwXCIgYXJpYS1sYWJlbD1cIlJlbmFtZSBHcm91cFwiXG4gICAgICAgICAgICBkYXRhLWJpbmQ9XCJ2aXNpYmxlOiB1aS5lZGl0b3JzLmNhblJlbmFtZVwiPlxuICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeVwiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZmFzIGZhLWZpbGUtc2lnbmF0dXJlXCI+PC9zcGFuPiBSZW5hbWVcbiAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgIDwvZGl2Pi0tPlxuICAgICAgICAgXG4gICAgPC9kaXY+XG4gICAgXG4gICAgJHtISVNUT1JZX1RPT0xCQVJfSFRNTH1cblxuXG4gICAgPGRpdiBjbGFzcz1cImJsb2NrcHktcHl0aG9uLWJsb2NrbWlycm9yXCJcbiAgICAgICAgZGF0YS1iaW5kPVwiaGlkZGVuOiB1aS5tZW51LmlzU3VibWl0dGVkXCI+XG4gICAgPC9kaXY+XG5gO1xuXG5cblxuZnVuY3Rpb24gY29udmVydElweW5iVG9QeXRob24oY29kZSkge1xuICAgIGxldCBpcHluYiA9IEpTT04ucGFyc2UoY29kZSk7XG4gICAgbGV0IGlzVXNhYmxlID0gZnVuY3Rpb24oY2VsbCkge1xuICAgICAgICBpZiAoY2VsbC5jZWxsX3R5cGUgPT09IFwiY29kZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gY2VsbC5zb3VyY2UubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgICAgICFjZWxsLnNvdXJjZVswXS5zdGFydHNXaXRoKFwiJVwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjZWxsLmNlbGxfdHlwZSA9PT0gXCJtYXJrZG93blwiIHx8XG4gICAgICAgICAgICAgICAgY2VsbC5jZWxsX3R5cGUgPT09IFwicmF3XCI7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGxldCBtYWtlUHl0aG9uID0gZnVuY3Rpb24oY2VsbCkge1xuICAgICAgICBpZiAoY2VsbC5jZWxsX3R5cGUgPT09IFwiY29kZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gY2VsbC5zb3VyY2Uuam9pbihcIlxcblwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChjZWxsLmNlbGxfdHlwZSA9PT0gXCJtYXJrZG93blwiIHx8XG4gICAgICAgICAgICBjZWxsLmNlbGxfdHlwZSA9PT0gXCJyYXdcIikge1xuICAgICAgICAgICAgcmV0dXJuIFwiJycnXCIrY2VsbC5zb3VyY2Uuam9pbihcIlxcblwiKStcIicnJ1wiO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gaXB5bmIuY2VsbHMuZmlsdGVyKGlzVXNhYmxlKS5tYXAobWFrZVB5dGhvbikuam9pbihcIlxcblwiKTtcbn1cblxuY2xhc3MgUHl0aG9uRWRpdG9yVmlldyBleHRlbmRzIEFic3RyYWN0RWRpdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihtYWluLCB0YWcpIHtcbiAgICAgICAgc3VwZXIobWFpbiwgdGFnLmZpbmQoXCIuYmxvY2tweS1weXRob24tYmxvY2ttaXJyb3JcIikpO1xuICAgICAgICBCbG9ja2x5LnNldFBhcmVudENvbnRhaW5lcihtYWluLm1vZGVsLmNvbmZpZ3VyYXRpb24uY29udGFpbmVyWzBdKTtcbiAgICAgICAgdGhpcy5ibSA9IG5ldyBCbG9ja01pcnJvcih7XG4gICAgICAgICAgICBcImNvbnRhaW5lclwiOiB0aGlzLnRhZ1swXSxcbiAgICAgICAgICAgIFwicnVuXCI6IG1haW4uY29tcG9uZW50cy5lbmdpbmUucnVuLmJpbmQobWFpbi5jb21wb25lbnRzLmVuZ2luZSksXG4gICAgICAgICAgICBcInNraXBTa3VscHRcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiYmxvY2tseU1lZGlhUGF0aFwiOiBtYWluLm1vZGVsLmNvbmZpZ3VyYXRpb24uYmxvY2tseVBhdGgsXG4gICAgICAgICAgICBcInRvb2xib3hcIjogbWFpbi5tb2RlbC5hc3NpZ25tZW50LnNldHRpbmdzLnRvb2xib3goKSxcbiAgICAgICAgICAgIFwiaW1hZ2VNb2RlXCI6IHRydWUsXG4gICAgICAgICAgICBpbWFnZURvd25sb2FkSG9vazogKG9sZFVybCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBvbGRVcmw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW1hZ2VVcGxvYWRIb29rOiAoYmxvYikgPT4ge1xuICAgICAgICAgICAgICAgIC8vY29uc3QgdXVpZCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFtdKSkuc3Vic3RyaW5nKDMxKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdWJtaXNzaW9uSWQgPSBtYWluLm1vZGVsLnN1Ym1pc3Npb24uaWQoKTtcbiAgICAgICAgICAgICAgICAgICAgbWFpbi5jb21wb25lbnRzLnNlcnZlci51cGxvYWRGaWxlKFwic3VibWlzc2lvblwiLCBzdWJtaXNzaW9uSWQsIGJsb2IubmFtZSwgYmxvYiwgKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlLmVuZHBvaW50KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL3Jlc29sdmUoSlNPTi5zdHJpbmdpZnkobWFpbi5tb2RlbC5jb25maWd1cmF0aW9uLnVybHNbXCJkb3dubG9hZEZpbGVcIl0gKyBgP3BsYWNlbWVudD1zdWJtaXNzaW9uJmRpcmVjdG9yeT0ke3N1Ym1pc3Npb25JZH0mZmlsZW5hbWU9JHtibG9iLm5hbWV9YCkpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgLy9yZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFwiSW1hZ2UoXCIrSlNPTi5zdHJpbmdpZnkoVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKSkrXCIpXCIpO1xuICAgICAgICAgICAgICAgICAgICAvL3JldHVybiBQcm9taXNlLnJlc29sdmUoSlNPTi5zdHJpbmdpZnkoVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGltYWdlTGl0ZXJhbEhvb2s6IChvbGRVcmwpID0+IHtcbiAgICAgICAgICAgICAgICAvL3JldHVybiBgSW1hZ2UoXCIke29sZFVybH1cIilgO1xuICAgICAgICAgICAgICAgIHJldHVybiBgXCIke29sZFVybH1cImA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8naGVpZ2h0JzogJzIwMDBweCdcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFRPRE86IFByZXZlbnQgSU5TIGFuZCBPVlIgbW9kZSAoLi4uIHRoaXMuYm0udGV4dEVkaXRvci5jb2RlTWlycm9yLlxuXG4gICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZWFkT25seSA9IGZhbHNlO1xuICAgICAgICB0aGlzLm1ha2VTdWJzY3JpcHRpb25zKCk7XG4gICAgICAgIHRoaXMubGluZUVycm9yU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5saW5lVW5jb3ZlcmVkU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5saW5lVHJhY2VTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICB0aGlzLm9sZFB5dGhvbk1vZGUgPSB0aGlzLm1haW4ubW9kZWwuZGlzcGxheS5weXRob25Nb2RlKCk7XG5cbiAgICAgICAgdGhpcy5tYWtlUGVyQXNzaWdubWVudFN1YnNjcmlwdGlvbnMoKTtcbiAgICB9XG5cbiAgICBjb25maWd1cmVFeHRyYUJsb2NrbHkoKSB7XG4gICAgICAgIHRoaXMuYm0uYmxvY2tFZGl0b3Iud29ya3NwYWNlLmNvbmZpZ3VyZUNvbnRleHRNZW51ID0gKG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIG9wdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIlNjcmVlbnNob3RcIixcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogKCkgPT4gdGhpcy5tYWluLmNvbXBvbmVudHMuZGlhbG9nLlNDUkVFTlNIT1RfQkxPQ0tTXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBlbnRlcihuZXdGaWxlbmFtZSwgb2xkRWRpdG9yKSB7XG4gICAgICAgIGxldCBvbGRGaWxlbmFtZSA9IHRoaXMuZmlsZW5hbWU7XG4gICAgICAgIHN1cGVyLmVudGVyKG5ld0ZpbGVuYW1lLCBvbGRFZGl0b3IpO1xuICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKG5ld0ZpbGVuYW1lICE9PSBcImFuc3dlci5weVwiKSB7XG4gICAgICAgICAgICBpZiAob2xkRmlsZW5hbWUgPT09IFwiYW5zd2VyLnB5XCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9sZFB5dGhvbk1vZGUgPSB0aGlzLm1haW4ubW9kZWwuZGlzcGxheS5weXRob25Nb2RlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1haW4ubW9kZWwuZGlzcGxheS5weXRob25Nb2RlKERpc3BsYXlNb2Rlcy5URVhUKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubWFpbi5tb2RlbC5kaXNwbGF5LnB5dGhvbk1vZGUodGhpcy5vbGRQeXRob25Nb2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudXBkYXRlRWRpdG9yKHRoaXMuZmlsZS5oYW5kbGUoKSk7XG5cbiAgICAgICAgLy8gU3Vic2NyaWJlIHRvIHRoZSByZWxldmFudCBGaWxlXG4gICAgICAgIHRoaXMuY3VycmVudFN1YnNjcmlwdGlvbiA9IHRoaXMuZmlsZS5oYW5kbGUuc3Vic2NyaWJlKHRoaXMudXBkYXRlRWRpdG9yLmJpbmQodGhpcykpO1xuXG4gICAgICAgIC8vIE5vdGlmeSByZWxldmFudCBmaWxlIG9mIGNoYW5nZXMgdG8gQk1cbiAgICAgICAgdGhpcy5jdXJyZW50Qk1MaXN0ZW5lciA9IHRoaXMudXBkYXRlSGFuZGxlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuYm0uYWRkQ2hhbmdlTGlzdGVuZXIodGhpcy5jdXJyZW50Qk1MaXN0ZW5lcik7XG5cbiAgICAgICAgaWYgKG5ld0ZpbGVuYW1lICE9PSBcImFuc3dlci5weVwiKSB7XG4gICAgICAgICAgICB0aGlzLmJtLmlzUGFyc29ucyA9ICgpID0+IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5ibS5pc1BhcnNvbnMgPSB0aGlzLm1haW4ubW9kZWwuYXNzaWdubWVudC5zZXR0aW5ncy5pc1BhcnNvbnM7XG5cbiAgICAgICAgICAgIHRoaXMubGluZUVycm9yU3Vic2NyaXB0aW9uID0gdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5mZWVkYmFjay5saW5lc0Vycm9yLnN1YnNjcmliZSgobGluZXMpID0+e1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmJtLnNldEhpZ2hsaWdodGVkTGluZXMobGluZXMsIFwiZWRpdG9yLWVycm9yLWxpbmVcIik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubGluZVVuY292ZXJlZFN1YnNjcmlwdGlvbiA9IHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24uZmVlZGJhY2subGluZXNVbmNvdmVyZWQuc3Vic2NyaWJlKChsaW5lcykgPT5cbiAgICAgICAgICAgICAgICB0aGlzLmJtLnNldEhpZ2hsaWdodGVkTGluZXMobGluZXMsIFwiZWRpdG9yLXVuY292ZXJlZC1saW5lXCIpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB0aGlzLmxpbmVUcmFjZVN1YnNjcmlwdGlvbiA9IHRoaXMubWFpbi5tb2RlbC51aS50cmFjZS5oaWdobGlnaHRlZExpbmUuc3Vic2NyaWJlKChsaW5lcykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYm0uY2xlYXJIaWdobGlnaHRlZExpbmVzKFwiZWRpdG9yLXRyYWNlZC1saW5lXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuYm0uc2V0SGlnaGxpZ2h0ZWRMaW5lcyhsaW5lcywgXCJlZGl0b3ItdHJhY2VkLWxpbmVcIik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy90aGlzLmJtLmJsb2NrRWRpdG9yLndvcmtzcGFjZS5yZW5kZXIoKTtcbiAgICAgICAgLy90aGlzLmJtLnJlZnJlc2goKTtcbiAgICAgICAgLy8gVE9ETzogRmlndXJlIG91dCB3aHkgdGhpcyBkb2Vzbid0IGVuZCB1cCBsb29raW5nIHJpZ2h0IChnbyB0byBhIGRpZmZlcmVudCBlZGl0b3IsIGNvbWUgYmFjaywgYW5kIGl0J2xsIGJlIHNxdWlzaGVkKVxuICAgICAgICAvL3RoaXMuYm0ucmVmcmVzaCgpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuYm0ucmVmcmVzaCgpLCAwKTtcbiAgICB9XG5cbiAgICB1cGRhdGVFZGl0b3IobmV3Q29udGVudHMpIHtcbiAgICAgICAgaWYgKG5ld0NvbnRlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBuZXdDb250ZW50cyA9IHRoaXMuZmlsZS5oYW5kbGUoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRG9lc24ndCBtYXR0ZXIsIGZpbGUgd2FzIGFscmVhZHkgc2h1dCBkb3duLlxuICAgICAgICAgICAgICAgIG5ld0NvbnRlbnRzID0gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChuZXdDb250ZW50cyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gV2UncmUgY2xvc2luZyB0aGlzIGZpbGVcbiAgICAgICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLmZpbGVTeXN0ZW0uZGVsZXRlRmlsZUxvY2FsbHlfKHRoaXMuZmlsZW5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlydHkgPSAhdGhpcy5kaXJ0eTtcbiAgICAgICAgaWYgKHRoaXMuZGlydHkpIHtcbiAgICAgICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5ibS5zZXRDb2RlKG5ld0NvbnRlbnRzKTtcbiAgICAgICAgICAgIC8vIERlbGF5IHNvIHRoYXQgZXZlcnl0aGluZyBpcyByZW5kZXJlZFxuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlSGFuZGxlKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuYm0uY2xlYXJIaWdobGlnaHRlZExpbmVzKCk7XG5cbiAgICAgICAgdGhpcy5kaXJ0eSA9ICF0aGlzLmRpcnR5O1xuICAgICAgICBpZiAodGhpcy5kaXJ0eSkge1xuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICBpZiAoIXRoaXMubWFpbi5tb2RlbC5kaXNwbGF5Lmhpc3RvcnlNb2RlKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGUuaGFuZGxlKHRoaXMuYm0uZ2V0Q29kZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV4aXQobmV3RmlsZW5hbWUsIG9sZEVkaXRvciwgbmV3RWRpdG9yKSB7XG4gICAgICAgIC8vIFJlbW92ZSBzdWJzY3JpYmVyXG4gICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jdXJyZW50U3Vic2NyaXB0aW9uLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5ibS5yZW1vdmVDaGFuZ2VMaXN0ZW5lcih0aGlzLmN1cnJlbnRCTUxpc3RlbmVyKTtcbiAgICAgICAgaWYgKHRoaXMubWFpbi5tb2RlbC5kaXNwbGF5Lmhpc3RvcnlNb2RlKCkpIHtcbiAgICAgICAgICAgIHRoaXMubWFpbi5tb2RlbC51aS5lZGl0b3JzLnB5dGhvbi50dXJuT2ZmSGlzdG9yeU1vZGUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNsZWFyTGluZVN1YnNjcmlwdGlvbnMoKTtcbiAgICAgICAgc3VwZXIuZXhpdChuZXdGaWxlbmFtZSwgb2xkRWRpdG9yKTtcbiAgICB9XG5cbiAgICBjbGVhckxpbmVTdWJzY3JpcHRpb25zKCkge1xuICAgICAgICB0aGlzLmJtLmNsZWFySGlnaGxpZ2h0ZWRMaW5lcygpO1xuICAgICAgICBpZiAodGhpcy5saW5lRXJyb3JTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMubGluZUVycm9yU3Vic2NyaXB0aW9uLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHRoaXMubGluZUVycm9yU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5saW5lVW5jb3ZlcmVkU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmxpbmVVbmNvdmVyZWRTdWJzY3JpcHRpb24uZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5saW5lVW5jb3ZlcmVkU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5saW5lVHJhY2VTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMubGluZVRyYWNlU3Vic2NyaXB0aW9uLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHRoaXMubGluZVRyYWNlU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG1ha2VTdWJzY3JpcHRpb25zKCkge1xuICAgICAgICB0aGlzLmJtLnNldE1vZGUodGhpcy5tYWluLm1vZGVsLmRpc3BsYXkucHl0aG9uTW9kZSgpKTtcbiAgICAgICAgdGhpcy5tYWluLm1vZGVsLmRpc3BsYXkucHl0aG9uTW9kZS5zdWJzY3JpYmUobW9kZSA9PiB7XG4gICAgICAgICAgICB0aGlzLmJtLnNldE1vZGUobW9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1haW4ubW9kZWwuYXNzaWdubWVudC5zZXR0aW5ncy5lbmFibGVCbG9ja3Muc3Vic2NyaWJlKGVuYWJsZWQgPT4ge1xuICAgICAgICAgICAgaWYgKCFlbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ibS5zZXRNb2RlKERpc3BsYXlNb2Rlcy5URVhUKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ibS5zZXRNb2RlKHRoaXMubWFpbi5tb2RlbC5kaXNwbGF5LnB5dGhvbk1vZGUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1haW4ubW9kZWwuYXNzaWdubWVudC5zZXR0aW5ncy50b29sYm94LnN1YnNjcmliZSh0aGlzLnJlbG9hZFRvb2xib3guYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMubWFpbi5tb2RlbC5hc3NpZ25tZW50LnNldHRpbmdzLmVuYWJsZUltYWdlcy5zdWJzY3JpYmUoaW1hZ2VNb2RlID0+IHtcbiAgICAgICAgICAgIHRoaXMuYm0uc2V0SW1hZ2VNb2RlKGltYWdlTW9kZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFNtYWxsIExheW91dCBTdHVmZlxuICAgICAgICB0aGlzLm9sZEhlaWdodCA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLm1haW4ubW9kZWwudWkuc21hbGxMYXlvdXQoKSkge1xuICAgICAgICAgICAgdGhpcy51c2VTbWFsbExheW91dCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWFpbi5tb2RlbC51aS5zbWFsbExheW91dC5zdWJzY3JpYmUodXNlU21hbGxMYXlvdXQgPT4ge1xuICAgICAgICAgICAgaWYgKHVzZVNtYWxsTGF5b3V0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy51c2VTbWFsbExheW91dCgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm9sZEhlaWdodCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYm0uY29uZmlndXJhdGlvbi5oZWlnaHQgPSB0aGlzLm9sZEhlaWdodDtcbiAgICAgICAgICAgICAgICB0aGlzLmJtLnRleHRFZGl0b3IucmVzaXplUmVzcG9uc2l2ZWx5KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5vbGRIZWlnaHQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB1c2VTbWFsbExheW91dCgpIHtcbiAgICAgICAgdGhpcy5ibS50ZXh0RWRpdG9yLnVwZGF0ZUd1dHRlcih7aW5kZW50U2lkZWJhcjogZmFsc2V9KTtcbiAgICAgICAgdGhpcy5vbGRIZWlnaHQgPSB0aGlzLmJtLmNvbmZpZ3VyYXRpb24uaGVpZ2h0O1xuICAgICAgICB0aGlzLmJtLmNvbmZpZ3VyYXRpb24uaGVpZ2h0ID0gMzAwOyAvLyBUT0RPOiBQYXJhbWV0ZXJpemUgdGhpc1xuICAgICAgICB0aGlzLmJtLnRleHRFZGl0b3IucmVzaXplUmVzcG9uc2l2ZWx5KCk7XG4gICAgfVxuXG4gICAgcmVsb2FkVG9vbGJveCh0b29sYm94KSB7XG4gICAgICAgIGlmICh0b29sYm94ID09PSBcImN1c3RvbVwiKSB7XG4gICAgICAgICAgICBsZXQgY3VzdG9tVG9vbGJveCA9IHRoaXMubWFpbi5jb21wb25lbnRzLmZpbGVTeXN0ZW0uZ2V0RmlsZShcIj90b29sYm94LmJsb2NrcHlcIik7XG4gICAgICAgICAgICBpZiAoY3VzdG9tVG9vbGJveCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdG9vbGJveCA9IFwiZW1wdHlcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdG9vbGJveCA9IEpTT04ucGFyc2UoY3VzdG9tVG9vbGJveC5oYW5kbGUoKSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpOyAvLyBUT0RPOiBJbXByb3ZlIGVycm9yIG1lc3NhZ2UgZm9yIGluc3RydWN0b3JcbiAgICAgICAgICAgICAgICAgICAgdG9vbGJveCA9IFwibWluaW1hbFwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJtLmNvbmZpZ3VyYXRpb24udG9vbGJveCA9IHRvb2xib3g7XG4gICAgICAgIC8vIFRPRE86IEhhbmRsZSBpbnZhbGlkIHRvb2xib3ggYmV0dGVyXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmJtLmJsb2NrRWRpdG9yLnJlbWFrZVRvb2xib3goKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICAgIHRoaXMuYm0uY29uZmlndXJhdGlvbi50b29sYm94ID0gXCJlbXB0eVwiO1xuICAgICAgICAgICAgdGhpcy5ibS5ibG9ja0VkaXRvci5yZW1ha2VUb29sYm94KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBtYWtlUGVyQXNzaWdubWVudFN1YnNjcmlwdGlvbnMoKSB7XG4gICAgICAgIHRoaXMubWFpbi5tb2RlbC5kaXNwbGF5Lmluc3RydWN0b3Iuc3Vic2NyaWJlKChjaGFuZ2VkKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldFJlYWRPbmx5KHRoaXMuZGVjaWRlSWZOb3RFZGl0YWJsZSgpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWFpbi5tb2RlbC5hc3NpZ25tZW50LnNldHRpbmdzLm9ubHlVcGxvYWRzLnN1YnNjcmliZSgoY2hhbmdlZCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRSZWFkT25seSh0aGlzLmRlY2lkZUlmTm90RWRpdGFibGUoKSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1haW4ubW9kZWwuY29uZmlndXJhdGlvbi5wYXJ0SWQuc3Vic2NyaWJlKChjaGFuZ2VkKSA9PiB7XG4gICAgICAgICAgICAvLyBUT0RPOiBIYW5kbGUgcGFydCBpZCBjaGFuZ2luZyBhZnRlciBldmVyeXRoaW5nIGlzIGxvYWRlZFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBkZWNpZGVJZk5vdEVkaXRhYmxlKCkge1xuICAgICAgICBsZXQgbW9kZWwgPSB0aGlzLm1haW4ubW9kZWw7XG4gICAgICAgIHJldHVybiBtb2RlbC5kaXNwbGF5Lmhpc3RvcnlNb2RlKCkgfHwgKFxuICAgICAgICAgICAgbW9kZWwuYXNzaWdubWVudC5zZXR0aW5ncy5vbmx5VXBsb2FkcygpICYmICFtb2RlbC5kaXNwbGF5Lmluc3RydWN0b3IoKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHNldFJlYWRPbmx5KGlzUmVhZE9ubHkpIHtcbiAgICAgICAgdGhpcy5yZWFkT25seSA9IGlzUmVhZE9ubHk7XG4gICAgICAgIHRoaXMuYm0uc2V0UmVhZE9ubHkoaXNSZWFkT25seSk7XG4gICAgfVxuXG4gICAgdXBsb2FkRmlsZShldmVudCkge1xuICAgICAgICBsZXQgZmlsZW5hbWUgPSBldmVudC50YXJnZXQuZmlsZU5hbWU7XG4gICAgICAgIGxldCBjb2RlID0gZXZlbnQudGFyZ2V0LnJlc3VsdDtcbiAgICAgICAgaWYgKGZpbGVuYW1lLmVuZHNXaXRoKFwiLmlweW5iXCIpKSB7XG4gICAgICAgICAgICBjb2RlID0gY29udmVydElweW5iVG9QeXRob24oY29kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tYWluLmNvbXBvbmVudHMuc2VydmVyLmxvZ0V2ZW50KFwiWC1GaWxlLlVwbG9hZFwiLCBcIlwiLCBcIlwiLCBjb2RlLCB0aGlzLmZpbGVuYW1lKTtcbiAgICAgICAgdGhpcy5maWxlLmhhbmRsZShjb2RlKTtcbiAgICAgICAgdGhpcy5tYWluLmNvbXBvbmVudHMuZW5naW5lLnJ1bigpO1xuICAgICAgICAvLyBUT0RPOiBSdW4gY29kZVxuICAgIH1cblxuICAgIGRvd25sb2FkRmlsZSgpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHN1cGVyLmRvd25sb2FkRmlsZSgpO1xuICAgICAgICBpZiAocmVzdWx0Lm5hbWUgPT09IFwiYW5zd2VyXCIgJiYgcmVzdWx0LmV4dGVuc2lvbiA9PT0gXCIucHlcIikge1xuICAgICAgICAgICAgcmVzdWx0Lm5hbWUgPSBzbHVnZ2lmeSh0aGlzLm1haW4ubW9kZWwuYXNzaWdubWVudC5uYW1lKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5taW1ldHlwZSA9IFwidGV4dC94LXB5dGhvblwiO1xuICAgICAgICB0aGlzLm1haW4uY29tcG9uZW50cy5zZXJ2ZXIubG9nRXZlbnQoXCJYLUZpbGUuRG93bmxvYWRcIiwgXCJcIiwgXCJcIiwgXCJcIiwgcmVzdWx0Lm5hbWUpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxufVxuXG5leHBvcnQgY29uc3QgUHl0aG9uRWRpdG9yID0ge1xuICAgIG5hbWU6IFwiUHl0aG9uXCIsXG4gICAgZXh0ZW5zaW9uczogW1wiLnB5XCIsIFwiLnJlYWRpbmdcIl0sXG4gICAgY29uc3RydWN0b3I6IFB5dGhvbkVkaXRvclZpZXcsXG4gICAgdGVtcGxhdGU6IFBZVEhPTl9FRElUT1JfSFRNTFxufTsiLCJpbXBvcnQge0Fic3RyYWN0RWRpdG9yfSBmcm9tIFwiLi9hYnN0cmFjdF9lZGl0b3JcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBRVUlaX0VESVRPUl9IVE1MID0gYFxyXG4gICAgPGRpdj5cclxuICAgIDx0ZXh0YXJlYSBjbGFzcz1cImJsb2NrcHktZWRpdG9yLXF1aXpcIj48L3RleHRhcmVhPlxyXG4gICAgPC9kaXY+XHJcbmA7XHJcblxyXG5jbGFzcyBRdWl6RWRpdG9yVmlldyBleHRlbmRzIEFic3RyYWN0RWRpdG9yIHtcclxuICAgIGNvbnN0cnVjdG9yKG1haW4sIHRhZykge1xyXG4gICAgICAgIHN1cGVyKG1haW4sIHRhZyk7XHJcbiAgICAgICAgdGhpcy5jb2RlTWlycm9yID0gQ29kZU1pcnJvci5mcm9tVGV4dEFyZWEodGFnLmZpbmQoXCIuYmxvY2tweS1lZGl0b3ItcXVpelwiKVswXSwge1xyXG4gICAgICAgICAgICBzaG93Q3Vyc29yV2hlblNlbGVjdGluZzogdHJ1ZSxcclxuICAgICAgICAgICAgbGluZU51bWJlcnM6IHRydWUsXHJcbiAgICAgICAgICAgIGZpcnN0TGluZU51bWJlcjogMSxcclxuICAgICAgICAgICAgaW5kZW50VW5pdDogNCxcclxuICAgICAgICAgICAgdGFiU2l6ZTogNCxcclxuICAgICAgICAgICAgaW5kZW50V2l0aFRhYnM6IGZhbHNlLFxyXG4gICAgICAgICAgICBleHRyYUtleXM6IHtcclxuICAgICAgICAgICAgICAgIFwiVGFiXCI6IFwiaW5kZW50TW9yZVwiLFxyXG4gICAgICAgICAgICAgICAgXCJTaGlmdC1UYWJcIjogXCJpbmRlbnRMZXNzXCIsXHJcbiAgICAgICAgICAgICAgICBcIkVzY1wiOiBmdW5jdGlvbiAoY20pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY20uZ2V0T3B0aW9uKFwiZnVsbFNjcmVlblwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbS5zZXRPcHRpb24oXCJmdWxsU2NyZWVuXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbS5kaXNwbGF5LmlucHV0LmJsdXIoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgXCJGMTFcIjogZnVuY3Rpb24gKGNtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY20uc2V0T3B0aW9uKFwiZnVsbFNjcmVlblwiLCAhY20uZ2V0T3B0aW9uKFwiZnVsbFNjcmVlblwiKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZW50ZXIobmV3RmlsZW5hbWUsIG9sZEVkaXRvcikge1xyXG4gICAgICAgIHN1cGVyLmVudGVyKG5ld0ZpbGVuYW1lLCBvbGRFZGl0b3IpO1xyXG4gICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnVwZGF0ZUVkaXRvcih0aGlzLmZpbGUuaGFuZGxlKCkpO1xyXG4gICAgICAgIC8vIFN1YnNjcmliZSB0byB0aGUgcmVsZXZhbnQgRmlsZVxyXG4gICAgICAgIHRoaXMuY3VycmVudFN1YnNjcmlwdGlvbiA9IHRoaXMuZmlsZS5oYW5kbGUuc3Vic2NyaWJlKHRoaXMudXBkYXRlRWRpdG9yLmJpbmQodGhpcykpO1xyXG4gICAgICAgIC8vIE5vdGlmeSByZWxldmFudCBmaWxlIG9mIGNoYW5nZXMgdG8gQk1cclxuICAgICAgICB0aGlzLmN1cnJlbnRMaXN0ZW5lciA9IHRoaXMudXBkYXRlSGFuZGxlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5jb2RlTWlycm9yLm9uKFwiY2hhbmdlXCIsIHRoaXMuY3VycmVudExpc3RlbmVyKTtcclxuICAgICAgICBpZiAob2xkRWRpdG9yICE9PSB0aGlzKSB7XHJcbiAgICAgICAgICAgIC8vIERlbGF5IHNvIHRoYXQgZXZlcnl0aGluZyBpcyByZW5kZXJlZFxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHRoaXMuY29kZU1pcnJvci5yZWZyZXNoLmJpbmQodGhpcy5jb2RlTWlycm9yKSwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFRPRE86IHVwZGF0ZSBkeW5hbWljYWxseSB3aGVuIGNoYW5naW5nIGluc3RydWN0b3Igc3RhdHVzXHJcbiAgICAgICAgdGhpcy5jb2RlTWlycm9yLnNldE9wdGlvbihcInJlYWRPbmx5XCIsIG5ld0ZpbGVuYW1lLnN0YXJ0c1dpdGgoXCImXCIpICYmICF0aGlzLm1haW4ubW9kZWwuZGlzcGxheS5pbnN0cnVjdG9yKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUVkaXRvcihuZXdDb250ZW50cykge1xyXG4gICAgICAgIHRoaXMuZGlydHkgPSAhdGhpcy5kaXJ0eTtcclxuICAgICAgICBpZiAodGhpcy5kaXJ0eSkge1xyXG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5jb2RlTWlycm9yLnNldFZhbHVlKG5ld0NvbnRlbnRzKTtcclxuICAgICAgICAgICAgdGhpcy5jb2RlTWlycm9yLnJlZnJlc2goKTtcclxuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVIYW5kbGUoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLmRpcnR5ID0gIXRoaXMuZGlydHk7XHJcbiAgICAgICAgaWYgKHRoaXMuZGlydHkpIHtcclxuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsZS5oYW5kbGUodGhpcy5jb2RlTWlycm9yLmdldFZhbHVlKCkpO1xyXG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4aXQobmV3RmlsZW5hbWUsIG9sZEVkaXRvciwgbmV3RWRpdG9yKSB7XHJcbiAgICAgICAgLy8gUmVtb3ZlIHN1YnNjcmliZXJcclxuICAgICAgICB0aGlzLmN1cnJlbnRTdWJzY3JpcHRpb24uZGlzcG9zZSgpO1xyXG4gICAgICAgIHRoaXMuY29kZU1pcnJvci5vZmYoXCJjaGFuZ2VcIiwgdGhpcy5jdXJyZW50TGlzdGVuZXIpO1xyXG4gICAgICAgIHRoaXMuY29kZU1pcnJvci5zZXRPcHRpb24oXCJyZWFkT25seVwiLCBmYWxzZSk7XHJcbiAgICAgICAgc3VwZXIuZXhpdChuZXdGaWxlbmFtZSwgb2xkRWRpdG9yKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFF1aXpFZGl0b3IgPSB7XHJcbiAgICBuYW1lOiBcIlF1aXpcIixcclxuICAgIGV4dGVuc2lvbnM6IFtcIi5xdWl6XCJdLFxyXG4gICAgY29uc3RydWN0b3I6IFF1aXpFZGl0b3JWaWV3LFxyXG4gICAgdGVtcGxhdGU6IFFVSVpfRURJVE9SX0hUTUxcclxufTsiLCIvKipcbiAqIFBhbmVsIGZvciBlZGl0aW5nIHRoZSBzZXQgb2YgU2FtcGxlIFN1Ym1pc3Npb25zLlxuICogVGhlc2UgYXJlIG5vdCBwcm92aWRlZCBhdCBhbGwgdG8gc3R1ZGVudHMgd2l0aG91dCB0aGUgR3JhZGVyIHJvbGUuXG4gKi9cblxuaW1wb3J0IHtBYnN0cmFjdEVkaXRvcn0gZnJvbSBcIi4vYWJzdHJhY3RfZWRpdG9yXCI7XG5cbmV4cG9ydCBjb25zdCBTdWJtaXNzaW9uU3RhdHVzZXMgPSB7XG4gICAgVU5LTk9XTjogXCJ1bmtub3duXCIsXG4gICAgUEFTU0VEOiBcInBhc3NlZFwiLFxuICAgIEZBSUxFRDogXCJmYWlsZWRcIixcbiAgICBFUlJPUjogXCJlcnJvclwiLFxuICAgIFNLSVBQRUQ6IFwic2tpcHBlZFwiXG59O1xuXG5leHBvcnQgY2xhc3MgU2FtcGxlU3VibWlzc2lvbiB7XG4gICAgY29uc3RydWN0b3IobmFtZSwgc3RhdHVzLCBjb2RlKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgIH1cblxuICAgIHN0YXRpYyBCbGFuayhjb3VudCkge1xuICAgICAgICByZXR1cm4gbmV3IFNhbXBsZVN1Ym1pc3Npb24oXCJVbnRpdGxlZFwiKyhjb3VudCB8fCAxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN1Ym1pc3Npb25TdGF0dXNlcy5VTktOT1dOLCBcImE9MFwiKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVzZXJpYWxpemUoZGF0YSkge1xuICAgICAgICByZXR1cm4gbmV3IFNhbXBsZVN1Ym1pc3Npb24oZGF0YS5uYW1lLCBkYXRhLnN0YXR1cywgZGF0YS5jb2RlKTtcbiAgICB9XG5cbiAgICBzZXJpYWxpemUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgICAgICAgICAgY29kZTogdGhpcy5jb2RlXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgU0FNUExFX1NVQk1JU1NJT05TX0hUTUwgPSBgXG48ZGl2PlxuICAgIDxkaXYgZGF0YS1iaW5kPVwiZm9yZWFjaDoge2RhdGE6IGFzc2lnbm1lbnQuc2FtcGxlU3VibWlzc2lvbnN9XCJcbiAgICAgICAgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC02XCI+XG4gICAgICAgICAgICA8c3BhbiBkYXRhLWJpbmQ9XCJ0ZXh0OiBuYW1lXCI+PC9zcGFuPlxuICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzPVwiYmxvY2tweS1lZGl0b3Itc2FtcGxlLXN1Ym1pc3Npb25zLWNvZGVcIlxuICAgICAgICAgICAgICAgIGRhdGEtYmluZD1cImNvZGVNaXJyb3JJbnN0YW5jZTogY29kZVwiPjwvdGV4dGFyZWE+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTZcIj5cbiAgICAgICAgICAgIDxzcGFuIGRhdGEtYmluZD1cInRleHQ6IHN0YXR1c1wiPjwvc3Bhbj4gICAgICAgIFxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvZGl2PlxuYDtcblxua28uYmluZGluZ0hhbmRsZXJzLmNvZGVNaXJyb3JJbnN0YW5jZSA9IHtcbiAgICBpbml0OiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5ncywgdmlld01vZGVsLCBiaW5kaW5nQ29udGV4dCkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIGJpbmRpbmcgaXMgZmlyc3QgYXBwbGllZCB0byBhbiBlbGVtZW50XG4gICAgICAgIC8vIFNldCB1cCBhbnkgaW5pdGlhbCBzdGF0ZSwgZXZlbnQgaGFuZGxlcnMsIGV0Yy4gaGVyZVxuICAgICAgICBjb25zb2xlLmxvZyhcIklOSVRcIik7XG4gICAgICAgIGxldCBjbSA9IENvZGVNaXJyb3IuZnJvbVRleHRBcmVhKGVsZW1lbnQsIHtcbiAgICAgICAgICAgIHNob3dDdXJzb3JXaGVuU2VsZWN0aW5nOiB0cnVlLFxuICAgICAgICAgICAgbGluZU51bWJlcnM6IHRydWUsXG4gICAgICAgICAgICBmaXJzdExpbmVOdW1iZXI6IDEsXG4gICAgICAgICAgICBpbmRlbnRVbml0OiA0LFxuICAgICAgICAgICAgdGFiU2l6ZTogNCxcbiAgICAgICAgICAgIGluZGVudFdpdGhUYWJzOiBmYWxzZSxcbiAgICAgICAgICAgIGV4dHJhS2V5czoge1xuICAgICAgICAgICAgICAgIFwiVGFiXCI6IFwiaW5kZW50TW9yZVwiLFxuICAgICAgICAgICAgICAgIFwiU2hpZnQtVGFiXCI6IFwiaW5kZW50TGVzc1wiLFxuICAgICAgICAgICAgICAgIFwiRXNjXCI6IGZ1bmN0aW9uIChjbSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY20uZ2V0T3B0aW9uKFwiZnVsbFNjcmVlblwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY20uc2V0T3B0aW9uKFwiZnVsbFNjcmVlblwiLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbS5kaXNwbGF5LmlucHV0LmJsdXIoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJGMTFcIjogZnVuY3Rpb24gKGNtKSB7XG4gICAgICAgICAgICAgICAgICAgIGNtLnNldE9wdGlvbihcImZ1bGxTY3JlZW5cIiwgIWNtLmdldE9wdGlvbihcImZ1bGxTY3JlZW5cIikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNtLnNldFNpemUoXCIxMDAlXCIsIFwiMTAwcHhcIik7XG4gICAgICAgIHJldHVybiBjbTtcbiAgICB9LFxuICAgIHVwZGF0ZTogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3MsIHZpZXdNb2RlbCwgYmluZGluZ0NvbnRleHQpIHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIGJlIGNhbGxlZCBvbmNlIHdoZW4gdGhlIGJpbmRpbmcgaXMgZmlyc3QgYXBwbGllZCB0byBhbiBlbGVtZW50LFxuICAgICAgICAvLyBhbmQgYWdhaW4gd2hlbmV2ZXIgYW55IG9ic2VydmFibGVzL2NvbXB1dGVkcyB0aGF0IGFyZSBhY2Nlc3NlZCBjaGFuZ2VcbiAgICAgICAgLy8gVXBkYXRlIHRoZSBET00gZWxlbWVudCBiYXNlZCBvbiB0aGUgc3VwcGxpZWQgdmFsdWVzIGhlcmUuXG4gICAgICAgIGNvbnNvbGUubG9nKFwiVVBEQVRFXCIpO1xuICAgIH1cbn07XG5cbmNsYXNzIFNhbXBsZVN1Ym1pc3Npb25zVmlldyBleHRlbmRzIEFic3RyYWN0RWRpdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihtYWluLCB0YWcpIHtcbiAgICAgICAgc3VwZXIobWFpbiwgdGFnKTtcbiAgICAgICAgdGhpcy50YWcgPSB0YWc7XG4gICAgICAgIHRoaXMuY29kZU1pcnJvcnMgPSBbXTtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGJ1aWxkRWRpdG9yKG5ld0RPTSwgaW5kZXgsIG5ld0VsZW1lbnQpIHtcblxuICAgIH1cblxuICAgIHJlYnVpbGRFZGl0b3JzKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlJlYnVpbGRpbmcgZWRpdG9yc1wiKTtcbiAgICB9XG5cbiAgICBlbnRlcihuZXdGaWxlbmFtZSwgb2xkRWRpdG9yKSB7XG4gICAgICAgIHN1cGVyLmVudGVyKG5ld0ZpbGVuYW1lLCBvbGRFZGl0b3IpO1xuICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMudXBkYXRlRWRpdG9yKHRoaXMuZmlsZS5oYW5kbGUoKSk7XG4gICAgICAgIC8vIFN1YnNjcmliZSB0byB0aGUgcmVsZXZhbnQgRmlsZVxuICAgICAgICB0aGlzLmN1cnJlbnRTdWJzY3JpcHRpb24gPSB0aGlzLmZpbGUuaGFuZGxlLnN1YnNjcmliZSh0aGlzLnVwZGF0ZUVkaXRvci5iaW5kKHRoaXMpKTtcbiAgICAgICAgLy8gTm90aWZ5IHJlbGV2YW50IGZpbGUgb2YgY2hhbmdlcyB0byBCTVxuICAgICAgICB0aGlzLmN1cnJlbnRMaXN0ZW5lciA9IHRoaXMudXBkYXRlSGFuZGxlLmJpbmQodGhpcyk7XG4gICAgICAgIC8vdGhpcy5yZWJ1aWxkRWRpdG9ycygpO1xuICAgICAgICAvL3RoaXMuY29kZU1pcnJvci5vbihcImNoYW5nZVwiLCB0aGlzLmN1cnJlbnRMaXN0ZW5lcik7XG4gICAgICAgIGlmIChvbGRFZGl0b3IgIT09IHRoaXMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMudGFnKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMudGFnLmZpbmQoXCIuQ29kZU1pcnJvclwiKSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnRhZy5maW5kKFwiLkNvZGVNaXJyb3JcIikubWFwKChpLGNtKSA9PiBjb25zb2xlLmxvZyhcIisrK1wiLCBjbS5Db2RlTWlycm9yKSkpO1xuICAgICAgICAgICAgdGhpcy50YWcuZmluZChcIi5Db2RlTWlycm9yXCIpLm1hcCgoaSwgY20pID0+IGNtLkNvZGVNaXJyb3IucmVmcmVzaCgpKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUkVGUkVTSFwiKTtcbiAgICAgICAgICAgIC8vIERlbGF5IHNvIHRoYXQgZXZlcnl0aGluZyBpcyByZW5kZXJlZFxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnRhZy5maW5kKFwiLkNvZGVNaXJyb3JcIikubWFwKChpLCBjbSkgPT4gY20uQ29kZU1pcnJvci5yZWZyZXNoKCkpLCAxKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPOiB1cGRhdGUgZHluYW1pY2FsbHkgd2hlbiBjaGFuZ2luZyBpbnN0cnVjdG9yIHN0YXR1c1xuICAgICAgICAvL3RoaXMuY29kZU1pcnJvci5zZXRPcHRpb24oXCJyZWFkT25seVwiLCBuZXdGaWxlbmFtZS5zdGFydHNXaXRoKFwiJlwiKSAmJiAhdGhpcy5tYWluLm1vZGVsLmRpc3BsYXkuaW5zdHJ1Y3RvcigpKTtcbiAgICB9XG5cbiAgICB1cGRhdGVFZGl0b3IobmV3Q29udGVudHMpIHtcbiAgICAgICAgdGhpcy5kaXJ0eSA9ICF0aGlzLmRpcnR5O1xuICAgICAgICBpZiAodGhpcy5kaXJ0eSkge1xuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmNvZGVNaXJyb3JzKTtcbiAgICAgICAgICAgIC8vdGhpcy5jb2RlTWlycm9ycy5lYWNoKCAoaSwgY20pID0+IGNtLnNldFZhbHVlKG5ld0NvbnRlbnRzLmpvaW4oXCJcXG5cIikpKTtcbiAgICAgICAgICAgIC8vdGhpcy5jb2RlTWlycm9ycy5lYWNoKCAoaSwgY20pID0+IGNtLnJlZnJlc2goKSk7XG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVIYW5kbGUoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5kaXJ0eSA9ICF0aGlzLmRpcnR5O1xuICAgICAgICBpZiAodGhpcy5kaXJ0eSkge1xuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmZpbGUuaGFuZGxlKHRoaXMuY29kZU1pcnJvcnMubWFwKGNtID0+IGNtLmdldFZhbHVlKCkpKTtcbiAgICAgICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV4aXQobmV3RmlsZW5hbWUsIG9sZEVkaXRvciwgbmV3RWRpdG9yKSB7XG4gICAgICAgIC8vIFJlbW92ZSBzdWJzY3JpYmVyXG4gICAgICAgIHRoaXMuY3VycmVudFN1YnNjcmlwdGlvbi5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuY29kZU1pcnJvcnMgPSBbXTtcbiAgICAgICAgLy90aGlzLmNvZGVNaXJyb3JzLm9mZihcImNoYW5nZVwiLCB0aGlzLmN1cnJlbnRMaXN0ZW5lcik7XG4gICAgICAgIC8vdGhpcy5jb2RlTWlycm9yLnNldE9wdGlvbihcInJlYWRPbmx5XCIsIGZhbHNlKTtcbiAgICAgICAgc3VwZXIuZXhpdChuZXdGaWxlbmFtZSwgb2xkRWRpdG9yKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBTYW1wbGVTdWJtaXNzaW9ucyA9IHtcbiAgICBuYW1lOiBcIlNhbXBsZSBTdWJtaXNzaW9uc1wiLFxuICAgIGV4dGVuc2lvbnM6IFtcIiFzYW1wbGVfc3VibWlzc2lvbnMuYmxvY2tweVwiXSxcbiAgICBjb25zdHJ1Y3RvcjogU2FtcGxlU3VibWlzc2lvbnNWaWV3LFxuICAgIHRlbXBsYXRlOiBTQU1QTEVfU1VCTUlTU0lPTlNfSFRNTFxufTtcbiIsImltcG9ydCB7QWJzdHJhY3RFZGl0b3J9IGZyb20gXCIuL2Fic3RyYWN0X2VkaXRvclwiO1xuXG5leHBvcnQgY29uc3QgVEFHU19FRElUT1JfSFRNTCA9IGBcbkNyZWF0ZSBuZXdcbkltcG9ydCBieSBuYW1lXG5GaW5kIGJ5IG93bmVyL2NvdXJzZS9raW5kXG5cblRhZ3M6XG4gICAgRGF0YTpcbiAgICAgICAgTmFtZVxuICAgICAgICBLaW5kXG4gICAgICAgIExldmVsXG4gICAgICAgIFZlcnNpb25cbiAgICAgICAgRGVzY3JpcHRpb25cbiAgICBDb250cm9sczpcbiAgICAgICAgRWRpdFxuICAgICAgICBSZW1vdmVcbiAgICAgICAgRGVsZXRlIFxuYDtcblxuY2xhc3MgVGFnc0VkaXRvclZpZXcgZXh0ZW5kcyBBYnN0cmFjdEVkaXRvciB7XG4gICAgY29uc3RydWN0b3IobWFpbiwgdGFnKSB7XG4gICAgICAgIHN1cGVyKG1haW4sIHRhZy5maW5kKFwiLmJsb2NrcHktZWRpdG9yLXRhZ3NcIikpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IFRhZ3NFZGl0b3IgPSB7XG4gICAgbmFtZTogXCJUYWdzXCIsXG4gICAgZXh0ZW5zaW9uczogW1wiIXRhZ3MuYmxvY2tweVwiXSxcbiAgICBjb25zdHJ1Y3RvcjogVGFnc0VkaXRvclZpZXcsXG4gICAgdGVtcGxhdGU6IFRBR1NfRURJVE9SX0hUTUxcbn07IiwiaW1wb3J0IHtBYnN0cmFjdEVkaXRvcn0gZnJvbSBcIi4vYWJzdHJhY3RfZWRpdG9yXCI7XG5pbXBvcnQge2RlZmF1bHRfaGVhZGVyfSBmcm9tIFwiLi9kZWZhdWx0X2hlYWRlclwiO1xuXG5leHBvcnQgY29uc3QgVEVYVF9FRElUT1JfSFRNTCA9IGBcbiAgICAke2RlZmF1bHRfaGVhZGVyfVxuICAgIDxkaXY+XG4gICAgPHRleHRhcmVhIGNsYXNzPVwiYmxvY2tweS1lZGl0b3ItdGV4dFwiPjwvdGV4dGFyZWE+XG4gICAgPC9kaXY+XG5gO1xuXG5jbGFzcyBUZXh0RWRpdG9yVmlldyBleHRlbmRzIEFic3RyYWN0RWRpdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihtYWluLCB0YWcpIHtcbiAgICAgICAgc3VwZXIobWFpbiwgdGFnKTtcbiAgICAgICAgdGhpcy5jb2RlTWlycm9yID0gQ29kZU1pcnJvci5mcm9tVGV4dEFyZWEodGFnLmZpbmQoXCIuYmxvY2tweS1lZGl0b3ItdGV4dFwiKVswXSwge1xuICAgICAgICAgICAgc2hvd0N1cnNvcldoZW5TZWxlY3Rpbmc6IHRydWUsXG4gICAgICAgICAgICBsaW5lTnVtYmVyczogdHJ1ZSxcbiAgICAgICAgICAgIGZpcnN0TGluZU51bWJlcjogMSxcbiAgICAgICAgICAgIGluZGVudFVuaXQ6IDQsXG4gICAgICAgICAgICB0YWJTaXplOiA0LFxuICAgICAgICAgICAgaW5kZW50V2l0aFRhYnM6IGZhbHNlLFxuICAgICAgICAgICAgZXh0cmFLZXlzOiB7XG4gICAgICAgICAgICAgICAgXCJUYWJcIjogXCJpbmRlbnRNb3JlXCIsXG4gICAgICAgICAgICAgICAgXCJTaGlmdC1UYWJcIjogXCJpbmRlbnRMZXNzXCIsXG4gICAgICAgICAgICAgICAgXCJFc2NcIjogZnVuY3Rpb24gKGNtKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjbS5nZXRPcHRpb24oXCJmdWxsU2NyZWVuXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbS5zZXRPcHRpb24oXCJmdWxsU2NyZWVuXCIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtLmRpc3BsYXkuaW5wdXQuYmx1cigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcIkYxMVwiOiBmdW5jdGlvbiAoY20pIHtcbiAgICAgICAgICAgICAgICAgICAgY20uc2V0T3B0aW9uKFwiZnVsbFNjcmVlblwiLCAhY20uZ2V0T3B0aW9uKFwiZnVsbFNjcmVlblwiKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGVudGVyKG5ld0ZpbGVuYW1lLCBvbGRFZGl0b3IpIHtcbiAgICAgICAgc3VwZXIuZW50ZXIobmV3RmlsZW5hbWUsIG9sZEVkaXRvcik7XG4gICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy51cGRhdGVFZGl0b3IodGhpcy5maWxlLmhhbmRsZSgpKTtcbiAgICAgICAgLy8gU3Vic2NyaWJlIHRvIHRoZSByZWxldmFudCBGaWxlXG4gICAgICAgIHRoaXMuY3VycmVudFN1YnNjcmlwdGlvbiA9IHRoaXMuZmlsZS5oYW5kbGUuc3Vic2NyaWJlKHRoaXMudXBkYXRlRWRpdG9yLmJpbmQodGhpcykpO1xuICAgICAgICAvLyBOb3RpZnkgcmVsZXZhbnQgZmlsZSBvZiBjaGFuZ2VzIHRvIEJNXG4gICAgICAgIHRoaXMuY3VycmVudExpc3RlbmVyID0gdGhpcy51cGRhdGVIYW5kbGUuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5jb2RlTWlycm9yLm9uKFwiY2hhbmdlXCIsIHRoaXMuY3VycmVudExpc3RlbmVyKTtcbiAgICAgICAgaWYgKG9sZEVkaXRvciAhPT0gdGhpcykge1xuICAgICAgICAgICAgLy8gRGVsYXkgc28gdGhhdCBldmVyeXRoaW5nIGlzIHJlbmRlcmVkXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHRoaXMuY29kZU1pcnJvci5yZWZyZXNoLmJpbmQodGhpcy5jb2RlTWlycm9yKSwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVE9ETzogdXBkYXRlIGR5bmFtaWNhbGx5IHdoZW4gY2hhbmdpbmcgaW5zdHJ1Y3RvciBzdGF0dXNcbiAgICAgICAgdGhpcy5jb2RlTWlycm9yLnNldE9wdGlvbihcInJlYWRPbmx5XCIsIG5ld0ZpbGVuYW1lLnN0YXJ0c1dpdGgoXCImXCIpICYmICF0aGlzLm1haW4ubW9kZWwuZGlzcGxheS5pbnN0cnVjdG9yKCkpO1xuICAgIH1cblxuICAgIHVwZGF0ZUVkaXRvcihuZXdDb250ZW50cykge1xuICAgICAgICB0aGlzLmRpcnR5ID0gIXRoaXMuZGlydHk7XG4gICAgICAgIGlmICh0aGlzLmRpcnR5KSB7XG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuY29kZU1pcnJvci5zZXRWYWx1ZShuZXdDb250ZW50cyk7XG4gICAgICAgICAgICB0aGlzLmNvZGVNaXJyb3IucmVmcmVzaCgpO1xuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlSGFuZGxlKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuZGlydHkgPSAhdGhpcy5kaXJ0eTtcbiAgICAgICAgaWYgKHRoaXMuZGlydHkpIHtcbiAgICAgICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5maWxlLmhhbmRsZSh0aGlzLmNvZGVNaXJyb3IuZ2V0VmFsdWUoKSk7XG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleGl0KG5ld0ZpbGVuYW1lLCBvbGRFZGl0b3IsIG5ld0VkaXRvcikge1xuICAgICAgICAvLyBSZW1vdmUgc3Vic2NyaWJlclxuICAgICAgICB0aGlzLmN1cnJlbnRTdWJzY3JpcHRpb24uZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLmNvZGVNaXJyb3Iub2ZmKFwiY2hhbmdlXCIsIHRoaXMuY3VycmVudExpc3RlbmVyKTtcbiAgICAgICAgdGhpcy5jb2RlTWlycm9yLnNldE9wdGlvbihcInJlYWRPbmx5XCIsIGZhbHNlKTtcbiAgICAgICAgc3VwZXIuZXhpdChuZXdGaWxlbmFtZSwgb2xkRWRpdG9yKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBUZXh0RWRpdG9yID0ge1xuICAgIG5hbWU6IFwiVGV4dFwiLFxuICAgIGV4dGVuc2lvbnM6IFtcIi50eHRcIl0sXG4gICAgY29uc3RydWN0b3I6IFRleHRFZGl0b3JWaWV3LFxuICAgIHRlbXBsYXRlOiBURVhUX0VESVRPUl9IVE1MXG59OyIsImltcG9ydCB7QWJzdHJhY3RFZGl0b3J9IGZyb20gXCIuL2Fic3RyYWN0X2VkaXRvclwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFRPT0xCT1hfRURJVE9SX0hUTUwgPSBgXHJcbiAgICA8ZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTJcIlxyXG4gICAgICAgICByb2xlPVwidG9vbGJhclwiIGFyaWEtbGFiZWw9XCJUb29sYm94IFRvb2xiYXJcIj5cclxuICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXAgbXItMlwiIHJvbGU9XCJncm91cFwiIGFyaWEtbGFiZWw9XCJTYXZlIEdyb3VwXCI+ICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tb3V0bGluZS1zZWNvbmRhcnkgYnRuLWVkaXRvci1qc29uLXNhdmVcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImZhcyBmYS1zYXZlXCI+PC9zcGFuPiBTYXZlXHJcbiAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPHRleHRhcmVhIGNsYXNzPVwiYmxvY2tweS1lZGl0b3ItdG9vbGJveFwiPjwvdGV4dGFyZWE+XHJcbiAgICA8L2Rpdj5cclxuYDtcclxuXHJcbmNsYXNzIFRvb2xib3hFZGl0b3JWaWV3IGV4dGVuZHMgQWJzdHJhY3RFZGl0b3Ige1xyXG4gICAgY29uc3RydWN0b3IobWFpbiwgdGFnKSB7XHJcbiAgICAgICAgc3VwZXIobWFpbiwgdGFnKTtcclxuICAgICAgICB0aGlzLmNvZGVNaXJyb3IgPSBDb2RlTWlycm9yLmZyb21UZXh0QXJlYSh0YWcuZmluZChcIi5ibG9ja3B5LWVkaXRvci10b29sYm94XCIpWzBdLCB7XHJcbiAgICAgICAgICAgIHNob3dDdXJzb3JXaGVuU2VsZWN0aW5nOiB0cnVlLFxyXG4gICAgICAgICAgICBsaW5lTnVtYmVyczogdHJ1ZSxcclxuICAgICAgICAgICAgZmlyc3RMaW5lTnVtYmVyOiAxLFxyXG4gICAgICAgICAgICBpbmRlbnRVbml0OiA0LFxyXG4gICAgICAgICAgICB0YWJTaXplOiA0LFxyXG4gICAgICAgICAgICBpbmRlbnRXaXRoVGFiczogZmFsc2UsXHJcbiAgICAgICAgICAgIG1vZGU6IFwianNvblwiLFxyXG4gICAgICAgICAgICBleHRyYUtleXM6IHtcclxuICAgICAgICAgICAgICAgIFwiVGFiXCI6IFwiaW5kZW50TW9yZVwiLFxyXG4gICAgICAgICAgICAgICAgXCJTaGlmdC1UYWJcIjogXCJpbmRlbnRMZXNzXCIsXHJcbiAgICAgICAgICAgICAgICBcIkVzY1wiOiBmdW5jdGlvbiAoY20pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY20uZ2V0T3B0aW9uKFwiZnVsbFNjcmVlblwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbS5zZXRPcHRpb24oXCJmdWxsU2NyZWVuXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbS5kaXNwbGF5LmlucHV0LmJsdXIoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgXCJGMTFcIjogZnVuY3Rpb24gKGNtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY20uc2V0T3B0aW9uKFwiZnVsbFNjcmVlblwiLCAhY20uZ2V0T3B0aW9uKFwiZnVsbFNjcmVlblwiKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZW50ZXIobmV3RmlsZW5hbWUsIG9sZEVkaXRvcikge1xyXG4gICAgICAgIHN1cGVyLmVudGVyKG5ld0ZpbGVuYW1lLCBvbGRFZGl0b3IpO1xyXG4gICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnVwZGF0ZUVkaXRvcih0aGlzLmZpbGUuaGFuZGxlKCkpO1xyXG4gICAgICAgIC8vIFN1YnNjcmliZSB0byB0aGUgcmVsZXZhbnQgRmlsZVxyXG4gICAgICAgIHRoaXMuY3VycmVudFN1YnNjcmlwdGlvbiA9IHRoaXMuZmlsZS5oYW5kbGUuc3Vic2NyaWJlKHRoaXMudXBkYXRlRWRpdG9yLmJpbmQodGhpcykpO1xyXG4gICAgICAgIC8vIE5vdGlmeSByZWxldmFudCBmaWxlIG9mIGNoYW5nZXMgdG8gQk1cclxuICAgICAgICB0aGlzLmN1cnJlbnRMaXN0ZW5lciA9IHRoaXMudXBkYXRlSGFuZGxlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy50YWcuZmluZChcIi5idG4tZWRpdG9yLWpzb24tc2F2ZVwiKS5vbihcImNsaWNrXCIsIHRoaXMuY3VycmVudExpc3RlbmVyKTtcclxuICAgICAgICAvL3RoaXMuY29kZU1pcnJvci5vbihcImNoYW5nZVwiLCB0aGlzLmN1cnJlbnRMaXN0ZW5lcik7XHJcbiAgICAgICAgaWYgKG9sZEVkaXRvciAhPT0gdGhpcykge1xyXG4gICAgICAgICAgICAvLyBEZWxheSBzbyB0aGF0IGV2ZXJ5dGhpbmcgaXMgcmVuZGVyZWRcclxuICAgICAgICAgICAgc2V0VGltZW91dCh0aGlzLmNvZGVNaXJyb3IucmVmcmVzaC5iaW5kKHRoaXMuY29kZU1pcnJvciksIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUT0RPOiB1cGRhdGUgZHluYW1pY2FsbHkgd2hlbiBjaGFuZ2luZyBpbnN0cnVjdG9yIHN0YXR1c1xyXG4gICAgICAgIHRoaXMuY29kZU1pcnJvci5zZXRPcHRpb24oXCJyZWFkT25seVwiLCBuZXdGaWxlbmFtZS5zdGFydHNXaXRoKFwiJlwiKSAmJiAhdGhpcy5tYWluLm1vZGVsLmRpc3BsYXkuaW5zdHJ1Y3RvcigpKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlRWRpdG9yKG5ld0NvbnRlbnRzKSB7XHJcbiAgICAgICAgdGhpcy5kaXJ0eSA9ICF0aGlzLmRpcnR5O1xyXG4gICAgICAgIGlmICh0aGlzLmRpcnR5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmNvZGVNaXJyb3Iuc2V0VmFsdWUobmV3Q29udGVudHMpO1xyXG4gICAgICAgICAgICB0aGlzLmNvZGVNaXJyb3IucmVmcmVzaCgpO1xyXG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUhhbmRsZShldmVudCkge1xyXG4gICAgICAgIHRoaXMuZGlydHkgPSAhdGhpcy5kaXJ0eTtcclxuICAgICAgICBpZiAodGhpcy5kaXJ0eSkge1xyXG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5maWxlLmhhbmRsZSh0aGlzLmNvZGVNaXJyb3IuZ2V0VmFsdWUoKSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1haW4ubW9kZWwuYXNzaWdubWVudC5zZXR0aW5ncy50b29sYm94KCkgPT09IFwiY3VzdG9tXCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLnB5dGhvbkVkaXRvci5yZWxvYWRUb29sYm94KFwiY3VzdG9tXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhpdChuZXdGaWxlbmFtZSwgb2xkRWRpdG9yLCBuZXdFZGl0b3IpIHtcclxuICAgICAgICAvLyBSZW1vdmUgc3Vic2NyaWJlclxyXG4gICAgICAgIHRoaXMuY3VycmVudFN1YnNjcmlwdGlvbi5kaXNwb3NlKCk7XHJcbiAgICAgICAgdGhpcy50YWcuZmluZChcIi5idG4tZWRpdG9yLXRvb2xib3gtc2F2ZVwiKS5vZmYoXCJjbGlja1wiLCB0aGlzLmN1cnJlbnRMaXN0ZW5lcik7XHJcbiAgICAgICAgLy90aGlzLmNvZGVNaXJyb3Iub2ZmKFwiY2hhbmdlXCIsIHRoaXMuY3VycmVudExpc3RlbmVyKTtcclxuICAgICAgICB0aGlzLmNvZGVNaXJyb3Iuc2V0T3B0aW9uKFwicmVhZE9ubHlcIiwgZmFsc2UpO1xyXG4gICAgICAgIHN1cGVyLmV4aXQobmV3RmlsZW5hbWUsIG9sZEVkaXRvcik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBUb29sYm94RWRpdG9yID0ge1xyXG4gICAgbmFtZTogXCJUb29sYm94XCIsXHJcbiAgICBleHRlbnNpb25zOiBbXCI/dG9vbGJveC5ibG9ja3B5XCJdLFxyXG4gICAgY29uc3RydWN0b3I6IFRvb2xib3hFZGl0b3JWaWV3LFxyXG4gICAgdGVtcGxhdGU6IFRPT0xCT1hfRURJVE9SX0hUTUxcclxufTsiLCIvKipcbiAqIEVkaXRvcnMgYXJlIGluZmVycmVkIGZyb20gRmlsZW5hbWVzLlxuICpcbiAqIFRoZSBlZGl0b3IgaXMgYmFzZWQgb24gdGhlIGV4dGVuc2lvbjpcbiAqICAuYmxvY2tweTogU3BlY2lhbCBlZGl0b3IgKHdpbGwgYmUgY2hvc2VuIGJ5IGZpbGVuYW1lKVxuICogIC5weTogUHl0aG9uIEVkaXRvclxuICogIC5tZDogTWFya2Rvd24gRWRpdG9yXG4gKiAgLnR4dDogVGV4dCBFZGl0b3IgKGFsc28gdXNlZCBmb3Igb3RoZXIgdHlwZXMpXG4gKiAgLnBlbWw6IFBFTUwgRWRpdG9yXG4gKiAgLnBuZywgLmdpZiwgLmpwZWcsIC5qcGcsIC5ibXA6IEltYWdlIEVkaXRvclxuICogIC5qc29uOiBKU09OIEVkaXRvclxuICogIC55YW1sOiBZQU1MIEVkaXRvclxuICovXG5cbmltcG9ydCB7UHl0aG9uRWRpdG9yfSBmcm9tIFwiLi9lZGl0b3IvcHl0aG9uXCI7XG5pbXBvcnQge1RleHRFZGl0b3J9IGZyb20gXCIuL2VkaXRvci90ZXh0XCI7XG5pbXBvcnQge0Fzc2lnbWVudFR5cGUgYXMgQXNzaWdubWVudFR5cGUsIEFzc2lnbm1lbnRTZXR0aW5nc30gZnJvbSBcIi4vZWRpdG9yL2Fzc2lnbm1lbnRfc2V0dGluZ3NcIjtcbmltcG9ydCB7VGFnc0VkaXRvcn0gZnJvbSBcIi4vZWRpdG9yL3RhZ3NcIjtcbmltcG9ydCB7TWFya2Rvd25FZGl0b3J9IGZyb20gXCIuL2VkaXRvci9tYXJrZG93blwiO1xuaW1wb3J0IHtTYW1wbGVTdWJtaXNzaW9uc30gZnJvbSBcIi4vZWRpdG9yL3NhbXBsZV9zdWJtaXNzaW9uc1wiO1xuaW1wb3J0IHtKc29uRWRpdG9yfSBmcm9tIFwiLi9lZGl0b3IvanNvblwiO1xuaW1wb3J0IHtUb29sYm94RWRpdG9yfSBmcm9tIFwiLi9lZGl0b3IvdG9vbGJveFwiO1xuaW1wb3J0IHtRdWl6RWRpdG9yfSBmcm9tIFwiLi9lZGl0b3IvcXVpelwiO1xuaW1wb3J0IHtJbWFnZUVkaXRvcn0gZnJvbSBcIi4vZWRpdG9yL2ltYWdlc1wiO1xuXG4vKipcbiAqIFRoZSBkaWZmZXJlbnQgcG9zc2libGUgZWRpdG9ycyBhdmFpbGFibGVcbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBsZXQgRWRpdG9yc0VudW0gPSB7XG4gICAgU1VCTUlTU0lPTjogXCJzdWJtaXNzaW9uXCIsXG4gICAgQVNTSUdOTUVOVDogXCJhc3NpZ25tZW50XCIsXG4gICAgSU5TVFJVQ1RJT05TOiBcImluc3RydWN0aW9uc1wiLFxuICAgIE9OX1JVTjogXCJvbl9ydW5cIixcbiAgICBPTl9DSEFOR0U6IFwib25fY2hhbmdlXCIsXG4gICAgT05fRVZBTDogXCJvbl9ldmFsXCIsXG4gICAgU1RBUlRJTkdfQ09ERTogXCJzdGFydGluZ19jb2RlXCIsXG4gICAgU0FNUExFX1NVQk1JU1NJT05TOiBcInNhbXBsZV9zdWJtaXNzaW9uc1wiLFxuICAgIElOU1RSVUNUT1JfRklMRTogXCJpbnN0cnVjdG9yX2ZpbGVcIlxufTtcblxuY29uc3QgU1BFQ0lBTF9OQU1FU1BBQ0VTID0gW1wiIVwiLCBcIl5cIiwgXCI/XCIsIFwiJFwiXTtcblxuY29uc3QgQVZBSUxBQkxFX0VESVRPUlMgPSBbXG4gICAgVGV4dEVkaXRvciwgUHl0aG9uRWRpdG9yLCBBc3NpZ25tZW50U2V0dGluZ3MsIFRhZ3NFZGl0b3IsIE1hcmtkb3duRWRpdG9yLFxuICAgIFNhbXBsZVN1Ym1pc3Npb25zLCBKc29uRWRpdG9yLCBUb29sYm94RWRpdG9yLCBRdWl6RWRpdG9yLCBJbWFnZUVkaXRvclxuXTtcblxuZXhwb3J0IGNvbnN0IEVESVRPUlNfSFRNTCA9IEFWQUlMQUJMRV9FRElUT1JTLm1hcChlZGl0b3IgPT4gYFxuPGRpdiBjbGFzcz1cImJsb2NrcHktcGFuZWwgYmxvY2tweS1lZGl0b3JcIiBcbiAgICAgZGF0YS1iaW5kPVwidmlzaWJsZTogdWkuZWRpdG9ycy52aWV3KCkubmFtZSA9PT0gJyR7ZWRpdG9yLm5hbWV9JywgY2xhc3M6IHVpLmVkaXRvcnMud2lkdGhcIj5cbiAgICA8ZGl2PlxuICAgICR7ZWRpdG9yLnRlbXBsYXRlfVxuICAgIDwvZGl2PlxuPC9kaXY+XG5gXG4gICAgLypcbiAgICBgXG48IS0tIGtvIGlmOiB1aS5lZGl0b3JzLnZpZXcoKS5uYW1lID09PSAnJHtlZGl0b3IubmFtZX0nIC0tPlxuJHtlZGl0b3IudGVtcGxhdGV9XG48IS0tIC9rbyAtLT5gKi9cbikuam9pbihcIlxcblwiKTtcblxuZXhwb3J0IGNsYXNzIEVkaXRvcnMge1xuICAgIGNvbnN0cnVjdG9yKG1haW4sIHRhZykge1xuICAgICAgICB0aGlzLm1haW4gPSBtYWluO1xuICAgICAgICB0aGlzLnRhZyA9IHRhZztcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5yZWdpc3RlcmVkXyA9IFtdO1xuICAgICAgICB0aGlzLmV4dGVuc2lvbnNfID0ge307XG4gICAgICAgIHRoaXMuYnlOYW1lXyA9IHt9O1xuICAgICAgICBBVkFJTEFCTEVfRURJVE9SUy5mb3JFYWNoKGVkaXRvciA9PiB0aGlzLnJlZ2lzdGVyRWRpdG9yKGVkaXRvcikpO1xuICAgICAgICB0aGlzLm1haW4ubW9kZWwuZGlzcGxheS5maWxlbmFtZS5zdWJzY3JpYmUodGhpcy5jaGFuZ2VFZGl0b3IsIHRoaXMpO1xuICAgIH1cblxuICAgIHJlZ2lzdGVyRWRpdG9yKGRhdGEpIHtcbiAgICAgICAgbGV0IGV4dGVuc2lvbnMgPSBkYXRhLmV4dGVuc2lvbnM7XG4gICAgICAgIGxldCBpbnN0YW5jZSA9IG5ldyBkYXRhLmNvbnN0cnVjdG9yKHRoaXMubWFpbiwgdGhpcy50YWcpO1xuICAgICAgICBpbnN0YW5jZS5uYW1lID0gZGF0YS5uYW1lO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyZWRfLnB1c2goaW5zdGFuY2UpO1xuICAgICAgICB0aGlzLmJ5TmFtZV9bZGF0YS5uYW1lLnRvTG93ZXJDYXNlKCldID0gaW5zdGFuY2U7XG4gICAgICAgIGZvciAobGV0IGk9MDsgaSA8IGV4dGVuc2lvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuZXh0ZW5zaW9uc19bZXh0ZW5zaW9uc1tpXV0gPSBpbnN0YW5jZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGJ5TmFtZShuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ5TmFtZV9bbmFtZS50b0xvd2VyQ2FzZSgpXTtcbiAgICB9XG5cbiAgICBjaGFuZ2VFZGl0b3IobmV3RmlsZW5hbWUpIHtcbiAgICAgICAgbGV0IG9sZEVkaXRvciA9IHRoaXMuY3VycmVudDtcbiAgICAgICAgbGV0IG5ld0VkaXRvciA9IHRoaXMuZ2V0RWRpdG9yKG5ld0ZpbGVuYW1lLCBvbGRFZGl0b3IpO1xuICAgICAgICBpZiAob2xkRWRpdG9yICE9PSBudWxsKSB7XG4gICAgICAgICAgICBvbGRFZGl0b3IuZXhpdChuZXdGaWxlbmFtZSwgb2xkRWRpdG9yLCBuZXdFZGl0b3IpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3VycmVudCA9IG5ld0VkaXRvcjtcbiAgICAgICAgdGhpcy5jdXJyZW50LmVudGVyKG5ld0ZpbGVuYW1lLCBvbGRFZGl0b3IpO1xuICAgIH1cblxuICAgIHN0YXRpYyBwYXJzZUZpbGVuYW1lKHBhdGgpIHtcbiAgICAgICAgbGV0IHNwYWNlID0gcGF0aC5jaGFyQXQoMCk7XG4gICAgICAgIGlmIChTUEVDSUFMX05BTUVTUEFDRVMuaW5kZXhPZihzcGFjZSkgIT09IC0xKSB7XG4gICAgICAgICAgICBwYXRoID0gcGF0aC5zdWJzdHIoMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzcGFjZSA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5hbWUgPSBwYXRoLnN1YnN0cigwLCBwYXRoLmxhc3RJbmRleE9mKFwiLlwiKSk7XG4gICAgICAgIGxldCB0eXBlID0gcGF0aC5zdWJzdHIocGF0aC5sYXN0SW5kZXhPZihcIi5cIikpO1xuICAgICAgICByZXR1cm4ge1wic3BhY2VcIjogc3BhY2UsIFwibmFtZVwiOiBuYW1lLCBcInR5cGVcIjogdHlwZX07XG4gICAgfVxuXG4gICAgZ2V0RWRpdG9yKHBhdGgpIHtcbiAgICAgICAgbGV0IHtzcGFjZSwgbmFtZSwgdHlwZX0gPSBFZGl0b3JzLnBhcnNlRmlsZW5hbWUocGF0aCk7XG4gICAgICAgIGlmICh0eXBlID09PSBcIi5ibG9ja3B5XCIgJiYgcGF0aCBpbiB0aGlzLmV4dGVuc2lvbnNfKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5leHRlbnNpb25zX1twYXRoXTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgYXNzaWdubWVudFR5cGUgPSB0aGlzLm1haW4ubW9kZWwuYXNzaWdubWVudC50eXBlKCk7XG4gICAgICAgIGlmIChhc3NpZ25tZW50VHlwZSAhPT0gQXNzaWdubWVudFR5cGUuQkxPQ0tQWSkge1xuICAgICAgICAgICAgaWYgKG5hbWUgPT09IFwiYW5zd2VyXCIgJiYgdHlwZSA9PT0gXCIucHlcIikge1xuICAgICAgICAgICAgICAgIGlmIChcIi5cIithc3NpZ25tZW50VHlwZSBpbiB0aGlzLmV4dGVuc2lvbnNfKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmV4dGVuc2lvbnNfW1wiLlwiK2Fzc2lnbm1lbnRUeXBlXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiTm8gZWRpdG9yIHJlZ2lzdGVyZWQgZm9yIGFzc2lnbm1lbnQgdHlwZTpcIiwgYXNzaWdubWVudFR5cGUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3RlcmVkX1swXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgaW4gdGhpcy5leHRlbnNpb25zXykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXh0ZW5zaW9uc19bdHlwZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3RlcmVkX1swXTtcbiAgICAgICAgfVxuICAgICAgICAvL2NvbnNvbGUubG9nKHRoaXMubWFpbi5tb2RlbC5hc3NpZ25tZW50LnR5cGUoKSwgc3BhY2UsIG5hbWUsIHR5cGUpO1xuICAgIH1cblxufSIsImltcG9ydCB7U3RhdHVzU3RhdGV9IGZyb20gXCIuL3NlcnZlclwiO1xuaW1wb3J0IHtPblJ1bkNvbmZpZ3VyYXRpb259IGZyb20gXCIuL2VuZ2luZS9vbl9ydW5cIjtcbmltcG9ydCB7UnVuQ29uZmlndXJhdGlvbn0gZnJvbSBcIi4vZW5naW5lL3J1blwiO1xuaW1wb3J0IHtFdmFsQ29uZmlndXJhdGlvbn0gZnJvbSBcIi4vZW5naW5lL2V2YWxcIjtcbmltcG9ydCB7U2FtcGxlQ29uZmlndXJhdGlvbn0gZnJvbSBcIi4vZW5naW5lL3NhbXBsZVwiO1xuaW1wb3J0IHtPbkNoYW5nZUNvbmZpZ3VyYXRpb259IGZyb20gXCIuL2VuZ2luZS9vbl9jaGFuZ2VcIjtcbmltcG9ydCB7T25FdmFsQ29uZmlndXJhdGlvbn0gZnJvbSBcIi4vZW5naW5lL29uX2V2YWxcIjtcbmltcG9ydCB7T25TYW1wbGVDb25maWd1cmF0aW9ufSBmcm9tIFwiLi9lbmdpbmUvb25fc2FtcGxlXCI7XG5cbi8qKlxuICogQW4gb2JqZWN0IGZvciBleGVjdXRpbmcgUHl0aG9uIGNvZGUgYW5kIHBhc3NpbmcgdGhlIHJlc3VsdHMgYWxvbmcgdG8gaW50ZXJlc3RlZCBjb21wb25lbnRzLlxuICpcbiAqIEludGVyZXN0aW5nIGNvbXBvbmVudHM6XG4gKiAgRXhlY3V0aW9uIEJ1ZmZlcjogUmVzcG9uc2libGUgZm9yIGNvbGxlY3RpbmcgdGhlIHRyYWNlIGR1cmluZyBwcm9ncmFtIGV4ZWN1dGlvbi5cbiAqICAgICAgICAgICAgICAgICAgICBUaGlzIHByZXZlbnRzIEtub2Nrb3V0anMgZnJvbSB1cGRhdGluZyB0aGUgZWRpdG9yIGR1cmluZyBleGVjdXRpb24uXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAdGhpcyB7QmxvY2tQeUVkaXRvcn1cbiAqIEBwYXJhbSB7T2JqZWN0fSBtYWluIC0gVGhlIG1haW4gQmxvY2tQeSBpbnN0YW5jZVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFnIC0gVGhlIEhUTUwgb2JqZWN0IHRoaXMgaXMgYXR0YWNoZWQgdG8uXG4gKi9cbmV4cG9ydCBjbGFzcyBCbG9ja1B5RW5naW5lIHtcbiAgICBjb25zdHJ1Y3RvcihtYWluKSB7XG4gICAgICAgIHRoaXMubWFpbiA9IG1haW47XG4gICAgICAgIHRoaXMuZXhlY3V0aW9uTW9kZWwgPSB0aGlzLm1haW4ubW9kZWwuZXhlY3V0aW9uO1xuXG4gICAgICAgIHRoaXMuY29uZmlndXJhdGlvbnMgPSB7XG4gICAgICAgICAgICBydW46IG5ldyBSdW5Db25maWd1cmF0aW9uKG1haW4pLFxuICAgICAgICAgICAgZXZhbDogbmV3IEV2YWxDb25maWd1cmF0aW9uKG1haW4pLFxuICAgICAgICAgICAgb25SdW46IG5ldyBPblJ1bkNvbmZpZ3VyYXRpb24obWFpbiksXG4gICAgICAgICAgICBvbkNoYW5nZTogbmV3IE9uQ2hhbmdlQ29uZmlndXJhdGlvbihtYWluKSxcbiAgICAgICAgICAgIG9uRXZhbDogbmV3IE9uRXZhbENvbmZpZ3VyYXRpb24obWFpbilcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBQcmVjb25maWd1cmUgc2t1bHB0IHNvIHdlIGNhbiBwYXJzZVxuICAgICAgICBTay5jb25maWd1cmUodGhpcy5jb25maWd1cmF0aW9ucy5ydW4uZ2V0U2t1bHB0T3B0aW9ucygpKTtcblxuICAgICAgICAvLyBLZWVwcyB0cmFjayBvZiB0aGUgdHJhY2luZyB3aGlsZSB0aGUgcHJvZ3JhbSBpcyBleGVjdXRpbmdcbiAgICAgICAgdGhpcy5leGVjdXRpb25CdWZmZXIgPSB7fTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5hYmxlIGZ1bmN0aW9uIHRvIGJlIHJ1biB3aGVuIGV4ZWN1dGlvbiBoYXMgZnVsbHkgZW5kZWQsXG4gICAgICAgICAqIHdoZXRoZXIgaXQgc3VjY2VlZHMgb3IgZmFpbHMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9uRXhlY3V0aW9uQmVnaW4gPSBudWxsO1xuICAgICAgICB0aGlzLm9uRXhlY3V0aW9uRW5kID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNldCByZXBvcnRzXG4gICAgICovXG4gICAgcmVzZXRSZXBvcnRzKCkge1xuICAgICAgICBsZXQgcmVwb3J0ID0gdGhpcy5leGVjdXRpb25Nb2RlbC5yZXBvcnRzO1xuICAgICAgICByZXBvcnRbXCJ2ZXJpZmllclwiXSA9IHt9O1xuICAgICAgICByZXBvcnRbXCJwYXJzZXJcIl0gPSB7fTtcbiAgICAgICAgcmVwb3J0W1wic3R1ZGVudFwiXSA9IHt9O1xuICAgICAgICByZXBvcnRbXCJpbnN0cnVjdG9yXCJdID0ge307XG4gICAgICAgIHJlcG9ydFtcIm1vZGVsXCJdID0gdGhpcy5tYWluLm1vZGVsO1xuICAgIH07XG5cbiAgICByZXNldFN0dWRlbnRNb2RlbCgpIHtcbiAgICAgICAgbGV0IHN0dWRlbnQgPSB0aGlzLmV4ZWN1dGlvbk1vZGVsLnN0dWRlbnQ7XG4gICAgICAgIHN0dWRlbnQuY2FsbHMgPSB7fTtcbiAgICAgICAgc3R1ZGVudC5jdXJyZW50U3RlcChudWxsKTtcbiAgICAgICAgc3R1ZGVudC5jdXJyZW50VHJhY2VTdGVwKDApO1xuICAgICAgICBzdHVkZW50Lmxhc3RTdGVwKDApO1xuICAgICAgICBzdHVkZW50LmN1cnJlbnRMaW5lKG51bGwpO1xuICAgICAgICBzdHVkZW50LmN1cnJlbnRUcmFjZURhdGEucmVtb3ZlQWxsKCk7XG4gICAgICAgIHN0dWRlbnQucmVzdWx0cyA9IG51bGw7XG4gICAgICAgIHN0dWRlbnQudHJhY2luZyA9IFtdO1xuICAgIH1cblxuICAgIHJlc2V0RXhlY3V0aW9uQnVmZmVyKCkge1xuICAgICAgICB0aGlzLmV4ZWN1dGlvbkJ1ZmZlciA9IHtcbiAgICAgICAgICAgIFwidHJhY2VcIjogW10sXG4gICAgICAgICAgICBcInN0ZXBcIjogMCxcbiAgICAgICAgICAgIFwibGluZVwiOiAwLFxuICAgICAgICB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYWxsIGludGVyZmFjZSBhc3BlY3RzIG9mIHRoZSBwcmV2aW91cyBSdW4uXG4gICAgICovXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIC8vIFRPRE86IENsZWFyIG91dCBhbnkgY292ZXJhZ2UvdHJhY2UvZXJyb3IgaGlnaGxpZ2h0cyBpbiBlZGl0b3JzXG4gICAgICAgIC8vIFJlc2V0IGV4ZWN1dGlvbiBpbiBtb2RlbFxuICAgICAgICB0aGlzLnJlc2V0U3R1ZGVudE1vZGVsKCk7XG4gICAgICAgIC8vIEdldCByZXBvcnRzIHJlYWR5XG4gICAgICAgIHRoaXMucmVzZXRSZXBvcnRzKCk7XG4gICAgICAgIC8vIENsZWFyIG91dCB0aGUgZXhlY3V0aW9uIGJ1ZmZlclxuICAgICAgICB0aGlzLnJlc2V0RXhlY3V0aW9uQnVmZmVyKCk7XG4gICAgICAgIC8vIENsZWFyIG91dCB0aGUgY29uc29sZSBvZiBwcmludGVkIHN0dWZmXG4gICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLmNvbnNvbGUuY2xlYXIoKTtcbiAgICAgICAgLy8gQ2xlYXIgb3V0IGFueSBvbGQgZmVlZGJhY2tcbiAgICAgICAgdGhpcy5tYWluLmNvbXBvbmVudHMuZmVlZGJhY2suY2xlYXIoKTtcbiAgICB9XG5cbiAgICBkZWxheWVkUnVuKGRpc2FibGVGZWVkYmFjaz1mYWxzZSkge1xuICAgICAgICAvL3RoaXMubWFpbi5tb2RlbC5zdGF0dXMub25FeGVjdXRpb24oU3RhdHVzU3RhdGUuQUNUSVZFKTtcbiAgICAgICAgLy8kKFwiLmJsb2NrcHktcnVuXCIpLmFkZENsYXNzKFwiYmxvY2tweS1ydW4tcnVubmluZ1wiKTtcbiAgICAgICAgdGhpcy5ydW4oZGlzYWJsZUZlZWRiYWNrKTtcbiAgICAgICAgLy9zZXRUaW1lb3V0KHRoaXMucnVuLmJpbmQodGhpcyksIDEpO1xuICAgIH1cblxuICAgIHN0b3AoKSB7XG5cbiAgICB9XG5cbiAgICBydW4oZGlzYWJsZUZlZWRiYWNrPWZhbHNlKSB7XG4gICAgICAgIHRoaXMuY29uZmlndXJhdGlvbiA9IHRoaXMuY29uZmlndXJhdGlvbnMucnVuLnVzZSh0aGlzKTtcbiAgICAgICAgbGV0IGV4ZWN1dGlvbiA9IHRoaXMuZXhlY3V0ZSgpLnRoZW4oXG4gICAgICAgICAgICB0aGlzLmNvbmZpZ3VyYXRpb24uc3VjY2Vzcy5iaW5kKHRoaXMuY29uZmlndXJhdGlvbiksXG4gICAgICAgICAgICB0aGlzLmNvbmZpZ3VyYXRpb24uZmFpbHVyZS5iaW5kKHRoaXMuY29uZmlndXJhdGlvbilcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKCF0aGlzLm1haW4ubW9kZWwuYXNzaWdubWVudC5zZXR0aW5ncy5kaXNhYmxlRmVlZGJhY2soKSAmJiAhZGlzYWJsZUZlZWRiYWNrKSB7XG4gICAgICAgICAgICBleGVjdXRpb24udGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWd1cmF0aW9uLnByb3ZpZGVTZWNyZXRFcnJvcigpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9uUnVuKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV4ZWN1dGlvbi50aGVuKHRoaXMuY29uZmlndXJhdGlvbi5zaG93RXJyb3JzLmJpbmQodGhpcy5jb25maWd1cmF0aW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgZXhlY3V0aW9uLnRoZW4odGhpcy5jb25maWd1cmF0aW9uLmZpbmFsbHkuYmluZCh0aGlzLmNvbmZpZ3VyYXRpb24pKTtcbiAgICB9XG5cbiAgICBvblJ1bigpIHtcbiAgICAgICAgdGhpcy5jb25maWd1cmF0aW9uID0gdGhpcy5jb25maWd1cmF0aW9ucy5vblJ1bi51c2UodGhpcyk7XG4gICAgICAgIHRoaXMuZXhlY3V0ZSgpLnRoZW4oXG4gICAgICAgICAgICB0aGlzLmNvbmZpZ3VyYXRpb24uc3VjY2Vzcy5iaW5kKHRoaXMuY29uZmlndXJhdGlvbiksXG4gICAgICAgICAgICB0aGlzLmNvbmZpZ3VyYXRpb24uZmFpbHVyZS5iaW5kKHRoaXMuY29uZmlndXJhdGlvbilcbiAgICAgICAgKVxuICAgICAgICAgICAgLnRoZW4odGhpcy5jb25maWd1cmF0aW9uLmZpbmFsbHkuYmluZCh0aGlzLmNvbmZpZ3VyYXRpb24pKVxuICAgICAgICAgICAgLnRoZW4odGhpcy5leGVjdXRpb25FbmRfLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIGV2YWx1YXRlKCkge1xuICAgICAgICB0aGlzLm1haW4ubW9kZWwuc3RhdHVzLm9uRXhlY3V0aW9uKFN0YXR1c1N0YXRlLkFDVElWRSk7XG4gICAgICAgIGxldCBldmFsdWF0aW9uSW5wdXQgPSB0aGlzLm1haW4uY29tcG9uZW50cy5jb25zb2xlLmV2YWx1YXRlKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGV2YWx1YXRpb25JbnB1dCk7XG4gICAgICAgIGV2YWx1YXRpb25JbnB1dC50aGVuKCh1c2VySW5wdXQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlndXJhdGlvbiA9IHRoaXMuY29uZmlndXJhdGlvbnMuZXZhbC51c2UodGhpcywgdXNlcklucHV0KTtcbiAgICAgICAgICAgIGxldCBleGVjdXRpb24gPSB0aGlzLmV4ZWN1dGUoKS50aGVuKFxuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlndXJhdGlvbi5zdWNjZXNzLmJpbmQodGhpcy5jb25maWd1cmF0aW9uKSxcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZ3VyYXRpb24uZmFpbHVyZS5iaW5kKHRoaXMuY29uZmlndXJhdGlvbilcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoIXRoaXMubWFpbi5tb2RlbC5hc3NpZ25tZW50LnNldHRpbmdzLmRpc2FibGVGZWVkYmFjaygpICYmXG4gICAgICAgICAgICAgICAgdGhpcy5tYWluLm1vZGVsLmFzc2lnbm1lbnQub25FdmFsKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZ3VyYXRpb24ucHJvdmlkZVNlY3JldEVycm9yKCk7XG4gICAgICAgICAgICAgICAgZXhlY3V0aW9uLnRoZW4odGhpcy5vbkV2YWwuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGV4ZWN1dGlvbi50aGVuKHRoaXMuY29uZmlndXJhdGlvbi5zaG93RXJyb3JzLmJpbmQodGhpcy5jb25maWd1cmF0aW9uKSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4odGhpcy5ldmFsdWF0ZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV4ZWN1dGlvbi50aGVuKHRoaXMuY29uZmlndXJhdGlvbi5maW5hbGx5LmJpbmQodGhpcy5jb25maWd1cmF0aW9uKSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uRXZhbCgpIHtcbiAgICAgICAgdGhpcy5jb25maWd1cmF0aW9uID0gdGhpcy5jb25maWd1cmF0aW9ucy5vbkV2YWwudXNlKHRoaXMpO1xuICAgICAgICB0aGlzLmV4ZWN1dGUoKS50aGVuKFxuICAgICAgICAgICAgdGhpcy5jb25maWd1cmF0aW9uLnN1Y2Nlc3MuYmluZCh0aGlzLmNvbmZpZ3VyYXRpb24pLFxuICAgICAgICAgICAgdGhpcy5jb25maWd1cmF0aW9uLmZhaWx1cmUuYmluZCh0aGlzLmNvbmZpZ3VyYXRpb24pXG4gICAgICAgIClcbiAgICAgICAgICAgIC50aGVuKHRoaXMuZXZhbHVhdGUuYmluZCh0aGlzKSlcbiAgICAgICAgICAgIC50aGVuKHRoaXMuY29uZmlndXJhdGlvbi5maW5hbGx5LmJpbmQodGhpcy5jb25maWd1cmF0aW9uKSk7XG4gICAgfVxuXG4gICAgb25DaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuY29uZmlndXJhdGlvbiA9IHRoaXMuY29uZmlndXJhdGlvbnMub25DaGFuZ2UudXNlKHRoaXMpO1xuICAgIH1cblxuICAgIGV4ZWN1dGUoKSB7XG4gICAgICAgIHRoaXMubWFpbi5tb2RlbC5zdGF0dXMub25FeGVjdXRpb24oU3RhdHVzU3RhdGUuQUNUSVZFKTtcbiAgICAgICAgcmV0dXJuIFNrLm1pc2NldmFsLmFzeW5jVG9Qcm9taXNlKCgpID0+XG4gICAgICAgICAgICBTay5pbXBvcnRNYWluV2l0aEJvZHkodGhpcy5jb25maWd1cmF0aW9uLmZpbGVuYW1lLCBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZ3VyYXRpb24uY29kZSwgdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZ3VyYXRpb24uc3lzbW9kdWxlcylcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBY3RpdmF0ZWQgd2hlbmV2ZXIgdGhlIFB5dGhvbiBjb2RlIGNoYW5nZXNcbiAgICAgKi9cbiAgICBvbl9jaGFuZ2UoKSB7XG4gICAgICAgIGxldCBGSUxFTkFNRSA9IFwib25fY2hhbmdlXCI7XG4gICAgICAgIC8vIFNraXAgaWYgdGhlIGluc3RydWN0b3IgaGFzIG5vdCBkZWZpbmVkIGFueXRoaW5nXG4gICAgICAgIGlmICghdGhpcy5tYWluLm1vZGVsLnByb2dyYW1zW0ZJTEVOQU1FXSgpLnRyaW0oKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24uc3RhdHVzKFwiY2hhbmdpbmdcIik7XG4gICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLnNlcnZlci5zYXZlQ29kZSgpO1xuICAgICAgICAvLyBPbiBzdGVwIGRvZXMgbm90IHBlcmZvcm0gcGFyc2UgYW5hbHlzaXMgYnkgZGVmYXVsdCBvciBydW4gc3R1ZGVudCBjb2RlXG4gICAgICAgIGxldCBlbmdpbmUgPSB0aGlzO1xuICAgICAgICBsZXQgZmVlZGJhY2sgPSB0aGlzLm1haW4uY29tcG9uZW50cy5mZWVkYmFjaztcbiAgICAgICAgZW5naW5lLnJlc2V0UmVwb3J0cygpO1xuICAgICAgICBlbmdpbmUudmVyaWZ5Q29kZSgpO1xuICAgICAgICBlbmdpbmUudXBkYXRlUGFyc2UoKTtcbiAgICAgICAgZW5naW5lLnJ1bkluc3RydWN0b3JDb2RlKEZJTEVOQU1FLCB0cnVlLCBmdW5jdGlvbiAobW9kdWxlKSB7XG4gICAgICAgICAgICBpZiAoU2suZXhlY3V0aW9uUmVwb3J0c1tcImluc3RydWN0b3JcIl1bXCJzdWNjZXNzXCJdKSB7XG4gICAgICAgICAgICAgICAgLy8gU1VDQ0VTUywgU0NPUkUsIENBVEVHT1JZLCBMQUJFTCwgTUVTU0FHRSwgREFUQSwgSElERVxuICAgICAgICAgICAgICAgIC8vIFRPRE86IG9ubHkgc2hvdyB1bmRlciBjZXJ0YWluIGNpcmN1bXN0YW5jZXNcbiAgICAgICAgICAgICAgICBpZiAoIXN1Y2Nlc3MgJiZcbiAgICAgICAgICAgICAgICAgICAgIShjYXRlZ29yeSA9PT0gXCJJbnN0cnVjdG9yXCIgJiYgbGFiZWwgPT09IFwiTm8gZXJyb3JzXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZlZWRiYWNrLnByZXNlbnRGZWVkYmFjayhjYXRlZ29yeSwgbGFiZWwsIG1lc3NhZ2UsIGxpbmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbmdpbmUubWFpbi5jb21wb25lbnRzLmZlZWRiYWNrLnByZXNlbnRGZWVkYmFjayhtb2R1bGUuJGQpO1xuICAgICAgICAgICAgICAgIGVuZ2luZS5tYWluLm1vZGVsLmV4ZWN1dGlvbi5zdGF0dXMoXCJjb21wbGV0ZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGVuZ2luZS5tYWluLmNvbXBvbmVudHMuc2VydmVyLmxvZ0V2ZW50KFwiZW5naW5lXCIsIFwib25fY2hhbmdlXCIpO1xuICAgIH07XG5cblxuICAgIC8qKlxuICAgICAqIEhlbHBlciBmdW5jdGlvbiB0aGF0IHdpbGwgYXR0ZW1wdCB0byBjYWxsIHRoZSBkZWZpbmVkIG9uRXhlY3V0aW9uRW5kLFxuICAgICAqIGJ1dCB3aWxsIGRvIG5vdGhpbmcgaWYgdGhlcmUgaXMgbm8gZnVuY3Rpb24gZGVmaW5lZC5cbiAgICAgKi9cbiAgICBleGVjdXRpb25FbmRfKCkge1xuICAgICAgICBpZiAodGhpcy5vbkV4ZWN1dGlvbkVuZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5vbkV4ZWN1dGlvbkVuZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBleGVjdXRpb25CZWdpbl8oKSB7XG4gICAgICAgIGlmICh0aGlzLm9uRXhlY3V0aW9uQmVnaW4gIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMub25FeGVjdXRpb25CZWdpbigpO1xuICAgICAgICB9XG4gICAgfVxuXG59XG5cbiIsImV4cG9ydCBjb25zdCBFTVBUWV9NT0RVTEUgPSBcImxldCAkYnVpbHRpbm1vZHVsZSA9IGZ1bmN0aW9uKG1vZCl7IHJldHVybiBtb2Q7IH1cIjtcblxuLyoqXG4gKiBBIGNvbnRhaW5lciBmb3IgaG9sZGluZyBzZXR0aW5ncyBvZiBhIHBhcnRpY3VsYXIgcnVuIGNvbmZpZ3VyYXRpb24uXG4gKiBUaGlzIGlzIHRoZSByb290IGNsYXNzIGZvciBhbGwgb3RoZXIgY29uZmlndXJhdGlvbnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBDb25maWd1cmF0aW9uIHtcblxuICAgIGNvbnN0cnVjdG9yKG1haW4pIHtcbiAgICAgICAgdGhpcy5tYWluID0gbWFpbjtcbiAgICAgICAgdGhpcy5maWxlbmFtZSA9IG51bGw7XG4gICAgICAgIHRoaXMuY29kZSA9IG51bGw7XG4gICAgICAgIHRoaXMuc3lzbW9kdWxlcyA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICB1c2UoZW5naW5lKSB7XG4gICAgICAgIC8vIEFjY2VzcyBwb2ludCBmb3IgaW5zdHJ1Y3RvciBkYXRhXG4gICAgICAgIHRoaXMuZW5naW5lID0gZW5naW5lO1xuICAgICAgICBTay5leGVjdXRpb25SZXBvcnRzID0gdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5yZXBvcnRzO1xuICAgICAgICBTay5jb25zb2xlID0gdGhpcy5tYWluLmNvbXBvbmVudHMuY29uc29sZTtcbiAgICAgICAgU2sucXVldWVkSW5wdXQgPSBbXTtcbiAgICAgICAgU2suY29uZmlndXJlKHRoaXMuZ2V0U2t1bHB0T3B0aW9ucygpKTtcbiAgICAgICAgLy8gU2V0IG9wZW5GaWxlIGFzIG1lY2hhbmlzbSB0byByZWFkIGZpbGVzXG4gICAgICAgIFNrLmluQnJvd3NlciA9IHRoaXMub3BlbkZpbGUuYmluZCh0aGlzKTtcbiAgICAgICAgLy8gRnVuY3Rpb24gdG8gY29udmVydCBmaWxlbmFtZXMgdG8gVVJMc1xuICAgICAgICBTay5maWxlVG9VUkwgPSB0aGlzLmdldFVybEZyb21GaWxlbmFtZS5iaW5kKHRoaXMpO1xuICAgICAgICAvLyBQcm94eSByZXF1ZXN0c1xuICAgICAgICBTay5yZXF1ZXN0c0dldCA9ICh1cmwsIGRhdGEsIHRpbWVvdXQpID0+IHRoaXMub3BlblVSTCh1cmwsIGRhdGEsIHRpbWVvdXQpO1xuICAgICAgICAvLyBDb25maWd1cmUgYSBcImRvIHlvdSB3YW50IHRvIHdhaXQ/IHByb21wdFwiXG4gICAgICAgIFNrLnRpbWVvdXRIYW5kbGVyID0gKHRpbWVQYXNzZWQsIGV4ZWNMaW1pdCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMubWFpbi5tb2RlbC5hc3NpZ25tZW50LnNldHRpbmdzLmRpc2FibGVUaW1lb3V0KCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBwcm9tcHRNZXNzYWdlID0gdGhpcy5nZXRUaW1lb3V0UHJvbXB0KHRpbWVQYXNzZWQvMTAwMCA+IDMwKTtcbiAgICAgICAgICAgIGxldCBkZWxheSA9IHByb21wdChwcm9tcHRNZXNzYWdlLCBTay5leGVjTGltaXQvMTAwMCk7XG4gICAgICAgICAgICBpZiAoZGVsYXkgIT09IG51bGwgfHwgZGVsYXk9PTApIHtcbiAgICAgICAgICAgICAgICBkZWxheSA9IFNrLmV4ZWNMaW1pdCArIHBhcnNlSW50KGRlbGF5LCAxMCkgKiAxMDAwO1xuICAgICAgICAgICAgICAgIFNrLmV4ZWNMaW1pdCA9IGRlbGF5O1xuICAgICAgICAgICAgICAgIFNrLmV4ZWNMaW1pdEZ1bmN0aW9uID0gKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYWluLm1vZGVsLmFzc2lnbm1lbnQuc2V0dGluZ3MuZGlzYWJsZVRpbWVvdXQoKSA/IEluZmluaXR5IDogZGVsYXk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGVsYXk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIEF0dGFjaCBiZWZvcmVDYWxsXG4gICAgICAgIFNrLmJlZm9yZUNhbGwgPSB0aGlzLmJlZm9yZUNhbGwuYmluZCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0VGltZW91dFByb21wdChsb25nVGltZW91dCkge1xuICAgICAgICBpZiAobG9uZ1RpbWVvdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBcIlRoZSBwcm9ncmFtIGhhcyB0YWtlbiBhIFJFQUxMWSBsb25nIHRpbWUgdG8gcnVuICgzMCBvciBtb3JlIHNlY29uZHMpLiBZb3UgbWlnaHQgd2FudCB0byBjYW5jZWwgYW5kIGNoZWNrIHlvdXIgY29kZS4gT3IsIHlvdSBjYW4gYWRkIG1vcmUgc2Vjb25kcyB0byB3YWl0IGJlbG93LlwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFwiVGhlIHByb2dyYW0gaXMgdGFraW5nIGEgd2hpbGUgdG8gcnVuLiBIb3cgbWFueSBtb3JlIHNlY29uZHMgd291bGQgeW91IGxpa2UgdG8gd2FpdD9cIjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFNrdWxwdE9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBfX2Z1dHVyZV9fOiBTay5weXRob24zLFxuICAgICAgICAgICAgLy8gaW1wb3J0XG4gICAgICAgICAgICByZWFkOiB0aGlzLmltcG9ydEZpbGUuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIC8vIG9wZW5cbiAgICAgICAgICAgIC8vZmlsZW9wZW46IHRoaXMub3BlbkZpbGUuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIC8vIGZpbGUud3JpdGVcbiAgICAgICAgICAgIGZpbGV3cml0ZTogdGhpcy53cml0ZUZpbGUuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIC8vIHByaW50XG4gICAgICAgICAgICBvdXRwdXQ6IHRoaXMucHJpbnQuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIC8vIGlucHV0XG4gICAgICAgICAgICBpbnB1dGZ1bjogdGhpcy5pbnB1dC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgaW5wdXRmdW5UYWtlc1Byb21wdDogdHJ1ZSxcbiAgICAgICAgICAgIC8vIE1lZGlhIEltYWdlIFByb3h5IFVSTFxuICAgICAgICAgICAgaW1hZ2VQcm94eTogdGhpcy5nZXRJbWFnZVByb3h5LmJpbmQodGhpcyksXG4gICAgICAgICAgICAvLyBUT0RPOiBNYWtlIHRoaXMgc2V0IGJ5IHRoZSBzeXN0ZW0gc28gd2UgY2FuIHVzZSBvdXIgb3duIHNlcnZlcnMgaW4gcHJhY3RpY2VcbiAgICAgICAgICAgIGVtb2ppUHJveHk6IChwYXJ0KSA9PiBgaHR0cHM6Ly90d2Vtb2ppLm1heGNkbi5jb20vdi8xMy4xLjAvc3ZnLyR7cGFydC50b0xvd2VyQ2FzZSgpfS5zdmdgLFxuICAgICAgICAgICAgLy8gV2hldGhlciBvciBub3QgdG8ga2VlcCB0aGUgZ2xvYmFsc1xuICAgICAgICAgICAgcmV0YWluR2xvYmFsczogdHJ1ZVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGdldFVybEZyb21GaWxlbmFtZShmaWxlbmFtZSkge1xuICAgICAgICBjb25zdCBmb3VuZCA9IHRoaXMubWFpbi5jb21wb25lbnRzLmZpbGVTeXN0ZW0uZmlsZXNUb1VybHNbZmlsZW5hbWVdO1xuICAgICAgICBpZiAoZm91bmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFNrLmJ1aWx0aW4uT1NFcnJvcihcIkZpbGUgbm90IGZvdW5kOiBcIiArIGZpbGVuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm91bmQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byBhY2Nlc3MgU2t1bHB0IGJ1aWx0LWlucy4gVGhpcyBpcyBwcmV0dHkgZ2VuZXJpYywgdGFrZW5cbiAgICAgKiBhbG1vc3QgZGlyZWN0bHkgZnJvbSB0aGUgU2t1bHB0IGRvY3MuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZmlsZW5hbWUgLSBUaGUgcHl0aG9uIGZpbGVuYW1lIChlLmcuLCBcIm9zXCIgb3IgXCJwcHJpbnRcIikgdGhhdCB3aWxsIGJlIGxvYWRlZC5cbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgSmF2YVNjcmlwdCBzb3VyY2UgY29kZSBvZiB0aGUgZmlsZSAod2VpcmQsIHJpZ2h0PylcbiAgICAgKiBAdGhyb3dzIFdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgdGhlIGZpbGUgaXNuJ3QgZm91bmQuXG4gICAgICovXG4gICAgaW1wb3J0RmlsZShmaWxlbmFtZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJVbmltcGxlbWVudGVkIG1ldGhvZCFcIik7XG4gICAgICAgIC8vIFRPRE9cbiAgICB9O1xuXG4gICAgb3BlblVSTCh1cmwsIGRhdGEsIHRpbWVvdXQpIHtcbiAgICAgICAgLy9yZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBsZXQgbW9ja1VybERhdGEgPSB0aGlzLm1haW4uY29tcG9uZW50cy5maWxlU3lzdGVtLmdldEZpbGUoXCI/bW9ja191cmxzLmJsb2NrcHlcIik7XG4gICAgICAgIGlmIChtb2NrVXJsRGF0YSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyAobmV3IFNrLmJ1aWx0aW4uSU9FcnJvcihcIkNhbm5vdCBhY2Nlc3MgdXJsOiBVUkwgRGF0YSB3YXMgbm90IG1hZGUgYXZhaWxhYmxlIGZvciB0aGlzIGFzc2lnbm1lbnRcIikpO1xuICAgICAgICB9XG4gICAgICAgIG1vY2tVcmxEYXRhID0gSlNPTi5wYXJzZShtb2NrVXJsRGF0YS5oYW5kbGUoKSk7XG4gICAgICAgIGZvciAobGV0IGZpbGVuYW1lIGluIG1vY2tVcmxEYXRhKSB7XG4gICAgICAgICAgICBpZiAobW9ja1VybERhdGEuaGFzT3duUHJvcGVydHkoZmlsZW5hbWUpKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpIDwgbW9ja1VybERhdGFbZmlsZW5hbWVdLmxlbmd0aDsgaSs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1vY2tVcmxEYXRhW2ZpbGVuYW1lXVtpXSA9PT0gdXJsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmlsZURhdGEgPSB0aGlzLm1haW4uY29tcG9uZW50cy5maWxlU3lzdGVtLnJlYWRGaWxlKGZpbGVuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZmlsZURhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vcmVqZWN0KG5ldyBTay5idWlsdGluLklPRXJyb3IoXCJDYW5ub3QgYWNjZXNzIHVybDogXCIrdXJsK1wiIHdhcyBub3QgbWFkZSBhdmFpbGFibGUgZm9yIHRoaXMgYXNzaWdubWVudFwiKSk7XG4gICAgICAgIHRocm93IChuZXcgU2suYnVpbHRpbi5JT0Vycm9yKFwiQ2Fubm90IGFjY2VzcyB1cmw6IFwiK3VybCtcIiB3YXMgbm90IG1hZGUgYXZhaWxhYmxlIGZvciB0aGlzIGFzc2lnbm1lbnRcIikpO1xuICAgICAgICAvL30pO1xuICAgIH1cblxuICAgIG9wZW5GaWxlKCkge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJVbmltcGxlbWVudGVkIG1ldGhvZCFcIik7XG4gICAgICAgIC8vIFRPRE9cbiAgICB9XG5cbiAgICB3cml0ZUZpbGUoKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIlVuaW1wbGVtZW50ZWQgbWV0aG9kIVwiKTtcbiAgICAgICAgLy8gVE9ET1xuICAgIH1cblxuICAgIHByaW50KHZhbHVlKSB7XG4gICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLmNvbnNvbGUucHJpbnQodmFsdWUpO1xuICAgIH1cblxuICAgIGlucHV0KCkge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJVbmltcGxlbWVudGVkIG1ldGhvZCFcIik7XG4gICAgICAgIC8vIFRPRE9cbiAgICB9XG5cbiAgICBjbGVhcklucHV0KCkge1xuICAgICAgICBpZiAodGhpcy5tYWluLm1vZGVsLmRpc3BsYXkuY2xlYXJJbnB1dHMoKSkge1xuICAgICAgICAgICAgdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5pbnB1dChbXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5pbnB1dEluZGV4KDApO1xuICAgIH1cblxuICAgIHN0YXRpYyBpbnB1dE1vY2tGdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKFNrLnF1ZXVlZElucHV0Lmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIFNrLnF1ZXVlZElucHV0LnBvcCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZ2V0SW1hZ2VQcm94eSh1cmwpIHtcbiAgICAgICAgLy8gVE9ET1xuICAgICAgICByZXR1cm4gdXJsO1xuICAgIH1cblxuICAgIHN0ZXAoKSB7XG5cbiAgICB9XG5cbiAgICBsYXN0U3RlcCgpIHtcblxuICAgIH1cblxuICAgIGlzRm9yYmlkZGVuKGZpbGVuYW1lKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBzdWNjZXNzKG1vZHVsZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBYnN0cmFjdCBzdWNjZXNzIGV4ZWN1dGlvblwiKTtcbiAgICB9XG5cbiAgICBmYWlsdXJlKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkFic3RyYWN0IGZhaWx1cmUgZXhlY3V0aW9uXCIpO1xuICAgIH1cblxuICAgIGZpbmFsbHkocmVzdWx0KSB7XG4gICAgICAgIC8vIEZvcmNlIFB5Z2FtZSB0byBzdG9wIHRyYXBwaW5nIGtleWJvYXJkIGV2ZW50c1xuICAgICAgICBpZiAodGhpcy5tYWluLmNvbXBvbmVudHMuY29uc29sZS5weWdhbWVMaW5lKSB7XG4gICAgICAgICAgICB0aGlzLm1haW4uY29tcG9uZW50cy5jb25zb2xlLnB5Z2FtZUxpbmUuY2xlYW51cCgpO1xuICAgICAgICAgICAgdGhpcy5tYWluLmNvbXBvbmVudHMuY29uc29sZS5weWdhbWVMaW5lLnN0b3AoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGR1bW15T3V0U2FuZGJveCgpIHtcbiAgICAgICAgLy9Tay5idWlsdGluRmlsZXMuZmlsZXNbXCJzcmMvbGliL3BlZGFsL3NhbmRib3gvc2FuZGJveC5weVwiXSA9IFwiY2xhc3MgU2FuZGJveDogcGFzc1xcbmRlZiBydW4oKTogcGFzc1xcbmRlZiByZXNldCgpOiBwYXNzXFxuXCI7XG4gICAgfVxuXG4gICAgYmVmb3JlQ2FsbChmdW5jdGlvbk5hbWUsIHBvc2FyZ3MsIGt3YXJncykge1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwiVFJBQ0tJTkcgQ0FMTFwiLCBmdW5jdGlvbk5hbWUsIHBvc2FyZ3MsIGt3YXJncyk7XG4gICAgICAgIC8vIFRPRE86IEhhbmRsZSBmYXN0Y2FsbCB0b28/IENoZWNrIGhvdyB0aGF0IHdvcmtzIGluIFNrdWxwdCBzaWRlXG4gICAgICAgIGxldCBzdHVkZW50TW9kZWwgPSB0aGlzLm1haW4ubW9kZWwuZXhlY3V0aW9uLnJlcG9ydHMuc3R1ZGVudDtcbiAgICAgICAgaWYgKCEoXCJjYWxsc1wiIGluIHN0dWRlbnRNb2RlbCkpIHtcbiAgICAgICAgICAgIHN0dWRlbnRNb2RlbC5jYWxscyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmICghKGZ1bmN0aW9uTmFtZSBpbiBzdHVkZW50TW9kZWwuY2FsbHMpKSB7XG4gICAgICAgICAgICBzdHVkZW50TW9kZWwuY2FsbHNbZnVuY3Rpb25OYW1lXSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGxldCBhcmdzID0ge307XG4gICAgICAgIC8vIEdldCBhY3R1YWwgcGFyYW1ldGVyIG5hbWVzISFcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpIDwgcG9zYXJncy5sZW5ndGg7IGkrPSAxKSB7XG4gICAgICAgICAgICBhcmdzW1wiX19BUkdcIitpXSA9IHBvc2FyZ3NbaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGt3YXJncyAmJiBrd2FyZ3NbMF0gIT0gbnVsbCkge1xuICAgICAgICAgICAgYXJnc1tcIl9fQVJHU1wiXSA9IGt3YXJnc1swXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoa3dhcmdzICYmIGt3YXJnc1sxXSAhPSBudWxsKSB7XG4gICAgICAgICAgICBhcmdzW1wiX19LV0FSR1NcIl0gPSBrd2FyZ3NbMV07XG4gICAgICAgIH1cbiAgICAgICAgLy9jb25zb2xlLmxvZyhhcmdzKTtcbiAgICAgICAgc3R1ZGVudE1vZGVsLmNhbGxzW2Z1bmN0aW9uTmFtZV0ucHVzaChhcmdzKTtcbiAgICB9XG59XG5cbiIsImltcG9ydCB7U3R1ZGVudENvbmZpZ3VyYXRpb259IGZyb20gXCIuL3N0dWRlbnRcIjtcbmltcG9ydCB7U3RhdHVzU3RhdGV9IGZyb20gXCIuLi9zZXJ2ZXJcIjtcbmltcG9ydCB7QmxvY2tQeVRyYWNlfSBmcm9tIFwiLi4vdHJhY2VcIjtcblxuZXhwb3J0IGNsYXNzIEV2YWxDb25maWd1cmF0aW9uIGV4dGVuZHMgU3R1ZGVudENvbmZpZ3VyYXRpb24ge1xuICAgIHVzZShlbmdpbmUsIGNvZGUpIHtcbiAgICAgICAgLy8gVE9ETzogZml4IHRvIGJlIGN1cnJlbnRseSBhZGRlZCBsaW5lXG4gICAgICAgIHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24uZmVlZGJhY2subWVzc2FnZShcIlJ1bm5pbmcuLi5cIik7XG4gICAgICAgIHRoaXMuZmlsZW5hbWUgPSBcImFuc3dlclwiO1xuICAgICAgICB0aGlzLmNvZGUgPSBcIl8gPSBcIiArIGNvZGU7XG4gICAgICAgIFNrLmFmdGVyU2luZ2xlRXhlY3V0aW9uID0gbnVsbDtcbiAgICAgICAgU2suYmVmb3JlQ2FsbCA9IG51bGw7XG5cbiAgICAgICAgc3VwZXIudXNlKGVuZ2luZSk7XG5cbiAgICAgICAgU2sucmV0YWluR2xvYmFscyA9IHRydWU7XG4gICAgICAgIFNrLmdsb2JhbHMgPSB0aGlzLm1haW4ubW9kZWwuZXhlY3V0aW9uLnN0dWRlbnQuZ2xvYmFscygpO1xuXG4gICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLnNlcnZlci5sb2dFdmVudChcIlgtRmlsZS5BZGRcIiwgXCJcIiwgXCJcIiwgY29kZSwgXCJldmFsdWF0aW9uc1wiKTtcbiAgICAgICAgdGhpcy5tYWluLmNvbXBvbmVudHMuc2VydmVyLmxvZ0V2ZW50KFwiQ29tcGlsZVwiLCBcIlwiLCBcIlwiLCB0aGlzLmNvZGUsIFwiZXZhbHVhdGlvbnNcIik7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc3VjY2Vzcyhtb2R1bGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJFdmFsIHN1Y2Nlc3NcIik7XG4gICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLnNlcnZlci5sb2dFdmVudChcIlgtRXZhbHVhdGUuUHJvZ3JhbVwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcImV2YWx1YXRpb25zXCIpO1xuICAgICAgICB0aGlzLm1haW4ubW9kZWwuc3RhdHVzLm9uRXhlY3V0aW9uKFN0YXR1c1N0YXRlLlJFQURZKTtcbiAgICAgICAgdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5zdHVkZW50Lmdsb2JhbHMoU2suZ2xvYmFscyk7XG4gICAgICAgIFNrLmdsb2JhbHMgPSB7fTtcbiAgICAgICAgbGV0IHJlcG9ydCA9IHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24ucmVwb3J0cztcbiAgICAgICAgbGV0IGZpbGVuYW1lID0gdGhpcy5maWxlbmFtZTtcbiAgICAgICAgdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5zdHVkZW50LnJlc3VsdHMgPSBtb2R1bGU7XG4gICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLmNvbnNvbGUucHJpbnRWYWx1ZShTay5mZmkucmVtYXBUb0pzKG1vZHVsZS4kZC5fLiRyKCkpKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIC8vdGhpcy5zdGVwKG1vZHVsZS4kZCwgbW9kdWxlLiRkLC0xLCAwLCBmaWxlbmFtZSArIFwiLnB5XCIpO1xuICAgICAgICAgICAgdGhpcy5sYXN0U3RlcCgpO1xuICAgICAgICAgICAgcmVwb3J0W1wic3R1ZGVudFwiXSA9IHtcbiAgICAgICAgICAgICAgICBcInN1Y2Nlc3NcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcInRyYWNlXCI6IHRoaXMuZW5naW5lLmV4ZWN1dGlvbkJ1ZmZlci50cmFjZSxcbiAgICAgICAgICAgICAgICBcImxpbmVzXCI6IHRoaXMuZW5naW5lLmV4ZWN1dGlvbkJ1ZmZlci50cmFjZS5tYXAoeCA9PiB4LmxpbmUpLFxuICAgICAgICAgICAgICAgIFwicmVhbExpbmVzXCI6IHRoaXMuZW5naW5lLmV4ZWN1dGlvbkJ1ZmZlci50cmFjZS5maWx0ZXIoeCA9PiAheC5pc0RvY3N0cmluZykubWFwKHggPT4geC5saW5lKSxcbiAgICAgICAgICAgICAgICBcInJlc3VsdHNcIjogbW9kdWxlLFxuICAgICAgICAgICAgICAgIFwib3V0cHV0XCI6IHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24ub3V0cHV0LFxuICAgICAgICAgICAgICAgIFwiZXZhbHVhdGlvblwiOiB0aGlzLmNvZGUsXG4gICAgICAgICAgICAgICAgXCJjYWxsc1wiOiB0aGlzLm1haW4ubW9kZWwuZXhlY3V0aW9uLnN0dWRlbnQuY2FsbHMsXG4gICAgICAgICAgICAgICAgXCJ0cmFjaW5nXCI6IFtdXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmYWlsdXJlKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRXZhbCBmYWlsdXJlXCIsIGVycm9yKTtcbiAgICAgICAgdGhpcy5tYWluLm1vZGVsLnN0YXR1cy5vbkV4ZWN1dGlvbihTdGF0dXNTdGF0ZS5GQUlMRUQpO1xuICAgICAgICBsZXQgcmVwb3J0ID0gdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5yZXBvcnRzO1xuICAgICAgICB0aGlzLm1haW4uY29tcG9uZW50cy5zZXJ2ZXIubG9nRXZlbnQoXCJDb21waWxlLkVycm9yXCIsIFwiXCIsIFwiXCIsIGVycm9yLnRvU3RyaW5nKCksIFwiZXZhbHVhdGlvbnNcIik7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICByZXBvcnRbXCJzdHVkZW50XCJdID0ge1xuICAgICAgICAgICAgICAgIFwic3VjY2Vzc1wiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBcImVycm9yXCI6IGVycm9yLFxuICAgICAgICAgICAgICAgIFwiZXZhbHVhdGlvblwiOiB0aGlzLmNvZGUsXG4gICAgICAgICAgICAgICAgXCJ0cmFjaW5nXCI6IFtdXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG59IiwiaW1wb3J0IHtDb25maWd1cmF0aW9uLCBFTVBUWV9NT0RVTEV9IGZyb20gXCIuL2NvbmZpZ3VyYXRpb25zLmpzXCI7XG5pbXBvcnQgeyRza19tb2RfaW5zdHJ1Y3Rvcn0gZnJvbSBcIi4uL3NrdWxwdF9tb2R1bGVzL3NrX21vZF9pbnN0cnVjdG9yXCI7XG5pbXBvcnQgeyRza19tb2RfY292ZXJhZ2V9IGZyb20gXCIuLi9za3VscHRfbW9kdWxlcy9jb3ZlcmFnZVwiO1xuaW1wb3J0IHskcGVkYWxfdHJhY2VyfSBmcm9tIFwiLi4vc2t1bHB0X21vZHVsZXMvcGVkYWxfdHJhY2VyXCI7XG5pbXBvcnQge2Nob21wU3BlY2lhbEZpbGV9IGZyb20gXCIuLi9maWxlc1wiO1xuXG5jb25zdCBVVElMSVRZX01PRFVMRV9DT0RFID0gXCJ2YXIgJGJ1aWx0aW5tb2R1bGUgPSBcIiArICRza19tb2RfaW5zdHJ1Y3Rvci50b1N0cmluZygpO1xuY29uc3QgQ09WRVJBR0VfTU9EVUxFX0NPREUgPSAkc2tfbW9kX2NvdmVyYWdlO1xuXG5leHBvcnQgY2xhc3MgSW5zdHJ1Y3RvckNvbmZpZ3VyYXRpb24gZXh0ZW5kcyBDb25maWd1cmF0aW9uIHtcbiAgICB1c2UoZW5naW5lKSB7XG4gICAgICAgIHN1cGVyLnVzZShlbmdpbmUpO1xuICAgICAgICAvLyBJbnN0cnVjdG9ycyBnZXQgNCBzZWNvbmRzXG4gICAgICAgIFNrLmV4ZWNMaW1pdEZ1bmN0aW9uID0gKCkgPT5cbiAgICAgICAgICAgIHRoaXMubWFpbi5tb2RlbC5hc3NpZ25tZW50LnNldHRpbmdzLmRpc2FibGVUaW1lb3V0KCkgPyBJbmZpbml0eSA6IDcwMDA7XG4gICAgICAgIFNrLmV4ZWNMaW1pdCA9IFNrLmV4ZWNMaW1pdEZ1bmN0aW9uKCk7XG4gICAgICAgIC8vIFN0ZXBwZXIhIEV4ZWN1dGVkIGFmdGVyIGV2ZXJ5IHN0YXRlbWVudC5cbiAgICAgICAgU2suYWZ0ZXJTaW5nbGVFeGVjdXRpb24gPSBudWxsOyAvLyAxMCAqMTAwMFxuICAgICAgICAvLyBNdXRlIGV2ZXJ5dGhpbmdcbiAgICAgICAgdGhpcy5tYWluLm1vZGVsLmRpc3BsYXkubXV0ZVByaW50ZXIodHJ1ZSk7XG4gICAgICAgIC8vIERpc2FibGUgaW5wdXQgYm94XG4gICAgICAgIFNrLnF1ZXVlZElucHV0ID0gW107XG4gICAgICAgIC8vIFRPRE8gU2suaW5wdXRmdW4gPSBCbG9ja1B5RW5naW5lLmlucHV0TW9ja0Z1bmN0aW9uO1xuICAgICAgICAvLyBUT0RPOiBBbGxvdyBpbnB1dCBmdW5jdGlvbiB0byBkaXNhYmxlIHRoZSB0aW1lciwgc29tZWhvd1xuICAgICAgICAvLyBEaXNhYmxlIHRoZSBiZWZvcmVDYWxsIGNoZWNrZXIgdW5sZXNzIHNwZWNpZmljYWxseSByZXF1ZXN0ZWRcbiAgICAgICAgU2suYmVmb3JlQ2FsbEJhY2t1cCA9IFNrLmJlZm9yZUNhbGw7XG4gICAgICAgIFNrLmJlZm9yZUNhbGwgPSBudWxsO1xuICAgICAgICAvLyBFbmFibGUgdXRpbGl0eSBtb2RlXG4gICAgICAgIFNrLmJ1aWx0aW5GaWxlcy5maWxlc1tcInNyYy9saWIvdXRpbGl0eS9fX2luaXRfXy5qc1wiXSA9IFVUSUxJVFlfTU9EVUxFX0NPREU7XG4gICAgICAgIFNrLmJ1aWx0aW5GaWxlcy5maWxlc1tcInNyYy9saWIvY292ZXJhZ2UucHlcIl0gPSBDT1ZFUkFHRV9NT0RVTEVfQ09ERTtcbiAgICAgICAgLy8gVE9ETzogQ2hlY2sgaWYgdGhpcyBuZWVkcyB0byBiZSBvcHRpbWl6ZWRcbiAgICAgICAgLy9jb25zdCBQRURBTF9UUkFDRVJfTU9EVUxFX0NPREUgPSBTay5jb21waWxlKCRwZWRhbF90cmFjZXIsIFwidHJhY2VyLnB5XCIsIFwiZXhlY1wiLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgIFNrLmJ1aWx0aW5GaWxlcy5maWxlc1tcInNyYy9saWIvcGVkYWwvc2FuZGJveC90cmFjZXIucHlcIl0gPSAkcGVkYWxfdHJhY2VyO1xuICAgICAgICBkZWxldGUgU2suYnVpbHRpbkZpbGVzLmZpbGVzW1wic3JjL2xpYi9wZWRhbC9zYW5kYm94L3RyYWNlci5qc1wiXTtcbiAgICAgICAgLy8gVE9ETzogTW9jayBQZWRhbCdzIHRyYWNlciBtb2R1bGUgd2l0aCB0aGUgYXBwcm9wcmlhdGUgdmVyc2lvblxuICAgICAgICBTay5idWlsdGluRmlsZXMuZmlsZXNbXCIuL19pbnN0cnVjdG9yL19faW5pdF9fLmpzXCJdID0gRU1QVFlfTU9EVUxFO1xuICAgICAgICAvLyBSZXVzZSBhbnkgZXhpc3Rpbmcgc3lzbW9kdWxlcyB0aGF0IHdlIHByZXZpb3VzbHkgZm91bmQsIGJ1dCBub3QgX19tYWluX18gbW9kdWxlc1xuICAgICAgICB0aGlzLnN5c21vZHVsZXMgPSB0aGlzLmNsZWFyRXhpc3RpbmdTdHVkZW50SW1wb3J0cygpO1xuICAgICAgICAvLyBIb3JyaWZpYyBoYWNrLCB0byBwcmV2ZW50IFRpZmEgZnJvbSBjYWNoaW5nIGEgYmFkIHZlcnNpb24gb2YgdGhlIHN0dWRlbnRzJyBpbXBvcnRcbiAgICAgICAgU2suY2xlYXJFeGlzdGluZ1N0dWRlbnRJbXBvcnRzID0gdGhpcy5jbGVhckV4aXN0aW5nU3R1ZGVudEltcG9ydHM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHByaW50KHZhbHVlKSB7XG4gICAgICAgIHN1cGVyLnByaW50KHZhbHVlKTtcbiAgICAgICAgY29uc29sZS5pbmZvKFwiUHJpbnRlZDpcIiwgdmFsdWUpO1xuICAgIH1cblxuICAgIGNsZWFyRXhpc3RpbmdTdHVkZW50SW1wb3J0cygpIHtcbiAgICAgICAgbGV0IHN5c21vZHVsZXMgPSB0aGlzLm1haW4ubW9kZWwuZXhlY3V0aW9uLmluc3RydWN0b3Iuc3lzbW9kdWxlcztcbiAgICAgICAgLy8gUmVtb3ZlIGFueSBleGlzdGluZyBfX21haW5fXyBtb2R1bGVzXG4gICAgICAgIGlmIChzeXNtb2R1bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGZpbGVuYW1lIG9mIHRoaXMuZ2V0QWxsRmlsZW5hbWVzKCkpIHtcbiAgICAgICAgICAgICAgICBsZXQgc2tGaWxlbmFtZSA9IG5ldyBTay5idWlsdGluLnN0cihmaWxlbmFtZSk7XG4gICAgICAgICAgICAgICAgLyppZiAoc3lzbW9kdWxlcy5xdWljayRsb29rdXAoc2tGaWxlbmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3lzbW9kdWxlcy5wb3AkaXRlbShza0ZpbGVuYW1lKTtcbiAgICAgICAgICAgICAgICB9Ki9cbiAgICAgICAgICAgICAgICBzeXNtb2R1bGVzLnBvcCRpdGVtKHNrRmlsZW5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzeXNtb2R1bGVzO1xuICAgIH1cblxuICAgIGdldEFsbFN0dWRlbnRGaWxlcygpIHtcbiAgICAgICAgY29uc3QgZmlsZXMgPSB7XG4gICAgICAgICAgICBcImFuc3dlci5weVwiOiB0aGlzLm1haW4ubW9kZWwudWkuZmlsZXMuZ2V0U3R1ZGVudENvZGUoKVxuICAgICAgICB9O1xuICAgICAgICAvLyBTa2lwIHNwZWNpYWwgaW5zdHJ1Y3RvciBmaWxlc1xuICAgICAgICB0aGlzLm1haW4ubW9kZWwuYXNzaWdubWVudC5leHRyYUluc3RydWN0b3JGaWxlcygpLmZvckVhY2goZmlsZSA9PiB7XG4gICAgICAgICAgICBpZiAoIShcIiFeJCNcIi5pbmNsdWRlcyhmaWxlLmZpbGVuYW1lKClbMF0pKSkge1xuICAgICAgICAgICAgICAgIGZpbGVzW2Nob21wU3BlY2lhbEZpbGUoZmlsZS5maWxlbmFtZSgpKV0gPSBmaWxlLmNvbnRlbnRzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBJbmNsdWRlIG5vcm1hbCBzdHVkZW50IGV4dHJhIGZpbGVzXG4gICAgICAgIHRoaXMubWFpbi5tb2RlbC5zdWJtaXNzaW9uLmV4dHJhRmlsZXMoKS5mb3JFYWNoKGZpbGUgPT4ge1xuICAgICAgICAgICAgZmlsZXNbZmlsZS5maWxlbmFtZSgpXSA9IGZpbGUuY29udGVudHMoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmaWxlcztcbiAgICB9XG5cbiAgICBnZXRBbGxGaWxlbmFtZXMoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNsZWFuKGZpbGVuYW1lKSB7XG4gICAgICAgICAgICBmaWxlbmFtZSA9IGNob21wU3BlY2lhbEZpbGUoZmlsZW5hbWUpO1xuICAgICAgICAgICAgaWYgKGZpbGVuYW1lLmVuZHNXaXRoKFwiLnB5XCIpKSB7XG4gICAgICAgICAgICAgICAgZmlsZW5hbWUgPSBmaWxlbmFtZS5zbGljZSgwLCAtMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmlsZW5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIFwiX19tYWluX19cIixcbiAgICAgICAgICAgIFwiX2luc3RydWN0b3JcIixcbiAgICAgICAgICAgIC4uLnRoaXMubWFpbi5tb2RlbC5hc3NpZ25tZW50LmV4dHJhSW5zdHJ1Y3RvckZpbGVzKCkubWFwKGZpbGUgPT4gXCJfaW5zdHJ1Y3Rvci5cIiArIGNsZWFuKGZpbGUuZmlsZW5hbWUoKSkpLFxuICAgICAgICAgICAgLi4udGhpcy5tYWluLm1vZGVsLnN1Ym1pc3Npb24uZXh0cmFGaWxlcygpLm1hcChmaWxlID0+IGNsZWFuKGZpbGUuZmlsZW5hbWUoKSkpLFxuICAgICAgICBdO1xuICAgIH1cblxuICAgIGdldFRpbWVvdXRQcm9tcHQobG9uZ1RpbWVvdXQpIHtcbiAgICAgICAgaWYgKGxvbmdUaW1lb3V0KSB7XG4gICAgICAgICAgICByZXR1cm4gXCJUaGUgaW5zdHJ1Y3RvciBjb2RlIGhhcyB0YWtlbiBhIFJFQUxMWSBsb25nIHRpbWUgdG8gY2hlY2sgeW91ciBjb2RlICgzMCBvciBtb3JlIHNlY29uZHMpLiBZb3UgbWlnaHQgd2FudCB0byBjYW5jZWwgYW5kIGNoZWNrIHlvdXIgY29kZSAob3IgZ2V0IGhlbHAgZnJvbSBhbiBpbnN0cnVjdG9yKS4gT3IsIHlvdSBjYW4gYWRkIG1vcmUgc2Vjb25kcyB0byB3YWl0IGJlbG93LlwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFwiVGhlIGluc3RydWN0b3IgY29kZSBpcyB0YWtpbmcgYSBsaXR0bGUgd2hpbGUgdG8gY2hlY2sgeW91ciBjb2RlOyBpdCBtaWdodCBqdXN0IG5lZWQgYSBsaXR0bGUgbW9yZSB0aW1lLiBIb3cgbWFueSBtb3JlIHNlY29uZHMgd291bGQgeW91IGxpa2UgdG8gd2FpdD9cIjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9wZW5GaWxlKGZpbGVuYW1lKSB7XG4gICAgICAgIGxldCBmb3VuZCA9IHRoaXMubWFpbi5jb21wb25lbnRzLmZpbGVTeXN0ZW0uc2VhcmNoRm9yRmlsZShmaWxlbmFtZSwgZmFsc2UpO1xuICAgICAgICBpZiAoZm91bmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFNrLmJ1aWx0aW4uT1NFcnJvcihcIkZpbGUgbm90IGZvdW5kOiBcIitmaWxlbmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZm91bmQuY29udGVudHMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9wZW5VUkwodXJsLCBkYXRhLCB0aW1lb3V0KSB7XG4gICAgICAgIC8vIFRPRE86IEZpZ3VyZSBvdXQgd2h5IHBhcmFtZXRlcnMgYXJlIG1pc2FsaWduZWQuLj9cbiAgICAgICAgaWYgKGRhdGEudiA9PT0gXCJPUEVOQUlcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFpbi5jb21wb25lbnRzLnNlcnZlci5vcGVuYWlQcm94eSh0aW1lb3V0LnYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLm9wZW5VUkwodXJsLCBkYXRhLCB0aW1lb3V0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGltcG9ydEZpbGUoZmlsZW5hbWUpIHtcbiAgICAgICAgaWYgKGZpbGVuYW1lID09PSBcIi4vYW5zd2VyLnB5XCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1haW4ubW9kZWwuc3VibWlzc2lvbi5jb2RlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZmlsZW5hbWUgPT09IFwiLi9faW5zdHJ1Y3Rvci9vbl9ydW4ucHlcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFpbi5tb2RlbC5hc3NpZ25tZW50Lm9uUnVuKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZmlsZW5hbWUgPT09IFwiLi9faW5zdHJ1Y3Rvci9vbl9ldmFsLnB5XCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1haW4ubW9kZWwuYXNzaWdubWVudC5vbkV2YWwoKSB8fCBcIlwiO1xuICAgICAgICB9IGVsc2UgaWYgKGZpbGVuYW1lID09PSBcIi4vX2luc3RydWN0b3IvX19pbml0X18uanNcIikge1xuICAgICAgICAgICAgcmV0dXJuIEVNUFRZX01PRFVMRTtcbiAgICAgICAgfSBlbHNlIGlmIChTay5idWlsdGluRmlsZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFNrLmJ1aWx0aW4uT1NFcnJvcihcIkJ1aWx0LWluIG1vZHVsZXMgbm90IGFjY2Vzc2libGUuXCIpO1xuICAgICAgICB9IGVsc2UgaWYgKFNrLmJ1aWx0aW5GaWxlc1tcImZpbGVzXCJdW2ZpbGVuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gU2suYnVpbHRpbkZpbGVzW1wiZmlsZXNcIl1bZmlsZW5hbWVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGZvdW5kID0gdGhpcy5tYWluLmNvbXBvbmVudHMuZmlsZVN5c3RlbS5zZWFyY2hGb3JGaWxlKGZpbGVuYW1lLCBmYWxzZSk7XG4gICAgICAgICAgICBpZiAoZm91bmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBTay5idWlsdGluLk9TRXJyb3IoXCJGaWxlIG5vdCBmb3VuZDogJ1wiK2ZpbGVuYW1lICsgXCInXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm91bmQuY29udGVudHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBpbnB1dChwcm9tcHRNZXNzYWdlKSB7XG4gICAgICAgIC8vcmV0dXJuIFwiQXBwbGVQaWVcIjtcbiAgICAgICAgY29uc29sZS5sb2coXCI+Pj5cIiwgdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5pbnB1dCgpLCB0aGlzLm1haW4ubW9kZWwuZXhlY3V0aW9uLmlucHV0SW5kZXgoKSk7XG4gICAgICAgIGlmICh0aGlzLm1haW4ubW9kZWwuZXhlY3V0aW9uLmlucHV0SW5kZXgoKSA8IHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24uaW5wdXQoKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxldCBpbnB1dEluZGV4ID0gdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5pbnB1dEluZGV4KCk7XG4gICAgICAgICAgICBsZXQgbmV4dElucHV0ID0gdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5pbnB1dCgpW2lucHV0SW5kZXhdO1xuICAgICAgICAgICAgdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5pbnB1dEluZGV4KGlucHV0SW5kZXgrMSk7XG4gICAgICAgICAgICByZXR1cm4gbmV4dElucHV0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFwiQXBwbGVQaWVcIjtcbiAgICAgICAgfVxuICAgICAgICAvKnJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZShTay5xdWV1ZWRJbnB1dC5wb3AoKSk7XG4gICAgICAgIH0pOyovXG4gICAgfVxuXG4gICAgYmVmb3JlQ2FsbChmdW5jdGlvbk5hbWUsIHBvc2FyZ3MsIGt3YXJncykge1xuICAgICAgICBsZXQgc3R1ZGVudE1vZGVsID0gdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5yZXBvcnRzLnN0dWRlbnQ7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJIRVkgSU5TVFJVQ1RPUiBDQUxMXCIsIGZ1bmN0aW9uTmFtZSwgc3R1ZGVudE1vZGVsLnRyYWNpbmcpO1xuICAgICAgICBpZiAoc3R1ZGVudE1vZGVsLnRyYWNpbmcgJiYgc3R1ZGVudE1vZGVsLnRyYWNpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgICBzdXBlci5iZWZvcmVDYWxsKGZ1bmN0aW9uTmFtZSwgcG9zYXJncywga3dhcmdzKTtcbiAgICAgICAgfVxuICAgIH1cblxufSIsImltcG9ydCB7SW5zdHJ1Y3RvckNvbmZpZ3VyYXRpb259IGZyb20gXCIuL2luc3RydWN0b3JcIjtcblxuZXhwb3J0IGNsYXNzIE9uQ2hhbmdlQ29uZmlndXJhdGlvbiBleHRlbmRzIEluc3RydWN0b3JDb25maWd1cmF0aW9uIHtcbiAgICB1c2UoZW5naW5lKSB7XG4gICAgICAgIHN1cGVyLnVzZShlbmdpbmUpO1xuICAgICAgICB0aGlzLmZpbGVuYW1lID0gXCJvbl9jaGFuZ2UucHlcIjtcbiAgICAgICAgdGhpcy5jb2RlID0gdGhpcy5tYWluLm1vZGVsLmFzc2lnbm1lbnQub25DaGFuZ2UoKTtcblxuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5tYWluLm1vZGVsLmRpc3BsYXkudHJpZ2dlck9uQ2hhbmdlKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59IiwiaW1wb3J0IHtJbnN0cnVjdG9yQ29uZmlndXJhdGlvbn0gZnJvbSBcIi4vaW5zdHJ1Y3RvclwiO1xuaW1wb3J0IHtTdGF0dXNTdGF0ZX0gZnJvbSBcIi4uL3NlcnZlclwiO1xuaW1wb3J0IHtmaW5kQWN0dWFsSW5zdHJ1Y3Rvck9mZnNldCwgSU5TVFJVQ1RPUl9NQVJLRVIsIE5FV19MSU5FX1JFR0VYfSBmcm9tIFwiLi9vbl9ydW5cIjtcbmltcG9ydCB7aW5kZW50fSBmcm9tIFwiLi4vdXRpbGl0aWVzXCI7XG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgV1JBUF9JTlNUUlVDVE9SX0NPREUgPSBmdW5jdGlvbiAoc3R1ZGVudENvZGUsIGluc3RydWN0b3JDb2RlLCBxdWljaywgaXNTYWZlKSB7XG4gICAgbGV0IHNhZmVDb2RlID0gSlNPTi5zdHJpbmdpZnkoc3R1ZGVudENvZGUpO1xuXG4gICAgcmV0dXJuIGBcbmZyb20gdXRpbGl0eSBpbXBvcnQgKlxuXG4jIExvYWQgaW4gc29tZSBjb21tb25seSB1c2VkIHRvb2xzXG5mcm9tIHBlZGFsLmNhaXQuY2FpdF9hcGkgaW1wb3J0IHBhcnNlX3Byb2dyYW1cbmZyb20gcGVkYWwuc2FuZGJveC5jb21tYW5kcyBpbXBvcnQgKlxuZnJvbSBwZWRhbC5jb3JlLmNvbW1hbmRzIGltcG9ydCAqXG5cbiMgQmFja3VwIHRoZSBmZWVkYmFja1xub25fcnVuX2ZlZWRiYWNrID0gW11cbmZvciBmZWVkYmFjayBpbiBNQUlOX1JFUE9SVC5mZWVkYmFjazpcbiAgICBvbl9ydW5fZmVlZGJhY2suYXBwZW5kKGZlZWRiYWNrKVxuTUFJTl9SRVBPUlQuZmVlZGJhY2suY2xlYXIoKVxuXG5mcm9tIHBlZGFsLmVudmlyb25tZW50cy5ibG9ja3B5IGltcG9ydCBzZXR1cF9lbnZpcm9ubWVudFxuIyBBZGQgaW4gZXZhbHVhdGVkIHN0dWZmIGZyb20gbGFzdCB0aW1lXG5zdHVkZW50ID0gZ2V0X3NhbmRib3goKVxuIyBUT0RPOiBXaGF0IGFib3V0IG5ldyBpbnB1dHMgc2luY2Ugd2UgbGFzdCByYW4vZXZhbGVkP1xuIyBNQUlOX1JFUE9SVC5zdWJtaXNzaW9uLmZpbGVzWydldmFsdWF0aW9uJ10gPSAke3NhZmVDb2RlfVxuZXZhbHVhdGUoJHtzYWZlQ29kZX1bJ2V2YWx1YXRpb24nXSlcblxuIyBUT0RPOiBSZWZhY3RvciByZXNvbHZlciB0byByZXR1cm4gaW5zdHJ1Y3Rpb25zXG4jIE1vbmtleS1wYXRjaCBxdWVzdGlvbnNcbiNmcm9tIHBlZGFsIGltcG9ydCBxdWVzdGlvbnNcbiNxdWVzdGlvbnMuc2hvd19xdWVzdGlvbiA9IHNldF9pbnN0cnVjdGlvbnNcblxuJHtJTlNUUlVDVE9SX01BUktFUn1cbiR7aW5zdHJ1Y3RvckNvZGV9XG5cbiMgUmVzb2x2ZSBldmVyeXRoaW5nXG5mcm9tIHBlZGFsLnJlc29sdmVycy5zaW1wbGUgaW1wb3J0IHJlc29sdmVcbmZpbmFsID0gcmVzb2x2ZSgpXG5TVUNDRVNTID0gZmluYWwuc3VjY2Vzc1xuU0NPUkUgPSBmaW5hbC5zY29yZVxuQ0FURUdPUlkgPSBmaW5hbC5jYXRlZ29yeVxuTEFCRUwgPSBmaW5hbC50aXRsZVxuTUVTU0FHRSA9IGZpbmFsLm1lc3NhZ2VcbkRBVEEgPSBmaW5hbC5kYXRhXG5ISURFID0gZmluYWwuaGlkZV9jb3JyZWN0bmVzc1xuXG4jIEhhbmRsZSBxdWVzdGlvbnNcbmlmIGZpbmFsLmluc3RydWN0aW9uczpcbiAgICBzZXRfaW5zdHJ1Y3Rpb25zKGZpbmFsLmluc3RydWN0aW9uc1stMV0ubWVzc2FnZSlcbiAgICBcbiMgSGFuZGxlIHBvc2l0aXZlIGZlZWRiYWNrXG5QT1NJVElWRSA9IFtdXG5mb3IgcG9zaXRpdmUgaW4gZmluYWwucG9zaXRpdmVzOlxuICAgIG1lc3NhZ2UgPSBwb3NpdGl2ZS5tZXNzYWdlXG4gICAgaWYgbm90IHBvc2l0aXZlOlxuICAgICAgICBtZXNzYWdlID0gcG9zaXRpdmUuZWxzZV9tZXNzYWdlXG4gICAgUE9TSVRJVkUuYXBwZW5kKHtcbiAgICAgICAgXCJ0aXRsZVwiOiBwb3NpdGl2ZS50aXRsZSxcbiAgICAgICAgXCJsYWJlbFwiOiBwb3NpdGl2ZS5sYWJlbCxcbiAgICAgICAgXCJtZXNzYWdlXCI6IG1lc3NhZ2VcbiAgICB9KVxuICAgIFxuIyBIYW5kbGUgc3lzdGVtIG1lc3NhZ2VzXG5mb3Igc3lzdGVtIGluIGZpbmFsLnN5c3RlbXM6XG4gICAgaWYgc3lzdGVtLmxhYmVsID09ICdsb2cnOlxuICAgICAgICBjb25zb2xlX2xvZyhzeXN0ZW0udGl0bGUsIHN5c3RlbS5tZXNzYWdlKTtcbiAgICBpZiBzeXN0ZW0ubGFiZWwgPT0gJ2RlYnVnJzpcbiAgICAgICAgY29uc29sZV9kZWJ1ZyhzeXN0ZW0udGl0bGUsIHN5c3RlbS5tZXNzYWdlKTtcblxuYDtcbn07XG5cbmV4cG9ydCBjbGFzcyBPbkV2YWxDb25maWd1cmF0aW9uIGV4dGVuZHMgSW5zdHJ1Y3RvckNvbmZpZ3VyYXRpb24ge1xuICAgIHVzZShlbmdpbmUpIHtcbiAgICAgICAgc3VwZXIudXNlKGVuZ2luZSk7XG4gICAgICAgIHRoaXMuZmlsZW5hbWUgPSBcIl9pbnN0cnVjdG9yLm9uX2V2YWxcIjtcbiAgICAgICAgdGhpcy5jb2RlID0gdGhpcy5tYWluLm1vZGVsLmFzc2lnbm1lbnQub25FdmFsKCkgfHwgXCJcIjtcblxuICAgICAgICBsZXQgZGlzYWJsZVRpZmEgPSB0aGlzLm1haW4ubW9kZWwuYXNzaWdubWVudC5zZXR0aW5ncy5kaXNhYmxlVGlmYSgpO1xuXG4gICAgICAgIGxldCByZXBvcnQgPSB0aGlzLm1haW4ubW9kZWwuZXhlY3V0aW9uLnJlcG9ydHM7XG4gICAgICAgIC8vbGV0IHN0dWRlbnRDb2RlU2FmZSA9IHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24ucmVwb3J0cy5zdHVkZW50LmV2YWx1YXRpb24gfHwgXCJOb25lXCI7XG4gICAgICAgIGxldCBzdHVkZW50RmlsZXMgPSB0aGlzLmdldEFsbFN0dWRlbnRGaWxlcygpO1xuICAgICAgICBzdHVkZW50RmlsZXNbXCJldmFsdWF0aW9uXCJdID0gdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5yZXBvcnRzLnN0dWRlbnQuZXZhbHVhdGlvbiB8fCBcIk5vbmVcIjtcbiAgICAgICAgdGhpcy5kdW1teU91dFNhbmRib3goKTtcbiAgICAgICAgbGV0IGluc3RydWN0b3JDb2RlID0gdGhpcy5jb2RlO1xuICAgICAgICBsZXQgaXNTYWZlID0gIXJlcG9ydFtcInBhcnNlclwiXS5lbXB0eSAmJiByZXBvcnRbXCJ2ZXJpZmllclwiXS5zdWNjZXNzO1xuICAgICAgICBpbnN0cnVjdG9yQ29kZSA9IFdSQVBfSU5TVFJVQ1RPUl9DT0RFKHN0dWRlbnRGaWxlcywgaW5zdHJ1Y3RvckNvZGUsIGRpc2FibGVUaWZhLCBpc1NhZmUpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIj4+PlwiLCBpbnN0cnVjdG9yQ29kZSk7XG4gICAgICAgIGxldCBsaW5lT2Zmc2V0ID0gZmluZEFjdHVhbEluc3RydWN0b3JPZmZzZXQoaW5zdHJ1Y3RvckNvZGUpOyAvL2luc3RydWN0b3JDb2RlLnNwbGl0KE5FV19MSU5FX1JFR0VYKS5sZW5ndGg7XG4gICAgICAgIHJlcG9ydFtcImluc3RydWN0b3JcIl0gPSB7XG4gICAgICAgICAgICBcImNvbXBsaW1lbnRzXCI6IFtdLFxuICAgICAgICAgICAgXCJmaWxlbmFtZVwiOiBcIi4vX2luc3RydWN0b3Ivb25fZXZhbC5weVwiLFxuICAgICAgICAgICAgXCJjb2RlXCI6IGluc3RydWN0b3JDb2RlLFxuICAgICAgICAgICAgXCJsaW5lT2Zmc2V0XCI6IGxpbmVPZmZzZXRcbiAgICAgICAgICAgIC8vJ2NvbXBsZXRlJzogZmFsc2UgLy8gQWN0dWFsbHksIGxldCdzIHVzZSB1bmRlZmluZWQgZm9yIG5vdy5cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jb2RlID0gaW5zdHJ1Y3RvckNvZGU7XG5cbiAgICAgICAgc3VwZXIudXNlKGVuZ2luZSk7XG5cbiAgICAgICAgLy9Tay5yZXRhaW5HbG9iYWxzID0gZmFsc2U7XG4gICAgICAgIFNrLmdsb2JhbHMgPSB0aGlzLm1haW4ubW9kZWwuZXhlY3V0aW9uLmluc3RydWN0b3IuZ2xvYmFscztcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzdWNjZXNzKG1vZHVsZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIk9uRXZhbCBzdWNjZXNzXCIpO1xuICAgICAgICAvLyBUT0RPOiBBY3R1YWxseSBwYXJzZSByZXN1bHRzXG4gICAgICAgIHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24uaW5zdHJ1Y3Rvci5nbG9iYWxzID0gU2suZ2xvYmFscztcbiAgICAgICAgdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5pbnN0cnVjdG9yLnN5c21vZHVsZXMgPSBTay5zeXNtb2R1bGVzO1xuICAgICAgICBjb25zb2xlLmxvZyhtb2R1bGUpO1xuICAgICAgICBsZXQgcmVzdWx0cyA9IG1vZHVsZS4kZC5vbl9ldmFsLiRkO1xuICAgICAgICBjb25zb2xlLmxvZyhtb2R1bGUuJGQpO1xuICAgICAgICB0aGlzLm1haW4uY29tcG9uZW50cy5mZWVkYmFjay5wcmVzZW50RmVlZGJhY2socmVzdWx0cyk7XG4gICAgICAgIHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24ucmVwb3J0c1tcImluc3RydWN0b3JcIl1bXCJzdWNjZXNzXCJdID0gdHJ1ZTtcbiAgICAgICAgbGV0IHN1Y2Nlc3MgPSBTay5mZmkucmVtYXBUb0pzKHJlc3VsdHMuU1VDQ0VTUyk7XG4gICAgICAgIHRoaXMubWFpbi5tb2RlbC5zdWJtaXNzaW9uLmNvcnJlY3Qoc3VjY2VzcyB8fCB0aGlzLm1haW4ubW9kZWwuc3VibWlzc2lvbi5jb3JyZWN0KCkpO1xuICAgICAgICAvLyBDYW5ub3QgZXhjZWVkIDEgcG9pbnQsIGNhbm5vdCBnbyBiZWxvdyAwIHBvaW50c1xuICAgICAgICBsZXQgc2NvcmUgPSBTay5mZmkucmVtYXBUb0pzKHJlc3VsdHMuU0NPUkUpO1xuICAgICAgICBzY29yZSA9IE1hdGgubWF4KDAuMCwgTWF0aC5taW4oMS4wLCBzY29yZSkpO1xuICAgICAgICBsZXQgb2xkU2NvcmUgPSB0aGlzLm1haW4ubW9kZWwuc3VibWlzc2lvbi5zY29yZSgpO1xuICAgICAgICB0aGlzLm1haW4ubW9kZWwuc3VibWlzc2lvbi5zY29yZShNYXRoLm1heChvbGRTY29yZSwgc2NvcmUpKTtcbiAgICAgICAgLy8gSGlkZSBzdGF0dXNcbiAgICAgICAgbGV0IGhpZGUgPSBTay5mZmkucmVtYXBUb0pzKHJlc3VsdHMuSElERSk7XG4gICAgICAgIC8vIEFuZCBmaXJlIHRoZSByZXN1bHQhXG4gICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLnNlcnZlci51cGRhdGVTdWJtaXNzaW9uKHNjb3JlLCBzdWNjZXNzLCBoaWRlLCBmYWxzZSk7XG4gICAgICAgIHRoaXMubWFpbi5tb2RlbC5zdGF0dXMub25FeGVjdXRpb24oU3RhdHVzU3RhdGUuUkVBRFkpO1xuICAgICAgICAvL2FmdGVyKG1vZHVsZSk7XG5cbiAgICAgICAgLyppZiAoc3VjY2VzcyAmJiB0aGlzLm1haW4ubW9kZWwuY29uZmlndXJhdGlvbi5jYWxsYmFja3Muc3VjY2Vzcykge1xuICAgICAgICAgICAgdGhpcy5tYWluLm1vZGVsLmNvbmZpZ3VyYXRpb24uY2FsbGJhY2tzLnN1Y2Nlc3ModGhpcy5tYWluLm1vZGVsLmFzc2lnbm1lbnQuaWQoKSk7XG4gICAgICAgIH0qL1xuXG4gICAgICAgIGlmICghU2suZXhlY3V0aW9uUmVwb3J0cy5pbnN0cnVjdG9yLnNjcm9sbGluZykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLm1haW4uY29tcG9uZW50cy5jb25zb2xlLnNjcm9sbFRvQm90dG9tKCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmYWlsdXJlKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiT25FdmFsIGZhaWx1cmVcIiwgZXJyb3IpO1xuICAgICAgICBsZXQgcmVwb3J0ID0gdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5yZXBvcnRzO1xuICAgICAgICBpZiAoZXJyb3IudHAkbmFtZSA9PT0gXCJHcmFjZWZ1bEV4aXRcIikge1xuICAgICAgICAgICAgcmVwb3J0W1wiaW5zdHJ1Y3RvclwiXVtcInN1Y2Nlc3NcIl0gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5tYWluLm1vZGVsLnN0YXR1cy5vbkV4ZWN1dGlvbihTdGF0dXNTdGF0ZS5SRUFEWSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1haW4ubW9kZWwuc3RhdHVzLm9uRXhlY3V0aW9uKFN0YXR1c1N0YXRlLkZBSUxFRCk7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKHJlcG9ydFtcImluc3RydWN0b3JcIl1bXCJjb2RlXCJdKTtcbiAgICAgICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLmZlZWRiYWNrLnByZXNlbnRJbnRlcm5hbEVycm9yKGVycm9yLCB0aGlzLmZpbGVuYW1lKTtcbiAgICAgICAgICAgIC8vcmVwb3J0W1wiaW5zdHJ1Y3RvclwiXVtcInN1Y2Nlc3NcIl0gPSBmYWxzZTtcbiAgICAgICAgICAgIC8vcmVwb3J0W1wiaW5zdHJ1Y3RvclwiXVtcImVycm9yXCJdID0gZXJyb3I7XG4gICAgICAgICAgICAvL1RPRE86IHJlcG9ydFtcImluc3RydWN0b3JcIl1bXCJsaW5lX29mZnNldFwiXSA9IGxpbmVPZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgLy9UT0RPOiBhZnRlcihlcnJvcik7XG4gICAgfVxufSIsImltcG9ydCB7aW5kZW50fSBmcm9tIFwiLi4vdXRpbGl0aWVzXCI7XG5pbXBvcnQge1N0YXR1c1N0YXRlfSBmcm9tIFwiLi4vc2VydmVyXCI7XG5pbXBvcnQge0luc3RydWN0b3JDb25maWd1cmF0aW9ufSBmcm9tIFwiLi9pbnN0cnVjdG9yXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kQWN0dWFsSW5zdHJ1Y3Rvck9mZnNldChpbnN0cnVjdG9yQ29kZSkge1xuICAgIGNvbnN0IGluZGV4ID0gaW5zdHJ1Y3RvckNvZGUuaW5kZXhPZihJTlNUUlVDVE9SX01BUktFUik7XG4gICAgY29uc3QgYmVmb3JlID0gaW5zdHJ1Y3RvckNvZGUuc2xpY2UoMCwgaW5kZXgpO1xuICAgIGNvbnN0IG1hdGNoID0gYmVmb3JlLm1hdGNoKE5FV19MSU5FX1JFR0VYKTtcbiAgICByZXR1cm4gbWF0Y2ggPyAoMSttYXRjaC5sZW5ndGgpIDogMDtcbn1cblxuZXhwb3J0IGNvbnN0IElOU1RSVUNUT1JfTUFSS0VSID0gXCIjIyNSdW4gdGhlIGFjdHVhbCBpbnN0cnVjdG9yIGNvZGUjIyNcIjtcbmV4cG9ydCBjb25zdCBORVdfTElORV9SRUdFWCA9IC9cXG4vZztcbi8qKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgV1JBUF9JTlNUUlVDVE9SX0NPREUgPSBmdW5jdGlvbiAoc3R1ZGVudEZpbGVzLCBpbnN0cnVjdG9yQ29kZSwgcXVpY2ssIGlzU2FmZSkge1xuICAgIGxldCBzYWZlQ29kZSA9IEpTT04uc3RyaW5naWZ5KHN0dWRlbnRGaWxlcyk7XG4gICAgbGV0IHNraXBfdGlmYSA9IHF1aWNrID8gXCJUcnVlXCI6IFwiRmFsc2VcIjtcblxuICAgIC8vIFRPRE86IEFkZCBpbiBTay5xdWV1ZWRJbnB1dCB0byBiZSBwYXNzZWQgaW5cblxuICAgIHJldHVybiBgXG4jIFN1cHBvcnQgb3VyIHN5c21vZHVsZXMgaGFjayBieSBjbGVhcmluZyBvdXQgYW55IGxpbmdlcmluZyBvbGQgZGF0YVxuZnJvbSBwZWRhbC5jb3JlLnJlcG9ydCBpbXBvcnQgTUFJTl9SRVBPUlRcbk1BSU5fUkVQT1JULmNsZWFyKClcblxuZnJvbSBiYWtlcnkgaW1wb3J0IHN0dWRlbnRfdGVzdHNcbnN0dWRlbnRfdGVzdHMucmVzZXQoKVxuXG5mcm9tIHV0aWxpdHkgaW1wb3J0ICpcblxuIyBMb2FkIGluIHNvbWUgY29tbW9ubHkgdXNlZCB0b29sc1xuZnJvbSBwZWRhbC5jYWl0LmNhaXRfYXBpIGltcG9ydCBwYXJzZV9wcm9ncmFtXG5mcm9tIHBlZGFsLnNhbmRib3guY29tbWFuZHMgaW1wb3J0ICpcbmZyb20gcGVkYWwuY29yZS5jb21tYW5kcyBpbXBvcnQgKlxuXG5mcm9tIHBlZGFsLmVudmlyb25tZW50cy5ibG9ja3B5IGltcG9ydCBzZXR1cF9lbnZpcm9ubWVudFxuIyBEbyB3ZSBleGVjdXRlIHN0dWRlbnQncyBjb2RlP1xuc2tpcF9ydW4gPSBnZXRfbW9kZWxfaW5mbygnYXNzaWdubWVudC5zZXR0aW5ncy5kaXNhYmxlSW5zdHJ1Y3RvclJ1bicpXG5pbnB1dHMgPSBOb25lIGlmIHNraXBfcnVuIGVsc2UgZ2V0X21vZGVsX2luZm8oJ2V4ZWN1dGlvbi5pbnB1dCcpXG5cbiMgU2V0IHRoZSBzZWVkIHRvIHRoZSBzdWJtaXNzaW9uIElEIGJ5IGRlZmF1bHQ/XG5mcm9tIHBlZGFsLnF1ZXN0aW9ucyBpbXBvcnQgc2V0X3NlZWRcbnNldF9zZWVkKHN0cihnZXRfbW9kZWxfaW5mbyhcInN1Ym1pc3Npb24uaWRcIikpKVxuXG4jIEluaXRpYWxpemUgdGhlIEJsb2NrUHkgZW52aXJvbm1lbnRcbnBlZGFsID0gc2V0dXBfZW52aXJvbm1lbnQoc2tpcF90aWZhPSR7c2tpcF90aWZhfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpcF9ydW49c2tpcF9ydW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0cz1pbnB1dHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1haW5fZmlsZT0nYW5zd2VyLnB5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXM9JHtzYWZlQ29kZX0pXG5zdHVkZW50ID0gcGVkYWwuZmllbGRzWydzdHVkZW50J11cblxuIyBUT0RPOiBSZWZhY3RvciByZXNvbHZlciB0byByZXR1cm4gaW5zdHJ1Y3Rpb25zXG4jIE1vbmtleS1wYXRjaCBxdWVzdGlvbnNcbiNmcm9tIHBlZGFsIGltcG9ydCBxdWVzdGlvbnNcbiNxdWVzdGlvbnMuc2hvd19xdWVzdGlvbiA9IHNldF9pbnN0cnVjdGlvbnNcblxuJHtJTlNUUlVDVE9SX01BUktFUn1cbiR7aW5zdHJ1Y3RvckNvZGV9XG5cbiMgUmVzb2x2ZSBldmVyeXRoaW5nXG5mcm9tIHBlZGFsLnJlc29sdmVycy5zaW1wbGUgaW1wb3J0IHJlc29sdmVcbmZpbmFsID0gcmVzb2x2ZSgpXG5TVUNDRVNTID0gZmluYWwuc3VjY2Vzc1xuU0NPUkUgPSBmaW5hbC5zY29yZVxuQ0FURUdPUlkgPSBmaW5hbC5jYXRlZ29yeVxuTEFCRUwgPSBmaW5hbC50aXRsZVxuTUVTU0FHRSA9IGZpbmFsLm1lc3NhZ2VcbkRBVEEgPSBmaW5hbC5kYXRhXG5ISURFID0gZmluYWwuaGlkZV9jb3JyZWN0bmVzc1xuXG4jIEhhbmRsZSBxdWVzdGlvbnNcbmlmIGZpbmFsLmluc3RydWN0aW9uczpcbiAgICBzZXRfaW5zdHJ1Y3Rpb25zKGZpbmFsLmluc3RydWN0aW9uc1stMV0ubWVzc2FnZSlcbiAgICBcbiMgSGFuZGxlIHBvc2l0aXZlIGZlZWRiYWNrXG5QT1NJVElWRSA9IFtdXG5mb3IgcG9zaXRpdmUgaW4gZmluYWwucG9zaXRpdmVzOlxuICAgIG1lc3NhZ2UgPSBwb3NpdGl2ZS5tZXNzYWdlXG4gICAgaWYgbm90IHBvc2l0aXZlOlxuICAgICAgICBtZXNzYWdlID0gcG9zaXRpdmUuZWxzZV9tZXNzYWdlXG4gICAgUE9TSVRJVkUuYXBwZW5kKHtcbiAgICAgICAgXCJ0aXRsZVwiOiBwb3NpdGl2ZS50aXRsZSxcbiAgICAgICAgXCJsYWJlbFwiOiBwb3NpdGl2ZS5sYWJlbCxcbiAgICAgICAgXCJtZXNzYWdlXCI6IG1lc3NhZ2VcbiAgICB9KVxuICAgIFxuIyBIYW5kbGUgc3lzdGVtIG1lc3NhZ2VzXG5mb3Igc3lzdGVtIGluIGZpbmFsLnN5c3RlbXM6XG4gICAgaWYgc3lzdGVtLmxhYmVsID09ICdsb2cnOlxuICAgICAgICBjb25zb2xlX2xvZyhzeXN0ZW0udGl0bGUsIHN5c3RlbS5tZXNzYWdlKTtcbiAgICBpZiBzeXN0ZW0ubGFiZWwgPT0gJ2RlYnVnJzpcbiAgICAgICAgY29uc29sZV9kZWJ1ZyhzeXN0ZW0udGl0bGUsIHN5c3RlbS5tZXNzYWdlKTtcblxuYDtcbn07XG5cbmV4cG9ydCBjbGFzcyBPblJ1bkNvbmZpZ3VyYXRpb24gZXh0ZW5kcyBJbnN0cnVjdG9yQ29uZmlndXJhdGlvbiB7XG4gICAgdXNlKGVuZ2luZSkge1xuICAgICAgICBzdXBlci51c2UoZW5naW5lKTtcbiAgICAgICAgdGhpcy5maWxlbmFtZSA9IFwiX2luc3RydWN0b3Iub25fcnVuXCI7XG4gICAgICAgIHRoaXMuY29kZSA9IHRoaXMubWFpbi5tb2RlbC5hc3NpZ25tZW50Lm9uUnVuKCk7XG5cbiAgICAgICAgbGV0IGRpc2FibGVUaWZhID0gdGhpcy5tYWluLm1vZGVsLmFzc2lnbm1lbnQuc2V0dGluZ3MuZGlzYWJsZVRpZmEoKTtcbiAgICAgICAgLy8gUHV0IHRoZSBpbnB1dCBpbmRleCBiYWNrIHRvIHRoZSBmcm9udCwgc28gd2UgY2FuIHJlcGxheSBpbnB1dHNcbiAgICAgICAgdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5pbnB1dEluZGV4KDEpO1xuXG4gICAgICAgIGxldCByZXBvcnQgPSB0aGlzLm1haW4ubW9kZWwuZXhlY3V0aW9uLnJlcG9ydHM7XG4gICAgICAgIC8vbGV0IHN0dWRlbnRDb2RlU2FmZSA9IHRoaXMubWFpbi5tb2RlbC5zdWJtaXNzaW9uLmNvZGUoKTtcbiAgICAgICAgbGV0IHN0dWRlbnRGaWxlcyA9IHRoaXMuZ2V0QWxsU3R1ZGVudEZpbGVzKCk7XG4gICAgICAgIHRoaXMuZHVtbXlPdXRTYW5kYm94KCk7XG4gICAgICAgIGxldCBpbnN0cnVjdG9yQ29kZSA9IHRoaXMuY29kZTtcbiAgICAgICAgbGV0IGlzU2FmZSA9ICFyZXBvcnRbXCJwYXJzZXJcIl0uZW1wdHkgJiYgcmVwb3J0W1widmVyaWZpZXJcIl0uc3VjY2VzcztcbiAgICAgICAgaW5zdHJ1Y3RvckNvZGUgPSBXUkFQX0lOU1RSVUNUT1JfQ09ERShzdHVkZW50RmlsZXMsIGluc3RydWN0b3JDb2RlLCBkaXNhYmxlVGlmYSwgaXNTYWZlKTtcbiAgICAgICAgbGV0IGxpbmVPZmZzZXQgPSBmaW5kQWN0dWFsSW5zdHJ1Y3Rvck9mZnNldChpbnN0cnVjdG9yQ29kZSk7IC8vaW5zdHJ1Y3RvckNvZGUuc3BsaXQoTkVXX0xJTkVfUkVHRVgpLmxlbmd0aDtcbiAgICAgICAgLy9saW5lT2Zmc2V0ID0gMDsgLy9pbnN0cnVjdG9yQ29kZS5zcGxpdChORVdfTElORV9SRUdFWCkubGVuZ3RoIC0gbGluZU9mZnNldCAtIDQ7XG4gICAgICAgIHJlcG9ydFtcImluc3RydWN0b3JcIl0gPSB7XG4gICAgICAgICAgICBcImNvbXBsaW1lbnRzXCI6IFtdLFxuICAgICAgICAgICAgXCJmaWxlbmFtZVwiOiBcIi4vX2luc3RydWN0b3Ivb25fcnVuLnB5XCIsXG4gICAgICAgICAgICBcImNvZGVcIjogaW5zdHJ1Y3RvckNvZGUsXG4gICAgICAgICAgICBcImxpbmVPZmZzZXRcIjogbGluZU9mZnNldFxuICAgICAgICAgICAgLy8nY29tcGxldGUnOiBmYWxzZSAvLyBBY3R1YWxseSwgbGV0J3MgdXNlIHVuZGVmaW5lZCBmb3Igbm93LlxuICAgICAgICB9O1xuICAgICAgICAvKlxuICAgICAgICBUT0RPOiBJbnRlcmVzdGluZyBzaXR1YXRpb24uIElmIHlvdSBoYXZlIGFuIGluc3RydWN0b3ItZmlsZSAobm90IGEgc3R1ZGVudC1maWxlKSxcbiAgICAgICAgdGhlbiBpdCBnZXRzIGltcG9ydGVkIGludG8gc3lzbW9kdWxlcyBhcyBgX2luc3RydWN0b3IuTU9EVUxFX05BTUVgLiBCdXQgdGhlIGluc3RydWN0b3JcbiAgICAgICAgc2NyaXB0IHdpbGwgYXR0ZW1wdCB0byBpbXBvcnQgaXQgYXMgYE1PRFVMRV9OQU1FYCwgYW5kIGZhaWwuIFVOTEVTUyB0aGUgKnN0dWRlbnQqIGhhc1xuICAgICAgICBwcmV2aW91c2x5IGltcG9ydGVkIHRoYXQgbW9kdWxlIHN1Y2Nlc3NmdWxseS4gU28gdGhlcmUncyBhIGNvbW1vbiBjYXNlIGhlcmUgd2hlcmUgdGhlXG4gICAgICAgIHN0dWRlbnRzJyBjb2RlIGZhaWxzIHRvIGltcG9ydCB0aGUgbW9kdWxlIFRIRVJFQlkgYnJlYWtpbmcgdGhlIGluc3RydWN0b3IgY29kZS5cbiAgICAgICAgICovXG5cbiAgICAgICAgdGhpcy5jb2RlID0gaW5zdHJ1Y3RvckNvZGU7XG5cbiAgICAgICAgU2sucmV0YWluR2xvYmFscyA9IGZhbHNlO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHN1Y2Nlc3MobW9kdWxlKSB7XG4gICAgICAgIC8vIFRPRE8gTG9nZ2luZyEhISFcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIk9uUnVuIHN1Y2Nlc3NcIik7XG4gICAgICAgIC8vIFRPRE86IEFjdHVhbGx5IHBhcnNlIHJlc3VsdHNcbiAgICAgICAgdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5pbnN0cnVjdG9yLmdsb2JhbHMgPSBTay5nbG9iYWxzO1xuICAgICAgICB0aGlzLm1haW4ubW9kZWwuZXhlY3V0aW9uLmluc3RydWN0b3Iuc3lzbW9kdWxlcyA9IFNrLnN5c21vZHVsZXM7XG4gICAgICAgIFNrLmdsb2JhbHMgPSB7fTtcbiAgICAgICAgbGV0IHJlc3VsdHMgPSBtb2R1bGUuJGQub25fcnVuLiRkO1xuICAgICAgICB0aGlzLm1haW4uY29tcG9uZW50cy5mZWVkYmFjay5wcmVzZW50RmVlZGJhY2socmVzdWx0cyk7XG4gICAgICAgIHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24ucmVwb3J0c1tcImluc3RydWN0b3JcIl1bXCJzdWNjZXNzXCJdID0gdHJ1ZTtcbiAgICAgICAgbGV0IHN1Y2Nlc3MgPSBTay5mZmkucmVtYXBUb0pzKHJlc3VsdHMuU1VDQ0VTUyk7XG4gICAgICAgIHRoaXMubWFpbi5tb2RlbC5zdWJtaXNzaW9uLmNvcnJlY3Qoc3VjY2VzcyB8fCB0aGlzLm1haW4ubW9kZWwuc3VibWlzc2lvbi5jb3JyZWN0KCkpO1xuICAgICAgICAvLyBDYW5ub3QgZXhjZWVkIDEgcG9pbnQsIGNhbm5vdCBnbyBiZWxvdyAwIHBvaW50c1xuICAgICAgICBsZXQgc2NvcmUgPSBTay5mZmkucmVtYXBUb0pzKHJlc3VsdHMuU0NPUkUpO1xuICAgICAgICBzY29yZSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHNjb3JlKSk7XG4gICAgICAgIGxldCBvbGRTY29yZSA9IHRoaXMubWFpbi5tb2RlbC5zdWJtaXNzaW9uLnNjb3JlKCk7XG4gICAgICAgIHNjb3JlID0gTWF0aC5tYXgob2xkU2NvcmUsIHNjb3JlKTtcbiAgICAgICAgdGhpcy5tYWluLm1vZGVsLnN1Ym1pc3Npb24uc2NvcmUoc2NvcmUpO1xuICAgICAgICAvLyBIaWRlIHN0YXR1c1xuICAgICAgICBsZXQgaGlkZSA9IFNrLmZmaS5yZW1hcFRvSnMocmVzdWx0cy5ISURFKTtcbiAgICAgICAgLy8gQW5kIGZpcmUgdGhlIHJlc3VsdCFcbiAgICAgICAgdGhpcy5tYWluLmNvbXBvbmVudHMuc2VydmVyLnVwZGF0ZVN1Ym1pc3Npb24oc2NvcmUsIHN1Y2Nlc3MsIGhpZGUsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5tYWluLm1vZGVsLnN0YXR1cy5vbkV4ZWN1dGlvbihTdGF0dXNTdGF0ZS5SRUFEWSk7XG4gICAgICAgIC8vYWZ0ZXIobW9kdWxlKTtcblxuICAgICAgICAvKmlmIChzdWNjZXNzICYmIHRoaXMubWFpbi5tb2RlbC5jb25maWd1cmF0aW9uLmNhbGxiYWNrcy5zdWNjZXNzKSB7XG4gICAgICAgICAgICB0aGlzLm1haW4ubW9kZWwuY29uZmlndXJhdGlvbi5jYWxsYmFja3Muc3VjY2Vzcyh0aGlzLm1haW4ubW9kZWwuYXNzaWdubWVudC5pZCgpKTtcbiAgICAgICAgfSovXG5cbiAgICAgICAgaWYgKCFTay5leGVjdXRpb25SZXBvcnRzLmluc3RydWN0b3Iuc2Nyb2xsaW5nKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLmNvbnNvbGUuc2Nyb2xsVG9Cb3R0b20oKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZhaWx1cmUoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk9uUnVuIGZhaWx1cmVcIiwgZXJyb3IpO1xuICAgICAgICBsZXQgcmVwb3J0ID0gdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5yZXBvcnRzO1xuICAgICAgICBpZiAoZXJyb3IudHAkbmFtZSA9PT0gXCJHcmFjZWZ1bEV4aXRcIikge1xuICAgICAgICAgICAgcmVwb3J0W1wiaW5zdHJ1Y3RvclwiXVtcInN1Y2Nlc3NcIl0gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5tYWluLm1vZGVsLnN0YXR1cy5vbkV4ZWN1dGlvbihTdGF0dXNTdGF0ZS5SRUFEWSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1haW4ubW9kZWwuc3RhdHVzLm9uRXhlY3V0aW9uKFN0YXR1c1N0YXRlLkZBSUxFRCk7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKHJlcG9ydFtcImluc3RydWN0b3JcIl1bXCJjb2RlXCJdKTtcbiAgICAgICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLmZlZWRiYWNrLnByZXNlbnRJbnRlcm5hbEVycm9yKGVycm9yLCB0aGlzLmZpbGVuYW1lKTtcbiAgICAgICAgICAgIC8vcmVwb3J0W1wiaW5zdHJ1Y3RvclwiXVtcInN1Y2Nlc3NcIl0gPSBmYWxzZTtcbiAgICAgICAgICAgIC8vcmVwb3J0W1wiaW5zdHJ1Y3RvclwiXVtcImVycm9yXCJdID0gZXJyb3I7XG4gICAgICAgICAgICAvL1RPRE86IHJlcG9ydFtcImluc3RydWN0b3JcIl1bXCJsaW5lX29mZnNldFwiXSA9IGxpbmVPZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgLy9UT0RPOiBhZnRlcihlcnJvcik7XG4gICAgfVxufVxuXG5cbi8qXG4jIFRoZSBmb2xsb3dpbmcgaXMgdGhlIG9sZCBpbnN0cnVjdG9yIGNvZGUsIGxlYXZpbmcgaXQgaGVyZSBmb3Igbm93LlxuXG5mcm9tIHBlZGFsLmNvcmUucmVwb3J0IGltcG9ydCBNQUlOX1JFUE9SVFxuIyBTdXBwb3J0IG91ciBzeXNtb2R1bGVzIGhhY2sgYnkgY2xlYXJpbmcgb3V0IGFueSBsaW5nZXJpbmcgb2xkIGRhdGFcbk1BSU5fUkVQT1JULmNsZWFyKClcbmZyb20gcGVkYWwuY29yZS5jb21tYW5kcyBpbXBvcnQgY29udGV4dHVhbGl6ZV9yZXBvcnRcbmNvbnRleHR1YWxpemVfcmVwb3J0KCR7c2FmZUNvZGV9LCBcImFuc3dlci5weVwiKVxuJHt0aWZhQW5hbHlzaXN9XG5mcm9tIHBlZGFsLnNhbmRib3guc2FuZGJveCBpbXBvcnQgU2FuZGJveFxuZnJvbSBwZWRhbC5zYW5kYm94IGltcG9ydCBjb21wYXRpYmlsaXR5XG5mcm9tIHV0aWxpdHkgaW1wb3J0ICpcbnN0dWRlbnQgPSBNQUlOX1JFUE9SVFsnc2FuZGJveCddWydydW4nXSA9IFNhbmRib3goKVxuc3R1ZGVudC5yZXBvcnRfZXhjZXB0aW9uc19tb2RlID0gVHJ1ZVxubG9nKGdldF9tb2RlbF9pbmZvKCdleGVjdXRpb24uaW5wdXQnKSlcbnN0dWRlbnQuc2V0X2lucHV0KGdldF9tb2RlbF9pbmZvKCdleGVjdXRpb24uaW5wdXQnKSlcbmlmIG5vdCBnZXRfbW9kZWxfaW5mbygnYXNzaWdubWVudC5zZXR0aW5ncy5kaXNhYmxlSW5zdHJ1Y3RvclJ1bicpOlxuICAgIGNvbXBhdGliaWxpdHkucnVuX3N0dWRlbnQocmFpc2VfZXhjZXB0aW9ucz1GYWxzZSlcbiNsb2coc3R1ZGVudC5kYXRhKVxuI3N0dWRlbnQgPSBnZXRfc3R1ZGVudF9kYXRhKClcbiNlcnJvciwgcG9zaXRpb24gPSBnZXRfc3R1ZGVudF9lcnJvcigpXG4jY29tcGF0aWJpbGl0eS5yYWlzZV9leGNlcHRpb24oZXJyb3IsIHBvc2l0aW9uKVxucnVuX3N0dWRlbnQgPSBjb21wYXRpYmlsaXR5LnJ1bl9zdHVkZW50XG5yZXNldF9vdXRwdXQgPSBjb21wYXRpYmlsaXR5LnJlc2V0X291dHB1dFxucXVldWVfaW5wdXQgPSBjb21wYXRpYmlsaXR5LnF1ZXVlX2lucHV0XG5nZXRfb3V0cHV0ID0gY29tcGF0aWJpbGl0eS5nZXRfb3V0cHV0XG5nZXRfcGxvdHMgPSBjb21wYXRpYmlsaXR5LmdldF9wbG90c1xuY29tcGF0aWJpbGl0eS50cmFjZV9saW5lcyA9IHRyYWNlX2xpbmVzXG5mcm9tIHBlZGFsIGltcG9ydCBxdWVzdGlvbnNcbnF1ZXN0aW9ucy5zaG93X3F1ZXN0aW9uID0gc2V0X2luc3RydWN0aW9uc1xuIyBUT0RPOiBSZW1vdmUgdGhlIG5lZWQgZm9yIHRoaXMgaGFjayFcbmRlZiBjYXB0dXJlX291dHB1dChmdW5jLCAqYXJncyk6XG4gICByZXNldF9vdXRwdXQoKVxuICAgc3R1ZGVudC5jYWxsKGZ1bmMuX19uYW1lX18sICphcmdzKVxuICAgcmV0dXJuIGdldF9vdXRwdXQoKVxuY29tcGF0aWJpbGl0eS5jYXB0dXJlX291dHB1dCA9IGNhcHR1cmVfb3V0cHV0XG5cbmZyb20gcGVkYWwuY2FpdC5jYWl0X2FwaSBpbXBvcnQgcGFyc2VfcHJvZ3JhbVxuJHtpbnN0cnVjdG9yQ29kZX1cbmZyb20gcGVkYWwucmVzb2x2ZXJzIGltcG9ydCBzaW1wbGVcbmZpbmFsID0gc2ltcGxlLnJlc29sdmUoKVxuU1VDQ0VTUyA9IGZpbmFsLnN1Y2Nlc3NcblNDT1JFID0gZmluYWwuc2NvcmVcbkNBVEVHT1JZID0gZmluYWwuY2F0ZWdvcnlcbkxBQkVMID0gZmluYWwudGl0bGVcbk1FU1NBR0UgPSBmaW5hbC5tZXNzYWdlXG5EQVRBID0gZmluYWwuZGF0YVxuSElERSA9IGZpbmFsLmhpZGVfY29ycmVjdG5lc3NcblxuICovIiwiaW1wb3J0IHtPblJ1bkNvbmZpZ3VyYXRpb259IGZyb20gXCIuL29uX3J1blwiO1xuXG5leHBvcnQgY2xhc3MgT25TYW1wbGVDb25maWd1cmF0aW9uIGV4dGVuZHMgT25SdW5Db25maWd1cmF0aW9uIHtcbiAgICB1c2UoZW5naW5lKSB7XG4gICAgICAgIHN1cGVyLnVzZShlbmdpbmUpO1xuICAgICAgICB0aGlzLmZpbGVuYW1lID0gXCJvbl9ydW4ucHlcIjtcbiAgICAgICAgdGhpcy5jb2RlID0gdGhpcy5tYWluLm1vZGVsLmFzc2lnbm1lbnQub25SdW4oKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59IiwiaW1wb3J0IHtTdHVkZW50Q29uZmlndXJhdGlvbn0gZnJvbSBcIi4vc3R1ZGVudFwiO1xuaW1wb3J0IHtTdGF0dXNTdGF0ZX0gZnJvbSBcIi4uL3NlcnZlclwiO1xuXG5leHBvcnQgY2xhc3MgUnVuQ29uZmlndXJhdGlvbiBleHRlbmRzIFN0dWRlbnRDb25maWd1cmF0aW9uIHtcbiAgICB1c2UoZW5naW5lKSB7XG4gICAgICAgIHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24uZmVlZGJhY2subWVzc2FnZShcIlJ1bm5pbmcuLi5cIik7XG4gICAgICAgIHRoaXMuZmlsZW5hbWUgPSBcImFuc3dlclwiO1xuICAgICAgICB0aGlzLmNvZGUgPSB0aGlzLm1haW4ubW9kZWwudWkuZmlsZXMuZ2V0U3R1ZGVudENvZGUoKTtcbiAgICAgICAgaWYgKHRoaXMubWFpbi5tb2RlbC5hc3NpZ25tZW50LnNldHRpbmdzLmRpc2FibGVTdHVkZW50UnVuKCkpIHtcbiAgICAgICAgICAgIHRoaXMuY29kZSA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy90aGlzLmNvZGUgPSB0aGlzLm1haW4ubW9kZWwuc3VibWlzc2lvbi5jb2RlKCk7XG4gICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLnNlcnZlci5zYXZlRmlsZShcImFuc3dlci5weVwiLCB0aGlzLm1haW4ubW9kZWwuc3VibWlzc2lvbi5jb2RlKCksIG51bGwpO1xuICAgICAgICB0aGlzLm1haW4uY29tcG9uZW50cy5zZXJ2ZXIubG9nRXZlbnQoXCJDb21waWxlXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiYW5zd2VyLnB5XCIpO1xuICAgICAgICAvL2NvbnNvbGUubG9nKHRoaXMuY29kZSk7XG4gICAgICAgIHN1cGVyLnVzZShlbmdpbmUpO1xuXG4gICAgICAgIGVuZ2luZS5yZXNldCgpO1xuICAgICAgICB0aGlzLnVwZGF0ZVBhcnNlKCk7XG5cbiAgICAgICAgdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5yZXBvcnRzW1widmVyaWZpZXJcIl0gPSB7XG4gICAgICAgICAgICBcInN1Y2Nlc3NcIjogQm9vbGVhbih0aGlzLmNvZGUudHJpbSgpKSxcbiAgICAgICAgICAgIFwiY29kZVwiOiB0aGlzLmNvZGVcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodHlwZW9mIFNrLmVudmlyb24gPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgU2suZW52aXJvbiA9IG5ldyBTay5idWlsdGluLmRpY3QoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcmludGVyVGFnID0gdGhpcy5tYWluLmNvbXBvbmVudHMuY29uc29sZS5wcmludGVyVGFnLFxuICAgICAgICAgICAgd2lkdGggPSBwcmludGVyVGFnLndpZHRoKCktNTAsXG4gICAgICAgICAgICBoZWlnaHQgPSBNYXRoLm1heCgzMDAsIHByaW50ZXJUYWcuaGVpZ2h0KCktNTApO1xuICAgICAgICBTay5lbnZpcm9uLnNldCRpdGVtKG5ldyBTay5idWlsdGluLnN0cihcIkRFU0lHTkVSX1dJTkRPV19XSURUSFwiKSwgbmV3IFNrLmJ1aWx0aW4uaW50XyhNYXRoLnJvdW5kKHdpZHRoKSkpO1xuICAgICAgICBTay5lbnZpcm9uLnNldCRpdGVtKG5ldyBTay5idWlsdGluLnN0cihcIkRFU0lHTkVSX1dJTkRPV19IRUlHSFRcIiksIG5ldyBTay5idWlsdGluLmludF8oTWF0aC5yb3VuZChoZWlnaHQpKSk7XG5cbiAgICAgICAgU2sucmV0YWluR2xvYmFscyA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuY2xlYXJJbnB1dCgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHN1Y2Nlc3MobW9kdWxlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiUnVuIHN1Y2Nlc3NcIik7XG4gICAgICAgIGxldCBtZXNzYWdlID0ge1xuICAgICAgICAgICAgXCJpbnB1dHNcIjogdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5pbnB1dCgpLmpvaW4oXCJcXG5cIiksXG4gICAgICAgICAgICBcIm91dHB1dHNcIjogdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5vdXRwdXQoKS5tYXAobGluZSA9PiBsaW5lLmNvbnRlbnQpLmpvaW4oXCJcXG5cIiksXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLnNlcnZlci5sb2dFdmVudChcIlJ1bi5Qcm9ncmFtXCIsIFwiXCIsIFwiXCIsIEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpLCBcImFuc3dlci5weVwiKTtcbiAgICAgICAgdGhpcy5tYWluLm1vZGVsLmRpc3BsYXkuZGlydHlTdWJtaXNzaW9uKGZhbHNlKTtcbiAgICAgICAgdGhpcy5tYWluLmNvbXBvbmVudHMuY29uc29sZS5maW5pc2hUdXJ0bGVzKCk7XG4gICAgICAgIHRoaXMubWFpbi5tb2RlbC5zdGF0dXMub25FeGVjdXRpb24oU3RhdHVzU3RhdGUuUkVBRFkpO1xuICAgICAgICB0aGlzLm1haW4ubW9kZWwuZXhlY3V0aW9uLnN0dWRlbnQuZ2xvYmFscyhTay5nbG9iYWxzKTtcbiAgICAgICAgU2suZ2xvYmFscyA9IHt9O1xuICAgICAgICBsZXQgcmVwb3J0ID0gdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5yZXBvcnRzO1xuICAgICAgICBsZXQgZmlsZW5hbWUgPSB0aGlzLmZpbGVuYW1lO1xuICAgICAgICB0aGlzLm1haW4ubW9kZWwuZXhlY3V0aW9uLnN0dWRlbnQucmVzdWx0cyA9IG1vZHVsZTtcbiAgICAgICAgaWYgKCF0aGlzLm1haW4ubW9kZWwuYXNzaWdubWVudC5zZXR0aW5ncy5oaWRlRXZhbHVhdGUoKSkge1xuICAgICAgICAgICAgdGhpcy5tYWluLmNvbXBvbmVudHMuY29uc29sZS5iZWdpbkV2YWwoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zdGVwKG1vZHVsZS4kZCwgbW9kdWxlLiRkLC0xLCAwLCBmaWxlbmFtZSArIFwiLnB5XCIpO1xuICAgICAgICAgICAgdGhpcy5sYXN0U3RlcCgpO1xuICAgICAgICAgICAgcmVwb3J0W1wic3R1ZGVudFwiXSA9IHtcbiAgICAgICAgICAgICAgICBcInN1Y2Nlc3NcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcInRyYWNlXCI6IHRoaXMuZW5naW5lLmV4ZWN1dGlvbkJ1ZmZlci50cmFjZSxcbiAgICAgICAgICAgICAgICBcImxpbmVzXCI6IHRoaXMuZW5naW5lLmV4ZWN1dGlvbkJ1ZmZlci50cmFjZS5tYXAoeCA9PiB4LmxpbmUpLFxuICAgICAgICAgICAgICAgIFwicmVhbExpbmVzXCI6IHRoaXMuZW5naW5lLmV4ZWN1dGlvbkJ1ZmZlci50cmFjZS5maWx0ZXIoeCA9PiAheC5pc0RvY3N0cmluZykubWFwKHggPT4geC5saW5lKSxcbiAgICAgICAgICAgICAgICBcInJlc3VsdHNcIjogbW9kdWxlLFxuICAgICAgICAgICAgICAgIFwib3V0cHV0XCI6IHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24ub3V0cHV0LFxuICAgICAgICAgICAgICAgIFwiaW5wdXRcIjogdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5pbnB1dCxcbiAgICAgICAgICAgICAgICBcImNhbGxzXCI6IHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24uc3R1ZGVudC5jYWxscyxcbiAgICAgICAgICAgICAgICBcInRyYWNpbmdcIjogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZhaWx1cmUoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlJ1biBmYWlsdXJlXCIsIGVycm9yKTtcbiAgICAgICAgdGhpcy5tYWluLm1vZGVsLnN0YXR1cy5vbkV4ZWN1dGlvbihTdGF0dXNTdGF0ZS5GQUlMRUQpO1xuICAgICAgICBsZXQgcmVwb3J0ID0gdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5yZXBvcnRzO1xuICAgICAgICBpZiAocmVwb3J0LnBhcnNlci5zdWNjZXNzICYmIHJlcG9ydC52ZXJpZmllci5zdWNjZXNzKSB7XG4gICAgICAgICAgICB0aGlzLm1haW4uY29tcG9uZW50cy5zZXJ2ZXIubG9nRXZlbnQoXCJDb21waWxlLkVycm9yXCIsIFwiXCIsIFwiXCIsIGVycm9yLnRvU3RyaW5nKCksIFwiYW5zd2VyLnB5XCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tYWluLmNvbXBvbmVudHMuc2VydmVyLmxvZ0V2ZW50KFwiUnVuLlByb2dyYW1cIiwgXCJQcm9ncmFtRXJyb3JPdXRwdXRcIiwgXCJcIiwgZXJyb3IudG9TdHJpbmcoKSwgXCJhbnN3ZXIucHlcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYXN0U3RlcCgpO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgcmVwb3J0W1wic3R1ZGVudFwiXSA9IHtcbiAgICAgICAgICAgICAgICBcInN1Y2Nlc3NcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgXCJlcnJvclwiOiBlcnJvcixcbiAgICAgICAgICAgICAgICBcInRyYWNlXCI6IHRoaXMuZW5naW5lLmV4ZWN1dGlvbkJ1ZmZlci50cmFjZSxcbiAgICAgICAgICAgICAgICBcImxpbmVzXCI6IHRoaXMuZW5naW5lLmV4ZWN1dGlvbkJ1ZmZlci50cmFjZS5tYXAoeCA9PiB4LmxpbmUpLFxuICAgICAgICAgICAgICAgIFwicmVhbExpbmVzXCI6IHRoaXMuZW5naW5lLmV4ZWN1dGlvbkJ1ZmZlci50cmFjZS5maWx0ZXIoeCA9PiAheC5pc0RvY3N0cmluZykubWFwKHggPT4geC5saW5lKSxcbiAgICAgICAgICAgICAgICBcImlucHV0XCI6IHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24uaW5wdXQsXG4gICAgICAgICAgICAgICAgXCJjYWxsc1wiOiB0aGlzLm1haW4ubW9kZWwuZXhlY3V0aW9uLnN0dWRlbnQuY2FsbHMsXG4gICAgICAgICAgICAgICAgXCJ0cmFjaW5nXCI6IFtdXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG59IiwiaW1wb3J0IHtTdHVkZW50Q29uZmlndXJhdGlvbn0gZnJvbSBcIi4vc3R1ZGVudFwiO1xuXG5leHBvcnQgY2xhc3MgU2FtcGxlQ29uZmlndXJhdGlvbiBleHRlbmRzIFN0dWRlbnRDb25maWd1cmF0aW9uIHtcbiAgICB1c2UoZW5naW5lKSB7XG4gICAgICAgIHN1cGVyLnVzZShlbmdpbmUpO1xuICAgICAgICAvLyBUT0RPOiBGaXggdG8gYmUgdGhlIGN1cnJlbnQgc2FtcGxlIHN1Ym1pc3Npb25cbiAgICAgICAgdGhpcy5maWxlbmFtZSA9IFwiYW5zd2VyLnB5XCI7XG4gICAgICAgIHRoaXMuY29kZSA9IFwicHJpbnQoJ05vdCByZWFkeSB5ZXQhJylcIjtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59IiwiaW1wb3J0IHtDb25maWd1cmF0aW9uLCBFTVBUWV9NT0RVTEV9IGZyb20gXCIuL2NvbmZpZ3VyYXRpb25zXCI7XG5cbmV4cG9ydCBjbGFzcyBTdHVkZW50Q29uZmlndXJhdGlvbiBleHRlbmRzIENvbmZpZ3VyYXRpb24ge1xuICAgIHVzZShlbmdpbmUpIHtcbiAgICAgICAgc3VwZXIudXNlKGVuZ2luZSk7XG4gICAgICAgIC8vIExpbWl0IGV4ZWN1dGlvbiB0byA0IHNlY29uZHNcbiAgICAgICAgbGV0IHNldHRpbmdzID0gdGhpcy5tYWluLm1vZGVsLnNldHRpbmdzO1xuICAgICAgICBTay5leGVjTGltaXRGdW5jdGlvbiA9ICgpID0+XG4gICAgICAgICAgICB0aGlzLm1haW4ubW9kZWwuYXNzaWdubWVudC5zZXR0aW5ncy5kaXNhYmxlVGltZW91dCgpID8gSW5maW5pdHkgOiA1MDAwO1xuICAgICAgICBTay5leGVjTGltaXQgPSBTay5leGVjTGltaXRGdW5jdGlvbigpO1xuICAgICAgICAvLyBTdGVwcGVyISBFeGVjdXRlZCBhZnRlciBldmVyeSBzdGF0ZW1lbnQuXG4gICAgICAgIFNrLmFmdGVyU2luZ2xlRXhlY3V0aW9uID0gdGhpcy5zdGVwLmJpbmQodGhpcyk7XG5cbiAgICAgICAgLy8gVW5tdXRlIGV2ZXJ5dGhpbmdcbiAgICAgICAgdGhpcy5tYWluLm1vZGVsLmRpc3BsYXkubXV0ZVByaW50ZXIoZmFsc2UpO1xuXG4gICAgICAgIC8vIEZ1bmN0aW9uIHRvIGNhbGwgYWZ0ZXIgZWFjaCBzdGVwXG4gICAgICAgIC8vIGFmdGVyU2luZ2xlRXhlY3V0aW9uXG5cbiAgICAgICAgU2suYnVpbHRpbkZpbGVzLmZpbGVzW1wic3JjL2xpYi91dGlsaXR5L19faW5pdF9fLmpzXCJdID0gRU1QVFlfTU9EVUxFO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG9wZW5GaWxlKGZpbGVuYW1lKSB7XG4gICAgICAgIGxldCBmb3VuZCA9IHRoaXMubWFpbi5jb21wb25lbnRzLmZpbGVTeXN0ZW0uc2VhcmNoRm9yRmlsZShmaWxlbmFtZSwgdHJ1ZSk7XG4gICAgICAgIC8vY29uc29sZS5sb2coZmlsZW5hbWUsIGZvdW5kKTtcbiAgICAgICAgaWYgKGZvdW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChTay5idWlsdGluRmlsZXMgJiYgU2suYnVpbHRpbkZpbGVzW1wiZmlsZXNcIl1bZmlsZW5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gU2suYnVpbHRpbkZpbGVzW1wiZmlsZXNcIl1bZmlsZW5hbWVdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU2suYnVpbHRpbi5PU0Vycm9yKFwiRmlsZSBub3QgZm91bmQ6IFwiICsgZmlsZW5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZvdW5kLmNvbnRlbnRzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpbXBvcnRGaWxlKGZpbGVuYW1lKSB7XG4gICAgICAgIGlmICh0aGlzLmlzRm9yYmlkZGVuKGZpbGVuYW1lKSkge1xuICAgICAgICAgICAgdGhyb3cgXCJGaWxlIG5vdCBhY2Nlc3NpYmxlOiAnXCIgKyBmaWxlbmFtZSArIFwiJ1wiO1xuICAgICAgICB9IGVsc2UgaWYgKGZpbGVuYW1lID09PSBcIi4vYW5zd2VyLnB5XCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1haW4ubW9kZWwuc3VibWlzc2lvbi5jb2RlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoU2suYnVpbHRpbkZpbGVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBTay5idWlsdGluLk9TRXJyb3IoXCJCdWlsdC1pbiBtb2R1bGVzIG5vdCBhY2Nlc3NpYmxlLlwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChTay5idWlsdGluRmlsZXNbXCJmaWxlc1wiXVtmaWxlbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIFNrLmJ1aWx0aW5GaWxlc1tcImZpbGVzXCJdW2ZpbGVuYW1lXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBmb3VuZCA9IHRoaXMubWFpbi5jb21wb25lbnRzLmZpbGVTeXN0ZW0uc2VhcmNoRm9yRmlsZShmaWxlbmFtZSwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAoZm91bmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBTay5idWlsdGluLk9TRXJyb3IoXCJGaWxlIG5vdCBmb3VuZDogJ1wiK2ZpbGVuYW1lICsgXCInXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm91bmQuY29udGVudHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlucHV0KHByb21wdE1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFpbi5jb21wb25lbnRzLmNvbnNvbGUuaW5wdXQocHJvbXB0TWVzc2FnZSk7XG4gICAgfVxuXG4gICAgaXNGb3JiaWRkZW4oZmlsZW5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZpbGVuYW1lLnN0YXJ0c1dpdGgoXCJzcmMvbGliL3V0aWxpdHkvXCIpIHx8XG4gICAgICAgICAgICBmaWxlbmFtZS5zdGFydHNXaXRoKFwic3JjL2xpYi9wZWRhbC9cIikgfHxcbiAgICAgICAgICAgIGZpbGVuYW1lLnN0YXJ0c1dpdGgoXCIuL19pbnN0cnVjdG9yL1wiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcIlN0ZXBzXCIgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgY29kZSwgbWVhbnQgdG8gYmUgdXNlZCBhcyBhIGNhbGxiYWNrIHRvIHRoZSBTa3VscHRcbiAgICAgKiBlbnZpcm9ubWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBnbG9iYWxzIC0gSGFzaCB0aGF0IG1hcHMgdGhlIG5hbWVzIG9mIGdsb2JhbCB2YXJpYWJsZXMgKFN0cmluZ3MpIHRvIHRoZWlyIFNrdWxwdCByZXByZXNlbnRhdGlvbi5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbG9jYWxzIC0gSGFzaCB0aGF0IG1hcHMgdGhlIG5hbWVzIG9mIGxvY2FsIHZhcmlhYmxlcyAoU3RyaW5ncykgdG8gdGhlaXIgU2t1bHB0IHJlcHJlc2VudGF0aW9uLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsaW5lTnVtYmVyIC0gVGhlIGNvcnJlc3BvbmRpbmcgbGluZSBudW1iZXIgaW4gdGhlIHNvdXJjZSBjb2RlIHRoYXQgaXMgYmVpbmcgZXhlY3V0ZWQuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNvbHVtbk51bWJlciAtIFRoZSBjb3JyZXNwb25kaW5nIGNvbHVtbiBudW1iZXIgaW4gdGhlIHNvdXJjZSBjb2RlIHRoYXQgaXMgYmVpbmcgZXhlY3V0ZWQuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoaW5rIG9mIGl0IGFzIHRoZSBcIlhcIiBwb3NpdGlvbiB0byB0aGUgbGluZU51bWJlcidzIFwiWVwiIHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBmaWxlbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBweXRob24gZmlsZSBiZWluZyBleGVjdXRlZCAoZS5nLiwgXCJfX21haW5fXy5weVwiKS5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzRG9jc3RyaW5nIC0gV2hldGhlciBvciBub3QgdGhpcyBpcyBhbiBhY3R1YWwgbGluZSBvciBhIGRvY3N0cmluZy5cbiAgICAgKi9cbiAgICBzdGVwKGdsb2JhbHMsIGxvY2FscywgbGluZU51bWJlciwgY29sdW1uTnVtYmVyLCBmaWxlbmFtZSwgaXNEb2NzdHJpbmcsIGFzdE5hbWUpIHtcbiAgICAgICAgaWYgKGZpbGVuYW1lID09PSBcImFuc3dlci5weVwiKSB7XG4gICAgICAgICAgICAvKmlmIChleGVjU3RhY2spIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhleGVjU3RhY2subWFwKChbbiwgb10pID0+IFtuLCB7Li4ub31dKSk7XG4gICAgICAgICAgICB9Ki9cbiAgICAgICAgICAgIGxldCBjdXJyZW50U3RlcCA9IHRoaXMuZW5naW5lLmV4ZWN1dGlvbkJ1ZmZlci5zdGVwO1xuICAgICAgICAgICAgZ2xvYmFscyA9IHRoaXMubWFpbi5jb21wb25lbnRzLnRyYWNlLnBhcnNlR2xvYmFscyh7Li4uZ2xvYmFscywgLi4ubG9jYWxzfSk7XG4gICAgICAgICAgICAvLyBUT0RPOiBUcmFjZSBsb2NhbCB2YXJpYWJsZXMgcHJvcGVybHlcbiAgICAgICAgICAgIC8vbGV0IGxvY2FscyA9IHRoaXMubWFpbi5jb21wb25lbnRzLnRyYWNlLnBhcnNlR2xvYmFscyhsb2NhbHMpO1xuICAgICAgICAgICAgLy9PYmplY3QuYXNzaWduKGdsb2JhbHMsIGxvY2Fscyk7XG4gICAgICAgICAgICB0aGlzLmVuZ2luZS5leGVjdXRpb25CdWZmZXIudHJhY2UucHVzaCh7XG4gICAgICAgICAgICAgICAgXCJzdGVwXCI6IGN1cnJlbnRTdGVwLFxuICAgICAgICAgICAgICAgIFwiZmlsZW5hbWVcIjogZmlsZW5hbWUsXG4gICAgICAgICAgICAgICAgLy8nYmxvY2snOiBoaWdobGlnaHRNYXBbbGluZU51bWJlci0xXSxcbiAgICAgICAgICAgICAgICBcImxpbmVcIjogbGluZU51bWJlcixcbiAgICAgICAgICAgICAgICBcImNvbHVtblwiOiBjb2x1bW5OdW1iZXIsXG4gICAgICAgICAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IGdsb2JhbHMucHJvcGVydGllcyxcbiAgICAgICAgICAgICAgICBcIm1vZHVsZXNcIjogZ2xvYmFscy5tb2R1bGVzLFxuICAgICAgICAgICAgICAgIFwiaXNEb2NzdHJpbmdcIjogaXNEb2NzdHJpbmcsXG4gICAgICAgICAgICAgICAgXCJhc3RcIjogYXN0TmFtZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmVuZ2luZS5leGVjdXRpb25CdWZmZXIuc3RlcCA9IGN1cnJlbnRTdGVwICsgMTtcbiAgICAgICAgICAgIHRoaXMuZW5naW5lLmV4ZWN1dGlvbkJ1ZmZlci5saW5lID0gbGluZU51bWJlcjtcbiAgICAgICAgfVxuICAgIH07XG5cblxuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIGF0IHRoZSBlbmQgb2YgdGhlIFNrdWxwdCBleGVjdXRpb24gdG8gdGVybWluYXRlIHRoZSBleGVjdXRpb25CdWZmZXJcbiAgICAgKiBhbmQgaGFuZCBpdCBvZmYgdG8gdGhlIGV4ZWN1dGlvbiB0cmFjZSBpbiB0aGUgbW9kZWwuXG4gICAgICovXG4gICAgbGFzdFN0ZXAoKSB7XG4gICAgICAgIGxldCBleGVjdXRpb24gPSB0aGlzLm1haW4ubW9kZWwuZXhlY3V0aW9uO1xuICAgICAgICBleGVjdXRpb24uc3R1ZGVudC5jdXJyZW50VHJhY2VEYXRhKHRoaXMuZW5naW5lLmV4ZWN1dGlvbkJ1ZmZlci50cmFjZSk7XG4gICAgICAgIGV4ZWN1dGlvbi5zdHVkZW50LmN1cnJlbnRTdGVwKHRoaXMuZW5naW5lLmV4ZWN1dGlvbkJ1ZmZlci5zdGVwKTtcbiAgICAgICAgZXhlY3V0aW9uLnN0dWRlbnQubGFzdFN0ZXAodGhpcy5lbmdpbmUuZXhlY3V0aW9uQnVmZmVyLnN0ZXApO1xuICAgICAgICBleGVjdXRpb24uc3R1ZGVudC5jdXJyZW50TGluZSh0aGlzLmVuZ2luZS5leGVjdXRpb25CdWZmZXIubGluZSk7XG4gICAgICAgIGV4ZWN1dGlvbi5zdHVkZW50Lmxhc3RMaW5lKHRoaXMuZW5naW5lLmV4ZWN1dGlvbkJ1ZmZlci5saW5lKTtcbiAgICAgICAgZXhlY3V0aW9uLnN0dWRlbnQuY3VycmVudFRyYWNlU3RlcCh0aGlzLmVuZ2luZS5leGVjdXRpb25CdWZmZXIuc3RlcCk7XG4gICAgfTtcblxuICAgIGdldExpbmVzKGFzdCkge1xuICAgICAgICBsZXQgdmlzaXRlZExpbmVzID0gbmV3IFNldCgpO1xuICAgICAgICBsZXQgdmlzaXRCb2R5ID0gKG5vZGUpID0+IHtcbiAgICAgICAgICAgIGlmIChub2RlLmxpbmVubyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdmlzaXRlZExpbmVzLmFkZChub2RlLmxpbmVubyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobm9kZS5ib2R5KSB7XG4gICAgICAgICAgICAgICAgbm9kZS5ib2R5LmZvckVhY2goKHN0YXRlbWVudCkgPT4gdmlzaXRCb2R5KHN0YXRlbWVudCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vZGUub3JlbHNlKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5vcmVsc2UuZm9yRWFjaCgoc3RhdGVtZW50KSA9PiB2aXNpdEJvZHkoc3RhdGVtZW50KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobm9kZS5maW5hbGJvZHkpIHtcbiAgICAgICAgICAgICAgICBub2RlLmZpbmFsYm9keS5mb3JFYWNoKChzdGF0ZW1lbnQpID0+IHZpc2l0Qm9keShzdGF0ZW1lbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmlzaXRCb2R5KGFzdCk7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHZpc2l0ZWRMaW5lcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5zdXJlIHRoYXQgdGhlIHBhcnNlIGluZm9ybWF0aW9uIGlzIHVwLXRvLWRhdGVcbiAgICAgKi9cbiAgICB1cGRhdGVQYXJzZSgpIHtcbiAgICAgICAgbGV0IHJlcG9ydCA9IHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24ucmVwb3J0cztcbiAgICAgICAgLy8gSG9sZCBhbGwgdGhlIGFjdHVhbGx5IGRpc2NvdmVyZWQgbGluZXMgZnJvbSB0aGUgcGFyc2VcbiAgICAgICAgbGV0IGxpbmVzID0gW107XG4gICAgICAgIC8vIEF0dGVtcHQgYSBwYXJzZVxuICAgICAgICBsZXQgYXN0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IHBhcnNlID0gU2sucGFyc2UodGhpcy5maWxlbmFtZSwgdGhpcy5jb2RlKTtcbiAgICAgICAgICAgIGFzdCA9IFNrLmFzdEZyb21QYXJzZShwYXJzZS5jc3QsIHRoaXMuZmlsZW5hbWUsIHBhcnNlLmZsYWdzKTtcbiAgICAgICAgICAgIGxpbmVzID0gdGhpcy5nZXRMaW5lcyhhc3QpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gUmVwb3J0IHRoZSBlcnJvclxuICAgICAgICAgICAgcmVwb3J0W1wicGFyc2VyXCJdID0ge1xuICAgICAgICAgICAgICAgIFwic3VjY2Vzc1wiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBcImVycm9yXCI6IGVycm9yLFxuICAgICAgICAgICAgICAgIFwiZW1wdHlcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImxpbmVzXCI6IGxpbmVzXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmZpbGVuYW1lLCB0aGlzLmNvZGUpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFN1Y2Nlc3NmdWwgcGFyc2VcbiAgICAgICAgcmVwb3J0W1wicGFyc2VyXCJdID0ge1xuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IHRydWUsXG4gICAgICAgICAgICBcImFzdFwiOiBhc3QsXG4gICAgICAgICAgICBcImVtcHR5XCI6IGFzdC5ib2R5Lmxlbmd0aCA9PT0gMCxcbiAgICAgICAgICAgIFwibGluZXNcIjogbGluZXNcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgc2hvd0Vycm9ycygpIHtcbiAgICAgICAgbGV0IHJlcG9ydCA9IHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24ucmVwb3J0cztcbiAgICAgICAgaWYgKHJlcG9ydFtcInN0dWRlbnRcIl0uc3VjY2Vzcykge1xuICAgICAgICAgICAgdGhpcy5tYWluLmNvbXBvbmVudHMuZmVlZGJhY2suY2xlYXIoXCJFeGVjdXRpb24gZmluaXNoZWQuIE5vIGVycm9ycyB0byByZXBvcnQuXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tYWluLmNvbXBvbmVudHMuZmVlZGJhY2sucHJlc2VudFJ1bkVycm9yKHJlcG9ydC5zdHVkZW50LmVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3ZpZGVTZWNyZXRFcnJvcigpIHtcbiAgICAgICAgbGV0IHJlcG9ydCA9IHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24ucmVwb3J0cztcbiAgICAgICAgbGV0IGZlZWRiYWNrID0gdGhpcy5tYWluLmNvbXBvbmVudHMuZmVlZGJhY2s7XG4gICAgICAgIGlmICghcmVwb3J0W1wic3R1ZGVudFwiXS5zdWNjZXNzKSB7XG4gICAgICAgICAgICBsZXQgZXJyb3JCdXR0b24gPSB0aGlzLm1haW4ubW9kZWwuY29uZmlndXJhdGlvbi5jb250YWluZXIuZmluZChcIi5ibG9ja3B5LXN0dWRlbnQtZXJyb3JcIik7XG4gICAgICAgICAgICBsZXQgbWVzc2FnZSA9IGZlZWRiYWNrLnByZXNlbnRSdW5FcnJvcihyZXBvcnQuc3R1ZGVudC5lcnJvciwgdHJ1ZSk7XG4gICAgICAgICAgICBlcnJvckJ1dHRvbi5hdHRyKFwidGl0bGVcIiwgXCJDbGljayB0byBzZWUgT3JpZ2luYWwgRXJyb3JcIik7XG4gICAgICAgICAgICBlcnJvckJ1dHRvbi50b29sdGlwKHtcInRyaWdnZXJcIjogXCJob3ZlclwiLCBcImNvbnRhaW5lclwiOiB0aGlzLm1haW4ubW9kZWwuY29uZmlndXJhdGlvbi5hdHRhY2htZW50UG9pbnR9KTtcbiAgICAgICAgICAgIGVycm9yQnV0dG9uLmNsaWNrKCgpID0+IHRoaXMubWFpbi5jb21wb25lbnRzLmRpYWxvZy5FUlJPUl9TSE9XX1NUVURFTlRfRVJST1IobWVzc2FnZSkpO1xuICAgICAgICAgICAgZXJyb3JCdXR0b24uc2hvdygpO1xuICAgICAgICB9XG4gICAgfVxufSIsImltcG9ydCB7YXJyYXlNb3ZlLCBjYXBpdGFsaXplLCBweVN0cn0gZnJvbSBcIi4vdXRpbGl0aWVzXCI7XG5cbmV4cG9ydCBsZXQgRkVFREJBQ0tfSFRNTCA9IGBcblxuPHNwYW4gY2xhc3M9J2Jsb2NrcHktZmxvYXRpbmctZmVlZGJhY2sgdGV4dC1tdXRlZC1sZXNzIHB1bGwtcmlnaHQgcG9zaXRpb24tc3RpY2t5IHN0aWNreS10b3AnXG4gICAgYXJpYS1oaWRkZW49XCJ0cnVlXCIgcm9sZT1cInByZXNlbnRhdGlvblwiIGFyaWEtbGFiZWw9XCJOZXcgRmVlZGJhY2sgQWxlcnRcIj5cbiAgICBOZXcgZmVlZGJhY2sgJnVhcnI7XG48L3NwYW4+XG5cbjxkaXYgY2xhc3M9J2Jsb2NrcHktZmVlZGJhY2sgYmxvY2tweS1wYW5lbCdcbiAgICAgICAgICAgIHJvbGU9XCJyZWdpb25cIiBhcmlhLWxhYmVsPVwiRmVlZGJhY2tcIlxuICAgICAgICAgICAgYXJpYS1saXZlPVwicG9saXRlXCJcbiAgICAgICAgICAgIGRhdGEtYmluZD1cImNsYXNzOiB1aS5jb25zb2xlLnNpemVcIj5cblxuICAgIDxkaXY+XG4gICAgPCEtLSBGZWVkYmFjay9UcmFjZSBWaXNpYmlsaXR5IENvbnRyb2wgLS0+XG4gICAgPCEtLSBrbyBpZm5vdDogdWkuc2Vjb25kUm93LmhpZGVUcmFjZUJ1dHRvbiAtLT5cbiAgICA8YnV0dG9uIHR5cGU9J2J1dHRvbidcbiAgICAgICAgICAgIGNsYXNzPSdidG4gYnRuLXNtIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSBmbG9hdC1yaWdodCdcbiAgICAgICAgICAgIGRhdGEtYmluZD1cImNsaWNrOiB1aS5zZWNvbmRSb3cuYWR2YW5jZVN0YXRlXCI+XG4gICAgICAgIDxzcGFuIGNsYXNzPSdmYXMgZmEtZXllJz48L3NwYW4+XG4gICAgICAgIDxzcGFuIGRhdGEtYmluZD1cInRleHQ6IHVpLnNlY29uZFJvdy5zd2l0Y2hMYWJlbFwiPjwvc3Bhbj5cbiAgICA8L2J1dHRvbj5cbiAgICA8IS0tIC9rbyAtLT5cbiAgICBcbiAgICA8IS0tIFBvc2l0aXZlIEZlZWRiYWNrIFJlZ2lvbiAtLT5cbiAgICA8ZGl2IGNsYXNzPVwiYmxvY2tweS1mZWVkYmFjay1wb3NpdGl2ZSBmbG9hdC1yaWdodFwiPlxuICAgICAgICBcbiAgICBcbiAgICA8L2Rpdj5cblxuICAgIDwhLS0gQWN0dWFsIEZlZWRiYWNrIFJlZ2lvbiAtLT4gICAgXG4gICAgPGRpdj5cbiAgICAgICAgPHN0cm9uZz5GZWVkYmFjazogPC9zdHJvbmc+XG4gICAgICAgIDxzcGFuIGNsYXNzPSdiYWRnZSBibG9ja3B5LWZlZWRiYWNrLWNhdGVnb3J5IGZlZWRiYWNrLWJhZGdlJ1xuICAgICAgICAgICAgZGF0YS1iaW5kPVwiY3NzOiB1aS5mZWVkYmFjay5iYWRnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogdWkuZmVlZGJhY2suY2F0ZWdvcnlcIj5GZWVkYmFjayBLaW5kPC9zcGFuPlxuICAgICAgICA8c21hbGwgZGF0YS1iaW5kPVwidGV4dDogKDEwMCpzdWJtaXNzaW9uLnNjb3JlKCkpKyclJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogZGlzcGxheS5pbnN0cnVjdG9yKCkgJiYgZXhlY3V0aW9uLmZlZWRiYWNrLmxhYmVsKClcIlxuICAgICAgICAgICAgY2xhc3M9XCJ0ZXh0LW11dGVkXCI+PC9zbWFsbD5cbiAgICAgICAgPHNtYWxsIGRhdGEtYmluZD1cImNsaWNrOiB1aS5mZWVkYmFjay5yZXNldFNjb3JlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBkaXNwbGF5Lmluc3RydWN0b3IoKSAmJiBleGVjdXRpb24uZmVlZGJhY2subGFiZWwoKSAmJiBzdWJtaXNzaW9uLnNjb3JlKCkgPiAwXCJcbiAgICAgICAgICAgIGNsYXNzPVwidGV4dC1tdXRlZFwiIHN0eWxlPVwiY3Vyc29yOiBwb2ludGVyXCI+PHU+KHJlc2V0KTwvdT48L3NtYWxsPlxuICAgIDwvZGl2PlxuICAgIDxkaXY+XG4gICAgICAgIDxzdHJvbmcgY2xhc3M9XCJibG9ja3B5LWZlZWRiYWNrLWxhYmVsXCJcbiAgICAgICAgICAgIGRhdGEtYmluZD1cInRleHQ6IGV4ZWN1dGlvbi5mZWVkYmFjay5sYWJlbFwiPjwvc3Ryb25nPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYmxvY2tweS1mZWVkYmFjay1tZXNzYWdlXCJcbiAgICAgICAgICAgIGRhdGEtYmluZD1cImh0bWw6IGV4ZWN1dGlvbi5mZWVkYmFjay5tZXNzYWdlXCI+PC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBzdHlsZT1cInBvc2l0aW9uOiByZWxhdGl2ZTtcIj5cbiAgICAgICAgPCEtLSBUaGUgdGhhbmsgeW91IG1lc3NhZ2Ugd2lsbCBhcHBlYXIgYWJvdmUgdGhlIHNwYW4gLS0+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiYmxvY2tweS1mZWVkYmFjay10aGFuay15b3VcIj5UaGFuayB5b3UhPC9zcGFuPlxuICAgIDwvZGl2PlxuICAgIDxzbWFsbCBjbGFzcz1cImJsb2NrcHktZmVlZGJhY2stcmVzcG9uc2UtZnVsbFwiIHN0eWxlPVwidGV4dC1hbGlnbjogcmlnaHRcIlxuICAgICAgICBkYXRhLWJpbmQ9XCJ2aXNpYmxlOiB1aS5mZWVkYmFjay5wcm92aWRlUmF0aW5ncygpICYmIGV4ZWN1dGlvbi5mZWVkYmFjay5sYWJlbCgpICYmIGRpc3BsYXkuc2hvd1JhdGluZygpXCI+XG4gICAgICAgIDxzcGFuIHN0eWxlPVwiY3Vyc29yOiBwb2ludGVyO1wiIGNsYXNzPVwiZmFyIGZhLW1pbnVzLXNxdWFyZVwiXG4gICAgICAgICAgICBkYXRhLWJpbmQ9XCJjbGljazogdWkuZmVlZGJhY2suZmxpcFJhdGluZ1wiPjwvc3Bhbj5cbiAgICAgICAgUmF0ZSB0aGlzIEZlZWRiYWNrOlxuICAgICAgICA8c3BhbiBzdHlsZT1cImN1cnNvcjogcG9pbnRlcjsgZm9udC1zaXplOiAyMHB4XCIgY2xhc3M9XCJibG9ja3B5LXJhdGluZyBmYS10aHVtYnMtdXBcIlxuICAgICAgICAgICAgZGF0YS1iaW5kPVwiY2xpY2s6ICgpPT51aS5mZWVkYmFjay5yYXRlKCd0aHVtYnMtdXAnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzczogdWkuZmVlZGJhY2suaGFzUmF0ZWRDbGFzc1wiPjwvc3Bhbj5cbjwhLS0gICAgICAgIDxzcGFuIHN0eWxlPVwiY3Vyc29yOiBwb2ludGVyOyBmb250LXNpemU6IDIwcHhcIiBjbGFzcz1cImJsb2NrcHktcmF0aW5nIGZhLW1laFwiLS0+XG48IS0tICAgICAgICAgICAgZGF0YS1iaW5kPVwiY2xpY2s6ICgpPT51aS5mZWVkYmFjay5yYXRlKCdtZWgnKSwtLT5cbjwhLS0gICAgICAgICAgICAgICAgICAgICAgICBjc3M6IHVpLmZlZWRiYWNrLmhhc1JhdGVkQ2xhc3NcIj48L3NwYW4+LS0+XG4gICAgICAgIDxzcGFuIHN0eWxlPVwiY3Vyc29yOiBwb2ludGVyOyBmb250LXNpemU6IDIwcHhcIiBjbGFzcz1cImJsb2NrcHktcmF0aW5nIGZhLXRodW1icy1kb3duXCJcbiAgICAgICAgICAgIGRhdGEtYmluZD1cImNsaWNrOiAoKT0+dWkuZmVlZGJhY2sucmF0ZSgndGh1bWJzLWRvd24nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzczogdWkuZmVlZGJhY2suaGFzUmF0ZWRDbGFzc1wiPjwvc3Bhbj5cbiAgICA8L3NtYWxsPlxuICAgIDxzbWFsbCBjbGFzcz1cImJsb2NrcHktZmVlZGJhY2stcmVzcG9uc2UtY29sbGFwc2VkXCIgXG4gICAgICAgIHN0eWxlPVwicG9zaXRpb246IGFic29sdXRlOyByaWdodDogMDsgYm90dG9tOiAwXCJcbiAgICAgICAgZGF0YS1iaW5kPVwidmlzaWJsZTogZXhlY3V0aW9uLmZlZWRiYWNrLmxhYmVsKCkgJiYgIWRpc3BsYXkuc2hvd1JhdGluZygpXCI+XG4gICAgICAgIDxzcGFuIHN0eWxlPVwiY3Vyc29yOiBwb2ludGVyOyB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlXCIgY2xhc3M9XCJmYXIgZmEtcGx1cy1zcXVhcmVcIlxuICAgICAgICAgICAgZGF0YS1iaW5kPVwiY2xpY2s6IHVpLmZlZWRiYWNrLmZsaXBSYXRpbmdcIj48L3NwYW4+IFJhdGVcbiAgICA8L3NtYWxsPlxuPC9kaXY+ICAgICAgICAgICAgXG5gO1xuXG5leHBvcnQgY2xhc3MgQmxvY2tQeUZlZWRiYWNrIHtcblxuICAgIC8qKlxuICAgICAqIEFuIG9iamVjdCB0aGF0IG1hbmFnZXMgdGhlIGZlZWRiYWNrIGFyZWEsIHdoZXJlIHVzZXJzIGFyZSB0b2xkIHRoZSBzdGF0ZSBvZiB0aGVpclxuICAgICAqIHByb2dyYW0ncyBleGVjdXRpb24gYW5kIGdpdmVuIGd1aWRhbmNlLiBBbHNvIG1hbmFnZXMgdGhlIGNyZWF0aW9uIG9mIHRoZSBUcmFjZSBUYWJsZS5cbiAgICAgKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEB0aGlzIHtCbG9ja1B5RmVlZGJhY2t9XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG1haW4gLSBUaGUgbWFpbiBCbG9ja1B5IGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFnIC0gVGhlIEhUTUwgb2JqZWN0IHRoaXMgaXMgYXR0YWNoZWQgdG8uXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobWFpbiwgdGFnKSB7XG4gICAgICAgIHRoaXMubWFpbiA9IG1haW47XG4gICAgICAgIHRoaXMudGFnID0gdGFnO1xuXG4gICAgICAgIHRoaXMuZmVlZGJhY2tNb2RlbCA9IHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24uZmVlZGJhY2s7XG5cbiAgICAgICAgdGhpcy5jYXRlZ29yeSA9IHRoaXMudGFnLmZpbmQoXCIuYmxvY2tweS1mZWVkYmFjay1jYXRlZ29yeVwiKTtcbiAgICAgICAgdGhpcy5sYWJlbCA9IHRoaXMudGFnLmZpbmQoXCIuYmxvY2tweS1mZWVkYmFjay1sYWJlbFwiKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gdGhpcy50YWcuZmluZChcIi5ibG9ja3B5LWZlZWRiYWNrLW1lc3NhZ2VcIik7XG4gICAgICAgIHRoaXMucG9zaXRpdmUgPSB0aGlzLnRhZy5maW5kKFwiLmJsb2NrcHktZmVlZGJhY2stcG9zaXRpdmVcIik7XG5cbiAgICAgICAgLy8gVE9ETzogSWYgdGhleSBjaGFuZ2UgdGhlIHN0dWRlbnQgZXh0cmEgZmlsZXMsIGFsc28gdXBkYXRlIHRoZSBkaXJ0eSBmbGFnXG4gICAgICAgIHRoaXMubWFpbi5tb2RlbC5zdWJtaXNzaW9uLmNvZGUuc3Vic2NyaWJlKCgpID0+IHRoaXMubWFpbi5tb2RlbC5kaXNwbGF5LmRpcnR5U3VibWlzc2lvbih0cnVlKSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE1vdmVzIHRoZSBzY3JlZW4gKHRha2VzIDEgc2Vjb25kKSB0byBtYWtlIHRoZSBGZWVkYmFjayBhcmVhIHZpc2libGUuXG4gICAgICovXG4gICAgc2Nyb2xsSW50b1ZpZXcoKSB7XG4gICAgICAgICQoXCJodG1sLCBib2R5XCIpLmFuaW1hdGUoe1xuICAgICAgICAgICAgc2Nyb2xsVG9wOiB0aGlzLnRhZy5vZmZzZXQoKS50b3BcbiAgICAgICAgfSwgNzAwKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpZiB0aGUgZmVlZGJhY2sgYXJlYSBpcyBjdXJyZW50bHkgdmlzaWJsZVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGlzRmVlZGJhY2tWaXNpYmxlKCkge1xuICAgICAgICBsZXQgdmlzaWJpbGl0eUJ1ZmZlciA9IDEwMDtcbiAgICAgICAgbGV0IHRvcE9mRWxlbWVudCA9IHRoaXMudGFnLm9mZnNldCgpLnRvcDtcbiAgICAgICAgLy9sZXQgYm90dG9tT2ZFbGVtZW50ID0gdGhpcy50YWcub2Zmc2V0KCkudG9wICsgdGhpcy50YWcub3V0ZXJIZWlnaHQoKTtcbiAgICAgICAgbGV0IGJvdHRvbU9mRWxlbWVudCA9IHRvcE9mRWxlbWVudCArIHZpc2liaWxpdHlCdWZmZXI7XG4gICAgICAgIGxldCBib3R0b21PZlNjcmVlbiA9ICQod2luZG93KS5zY3JvbGxUb3AoKSArICQod2luZG93KS5oZWlnaHQoKTtcbiAgICAgICAgbGV0IHRvcE9mU2NyZWVuID0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpO1xuICAgICAgICAvL2JvdHRvbV9vZl9lbGVtZW50IC09IDQwOyAvLyBVc2VyIGZyaWVuZGx5IHBhZGRpbmdcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICh0b3BPZkVsZW1lbnQgPCBib3R0b21PZlNjcmVlbikgJiZcbiAgICAgICAgICAgICh0b3BPZlNjcmVlbiA8IGJvdHRvbU9mRWxlbWVudCkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgYW55IG91dHB1dCBjdXJyZW50bHkgaW4gdGhlIGZlZWRiYWNrIGFyZWEuIEFsc28gcmVzZXRzIHRoZSBwcmludGVyIGFuZFxuICAgICAqIGFueSBoaWdobGlnaHRlZCBsaW5lcyBpbiB0aGUgZWRpdG9yLlxuICAgICAqL1xuICAgIGNsZWFyKG1lc3NhZ2U9XCJSZWFkeVwiKSB7XG4gICAgICAgIHRoaXMuZmVlZGJhY2tNb2RlbC5tZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLmZlZWRiYWNrTW9kZWwuY2F0ZWdvcnkobnVsbCk7XG4gICAgICAgIHRoaXMuZmVlZGJhY2tNb2RlbC5sYWJlbChudWxsKTtcbiAgICAgICAgdGhpcy5mZWVkYmFja01vZGVsLmhpZGRlbihmYWxzZSk7XG4gICAgICAgIHRoaXMuZmVlZGJhY2tNb2RlbC5saW5lc0Vycm9yLnJlbW92ZUFsbCgpO1xuICAgICAgICB0aGlzLmZlZWRiYWNrTW9kZWwubGluZXNVbmNvdmVyZWQucmVtb3ZlQWxsKCk7XG4gICAgICAgIHRoaXMuY2xlYXJQb3NpdGl2ZUZlZWRiYWNrKCk7XG4gICAgICAgIHRoaXMuY2F0ZWdvcnkub2ZmKFwiY2xpY2tcIik7XG4gICAgICAgIHRoaXMubWFpbi5tb2RlbC5kaXNwbGF5Lmhhc1JhdGVkKGZhbHNlKTtcbiAgICB9O1xuXG4gICAgc3RhdGljIGZpbmRGaXJzdEVycm9yTGluZShmZWVkYmFja0RhdGEpIHtcbiAgICAgICAgaWYgKGZlZWRiYWNrRGF0YS5xdWljayRsb29rdXApIHtcbiAgICAgICAgICAgIGxldCBsb2NhdGlvbiA9IGZlZWRiYWNrRGF0YS5xdWljayRsb29rdXAobmV3IFNrLmJ1aWx0aW4uc3RyKFwibG9jYXRpb25cIikpO1xuICAgICAgICAgICAgaWYgKGxvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgbGV0IGxpbmUgPSBsb2NhdGlvbi50cCRnZXRhdHRyKG5ldyBTay5idWlsdGluLnN0cihcImxpbmVcIikpO1xuICAgICAgICAgICAgICAgIGlmIChsaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTay5mZmkucmVtYXBUb0pzKGxpbmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgLypmb3IgKGxldCBpID0gZmVlZGJhY2tEYXRhLmxlbmd0aC0xOyBpID49IDA7IGktPSAxKSB7XG4gICAgICAgICAgICBpZiAoXCJwb3NpdGlvblwiIGluIGZlZWRiYWNrRGF0YVtpXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmZWVkYmFja0RhdGFbaV0ucG9zaXRpb24ubGluZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDsqL1xuICAgIH07XG5cbiAgICB1cGRhdGVSZWd1bGFyRmVlZGJhY2soKSB7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBtb2RlbCB3aXRoIHRoZXNlIG5ldyBleGVjdXRpb24gcmVzdWx0c1xuICAgICAqIEBwYXJhbSBleGVjdXRpb25SZXN1bHRzXG4gICAgICovXG4gICAgdXBkYXRlRmVlZGJhY2soZXhlY3V0aW9uUmVzdWx0cykge1xuICAgICAgICAvLyBQYXJzZSBvdXQgZGF0YVxuICAgICAgICBsZXQgbWVzc2FnZSA9IFNrLmZmaS5yZW1hcFRvSnMoZXhlY3V0aW9uUmVzdWx0cy5NRVNTQUdFKTtcbiAgICAgICAgbGV0IGNhdGVnb3J5ID0gU2suZmZpLnJlbWFwVG9KcyhleGVjdXRpb25SZXN1bHRzLkNBVEVHT1JZKTtcbiAgICAgICAgbGV0IGxhYmVsID0gU2suZmZpLnJlbWFwVG9KcyhleGVjdXRpb25SZXN1bHRzLkxBQkVMKTtcbiAgICAgICAgbGV0IGhpZGUgPSBTay5mZmkucmVtYXBUb0pzKGV4ZWN1dGlvblJlc3VsdHMuSElERSk7XG4gICAgICAgIGxldCBkYXRhID0gZXhlY3V0aW9uUmVzdWx0cy5EQVRBO1xuICAgICAgICBsZXQgcG9zaXRpdmVzID0gU2suZmZpLnJlbWFwVG9KcyhleGVjdXRpb25SZXN1bHRzLlBPU0lUSVZFKTtcblxuICAgICAgICAvLyBPdmVycmlkZSBiYXNlZCBvbiBhc3NpZ25tZW50cycgc2V0dGluZ3NcbiAgICAgICAgbGV0IGhpZGVTY29yZSA9IHRoaXMubWFpbi5tb2RlbC5hc3NpZ25tZW50LmhpZGRlbigpO1xuICAgICAgICBpZiAoaGlkZVNjb3JlICYmIGNhdGVnb3J5LnRvTG93ZXJDYXNlKCkgPT09IFwiY29tcGxldGVcIikge1xuICAgICAgICAgICAgY2F0ZWdvcnkgPSBcIm5vIGVycm9yc1wiO1xuICAgICAgICAgICAgbGFiZWwgPSBcIk5vIGVycm9yc1wiO1xuICAgICAgICAgICAgbWVzc2FnZSA9IFwiTm8gZXJyb3JzIHJlcG9ydGVkLlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVtYXAgdG8gZXhwZWN0ZWQgQmxvY2tQeSBsYWJlbHNcbiAgICAgICAgaWYgKGNhdGVnb3J5LnRvTG93ZXJDYXNlKCkgPT09IFwiaW5zdHJ1Y3RvclwiICYmIGxhYmVsLnRvTG93ZXJDYXNlKCkgPT09IFwiZXhwbGFpblwiKSB7XG4gICAgICAgICAgICBsYWJlbCA9IFwiSW5zdHJ1Y3RvciBGZWVkYmFja1wiO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRG9uJ3QgcHJlc2VudCBhIGxhY2sgb2YgZXJyb3IgYXMgYmVpbmcgaW5jb3JyZWN0XG4gICAgICAgIGlmIChjYXRlZ29yeSA9PT0gXCJJbnN0cnVjdG9yXCIgJiYgbGFiZWwgPT09IFwiTm8gZXJyb3JzXCIpIHtcbiAgICAgICAgICAgIGNhdGVnb3J5ID0gXCJubyBlcnJvcnNcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSBtb2RlbCBhY2NvcmRpbmdseVxuICAgICAgICBtZXNzYWdlID0gdGhpcy5tYWluLnV0aWxpdGllcy5tYXJrZG93bihtZXNzYWdlKS5yZXBsYWNlKC88cHJlPlxcbi9nLCBcIjxwcmU+XFxuXFxuXCIpO1xuICAgICAgICB0aGlzLmZlZWRiYWNrTW9kZWwubWVzc2FnZShtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5mZWVkYmFja01vZGVsLmNhdGVnb3J5KGNhdGVnb3J5KTtcbiAgICAgICAgdGhpcy5mZWVkYmFja01vZGVsLmxhYmVsKGxhYmVsKTtcbiAgICAgICAgLy9sZXQgaGlnaGxpZ2h0VGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLm1lc3NhZ2UuZmluZChcInByZSBjb2RlXCIpLm1hcCggKGksIGJsb2NrKSA9PiB7XG4gICAgICAgICAgICB3aW5kb3cuaGxqcy5oaWdobGlnaHRCbG9jayhibG9jayk7XG4gICAgICAgIH0pO1xuICAgICAgICAvL30sIDQwMCk7XG4gICAgICAgIC8vIFRPRE86IEluc3RlYWQgb2YgdHJhY2tpbmcgc3R1ZGVudCBmaWxlLCBsZXQncyB0cmFjayB0aGUgaW5zdHJ1Y3RvciBmaWxlXG4gICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLnNlcnZlci5sb2dFdmVudChcIkludGVydmVudGlvblwiLCBjYXRlZ29yeSwgbGFiZWwsIG1lc3NhZ2UsIFwiYW5zd2VyLnB5XCIpO1xuXG4gICAgICAgIC8vIENsZWFyIG91dCBhbnkgcHJldmlvdXNseSBoaWdobGlnaHRlZCBsaW5lc1xuICAgICAgICB0aGlzLm1haW4uY29tcG9uZW50cy5weXRob25FZGl0b3IuYm0uY2xlYXJIaWdobGlnaHRlZExpbmVzKCk7XG5cbiAgICAgICAgLy8gRmluZCB0aGUgZmlyc3QgZXJyb3Igb24gYSBsaW5lIGFuZCByZXBvcnQgdGhhdFxuICAgICAgICBsZXQgbGluZSA9IEJsb2NrUHlGZWVkYmFjay5maW5kRmlyc3RFcnJvckxpbmUoZGF0YSk7XG4gICAgICAgIHRoaXMuZmVlZGJhY2tNb2RlbC5saW5lc0Vycm9yLnJlbW92ZUFsbCgpO1xuICAgICAgICBpZiAobGluZSAhPT0gbnVsbCAmJiBsaW5lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZmVlZGJhY2tNb2RlbC5saW5lc0Vycm9yLnB1c2gobGluZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbnZlcnQgdGhlIHNldCBvZiB0cmFjZWQgbGluZXNcbiAgICAgICAgbGV0IHN0dWRlbnRSZXBvcnQgPSB0aGlzLm1haW4ubW9kZWwuZXhlY3V0aW9uLnJlcG9ydHMuc3R1ZGVudDtcbiAgICAgICAgdGhpcy5mZWVkYmFja01vZGVsLmxpbmVzVW5jb3ZlcmVkLnJlbW92ZUFsbCgpO1xuICAgICAgICBpZiAoc3R1ZGVudFJlcG9ydC5zdWNjZXNzKSB7XG4gICAgICAgICAgICBsZXQgdW5jb3ZlcmVkTGluZXMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24ucmVwb3J0cy5wYXJzZXIubGluZXMuZm9yRWFjaCgobGluZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChzdHVkZW50UmVwb3J0LmxpbmVzLmluZGV4T2YobGluZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHVuY292ZXJlZExpbmVzLnB1c2gobGluZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmZlZWRiYWNrTW9kZWwubGluZXNVbmNvdmVyZWQodW5jb3ZlcmVkTGluZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPHBvc2l0aXZlcy5sZW5ndGg7IGkrPTEpIHtcbiAgICAgICAgICAgIGxldCBwb3NpdGl2ZURhdGEgPSBwb3NpdGl2ZXNbaV07XG4gICAgICAgICAgICB0aGlzLmFkZFBvc2l0aXZlRmVlZGJhY2socG9zaXRpdmVEYXRhLm1lc3NhZ2UsIFwic3RhclwiLCBcImdyZWVuXCIsICgpID0+IHRoaXMubWFpbi5jb21wb25lbnRzLmRpYWxvZy5QT1NJVElWRV9GRUVEQkFDS19GVUxMKHBvc2l0aXZlRGF0YS50aXRsZSwgcG9zaXRpdmVEYXRhLm1lc3NhZ2UpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsZWFyUG9zaXRpdmVGZWVkYmFjaygpIHtcbiAgICAgICAgdGhpcy5wb3NpdGl2ZS5lbXB0eSgpO1xuICAgICAgICB0aGlzLm1haW4ubW9kZWwuY29uZmlndXJhdGlvbi5jb250YWluZXIuZmluZChcIi5ibG9ja3B5LXN0dWRlbnQtZXJyb3JcIikuaGlkZSgpO1xuICAgIH1cblxuICAgIGFkZFBvc2l0aXZlRmVlZGJhY2sodGV4dCwgaWNvbiwgY29sb3IsIG9uY2xpY2ssIHRvRW5kKSB7XG4gICAgICAgIGxldCBwb3NpdGl2ZSA9ICQoXCI8c3Bhbj48L3NwYW4+XCIpO1xuICAgICAgICBwb3NpdGl2ZS5hZGRDbGFzcyhcImJsb2NrcHktZmVlZGJhY2stcG9zaXRpdmUtaWNvbiBmYXMgZmEtXCIraWNvbik7XG4gICAgICAgIHBvc2l0aXZlLmNzcyhcImNvbG9yXCIsIGNvbG9yKTtcbiAgICAgICAgcG9zaXRpdmUuYXR0cihcInRpdGxlXCIsIHRleHQpO1xuICAgICAgICBpZiAodG9FbmQpIHtcbiAgICAgICAgICAgIHRoaXMucG9zaXRpdmUuYXBwZW5kKHBvc2l0aXZlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucG9zaXRpdmUucHJlcGVuZChwb3NpdGl2ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcG9zaXRpdmUudG9vbHRpcCh7XCJ0cmlnZ2VyXCI6IFwiaG92ZXJcIiwgXCJjb250YWluZXJcIjogdGhpcy5tYWluLm1vZGVsLmNvbmZpZ3VyYXRpb24uYXR0YWNobWVudFBvaW50fSk7XG4gICAgICAgIGlmIChvbmNsaWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBvc2l0aXZlLmNsaWNrKG9uY2xpY2spO1xuICAgICAgICB9XG4gICAgICAgIHBvc2l0aXZlLmhvdmVyKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLnNlcnZlci5sb2dFdmVudChcIlgtRmVlZGJhY2tcIiwgXCJwb3NpdGl2ZVwiLCBcImhvdmVyXCIsIHRleHQsIFwiXCIpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcmVzZW50IGFueSBhY2N1bXVsYXRlZCBmZWVkYmFja1xuICAgICAqL1xuICAgIHByZXNlbnRGZWVkYmFjayhleGVjdXRpb25SZXN1bHRzKSB7XG4gICAgICAgIHRoaXMudXBkYXRlRmVlZGJhY2soZXhlY3V0aW9uUmVzdWx0cyk7XG5cbiAgICAgICAgdGhpcy5jYXRlZ29yeS5vZmYoXCJjbGlja1wiKTtcbiAgICAgICAgaWYgKHRoaXMubWFpbi5tb2RlbC5kaXNwbGF5Lmluc3RydWN0b3IoKSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVGdWxsRmVlZGJhY2soZXhlY3V0aW9uUmVzdWx0cyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPOiBMb2dnaW5nXG4gICAgICAgIC8vdGhpcy5tYWluLmNvbXBvbmVudHMuc2VydmVyLmxvZ0V2ZW50KFwiZmVlZGJhY2tcIiwgY2F0ZWdvcnkrXCJ8XCIrbGFiZWwsIG1lc3NhZ2UpO1xuXG4gICAgICAgIHRoaXMubm90aWZ5RmVlZGJhY2tVcGRhdGUoKTtcbiAgICB9O1xuXG4gICAgcHJvY2Vzc1NpbmdsZUZlZWRiYWNrKGVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgdGl0bGUgPSBlbGVtZW50LnRwJGdldGF0dHIobmV3IHB5U3RyKFwidGl0bGVcIikpLnRvU3RyaW5nKCk7XG4gICAgICAgIGNvbnN0IGNhdGVnb3J5ID0gY2FwaXRhbGl6ZShlbGVtZW50LnRwJGdldGF0dHIobmV3IHB5U3RyKFwiY2F0ZWdvcnlcIikpLnRvU3RyaW5nKCkpO1xuICAgICAgICBjb25zdCBraW5kID0gZWxlbWVudC50cCRnZXRhdHRyKG5ldyBweVN0cihcImtpbmRcIikpLnRvU3RyaW5nKCk7XG4gICAgICAgIGNvbnN0IGFjdGl2ZSA9IFNrLm1pc2NldmFsLmlzVHJ1ZShlbGVtZW50KTtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSBlbGVtZW50LnRwJGdldGF0dHIobmV3IHB5U3RyKFwibWVzc2FnZVwiKSkudG9TdHJpbmcoKTtcbiAgICAgICAgY29uc3QgdW51c2VkX21lc3NhZ2UgPSBlbGVtZW50LnRwJGdldGF0dHIobmV3IHB5U3RyKFwidW51c2VkX21lc3NhZ2VcIikpLnRvU3RyaW5nKCk7XG4gICAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlID09PSBcIk5vbmVcIiA/IHVudXNlZF9tZXNzYWdlIDogbWVzc2FnZTtcbiAgICAgICAgY29uc3QganVzdGlmaWNhdGlvbiA9IGVsZW1lbnQudHAkZ2V0YXR0cihuZXcgcHlTdHIoXCJqdXN0aWZpY2F0aW9uXCIpKS50b1N0cmluZygpO1xuICAgICAgICBjb25zdCBwYXJlbnQgPSBlbGVtZW50LnRwJGdldGF0dHIobmV3IHB5U3RyKFwicGFyZW50XCIpKTtcbiAgICAgICAgY29uc3QgaGFzUGFyZW50ID0gIVNrLmJ1aWx0aW4uY2hlY2tOb25lKHBhcmVudCk7XG4gICAgICAgIGxldCBzY29yZSA9IGVsZW1lbnQudHAkZ2V0YXR0cihuZXcgcHlTdHIoXCJyZXNvbHZlZF9zY29yZVwiKSk7XG4gICAgICAgIHNjb3JlID0gc2NvcmUgPT09IFNrLmJ1aWx0aW4ubm9uZS5ub25lJCA/IFwiXCJcbiAgICAgICAgICAgIDogc2NvcmUudHAkbmFtZSA9PT0gXCJmbG9hdFwiXG4gICAgICAgICAgICAgICAgPyBcIitcIiArIE1hdGgucm91bmQoc2NvcmUudioxMDApLnRvU3RyaW5nKCkgKyBcIiVcIlxuICAgICAgICAgICAgICAgIDogc2NvcmUudG9TdHJpbmcoKTtcbiAgICAgICAgcmV0dXJuIFtlbGVtZW50LCBwYXJlbnQsIGBcbiAgICAgICAgPGRpdiBjbGFzcz1cImxpc3QtZ3JvdXAtaXRlbSBmbGV4LWNvbHVtbiBhbGlnbi1pdGVtcy1zdGFydFwiICR7aGFzUGFyZW50ID8gXCJzdHlsZT0nbWFyZ2luLWxlZnQ6IDUwcHg7J1wiIDogXCJcIn0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IHctMTAwIGp1c3RpZnktY29udGVudC1iZXR3ZWVuIGFsaWduLWl0ZW1zLWNlbnRlclwiPlxuICAgICAgICAgICAgICAgIDxzcGFuPjxzdHJvbmcgY2xhc3M9XCJtYi0xXCIgc3R5bGU9XCIke2FjdGl2ZSA/IFwiXCIgOiBcInRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoO1wifVwiPiR7dGl0bGV9PC9zdHJvbmc+ICgke2NhdGVnb3J5fSAtICR7a2luZH0pPC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYmFkZ2UgYmFkZ2UtaW5mbyBiYWRnZS1waWxsXCI+JHtzY29yZX08L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICR7YWN0aXZlID8gXCJcIiA6IFwiPGRpdj4oTXV0ZWQgLSBOb3Qgc2hvd24gdG8gc3R1ZGVudCk8L2Rpdj5cIn1cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtYi0xIHAtMSBmZWVkYmFjay1leHBhbmQtb24tY2xpY2sgZmVlZGJhY2stc2hydW5rXCI+XG4gICAgICAgICAgICAgICAgJHttZXNzYWdlfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8c21hbGwgc3R5bGU9XCJ3aGl0ZS1zcGFjZTogcHJlXCI+JHtqdXN0aWZpY2F0aW9ufTwvc21hbGw+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICBgXTtcbiAgICB9XG5cbiAgICB1cGRhdGVGdWxsRmVlZGJhY2soZXhlY3V0aW9uUmVzdWx0cykge1xuICAgICAgICBjb25zb2xlLmxvZyhleGVjdXRpb25SZXN1bHRzKTtcbiAgICAgICAgaWYgKCEoXCJNQUlOX1JFUE9SVFwiIGluIGV4ZWN1dGlvblJlc3VsdHMpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG1haW5SZXBvcnQgPSBleGVjdXRpb25SZXN1bHRzLk1BSU5fUkVQT1JUO1xuICAgICAgICBjb25zdCBmZWVkYmFjayA9IG1haW5SZXBvcnQudHAkZ2V0YXR0cihuZXcgcHlTdHIoXCJmZWVkYmFja1wiKSk7XG4gICAgICAgIGlmICghZmVlZGJhY2spIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZmVlZGJhY2tzID0gW107XG4gICAgICAgIFNrLm1pc2NldmFsLml0ZXJGb3IoZmVlZGJhY2sudHAkaXRlcigpLCAoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgZmVlZGJhY2tzLnB1c2godGhpcy5wcm9jZXNzU2luZ2xlRmVlZGJhY2soZWxlbWVudCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgU2subWlzY2V2YWwuaXRlckZvcihtYWluUmVwb3J0LnRwJGdldGF0dHIobmV3IHB5U3RyKFwiaWdub3JlZF9mZWVkYmFja1wiKSkudHAkaXRlcigpLCAoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgZmVlZGJhY2tzLnB1c2godGhpcy5wcm9jZXNzU2luZ2xlRmVlZGJhY2soZWxlbWVudCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcGFyZW50cyA9IG5ldyBNYXAoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmZWVkYmFja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IFtlbGVtZW50LCBwYXJlbnQsIHRleHRdID0gZmVlZGJhY2tzW2ldO1xuICAgICAgICAgICAgY29uc3QgaGFzUGFyZW50ID0gIVNrLmJ1aWx0aW4uY2hlY2tOb25lKHBhcmVudCk7XG4gICAgICAgICAgICBpZiAoaGFzUGFyZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFwYXJlbnRzLmhhcyhwYXJlbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudHMuc2V0KHBhcmVudCwgW10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXJlbnRzLmdldChwYXJlbnQpLnB1c2godGV4dCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICghcGFyZW50cy5oYXMoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50cy5zZXQoZWxlbWVudCwgW10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXJlbnRzLmdldChlbGVtZW50KS51bnNoaWZ0KHRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZlZWRiYWNrcyA9IFsuLi5wYXJlbnRzLnZhbHVlcygpXS5mbGF0KCk7XG4gICAgICAgIHRoaXMuY2F0ZWdvcnkub24oXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1haW4uY29tcG9uZW50cy5kaWFsb2cuc2hvdyhcIkZ1bGwgRmVlZGJhY2sgSW5mb3JtYXRpb25cIiwgJzxkaXYgY2xhc3M9XCJsaXN0LWdyb3VwXCI+JytcbiAgICAgICAgICAgICAgICBmZWVkYmFja3Muam9pbihcIlxcblwiKSArIFwiPC9kaXY+XCIpO1xuICAgICAgICAgICAgJChcIi5mZWVkYmFjay1leHBhbmQtb24tY2xpY2tcIikub24oXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAkKGV2ZW50LnRhcmdldCkudG9nZ2xlQ2xhc3MoXCJmZWVkYmFjay1zaHJ1bmtcIik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbm90aWZ5RmVlZGJhY2tVcGRhdGUoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc0ZlZWRiYWNrVmlzaWJsZSgpKSB7XG4gICAgICAgICAgICB0aGlzLnRhZy5maW5kKFwiLmJsb2NrcHktZmxvYXRpbmctZmVlZGJhY2tcIikuc2hvdygpLmZhZGVPdXQoNzAwMCk7XG4gICAgICAgICAgICBpZiAodGhpcy5zaG91bGRTY3JvbGxJbnRvVmlldygpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxJbnRvVmlldygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIHNob3VsZFNjcm9sbEludG9WaWV3KCkge1xuICAgICAgICByZXR1cm4gIXRoaXMubWFpbi5tb2RlbC51aS5zbWFsbExheW91dCgpO1xuICAgIH1cblxuICAgIHByZXNlbnRSdW5FcnJvcihlcnJvciwganVzdF9yZXR1cm4pIHtcbiAgICAgICAgaWYgKGp1c3RfcmV0dXJuID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGp1c3RfcmV0dXJuID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG1lc3NhZ2UsIGxhYmVsLCBjYXRlZ29yeSwgbGluZW5vO1xuICAgICAgICBsYWJlbCA9IGVycm9yLnRwJG5hbWU7XG4gICAgICAgIGNhdGVnb3J5ID0gXCJydW50aW1lXCI7XG4gICAgICAgIG1lc3NhZ2UgPSB0aGlzLmNvbnZlcnRTa3VscHRFcnJvcihlcnJvcik7XG5cbiAgICAgICAgaWYgKGp1c3RfcmV0dXJuKSB7XG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZlZWRiYWNrTW9kZWwubWVzc2FnZShtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5mZWVkYmFja01vZGVsLmNhdGVnb3J5KGNhdGVnb3J5KTtcbiAgICAgICAgdGhpcy5mZWVkYmFja01vZGVsLmxhYmVsKGxhYmVsKTtcbiAgICAgICAgdGhpcy5mZWVkYmFja01vZGVsLmxpbmVzRXJyb3IucmVtb3ZlQWxsKCk7XG4gICAgICAgIGlmIChsaW5lbm8gIT09IHVuZGVmaW5lZCAmJiBsaW5lbm8gIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZmVlZGJhY2tNb2RlbC5saW5lc0Vycm9yLnB1c2gobGluZW5vKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGJ1aWxkVHJhY2ViYWNrKGVycm9yLCBmaWxlbmFtZUV4ZWN1dGVkKSB7XG4gICAgICAgIHJldHVybiBlcnJvci50cmFjZWJhY2subWFwKGZyYW1lID0+IHtcbiAgICAgICAgICAgIGlmICghZnJhbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCI/P1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGxpbmVubyA9IGZyYW1lLmxpbmVubztcbiAgICAgICAgICAgIGlmIChmcmFtZS5maWxlbmFtZS5zbGljZSgwLCAtMykgPT09IGZpbGVuYW1lRXhlY3V0ZWQpIHtcbiAgICAgICAgICAgICAgICBsaW5lbm8gLT0gdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5yZXBvcnRzLmluc3RydWN0b3IubGluZU9mZnNldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBmaWxlID0gYEZpbGUgPGNvZGUgY2xhc3M9XCJmaWxlbmFtZVwiPlwiJHtmcmFtZS5maWxlbmFtZX1cIjwvY29kZT4sIGA7XG4gICAgICAgICAgICBsZXQgbGluZSA9IGBvbiBsaW5lIDxjb2RlIGNsYXNzPVwibGluZW5vXCI+JHtsaW5lbm99PC9jb2RlPiwgYDtcbiAgICAgICAgICAgIGxldCBzY29wZSA9IChmcmFtZS5zY29wZSAhPT0gXCI8bW9kdWxlPlwiICYmXG4gICAgICAgICAgICBmcmFtZS5zY29wZSAhPT0gdW5kZWZpbmVkKSA/IGBpbiBzY29wZSAke2ZyYW1lLnNjb3BlfWAgOiBcIlwiO1xuICAgICAgICAgICAgbGV0IHNvdXJjZSA9IFwiXCI7XG4gICAgICAgICAgICBpZiAoZnJhbWUuc291cmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzb3VyY2UgPSBgXFxuPHByZT48Y29kZT4ke2ZyYW1lLnNvdXJjZX08L2NvZGU+PC9wcmU+YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmaWxlICsgbGluZSArIHNjb3BlICsgc291cmNlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjb252ZXJ0U2t1bHB0RXJyb3IoZXJyb3IsIGZpbGVuYW1lRXhlY3V0ZWQsIGlzSW5zdHJ1Y3Rvcikge1xuICAgICAgICBsZXQgbmFtZSA9IGVycm9yLnRwJG5hbWU7XG4gICAgICAgIGxldCBhcmdzID0gU2suZmZpLnJlbWFwVG9KcyhlcnJvci5hcmdzKTtcbiAgICAgICAgbGV0IHRvcCA9IGAke25hbWV9OiAke2FyZ3NbMF19XFxuPGJyPlxcbjxicj5gO1xuICAgICAgICBsZXQgdHJhY2ViYWNrID0gXCJcIjtcbiAgICAgICAgaWYgKG5hbWUgPT09IFwiVGltZW91dEVycm9yXCIpIHtcbiAgICAgICAgICAgIGlmIChlcnJvci5lcnIgJiYgZXJyb3IuZXJyLnRyYWNlYmFjayAmJiBlcnJvci5lcnIudHJhY2ViYWNrLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFsbEZyYW1lcyA9IHRoaXMuYnVpbGRUcmFjZWJhY2soZXJyb3IuZXJyLCBmaWxlbmFtZUV4ZWN1dGVkKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBbXCJUcmFjZWJhY2s6XCJdO1xuICAgICAgICAgICAgICAgIGlmIChhbGxGcmFtZXMubGVuZ3RoID4gNSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCguLi5hbGxGcmFtZXMuc2xpY2UoMCwgMyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAuLi4gSGlkaW5nICR7YWxsRnJhbWVzLmxlbmd0aCAtIDN9IG90aGVyIHN0YWNrIGZyYW1lcyAuLi4sYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uYWxsRnJhbWVzLnNsaWNlKC0zLCAtMikpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKC4uLmFsbEZyYW1lcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyYWNlYmFjayA9IHJlc3VsdC5qb2luKFwiXFxuPGJyPlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpc0luc3RydWN0b3IpIHtcbiAgICAgICAgICAgICAgICB0b3AgPSBcIkVycm9yIGluIGluc3RydWN0b3IgZmVlZGJhY2suIFBsZWFzZSBzaG93IHRoZSBmb2xsb3dpbmcgdG8gYW4gaW5zdHJ1Y3Rvcjo8YnI+XFxuXCIrdG9wO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVycm9yLnRyYWNlYmFjayAmJiBlcnJvci50cmFjZWJhY2subGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdHJhY2ViYWNrID0gXCJUcmFjZWJhY2s6PGJyPlxcblwiICsgdGhpcy5idWlsZFRyYWNlYmFjayhlcnJvciwgZmlsZW5hbWVFeGVjdXRlZCkuam9pbihcIlxcbjxicj5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvcCtcIlxcblwiK3RyYWNlYmFjaztcbiAgICB9XG5cbiAgICBwcmVzZW50SW50ZXJuYWxFcnJvcihlcnJvciwgZmlsZW5hbWVFeGVjdXRlZCkge1xuICAgICAgICBpZiAoZXJyb3IudHAkbmFtZSA9PT0gXCJUaW1lb3V0RXJyb3JcIikge1xuICAgICAgICAgICAgdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5mZWVkYmFjay5jYXRlZ29yeShcInJ1bnRpbWVcIik7XG4gICAgICAgICAgICB0aGlzLm1haW4ubW9kZWwuZXhlY3V0aW9uLmZlZWRiYWNrLmxhYmVsKFwiVGltZW91dCBFcnJvclwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24uZmVlZGJhY2suY2F0ZWdvcnkoXCJpbnRlcm5hbFwiKTtcbiAgICAgICAgICAgIHRoaXMubWFpbi5tb2RlbC5leGVjdXRpb24uZmVlZGJhY2subGFiZWwoXCJJbnRlcm5hbCBFcnJvclwiKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbWVzc2FnZSA9IHRoaXMuY29udmVydFNrdWxwdEVycm9yKGVycm9yLCBmaWxlbmFtZUV4ZWN1dGVkLCB0cnVlKTtcbiAgICAgICAgdGhpcy5tYWluLm1vZGVsLmV4ZWN1dGlvbi5mZWVkYmFjay5tZXNzYWdlKG1lc3NhZ2UpO1xuXG4gICAgICAgIHRoaXMubm90aWZ5RmVlZGJhY2tVcGRhdGUoKTtcblxuICAgICAgICB0aGlzLm1haW4uY29tcG9uZW50cy5zZXJ2ZXIubG9nRXZlbnQoXCJYLVN5c3RlbS5FcnJvclwiLCBcImludGVybmFsXCIsIFwiSW50ZXJuYWwgRXJyb3JcIiwgbWVzc2FnZSwgZmlsZW5hbWVFeGVjdXRlZCk7XG4gICAgfVxuXG5cblxufSIsImltcG9ydCB7Zmlyc3REZWZpbmVkVmFsdWV9IGZyb20gXCJ1dGlsaXRpZXMuanNcIjtcblxuLy8gJHttYWtlVGFiKFwiP21vY2tfdXJscy5ibG9ja3B5XCIsIFwiVVJMIERhdGFcIiwgdHJ1ZSl9XG5cbmNvbnN0IG1ha2VUYWIgPSBmdW5jdGlvbihmaWxlbmFtZSwgZnJpZW5kbHlOYW1lLCBoaWRlSWZFbXB0eSwgbm90SW5zdHJ1Y3Rvcikge1xuICAgIGlmIChmcmllbmRseU5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBmcmllbmRseU5hbWUgPSBmaWxlbmFtZTtcbiAgICB9XG4gICAgbGV0IGluc3RydWN0b3JGaWxlQ2xhc3MgPSBcIlwiO1xuICAgIGxldCBoaWRlSWZOb3RJbnN0cnVjdG9yID0gXCJ0cnVlXCI7XG4gICAgaWYgKCFub3RJbnN0cnVjdG9yKSB7XG4gICAgICAgIGluc3RydWN0b3JGaWxlQ2xhc3MgPSBcImJsb2NrcHktZmlsZS1pbnN0cnVjdG9yXCI7XG4gICAgICAgIGhpZGVJZk5vdEluc3RydWN0b3IgPSBcImRpc3BsYXkuaW5zdHJ1Y3RvcigpXCI7XG4gICAgfVxuICAgIHJldHVybiBgXG4gICAgPGxpIGNsYXNzPVwibmF2LWl0ZW0gJHtpbnN0cnVjdG9yRmlsZUNsYXNzfVwiPlxuICAgICAgICA8YSBjbGFzcz1cIm5hdi1saW5rXCIgaHJlZj1cIiNcIlxuICAgICAgICAgICAgZGF0YS10b2dnbGU9XCJ0YWJcIlxuICAgICAgICAgICAgZGF0YS1iaW5kPVwiY3NzOiB7YWN0aXZlOiBkaXNwbGF5LmZpbGVuYW1lKCkgPT09ICcke2ZpbGVuYW1lfSd9LFxuICAgICAgICAgICAgICAgIGNsaWNrOiBkaXNwbGF5LmZpbGVuYW1lLmJpbmQoJGRhdGEsICcke2ZpbGVuYW1lfScpLFxuICAgICAgICAgICAgICAgIHZpc2libGU6ICghJHtoaWRlSWZFbXB0eX0gfHwgdWkuZmlsZXMuaGFzQ29udGVudHMoJyR7ZmlsZW5hbWV9JykpICYmICR7aGlkZUlmTm90SW5zdHJ1Y3Rvcn1cIj5cbiAgICAgICAgICAgICR7ZnJpZW5kbHlOYW1lfTwvYT5cbiAgICA8L2xpPmA7XG59O1xuXG5leHBvcnQgbGV0IEZJTEVTX0hUTUwgPSBgXG48ZGl2IGNsYXNzPVwiYmxvY2tweS1wYW5lbCBibG9ja3B5LWZpbGVzXCJcbiAgICBkYXRhLWJpbmQ9XCJ2aXNpYmxlOiB1aS5maWxlcy52aXNpYmxlLCBjbGFzczogdWkuZmlsZXMud2lkdGhcIj5cbjx1bCBjbGFzcz1cIm5hdiBuYXYtdGFic1wiIHJvbGU9XCJ0YWJsaXN0XCI+XG5cbiAgICA8bGkgY2xhc3M9XCJuYXYtaXRlbVwiPlxuICAgICAgICA8c3Ryb25nPlZpZXc6IDwvc3Ryb25nPlxuICAgIDwvbGk+XG5cbiAgICAke21ha2VUYWIoXCJhbnN3ZXIucHlcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHRydWUpfVxuICAgICR7bWFrZVRhYihcIiFpbnN0cnVjdGlvbnMubWRcIiwgXCJJbnN0cnVjdGlvbnNcIil9XG4gICAgJHttYWtlVGFiKFwiIWFzc2lnbm1lbnRfc2V0dGluZ3MuYmxvY2tweVwiLCBcIlNldHRpbmdzXCIpfVxuICAgICR7bWFrZVRhYihcIl5zdGFydGluZ19jb2RlLnB5XCIsIFwiU3RhcnRpbmcgQ29kZVwiKX1cbiAgICAke21ha2VUYWIoXCIhb25fcnVuLnB5XCIsIFwiT24gUnVuXCIpfVxuICAgICR7bWFrZVRhYihcIiFvbl9jaGFuZ2UucHlcIiwgXCJPbiBDaGFuZ2VcIiwgdHJ1ZSl9XG4gICAgJHttYWtlVGFiKFwiIW9uX2V2YWwucHlcIiwgXCJPbiBFdmFsXCIsIHRydWUpfVxuICAgICR7bWFrZVRhYihcIiFzYW1wbGVfc3VibWlzc2lvbnMuYmxvY2tweVwiLCBcIlNhbXBsZSBTdWJtaXNzaW9uc1wiLCB0cnVlKX1cbiAgICAke21ha2VUYWIoXCIhdGFncy5ibG9ja3B5XCIsIFwiVGFnc1wiLCB0cnVlKX1cbiAgICBcbiAgICA8IS0tIGtvIGZvcmVhY2g6IGFzc2lnbm1lbnQuZXh0cmFJbnN0cnVjdG9yRmlsZXMgLS0+XG4gICAgICAgIDxsaSBjbGFzcz1cIm5hdi1pdGVtXCJcbiAgICAgICAgICAgIGRhdGEtYmluZD1cImNzczogeydibG9ja3B5LWZpbGUtaW5zdHJ1Y3Rvcic6ICFmaWxlbmFtZSgpLnN0YXJ0c1dpdGgoJyYnKX0sXG4gICAgICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGZpbGVuYW1lKCkuc3RhcnRzV2l0aCgnJicpIHx8ICRyb290LmRpc3BsYXkuaW5zdHJ1Y3RvcigpIFwiPlxuICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXYtbGlua1wiIGhyZWY9XCIjXCJcbiAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT1cInRhYlwiXG4gICAgICAgICAgICAgICAgZGF0YS1iaW5kPVwiY3NzOiB7YWN0aXZlOiAkcm9vdC5kaXNwbGF5LmZpbGVuYW1lKCkgPT09IGZpbGVuYW1lKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmVkaXRhYmxlOiBmaWxlbmFtZSgpLnN0YXJ0c1dpdGgoJyYnKX0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6ICRyb290LmRpc3BsYXkuZmlsZW5hbWUuYmluZCgkZGF0YSwgZmlsZW5hbWUoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJHJvb3QudWkuZmlsZXMuZGlzcGxheUZpbGVuYW1lKGZpbGVuYW1lKCkpXCI+XG4gICAgICAgICAgICA8L2E+ICAgICAgICBcbiAgICAgICAgPC9saT5cbiAgICA8IS0tIC9rbyAtLT5cbiAgICA8IS0tIGtvIGZvcmVhY2g6IGFzc2lnbm1lbnQuZXh0cmFTdGFydGluZ0ZpbGVzIC0tPlxuICAgICAgICA8bGkgY2xhc3M9XCJuYXYtaXRlbSBibG9ja3B5LWZpbGUtaW5zdHJ1Y3RvclwiXG4gICAgICAgICAgICBkYXRhLWJpbmQ9XCJ2aXNpYmxlOiAkcm9vdC5kaXNwbGF5Lmluc3RydWN0b3IoKVwiPlxuICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXYtbGlua1wiIGhyZWY9XCIjXCJcbiAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT1cInRhYlwiXG4gICAgICAgICAgICAgICAgZGF0YS1iaW5kPVwiY3NzOiB7YWN0aXZlOiAkcm9vdC5kaXNwbGF5LmZpbGVuYW1lKCkgPT09IGZpbGVuYW1lKCl9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiAkcm9vdC5kaXNwbGF5LmZpbGVuYW1lLmJpbmQoJGRhdGEsIGZpbGVuYW1lKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGZpbGVuYW1lXCI+XG4gICAgICAgICAgICA8L2E+ICAgICAgICBcbiAgICAgICAgPC9saT5cbiAgICA8IS0tIC9rbyAtLT5cbiAgICBcbiAgICA8IS0tIGtvIGZvcmVhY2g6IHN1Ym1pc3Npb24uZXh0cmFGaWxlcyAtLT5cbiAgICAgICAgPGxpIGNsYXNzPVwibmF2LWl0ZW1cIj5cbiAgICAgICAgICAgIDxhIGNsYXNzPVwibmF2LWxpbmtcIiBocmVmPVwiI1wiXG4gICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9XCJ0YWJcIlxuICAgICAgICAgICAgICAgIGRhdGEtYmluZD1cImNzczoge2FjdGl2ZTogJHJvb3QuZGlzcGxheS5maWxlbmFtZSgpID09PSBmaWxlbmFtZSgpfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogJHJvb3QuZGlzcGxheS5maWxlbmFtZS5iaW5kKCRkYXRhLCBmaWxlbmFtZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAkcm9vdC51aS5maWxlcy5kaXNwbGF5RmlsZW5hbWUoZmlsZW5hbWUoKSlcIj5cbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9saT5cbiAgICA8IS0tIC9rbyAtLT5cbiAgXG4gICAgPGxpIGNsYXNzPVwibmF2LWl0ZW0gZHJvcGRvd25cIiBkYXRhLWJpbmQ9XCJ2aXNpYmxlOiB1aS5maWxlcy5hZGRJc1Zpc2libGVcIj5cbiAgICAgICAgPGEgY2xhc3M9XCJuYXYtbGluayBkcm9wZG93bi10b2dnbGVcIiBocmVmPVwiI1wiIGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIlxuICAgICAgICAgcm9sZT1cImJ1dHRvblwiIGFyaWEtaGFzcG9wdXA9XCJ0cnVlXCIgYXJpYS1leHBhbmRlZD1cImZhbHNlXCI+QWRkIE5ldzwvYT5cbiAgICAgICAgPCEtLSBrbyBpZjogJHJvb3QuZGlzcGxheS5pbnN0cnVjdG9yKCkgLS0+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtcmlnaHRcIj5cbiAgICAgICAgICAgIDxhIGNsYXNzPVwiZHJvcGRvd24taXRlbSBibG9ja3B5LWZpbGUtaW5zdHJ1Y3RvclwiIGhyZWY9XCIjXCJcbiAgICAgICAgICAgICAgICBkYXRhLWJpbmQ9XCJoaWRkZW46IHVpLmZpbGVzLmhhc0NvbnRlbnRzKCc/bW9ja191cmxzLmJsb2NrcHknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiB1aS5maWxlcy5hZGQuYmluZCgkZGF0YSwgJz9tb2NrX3VybHMuYmxvY2tweScpXCI+VVJMIERhdGE8L2E+XG4gICAgICAgICAgICA8YSBjbGFzcz1cImRyb3Bkb3duLWl0ZW0gYmxvY2tweS1maWxlLWluc3RydWN0b3JcIiBocmVmPVwiI1wiXG4gICAgICAgICAgICAgICAgZGF0YS1iaW5kPVwiaGlkZGVuOiB1aS5maWxlcy5oYXNDb250ZW50cygnaW1hZ2VzLmJsb2NrcHknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiB1aS5maWxlcy5hZGQuYmluZCgkZGF0YSwgJ2ltYWdlcy5ibG9ja3B5JylcIj5JbWFnZXM8L2E+XG4gICAgICAgICAgICA8YSBjbGFzcz1cImRyb3Bkb3duLWl0ZW0gYmxvY2tweS1maWxlLWluc3RydWN0b3JcIiBocmVmPVwiI1wiXG4gICAgICAgICAgICAgICAgZGF0YS1iaW5kPVwiaGlkZGVuOiB1aS5maWxlcy5oYXNDb250ZW50cygnP3Rvb2xib3guYmxvY2tweScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IHVpLmZpbGVzLmFkZC5iaW5kKCRkYXRhLCAnP3Rvb2xib3guYmxvY2tweScpXCI+VG9vbGJveDwvYT5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgPGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtIGJsb2NrcHktZmlsZS1pbnN0cnVjdG9yXCIgaHJlZj1cIiNcIlxuICAgICAgICAgICAgICAgIGRhdGEtYmluZD1cImhpZGRlbjogdWkuZmlsZXMuaGFzQ29udGVudHMoJyF0YWdzLmJsb2NrcHknKVwiPlRhZ3M8L2E+XG4gICAgICAgICAgICA8YSBjbGFzcz1cImRyb3Bkb3duLWl0ZW0gYmxvY2tweS1maWxlLWluc3RydWN0b3JcIiBocmVmPVwiI1wiXG4gICAgICAgICAgICAgICAgZGF0YS1iaW5kPVwiaGlkZGVuOiB1aS5maWxlcy5oYXNDb250ZW50cygnIXNhbXBsZV9zdWJtaXNzaW9ucy5ibG9ja3B5JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogdWkuZmlsZXMuYWRkLmJpbmQoJGRhdGEsICchc2FtcGxlX3N1Ym1pc3Npb25zLmJsb2NrcHknKVwiPlNhbXBsZSBTdWJtaXNzaW9uczwvYT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkcm9wZG93bi1kaXZpZGVyXCI+PC9kaXY+XG4gICAgICAgICAgICA8YSBjbGFzcz1cImRyb3Bkb3duLWl0ZW0gYmxvY2tweS1maWxlLWluc3RydWN0b3JcIiBocmVmPVwiI1wiXG4gICAgICAgICAgICAgICAgZGF0YS1iaW5kPVwiaGlkZGVuOiBhc3NpZ25tZW50Lm9uQ2hhbmdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IHVpLmZpbGVzLmFkZC5iaW5kKCRkYXRhLCAnIW9uX2NoYW5nZS5weScpXCI+T24gQ2hhbmdlPC9hPlxuICAgICAgICAgICAgPGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtIGJsb2NrcHktZmlsZS1pbnN0cnVjdG9yXCIgaHJlZj1cIiNcIlxuICAgICAgICAgICAgICAgIGRhdGEtYmluZD1cImhpZGRlbjogYXNzaWdubWVudC5vbkV2YWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogdWkuZmlsZXMuYWRkLmJpbmQoJGRhdGEsICchb25fZXZhbC5weScpXCI+T24gRXZhbDwvYT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkcm9wZG93bi1kaXZpZGVyXCI+PC9kaXY+XG4gICAgICAgICAgIDxhIGNsYXNzPVwiZHJvcGRvd24taXRlbSBibG9ja3B5LWZpbGUtaW5zdHJ1Y3RvclwiIGhyZWY9XCIjXCJcbiAgICAgICAgICAgICAgICBkYXRhLWJpbmQ9XCJoaWRkZW46IHVpLmZpbGVzLmhhc0NvbnRlbnRzKCchYW5zd2VyX3ByZWZpeC5weScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IHVpLmZpbGVzLmFkZC5iaW5kKCRkYXRhLCAnIWFuc3dlcl9wcmVmaXgucHknKVwiPkFuc3dlciBQcmVmaXg8L2E+XG4gICAgICAgICAgIDxhIGNsYXNzPVwiZHJvcGRvd24taXRlbSBibG9ja3B5LWZpbGUtaW5zdHJ1Y3RvclwiIGhyZWY9XCIjXCJcbiAgICAgICAgICAgICAgICBkYXRhLWJpbmQ9XCJoaWRkZW46IHVpLmZpbGVzLmhhc0NvbnRlbnRzKCchYW5zd2VyX3N1ZmZpeC5weScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IHVpLmZpbGVzLmFkZC5iaW5kKCRkYXRhLCAnIWFuc3dlcl9zdWZmaXgucHknKVwiPkFuc3dlciBTdWZmaXg8L2E+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZHJvcGRvd24tZGl2aWRlclwiPjwvZGl2PlxuICAgICAgICAgICAgPGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtIGJsb2NrcHktZmlsZS1pbnN0cnVjdG9yXCIgaHJlZj1cIiNcIlxuICAgICAgICAgICAgICAgIGRhdGEtYmluZD1cImNsaWNrOiB1aS5maWxlcy5hZGQuYmluZCgkZGF0YSwgJ3N0YXJ0aW5nJylcIj5TdGFydGluZyBGaWxlPC9hPlxuICAgICAgICAgICAgPGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtIGJsb2NrcHktZmlsZS1pbnN0cnVjdG9yXCIgaHJlZj1cIiNcIlxuICAgICAgICAgICAgICAgIGRhdGEtYmluZD1cImNsaWNrOiB1aS5maWxlcy5hZGQuYmluZCgkZGF0YSwgJ2luc3RydWN0b3InKVwiPkluc3RydWN0b3IgRmlsZTwvYT5cbiAgICAgICAgICAgIDxhIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIGhyZWY9XCIjXCJcbiAgICAgICAgICAgICAgICBkYXRhLWJpbmQ9XCJjbGljazogdWkuZmlsZXMuYWRkLmJpbmQoJGRhdGEsICdzdHVkZW50JylcIj5TdHVkZW50IEZpbGU8L2E+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8IS0tIC9rbyAtLT5cbiAgICAgICAgPCEtLSBrbyBpZm5vdDogJHJvb3QuZGlzcGxheS5pbnN0cnVjdG9yKCkgLS0+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtcmlnaHRcIj5cbiAgICAgICAgPGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgaHJlZj1cIiNcIlxuICAgICAgICAgICAgICAgIGRhdGEtYmluZD1cImNsaWNrOiB1aS5maWxlcy5hZGQuYmluZCgkZGF0YSwgJ3N0dWRlbnQnKVwiPlN0dWRlbnQgRmlsZTwvYT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDwhLS0gL2tvIC0tPlxuICAgIDwvbGk+XG4gIFxuPC91bD5cbjwvZGl2PlxuYDtcblxuY29uc3QgTkVXX0lOU1RSVUNUT1JfRklMRV9ESUFMT0dfSFRNTCA9IGBcbjxmb3JtPlxuPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCI+XG4gICAgPGRpdj5cbiAgICAgICAgPHA+VGhpcyBkaWFsb2cgYm94IGlzIGZvciBjcmVhdGluZyB0ZXh0IGZpbGVzIChlLmcuLCBQeXRob24gY29kZSwgTWFya2Rvd24sIGV0Yy4pIHRoYXQgd2lsbCBiZVxuICAgICAgICBhY2Nlc3NpYmxlIGZyb20gUHl0aG9uLiBJZiB5b3Ugd2FudCB0byB1cGxvYWQgYSBiaW5hcnkgZmlsZSAoZS5nLiwgYW4gaW1hZ2UsIGEgc3FsaXRlIGRhdGFiYXNlKSxcbiAgICAgICAgdGhlbiB5b3Ugc2hvdWxkIHVzZSB0aGUgXCJJbWFnZXNcIiBvciBcIlVSTCBEYXRhXCIgb3B0aW9ucy48L3A+XG4gICAgICAgIFxuICAgICAgICA8cD5TdHVkZW50cyB3aWxsIG5vdCBiZSBhYmxlIHRvIHNlZSBmaWxlIHRhYnMgdW5sZXNzIHlvdSBjaGFuZ2UgdGhlIFwiSGlkZSBGaWxlc1wiIHNldHRpbmcgdG8gYmUgdW5jaGVja2VkLjwvcD5cbiAgICA8L2Rpdj5cbiAgICA8IS0tIEZpbGVuYW1lIC0tPlxuICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMiB0ZXh0LXJpZ2h0XCI+XG4gICAgICAgIDxsYWJlbCBmb3I9XCJibG9ja3B5LWluc3RydWN0b3ItZmlsZS1kaWFsb2ctZmlsZW5hbWVcIj5GaWxlbmFtZTo8L2xhYmVsPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTBcIj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2wgYmxvY2tweS1pbnN0cnVjdG9yLWZpbGUtZGlhbG9nLWZpbGVuYW1lXCJcbiAgICAgICAgICAgIGlkPVwiYmxvY2tweS1pbnN0cnVjdG9yLWZpbGUtZGlhbG9nLWZpbGVuYW1lXCI+ICAgIFxuICAgIDwvZGl2PlxuICAgIDwhLS0gRmlsZXR5cGUgLS0+XG4gICAgPGRpdiBjbGFzcz1cImNvbC1zbS0yIHRleHQtcmlnaHQgbXQtMlwiPlxuICAgICAgICA8bGFiZWwgZm9yPVwiYmxvY2tweS1pbnN0cnVjdG9yLWZpbGUtZGlhbG9nLWZpbGV0eXBlXCI+RmlsZXR5cGU6IDwvbGFiZWw+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImNvbC1zbS0xMFwiPlxuICAgICAgICA8c3BhbiBjbGFzcz1cImJsb2NrcHktaW5zdHJ1Y3Rvci1maWxlLWRpYWxvZy1maWxldHlwZVwiXG4gICAgICAgICAgICBpZD1cImJsb2NrcHktaW5zdHJ1Y3Rvci1maWxlLWRpYWxvZy1maWxldHlwZVwiPjwvc3Bhbj4gICAgXG4gICAgPC9kaXY+XG4gICAgPCEtLSBJbmFjY2Vzc2libGUgdG8gc3R1ZGVudD8gLS0+XG4gICAgPGRpdiBjbGFzcz1cImNvbC1zbS0yIHRleHQtcmlnaHQgbXQtMlwiPlxuICAgICAgICA8bGFiZWwgZm9yPVwiYmxvY2tweS1pbnN0cnVjdG9yLWZpbGUtZGlhbG9nLW5hbWVzcGFjZVwiPk5hbWVzcGFjZTogPC9sYWJlbD5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTRcIj5cbiAgICAgICAgPHNlbGVjdCBjbGFzcz1cImZvcm0tY29udHJvbCBibG9ja3B5LWluc3RydWN0b3ItZmlsZS1kaWFsb2ctbmFtZXNwYWNlXCJcbiAgICAgICAgICAgIGlkPVwiYmxvY2tweS1pbnN0cnVjdG9yLWZpbGUtZGlhbG9nLW5hbWVzcGFjZVwiPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIiFcIj5Db21wbGV0ZWx5IGluYWNjZXNzaWJsZTwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIj9cIj5IaWRkZW4gZnJvbSBzdHVkZW50LCBhY2Nlc3NpYmxlIHByb2dyYW1hdGljYWxseTwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIiZcIj5WaXNpYmxlIHRvIHN0dWRlbnQsIGJ1dCBub3QgZWRpdGFibGU8L29wdGlvbj5cbiAgICAgICAgPC9zZWxlY3Q+XG4gICAgPC9kaXY+XG48L2Rpdj5cbjwvZm9ybT5cbmA7XG5cbi8qKlxuICogRmlsZW5hbWVzIGxpdmUgaW4gb25lIG9mIGZpdmUgcG9zc2libGUgbmFtZXNwYWNlczpcbiAqICBJbnN0cnVjdG9yICghKTogSW52aXNpYmxlIHRvIHRoZSBzdHVkZW50IHVuZGVyIGFsbCBjaXJjdW1zdGFuY2VzXG4gKiAgU3RhcnQgU3BhY2UgKF4pOiBVc2VkIHRvIHJlc2V0IHRoZSBzdHVkZW50IG5hbWVzcGFjZVxuICogIFN0dWRlbnQgU3BhY2UgKCk6IFZpc2libGUgdG8gdGhlIHN0dWRlbnQgd2hlbiBkaXNwbGF5LmhpZGVGaWxlcyBpcyBub3QgdHJ1ZSwgYWJsZSB0byBiZSBlZGl0ZWRcbiAqICBIaWRkZW4gU3BhY2UgKD8pOiBOb3QgZGlyZWN0bHkgdmlzaWJsZSB0byB0aGUgc3R1ZGVudCwgYnV0IGFjY2Vzc2libGUgcHJvZ3JhbW1hdGljYWxseVxuICogIFJlYWQtb25seSBTcGFjZSAoJik6IEFuIGluc3RydWN0b3IgZmlsZSB0eXBlIHZpc2libGUgdG8gdGhlIHN0dWRlbnQsIGJ1dCBpcyB1bmVkaXRhYmxlIGJ5IHRoZW1cbiAqICBTZWNyZXQgU3BhY2UgKCQpOiBOb3QgdmlzaWJsZSBmcm9tIHRoZSBtZW51IGF0IGFsbCwgc29tZSBvdGhlciBtZWNoYW5pc20gY29udHJvbHMgaXRcbiAqICBHZW5lcmF0ZWQgU3BhY2UgKCopOiBWaXNpYmxlIHRvIHRoZSBzdHVkZW50LCBidXQgZGVzdHJveWVkIGFmdGVyIEVuZ2luZS5DbGVhci4gQ2FuIHNoYWRvdyBhbiBhY3R1YWwgZmlsZS5cbiAqICBDb25jYXRlbmF0ZWQgU3BhY2UgKCMpOiBVc2VkIHdoZW4gYnVuZGxpbmcgYSBzcGFjZSBmb3IgdGhlIHNlcnZlci5cbiAqL1xuXG5leHBvcnQgbGV0IFNUQVJUSU5HX0ZJTEVTID0gW1xuICAgIC8vIFN1Ym1pc3Npb25cbiAgICBcImFuc3dlci5weVwiLFxuICAgIC8vIEluc3RydWN0b3IgZmlsZXNcbiAgICBcIiFpbnN0cnVjdGlvbnMubWRcIixcbiAgICBcIiFhc3NpZ25tZW50X3NldHRpbmdzLmJsb2NrcHlcIixcbiAgICBcIl5zdGFydGluZ19jb2RlLnB5XCIsXG4gICAgXCIhb25fcnVuLnB5XCIsXG4gICAgXCIkc2V0dGluZ3MuYmxvY2tweVwiLFxuXTtcblxuZXhwb3J0IGNvbnN0IEJBU0lDX05FV19GSUxFUyA9IFtcbiAgICBcIiFvbl9jaGFuZ2UucHlcIixcbiAgICBcIiFvbl9ldmFsLnB5XCIsXG4gICAgXCI/bW9ja191cmxzLmJsb2NrcHlcIixcbiAgICBcIj90b29sYm94LmJsb2NrcHlcIixcbiAgICBcIiF0YWdzLmJsb2NrcHlcIixcbiAgICBcIiFzYW1wbGVfc3VibWlzc2lvbnMuYmxvY2tweVwiLFxuICAgIFwiIWFuc3dlcl9wcmVmaXgucHlcIixcbiAgICBcIiFhbnN3ZXJfc3VmZml4LnB5XCJcbl07XG5cbmV4cG9ydCBmdW5jdGlvbiBjaG9tcFNwZWNpYWxGaWxlKGZpbGVuYW1lKSB7XG4gICAgaWYgKFwiIV4/JiQqI1wiLmluY2x1ZGVzKGZpbGVuYW1lWzBdKSkge1xuICAgICAgICByZXR1cm4gZmlsZW5hbWUuc2xpY2UoMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZpbGVuYW1lO1xuICAgIH1cbn1cblxuY29uc3QgSU5TVFJVQ1RPUl9ESVJFQ1RPUlkgPSBcIl9pbnN0cnVjdG9yL1wiO1xuY29uc3QgU1RVREVOVF9ESVJFQ1RPUlkgPSBcIl9zdHVkZW50L1wiO1xuXG5jb25zdCBTZWFyY2hNb2RlcyA9IHtcbiAgICBFVkVSWVdIRVJFOiBcIkVWRVJZV0hFUkVcIixcbiAgICBTVEFSVF9XSVRIX0lOU1RSVUNUT1I6IFwiU1RBUlRfV0lUSF9JTlNUUlVDVE9SXCIsXG4gICAgT05MWV9TVFVERU5UX0ZJTEVTOiBcIk9OTFlfU1RVREVOVF9GSUxFU1wiXG59O1xuXG5jb25zdCBERUxFVEFCTEVfU0lNUExFX0ZJTEVTID0gW1wiIW9uX2NoYW5nZS5weVwiLCBcIiFvbl9ldmFsLnB5XCJdO1xuXG5leHBvcnQgY29uc3QgVU5ERUxFVEFCTEVfRklMRVMgPSBbXCJhbnN3ZXIucHlcIiwgXCIhaW5zdHJ1Y3Rpb25zLm1kXCIsIFwiIWFzc2lnbm1lbnRfc2V0dGluZ3MucHlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIl5zdGFydGluZ19jb2RlLnB5XCIsIFwiIW9uX3J1bi5weVwiLCBcIiRzZXR0aW5ncy5ibG9ja3B5XCJdO1xuXG5leHBvcnQgY29uc3QgVU5SRU5BTUFCTEVfRklMRVMgPSBbXCJhbnN3ZXIucHlcIiwgXCIhaW5zdHJ1Y3Rpb25zLm1kXCIsIFwiIWFzc2lnbm1lbnRfc2V0dGluZ3MucHlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIl5zdGFydGluZ19jb2RlLnB5XCIsIFwiIW9uX3J1bi5weVwiLCBcIiRzZXR0aW5ncy5ibG9ja3B5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIhb25fY2hhbmdlLnB5XCIsIFwiIW9uX2V2YWwucHlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIj9tb2NrX3VybHMuYmxvY2tweVwiLCBcIj90b29sYm94LmJsb2NrcHlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiF0YWdzLmJsb2NrcHlcIiwgXCIhc2FtcGxlX3N1Ym1pc3Npb25zLmJsb2NrcHlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiFhbnN3ZXJfcHJlZml4LnB5XCIsIFwiIWFuc3dlcl9zdWZmaXgucHlcIl07XG5cbmNsYXNzIEJsb2NrUHlGaWxlIHtcbiAgICBjb25zdHJ1Y3RvcihtYWluLCBmaWxlbmFtZSwgY29udGVudHMpIHtcbiAgICAgICAgdGhpcy5tYWluID0gbWFpbjtcbiAgICAgICAgdGhpcy5maWxlbmFtZSA9IGZpbGVuYW1lO1xuICAgICAgICB0aGlzLmNvbnRlbnRzID0gY29udGVudHMgfHwgXCJcIjtcbiAgICAgICAgdGhpcy5vd25lciA9IG51bGw7XG4gICAgICAgIHRoaXMuaGFuZGxlID0gbnVsbDtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlTW9kZWxGaWxlKGZpbGVuYW1lLCBjb250ZW50cykge1xuICAgIHJldHVybiB7XCJmaWxlbmFtZVwiOiBrby5vYnNlcnZhYmxlKGZpbGVuYW1lKSwgY29udGVudHM6IGtvLm9ic2VydmFibGUoY29udGVudHMgfHwgXCJcIil9O1xufVxuXG5mdW5jdGlvbiBtYWtlTW9ja01vZGVsRmlsZShmaWxlbmFtZSwgY29udGVudHMpIHtcbiAgICByZXR1cm4geyBmaWxlbmFtZTogKCkgPT4gZmlsZW5hbWUsIGNvbnRlbnRzOiAoKSA9PiBjb250ZW50cyB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZENvbmNhdGVuYXRlZEZpbGUoY29uY2F0ZW5hdGVkRmlsZSwgbW9kZWxGaWxlTGlzdCkge1xuICAgIGlmIChjb25jYXRlbmF0ZWRGaWxlKSB7XG4gICAgICAgIGxldCBmaWxlcyA9IEpTT04ucGFyc2UoY29uY2F0ZW5hdGVkRmlsZSk7XG4gICAgICAgIGxldCBtb2RlbEZpbGVzID0gW107XG4gICAgICAgIGZvciAobGV0IGZpbGVuYW1lIGluIGZpbGVzKSB7XG4gICAgICAgICAgICBpZiAoZmlsZXMuaGFzT3duUHJvcGVydHkoZmlsZW5hbWUpKSB7XG4gICAgICAgICAgICAgICAgbW9kZWxGaWxlcy5wdXNoKG1ha2VNb2RlbEZpbGUoZmlsZW5hbWUsIGZpbGVzW2ZpbGVuYW1lXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vZmlsZXMgPSBmaWxlcy5tYXAoZmlsZSA9PiBtYWtlTW9kZWxGaWxlKGZpbGUuZmlsZW5hbWUsIGZpbGUuY29udGVudHMpKTtcbiAgICAgICAgaWYgKG1vZGVsRmlsZUxpc3QpIHtcbiAgICAgICAgICAgIG1vZGVsRmlsZUxpc3QobW9kZWxGaWxlcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbW9kZWxGaWxlcztcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChtb2RlbEZpbGVMaXN0KSB7XG4gICAgICAgICAgICBtb2RlbEZpbGVMaXN0KFtdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbmNhdGVuYXRlZEZpbGUobW9kZWxGaWxlTGlzdCkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShtb2RlbEZpbGVMaXN0KCkubWFwKGZpbGUgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmlsZW5hbWU6IGZpbGUuZmlsZW5hbWUoKSxcbiAgICAgICAgICAgIGNvbnRlbnRzOiBmaWxlLmNvbnRlbnRzKClcbiAgICAgICAgfTtcbiAgICB9KSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZlQ29uY2F0ZW5hdGVkRmlsZShtb2RlbEZpbGVMaXN0KSB7XG4gICAgcmV0dXJuIGtvLnB1cmVDb21wdXRlZCgoKSA9PiB7XG4gICAgICAgIGxldCByZXN1bHQgPSB7fTtcbiAgICAgICAgbW9kZWxGaWxlTGlzdCgpLmZvckVhY2goZmlsZSA9PlxuICAgICAgICAgICAgcmVzdWx0W2ZpbGUuZmlsZW5hbWUoKV0gPSBmaWxlLmNvbnRlbnRzKCkpO1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocmVzdWx0KTtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBBYnN0cmFjdHMgYXdheSBkYXRhYmFzZSBsb2dpY1xuICovXG5leHBvcnQgY2xhc3MgQmxvY2tQeUZpbGVTeXN0ZW0ge1xuICAgIGNvbnN0cnVjdG9yKG1haW4pIHtcbiAgICAgICAgdGhpcy5tYWluID0gbWFpbjtcbiAgICAgICAgdGhpcy5maWxlc18gPSB7fTtcbiAgICAgICAgdGhpcy5tb3VudEZpbGVzKCk7XG5cbiAgICAgICAgdGhpcy53YXRjaE1vZGVsKCk7XG4gICAgICAgIHRoaXMud2F0Y2hlc18gPSB7fTtcblxuICAgICAgICB0aGlzLnJlbW90ZUZpbGVzXyA9IHt9O1xuICAgICAgICB0aGlzLmZpbGVzVG9VcmxzID0ge307XG5cbiAgICAgICAgLyptYWluLm1vZGVsLmNvbmZpZ3VyYXRpb24uY29udGFpbmVyLmZpbmQoXCIuYmxvY2tweS1maWxlLWluc3RydWN0b3JcIikudG9nZ2xlKHRoaXMubWFpbi5tb2RlbC5kaXNwbGF5Lmluc3RydWN0b3IoKSk7XG4gICAgICAgIHRoaXMubWFpbi5tb2RlbC5kaXNwbGF5Lmluc3RydWN0b3Iuc3Vic2NyaWJlKCh2aXNpYmxpdHkpPT4ge1xuICAgICAgICAgICAgbWFpbi5tb2RlbC5jb25maWd1cmF0aW9uLmNvbnRhaW5lci5maW5kKFwiLmJsb2NrcHktZmlsZS1pbnN0cnVjdG9yXCIpLnRvZ2dsZSh2aXNpYmxpdHkpO1xuICAgICAgICB9KTsqL1xuICAgIH1cblxuICAgIHdhdGNoRmlsZShmaWxlbmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCEoZmlsZW5hbWUgaW4gdGhpcy53YXRjaGVzXykpIHtcbiAgICAgICAgICAgIHRoaXMud2F0Y2hlc19bZmlsZW5hbWVdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53YXRjaGVzX1tmaWxlbmFtZV0ucHVzaChjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgc3RvcFdhdGNoaW5nRmlsZShmaWxlbmFtZSkge1xuICAgICAgICBkZWxldGUgdGhpcy53YXRjaGVzX1tmaWxlbmFtZV07XG4gICAgfVxuXG4gICAgd2F0Y2hNb2RlbCgpIHtcbiAgICAgICAgbGV0IGZpbGVzeXN0ZW0gPSB0aGlzO1xuICAgICAgICBbdGhpcy5tYWluLm1vZGVsLnN1Ym1pc3Npb24uZXh0cmFGaWxlcyxcbiAgICAgICAgIHRoaXMubWFpbi5tb2RlbC5hc3NpZ25tZW50LmV4dHJhU3RhcnRpbmdGaWxlcyxcbiAgICAgICAgIHRoaXMubWFpbi5tb2RlbC5hc3NpZ25tZW50LmV4dHJhSW5zdHJ1Y3RvckZpbGVzXS5mb3JFYWNoKGZpbGVBcnJheSA9PlxuICAgICAgICAgICAgZmlsZUFycmF5LnN1YnNjcmliZShmdW5jdGlvbihjaGFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlcy5zb3J0KChmaXJzdCwgc2Vjb25kKSA9PiBzZWNvbmQuc3RhdHVzLmxvY2FsZUNvbXBhcmUoZmlyc3Quc3RhdHVzKSlcbiAgICAgICAgICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKGNoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1vZGVsRmlsZSA9IGNoYW5nZS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFuZ2Uuc3RhdHVzID09PSBcImFkZGVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUcmFjayBuZXcgZmlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmaWxlID0gZmlsZXN5c3RlbS5uZXdGaWxlKG1vZGVsRmlsZS5maWxlbmFtZSgpLCBtb2RlbEZpbGUuY29udGVudHMoKSwgbW9kZWxGaWxlLmNvbnRlbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlc3lzdGVtLm5vdGlmeVdhdGNoZXMoZmlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoYW5nZS5zdGF0dXMgPT09IFwiZGVsZXRlZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGVsZXRlIGZpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmlsZSA9IGZpbGVzeXN0ZW0uZGVsZXRlRmlsZUxvY2FsbHlfKG1vZGVsRmlsZS5maWxlbmFtZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZXN5c3RlbS5tYWluLm1vZGVsLmRpc3BsYXkuZmlsZW5hbWUoKSA9PT0gbW9kZWxGaWxlLmZpbGVuYW1lKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXN5c3RlbS5tYWluLm1vZGVsLmRpc3BsYXkuZmlsZW5hbWUoXCJhbnN3ZXIucHlcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIHRoaXMsIFwiYXJyYXlDaGFuZ2VcIilcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBhbnN3ZXIucHlcbiAgICAvLyAgID0+IHN1YnNjcmliZSB0byBmaXJzdCBlbGVtZW50IG9mIHN1Ym1pc3Npb24uY29kZSlcbiAgICAvLyAhb25fcnVuLnB5LCAhb25fY2hhbmdlLnB5LCAhb25fZXZhbC5weVxuICAgIC8vICAgPT4gc3Vic2NyaWJlIHRvIHJlbGV2YW50IGFzc2lnbm1lbnQuPHdoYXRldmVyPlxuICAgIC8vIF5zdGFydGluZ19jb2RlLnB5XG4gICAgLy8gICA9PiBzdWJzY3JpYmUgdG8gZmlyc3QgZWxlbWVudCBvZiBhc3NpZ25tZW50LnN0YXJ0aW5nQ29kZVxuICAgIC8vIF53aGF0ZXZlclxuICAgIC8vICAgPT4gc3Vic2NyaWJlIHRvIHJlc3Qgb2YgdGhlIGVsZW1lbnRzIG9mIGFzc2lnbm1lbnQuc3RhcnRpbmdDb2RlXG4gICAgLy8gIXdoYXRldmVyIG9yID93aGF0ZXZlclxuICAgIC8vICAgPT4gc3Vic2NyaWJlIHRvIGVsZW1lbnRzIG9mIGFzc2lnbm1lbnQuZXh0cmFGaWxlc1xuICAgIC8vIE90aGVyd2lzZTpcbiAgICAvLyAgID0+IHN1YnNjcmliZSB0byByZXN0IG9mIHRoZSBlbGVtZW50cyBvZiBzdWJtaXNzaW9uLmNvZGVcbiAgICAvKipcbiAgICAgKiBOZXcgc3BlY2lhbCBmaWxlcyBuZWVkIHRvIGJlIHJlZ2lzdGVyZWQgaGVyZVxuICAgICAqIEBwYXJhbSBmaWxlIHtCbG9ja1B5RmlsZX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9ic2VydmVGaWxlXyhmaWxlKSB7XG4gICAgICAgIGlmIChmaWxlLmZpbGVuYW1lID09PSBcImFuc3dlci5weVwiKSB7XG4gICAgICAgICAgICBmaWxlLmhhbmRsZSA9IHRoaXMubWFpbi5tb2RlbC5zdWJtaXNzaW9uLmNvZGU7XG4gICAgICAgIH0gZWxzZSBpZiAoZmlsZS5maWxlbmFtZSA9PT0gXCIhb25fcnVuLnB5XCIpIHtcbiAgICAgICAgICAgIGZpbGUuaGFuZGxlID0gdGhpcy5tYWluLm1vZGVsLmFzc2lnbm1lbnQub25SdW47XG4gICAgICAgIH0gZWxzZSBpZiAoZmlsZS5maWxlbmFtZSA9PT0gXCIhb25fY2hhbmdlLnB5XCIpIHtcbiAgICAgICAgICAgIGZpbGUuaGFuZGxlID0gdGhpcy5tYWluLm1vZGVsLmFzc2lnbm1lbnQub25DaGFuZ2U7XG4gICAgICAgIH0gZWxzZSBpZiAoZmlsZS5maWxlbmFtZSA9PT0gXCIhb25fZXZhbC5weVwiKSB7XG4gICAgICAgICAgICBmaWxlLmhhbmRsZSA9IHRoaXMubWFpbi5tb2RlbC5hc3NpZ25tZW50Lm9uRXZhbDtcbiAgICAgICAgfSBlbHNlIGlmIChmaWxlLmZpbGVuYW1lID09PSBcIiFpbnN0cnVjdGlvbnMubWRcIikge1xuICAgICAgICAgICAgZmlsZS5oYW5kbGUgPSB0aGlzLm1haW4ubW9kZWwuYXNzaWdubWVudC5pbnN0cnVjdGlvbnM7XG4gICAgICAgIH0gZWxzZSBpZiAoZmlsZS5maWxlbmFtZSA9PT0gXCJec3RhcnRpbmdfY29kZS5weVwiKSB7XG4gICAgICAgICAgICBmaWxlLmhhbmRsZSA9IHRoaXMubWFpbi5tb2RlbC5hc3NpZ25tZW50LnN0YXJ0aW5nQ29kZTtcbiAgICAgICAgfSBlbHNlIGlmIChmaWxlLmZpbGVuYW1lID09PSBcIj9tb2NrX3VybHMuYmxvY2tweVwiKSB7XG4gICAgICAgICAgICB0aGlzLm9ic2VydmVJbkFycmF5XyhmaWxlLCB0aGlzLm1haW4ubW9kZWwuYXNzaWdubWVudC5leHRyYUluc3RydWN0b3JGaWxlcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZmlsZS5maWxlbmFtZSA9PT0gXCI/dG9vbGJveC5ibG9ja3B5XCIpIHtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZUluQXJyYXlfKGZpbGUsIHRoaXMubWFpbi5tb2RlbC5hc3NpZ25tZW50LmV4dHJhSW5zdHJ1Y3RvckZpbGVzKTtcbiAgICAgICAgfSBlbHNlIGlmIChmaWxlLmZpbGVuYW1lID09PSBcIiFhbnN3ZXJfcHJlZml4LnB5XCIpIHtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZUluQXJyYXlfKGZpbGUsIHRoaXMubWFpbi5tb2RlbC5hc3NpZ25tZW50LmV4dHJhSW5zdHJ1Y3RvckZpbGVzKTtcbiAgICAgICAgfSBlbHNlIGlmIChmaWxlLmZpbGVuYW1lID09PSBcIiFhbnN3ZXJfc3VmZml4LnB5XCIpIHtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZUluQXJyYXlfKGZpbGUsIHRoaXMubWFpbi5tb2RlbC5hc3NpZ25tZW50LmV4dHJhSW5zdHJ1Y3RvckZpbGVzKTtcbiAgICAgICAgfSBlbHNlIGlmIChmaWxlLmZpbGVuYW1lID09PSBcIiF0YWdzLmJsb2NrcHlcIikge1xuICAgICAgICAgICAgZmlsZS5oYW5kbGUgPSB0aGlzLm1haW4ubW9kZWwuYXNzaWdubWVudC50YWdzO1xuICAgICAgICB9IGVsc2UgaWYgKGZpbGUuZmlsZW5hbWUgPT09IFwiIWFzc2lnbm1lbnRfc2V0dGluZ3MuYmxvY2tweVwiKSB7XG4gICAgICAgICAgICBmaWxlLmhhbmRsZSA9IHRoaXMubWFpbi5tb2RlbC5hc3NpZ25tZW50LnNldHRpbmdzO1xuICAgICAgICB9IGVsc2UgaWYgKGZpbGUuZmlsZW5hbWUgPT09IFwiIXNhbXBsZV9zdWJtaXNzaW9ucy5ibG9ja3B5XCIpIHtcbiAgICAgICAgICAgIGZpbGUuaGFuZGxlID0gdGhpcy5tYWluLm1vZGVsLmFzc2lnbm1lbnQuc2FtcGxlU3VibWlzc2lvbnM7XG4gICAgICAgIH0gZWxzZSBpZiAoZmlsZS5maWxlbmFtZSA9PT0gXCIkc2V0dGluZ3MuYmxvY2tweVwiKSB7XG4gICAgICAgICAgICBmaWxlLmhhbmRsZSA9IHRoaXMubWFpbi5tb2RlbC5kaXNwbGF5O1xuICAgICAgICB9IGVsc2UgaWYgKGZpbGUuZmlsZW5hbWUuc3RhcnRzV2l0aChcIl5cIikpIHtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZUluQXJyYXlfKGZpbGUsIHRoaXMubWFpbi5tb2RlbC5hc3NpZ25tZW50LmV4dHJhU3RhcnRpbmdGaWxlcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZmlsZS5maWxlbmFtZS5zdGFydHNXaXRoKFwiIVwiKSB8fFxuICAgICAgICAgICAgICAgICAgIGZpbGUuZmlsZW5hbWUuc3RhcnRzV2l0aChcIj9cIikgfHxcbiAgICAgICAgICAgICAgICAgICBmaWxlLmZpbGVuYW1lLnN0YXJ0c1dpdGgoXCImXCIpKSB7XG4gICAgICAgICAgICB0aGlzLm9ic2VydmVJbkFycmF5XyhmaWxlLCB0aGlzLm1haW4ubW9kZWwuYXNzaWdubWVudC5leHRyYUluc3RydWN0b3JGaWxlcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9ic2VydmVJbkFycmF5XyhmaWxlLCB0aGlzLm1haW4ubW9kZWwuc3VibWlzc2lvbi5leHRyYUZpbGVzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9ic2VydmVJbkFycmF5XyhmaWxlLCBhcnJheSkge1xuICAgICAgICBmaWxlLm93bmVyID0gYXJyYXk7XG4gICAgICAgIGxldCBjb2RlQnVuZGxlID0gZmlsZS5vd25lcigpO1xuICAgICAgICBmb3IgKGxldCBpPTA7IGkgPCBjb2RlQnVuZGxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoY29kZUJ1bmRsZVtpXS5maWxlbmFtZSgpID09PSBmaWxlLmZpbGVuYW1lKSB7XG4gICAgICAgICAgICAgICAgZmlsZS5oYW5kbGUgPSBjb2RlQnVuZGxlW2ldLmNvbnRlbnRzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChmaWxlLmhhbmRsZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgbGV0IG5ld0ZpbGUgPSBtYWtlTW9kZWxGaWxlKGZpbGUuZmlsZW5hbWUpO1xuICAgICAgICAgICAgZmlsZS5oYW5kbGUgPSBuZXdGaWxlLmNvbnRlbnRzO1xuICAgICAgICAgICAgYXJyYXkucHVzaChuZXdGaWxlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG1vdW50RmlsZXMoKSB7XG4gICAgICAgIHRoaXMubmV3RmlsZShcImFuc3dlci5weVwiKTtcbiAgICAgICAgdGhpcy5uZXdGaWxlKFwiXnN0YXJ0aW5nX2NvZGUucHlcIik7XG4gICAgICAgIHRoaXMubmV3RmlsZShcIiFvbl9ydW4ucHlcIik7XG4gICAgICAgIHRoaXMubmV3RmlsZShcIiFpbnN0cnVjdGlvbnMubWRcIik7XG4gICAgICAgIHRoaXMubmV3RmlsZShcIiFhc3NpZ25tZW50X3NldHRpbmdzLmJsb2NrcHlcIik7XG4gICAgfVxuXG4gICAgZGlzbW91bnRFeHRyYUZpbGVzKCkge1xuICAgICAgICBmb3IgKGxldCBuYW1lIGluIHRoaXMuZmlsZXNfKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5maWxlc18uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoVU5ERUxFVEFCTEVfRklMRVMuaW5kZXhPZihuYW1lKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuZmlsZXNfW25hbWVdO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy53YXRjaGVzX1tuYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gc3VibWlzc2lvbi5jb2RlVE9ETzogU2hvdWxkbid0IHdlIG5vdGlmeSB0aGUgVUkgdGhhdCB0aGUgZmlsZSB3YXMgZGVsZXRlZD9cbiAgICB9XG5cbiAgICBuZXdGaWxlKGZpbGVuYW1lLCBjb250ZW50cywgbW9kZWxGaWxlKSB7XG4gICAgICAgIGlmIChmaWxlbmFtZSBpbiB0aGlzLmZpbGVzXykge1xuICAgICAgICAgICAgLy8gRmlsZSBhbHJlYWR5IGV4aXN0cyEgSnVzdCB1cGRhdGUgaXRzIGhhbmRsZVxuICAgICAgICAgICAgbGV0IGV4aXN0aW5nRmlsZSA9IHRoaXMuZmlsZXNfW2ZpbGVuYW1lXTtcbiAgICAgICAgICAgIGlmIChtb2RlbEZpbGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMub2JzZXJ2ZUZpbGVfKGV4aXN0aW5nRmlsZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGV4aXN0aW5nRmlsZS5oYW5kbGUgPSBtb2RlbEZpbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBleGlzdGluZ0ZpbGUuaGFuZGxlKGNvbnRlbnRzIHx8IFwiXCIpO1xuICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nRmlsZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEZpbGUgZG9lcyBub3QgZXhpc3RcbiAgICAgICAgICAgIGxldCBuZXdGaWxlID0gbmV3IEJsb2NrUHlGaWxlKHRoaXMubWFpbiwgZmlsZW5hbWUpO1xuICAgICAgICAgICAgdGhpcy5maWxlc19bZmlsZW5hbWVdID0gbmV3RmlsZTtcbiAgICAgICAgICAgIGlmIChtb2RlbEZpbGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMub2JzZXJ2ZUZpbGVfKG5ld0ZpbGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdGaWxlLmhhbmRsZSA9IG1vZGVsRmlsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb250ZW50cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbmV3RmlsZS5oYW5kbGUoY29udGVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ld0ZpbGU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB3cml0ZUZpbGUoZmlsZW5hbWUsIGNvbnRlbnRzKSB7XG4gICAgICAgIGNvbnRlbnRzID0gY29udGVudHMgfHwgXCJcIjtcbiAgICAgICAgdGhpcy5maWxlc19bZmlsZW5hbWVdLmhhbmRsZShjb250ZW50cyk7XG4gICAgfVxuXG4gICAgcmVhZEZpbGUoZmlsZW5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsZXNfW2ZpbGVuYW1lXS5oYW5kbGUoKTtcbiAgICB9XG5cbiAgICBnZXRGaWxlKGZpbGVuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbGVzX1tmaWxlbmFtZV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZmlsZW5hbWVcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbnxvYmplY3R9IFRoZSBpbmZvIGFib3V0IHRoZSBmaWxlLCBvciBmYWxzZSBpZiBpdCBjb3VsZCBub3QgYmUgZGVsZXRlZFxuICAgICAqL1xuICAgIGRlbGV0ZUZpbGUoZmlsZW5hbWUpIHtcbiAgICAgICAgaWYgKERFTEVUQUJMRV9TSU1QTEVfRklMRVMuaW5kZXhPZihmaWxlbmFtZSkgIT09IC0xKSB7XG4gICAgICAgICAgICBsZXQgZmlsZSA9IHRoaXMuZGVsZXRlRmlsZUxvY2FsbHlfKGZpbGVuYW1lKTtcbiAgICAgICAgICAgIGZpbGUuaGFuZGxlKG51bGwpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5maWxlc19bZmlsZW5hbWVdLm93bmVyID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBUcmlnZ2VycyBhIGNhbGxiYWNrIHRvIGV2ZW50dWFsbHkgY2FsbCBkZWxldGVGaWxlTG9jYWxseV9cbiAgICAgICAgICAgIGxldCBmb3VuZCA9IHRoaXMuZmlsZXNfW2ZpbGVuYW1lXS5vd25lci5yZW1vdmUobW9kZWxGaWxlID0+IG1vZGVsRmlsZS5maWxlbmFtZSgpID09PSBmaWxlbmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gZm91bmQgfHwgZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZWxldGVGaWxlTG9jYWxseV8oZmlsZW5hbWUpIHtcbiAgICAgICAgbGV0IGZpbGUgPSB0aGlzLmZpbGVzX1tmaWxlbmFtZV07XG4gICAgICAgIGRlbGV0ZSB0aGlzLmZpbGVzX1tmaWxlbmFtZV07XG4gICAgICAgIGlmIChmaWxlbmFtZSBpbiB0aGlzLndhdGNoZXNfKSB7XG4gICAgICAgICAgICB0aGlzLndhdGNoZXNfW2ZpbGVuYW1lXS5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrLmRlbGV0ZWQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbGU7XG4gICAgfVxuXG4gICAgcmVuYW1lRmlsZShzb3VyY2UsIGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIGlmIChVTlJFTkFNQUJMRV9GSUxFUy5pbmRleE9mKHNvdXJjZSkgIT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5maWxlc19bZmlsZW5hbWVdLm93bmVyID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBUcmlnZ2VycyBhIGNhbGxiYWNrIHRvIGV2ZW50dWFsbHkgY2FsbCBkZWxldGVGaWxlTG9jYWxseV9cbiAgICAgICAgICAgIGxldCBmb3VuZCA9IHRoaXMuZmlsZXNfW2ZpbGVuYW1lXS5vd25lci5yZW1vdmUobW9kZWxGaWxlID0+IG1vZGVsRmlsZS5maWxlbmFtZSgpID09PSBmaWxlbmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gZm91bmQgfHwgZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBub3RpZnlXYXRjaGVzKGZpbGUpIHtcbiAgICAgICAgaWYgKGZpbGUuZmlsZW5hbWUgaW4gdGhpcy53YXRjaGVzXykge1xuICAgICAgICAgICAgdGhpcy53YXRjaGVzX1tmaWxlLmZpbGVuYW1lXS5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrLnVwZGF0ZWQoZmlsZSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2VhcmNoRm9yRmlsZShuYW1lLCBzdHVkZW50U2VhcmNoKSB7XG4gICAgICAgIC8qXG4gICAgICAgIFRPRE86IFRoaXMgaXMgY2FsbGVkIHF1aXRlIGEgYml0IGJ5IHRoZSBJbXBvcnQgbWVjaGFuaXNtLCBtaWdodCBuZWVkXG4gICAgICAgICAgICAgIHRvIG9wdGltaXplIGl0IHNvbWUgbW9yZS4gRG8gdGltaW5nIHRlc3RzLlxuXG4gICAgICAgIGZpbGVzLipcbiAgICAgICAgX2luc3RydWN0b3IvZmlsZXMuKlxuICAgICAgICBfc3R1ZGVudC9maWxlcy4qXG5cbiAgICAgICAgSWYgYSBzdHVkZW50IHNlYXJjaGVzIGZvciBhIGZpbGUsIGl0IGNoZWNrcyB0aGUgXCI/XCIsIFwiJlwiLCBcIipcIiwgXCJcIiBuYW1lc3BhY2VzXG4gICAgICAgICAgICBpbXBvcnQgaGVscGVyID0+IFwiLi9oZWxwZXIucHlcIlxuICAgICAgICAgICAgb3BlbihcImV4dGVybmFsLmpzb25cIikgPT4gXCJleHRlcm5hbC5qc29uXCJcbiAgICAgICAgSWYgYW4gaW5zdHJ1Y3RvciBzZWFyY2hlcyBmb3IgYSBmaWxlLCBpdCBjaGVja3MgXCIhXCIsIFwiXlwiLCBcIj9cIiwgXCImXCIsIFwiKlwiLCBcIlwiIG5hbWVzcGFjZXNcbiAgICAgICAgICAgIFRvIGV4cGxpY2l0bHkgc2VhcmNoIGluc3RydWN0b3IgbmFtZXNwYWNlcyBmaXJzdFxuICAgICAgICAgICAgICAgIGltcG9ydCBfaW5zdHJ1Y3Rvci5oZWxwZXIgPT4gXCIuL2luc3RydWN0b3IvaGVscGVyLnB5XCJcbiAgICAgICAgICAgICAgICBvcGVuKFwiX2luc3RydWN0b3IvZXh0ZXJuYWwuanNvblwiKSA9PiBcIl9pbnN0cnVjdG9yL2V4dGVybmFsLmpzb25cIlxuICAgICAgICAgICAgdG8gYWxsb3cgc3R1ZGVudCBmaWxlcyB0byBvdmVycmlkZTpcbiAgICAgICAgICAgICAgICBpbXBvcnQgaGVscGVyID0+IFwiLi9oZWxwZXIucHlcIlxuICAgICAgICAgICAgICAgIG9wZW4oXCJleHRlcm5hbC5qc29uXCIpID0+IFwiZXh0ZXJuYWwuanNvblwiXG4gICAgICAgICAgICB0byBvbmx5IGNoZWNrIHN0dWRlbnQgZmlsZXMsIHByZXBlbmQgd2l0aCBfc3R1ZGVudFxuICAgICAgICAgKi9cbiAgICAgICAgLy8gQ2hvcCBvZmYgc3RhcnRpbmcgXCIuL1wiXG4gICAgICAgIGlmIChuYW1lLnN0YXJ0c1dpdGgoXCIuL1wiKSkge1xuICAgICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMik7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNlYXJjaE1vZGUgPSBTZWFyY2hNb2Rlcy5FVkVSWVdIRVJFO1xuICAgICAgICAvLyBTaG91bGQgdGhlIHNlYXJjaCBiZSBzdGFydCB3aXRoIGluc3RydWN0b3Igc2lkZT9cbiAgICAgICAgaWYgKG5hbWUuc3RhcnRzV2l0aChJTlNUUlVDVE9SX0RJUkVDVE9SWSkpIHtcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKElOU1RSVUNUT1JfRElSRUNUT1JZLmxlbmd0aCk7XG4gICAgICAgICAgICBzZWFyY2hNb2RlID0gU2VhcmNoTW9kZXMuU1RBUlRfV0lUSF9JTlNUUlVDVE9SO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNob3VsZCB0aGUgc2VhcmNoIGJlIGxpbWl0ZWQgdG8gdGhlIHN0dWRlbnQgbW9kZT9cbiAgICAgICAgaWYgKG5hbWUuc3RhcnRzV2l0aChTVFVERU5UX0RJUkVDVE9SWSkpIHtcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKFNUVURFTlRfRElSRUNUT1JZLmxlbmd0aCk7XG4gICAgICAgICAgICBzZWFyY2hNb2RlID0gU2VhcmNoTW9kZXMuT05MWV9TVFVERU5UX0ZJTEVTO1xuICAgICAgICB9IGVsc2UgaWYgKHN0dWRlbnRTZWFyY2gpIHtcbiAgICAgICAgICAgIHNlYXJjaE1vZGUgPSBTZWFyY2hNb2Rlcy5PTkxZX1NUVURFTlRfRklMRVM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2hvcnRjdXQgZm9yIGluc3RydWN0b3IgdmVyc2lvbnNcbiAgICAgICAgbGV0IGV4dHJhU3R1ZGVudEZpbGVzID0gdGhpcy5tYWluLm1vZGVsLnN1Ym1pc3Npb24uZXh0cmFGaWxlcygpO1xuICAgICAgICBsZXQgZXh0cmFJbnN0cnVjdG9yRmlsZXMgPSB0aGlzLm1haW4ubW9kZWwuYXNzaWdubWVudC5leHRyYUluc3RydWN0b3JGaWxlcygpO1xuICAgICAgICBsZXQgZXh0cmFTdGFydGluZ0ZpbGVzID0gdGhpcy5tYWluLm1vZGVsLmFzc2lnbm1lbnQuZXh0cmFTdGFydGluZ0ZpbGVzKCk7XG4gICAgICAgIC8vIENoZWNrIHNwZWNpYWwgZmlsZXMgKFRPRE86IGhvdyB3b3VsZCBhbiBpbnN0cnVjdG9yIGFjY2VzcyBcIi4vX2luc3RydWN0b3IvYW5zd2VyLnB5XCI/XG4gICAgICAgIGxldCBzcGVjaWFsRmlsZSA9IHRoaXMuc2VhcmNoRm9yU3BlY2lhbEZpbGVzXyhuYW1lLCBzZWFyY2hNb2RlKTtcbiAgICAgICAgaWYgKHNwZWNpYWxGaWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBzcGVjaWFsRmlsZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTdGFydCBsb29raW5nIHRocm91Z2ggcG9zc2libGUgZmlsZXNcbiAgICAgICAgbGV0IHN0dWRlbnRWZXJzaW9uID0gdGhpcy5zZWFyY2hGb3JGaWxlSW5MaXN0XyhleHRyYVN0dWRlbnRGaWxlcywgbmFtZSk7XG4gICAgICAgIGxldCBnZW5lcmF0ZWRWZXJzaW9uID0gdGhpcy5zZWFyY2hGb3JGaWxlSW5MaXN0XyhleHRyYVN0dWRlbnRGaWxlcywgXCIqXCIrbmFtZSk7XG4gICAgICAgIGxldCBkZWZhdWx0VmVyc2lvbiA9IHRoaXMuc2VhcmNoRm9yRmlsZUluTGlzdF8oZXh0cmFJbnN0cnVjdG9yRmlsZXMsIFwiJlwiK25hbWUpO1xuICAgICAgICBsZXQgaGlkZGVuVmVyc2lvbiA9IHRoaXMuc2VhcmNoRm9yRmlsZUluTGlzdF8oZXh0cmFJbnN0cnVjdG9yRmlsZXMsIFwiP1wiK25hbWUpO1xuICAgICAgICBsZXQgcmVtb3RlVmVyc2lvbiA9IHRoaXMucmVtb3RlRmlsZXNfW25hbWVdO1xuICAgICAgICBpZiAoc2VhcmNoTW9kZSA9PT0gU2VhcmNoTW9kZXMuT05MWV9TVFVERU5UX0ZJTEVTKSB7XG4gICAgICAgICAgICByZXR1cm4gZmlyc3REZWZpbmVkVmFsdWUoaGlkZGVuVmVyc2lvbiwgZGVmYXVsdFZlcnNpb24sIHN0dWRlbnRWZXJzaW9uLCBnZW5lcmF0ZWRWZXJzaW9uLCByZW1vdGVWZXJzaW9uKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgaW5zdHJ1Y3RvclZlcnNpb24gPSB0aGlzLnNlYXJjaEZvckZpbGVJbkxpc3RfKGV4dHJhSW5zdHJ1Y3RvckZpbGVzLCBcIiFcIituYW1lKTtcbiAgICAgICAgbGV0IHN0YXJ0aW5nVmVyc2lvbiA9IHRoaXMuc2VhcmNoRm9yRmlsZUluTGlzdF8oZXh0cmFTdGFydGluZ0ZpbGVzLCBcIl5cIituYW1lKTtcbiAgICAgICAgaWYgKHNlYXJjaE1vZGUgPT09IFNlYXJjaE1vZGVzLlNUQVJUX1dJVEhfSU5TVFJVQ1RPUikge1xuICAgICAgICAgICAgcmV0dXJuIGZpcnN0RGVmaW5lZFZhbHVlKGluc3RydWN0b3JWZXJzaW9uLCBoaWRkZW5WZXJzaW9uLCBzdGFydGluZ1ZlcnNpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZlcnNpb24sIHN0dWRlbnRWZXJzaW9uLCBnZW5lcmF0ZWRWZXJzaW9uLCByZW1vdGVWZXJzaW9uKTtcbiAgICAgICAgfSBlbHNlIGlmIChzZWFyY2hNb2RlID09PSBTZWFyY2hNb2Rlcy5FVkVSWVdIRVJFKSB7XG4gICAgICAgICAgICByZXR1cm4gZmlyc3REZWZpbmVkVmFsdWUoZGVmYXVsdFZlcnNpb24sIHN0dWRlbnRWZXJzaW9uLCBnZW5lcmF0ZWRWZXJzaW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydWN0b3JWZXJzaW9uLCBoaWRkZW5WZXJzaW9uLCBzdGFydGluZ1ZlcnNpb24sIHJlbW90ZVZlcnNpb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2VhcmNoRm9yRmlsZUluTGlzdF8obW9kZWxMaXN0LCBmaWxlbmFtZSkge1xuICAgICAgICBmb3IgKGxldCBpPTA7IGkgPCBtb2RlbExpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChtb2RlbExpc3RbaV0uZmlsZW5hbWUoKSA9PT0gZmlsZW5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9kZWxMaXN0W2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgc2VhcmNoRm9yU3BlY2lhbEZpbGVzXyhmaWxlbmFtZSwgc2VhcmNoTW9kZSkge1xuICAgICAgICBpZiAoc2VhcmNoTW9kZSA9PT0gU2VhcmNoTW9kZXMuT05MWV9TVFVERU5UX0ZJTEVTKSB7XG4gICAgICAgICAgICBpZiAoZmlsZW5hbWUgPT09IFwiYW5zd2VyLnB5XCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFrZU1vY2tNb2RlbEZpbGUoXCJfaW5zdHJ1Y3Rvci9hbnN3ZXIucHlcIiwgdGhpcy5tYWluLm1vZGVsLnN1Ym1pc3Npb24uY29kZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChmaWxlbmFtZSkge1xuICAgICAgICAgICAgY2FzZSBcImFuc3dlci5weVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBtYWtlTW9ja01vZGVsRmlsZShcIl9pbnN0cnVjdG9yL2Fuc3dlci5weVwiLCB0aGlzLm1haW4ubW9kZWwuc3VibWlzc2lvbi5jb2RlKCkpO1xuICAgICAgICAgICAgY2FzZSBcIm9uX3J1bi5weVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBtYWtlTW9ja01vZGVsRmlsZShcIl9pbnN0cnVjdG9yL29uX3J1bi5weVwiLCB0aGlzLm1haW4ubW9kZWwuYXNzaWdubWVudC5vblJ1bigpKTtcbiAgICAgICAgICAgIGNhc2UgXCJvbl9jaGFuZ2UucHlcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFrZU1vY2tNb2RlbEZpbGUoXCJfaW5zdHJ1Y3Rvci9vbl9jaGFuZ2UucHlcIiwgdGhpcy5tYWluLm1vZGVsLmFzc2lnbm1lbnQub25DaGFuZ2UoKSk7XG4gICAgICAgICAgICBjYXNlIFwib25fZXZhbC5weVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBtYWtlTW9ja01vZGVsRmlsZShcIl9pbnN0cnVjdG9yL29uX2V2YWwubWRcIiwgdGhpcy5tYWluLm1vZGVsLmFzc2lnbm1lbnQub25FdmFsKCkpO1xuICAgICAgICAgICAgY2FzZSBcImluc3RydWN0aW9ucy5tZFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBtYWtlTW9ja01vZGVsRmlsZShcIl9pbnN0cnVjdG9yL2luc3RydWN0aW9ucy5tZFwiLCB0aGlzLm1haW4ubW9kZWwuYXNzaWdubWVudC5pbnN0cnVjdGlvbnMoKSk7XG4gICAgICAgICAgICBjYXNlIFwic3RhcnRpbmdfY29kZS5weVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBtYWtlTW9ja01vZGVsRmlsZShcIl9pbnN0cnVjdG9yL3N0YXJ0aW5nX2NvZGUucHlcIiwgdGhpcy5tYWluLm1vZGVsLmFzc2lnbm1lbnQuc3RhcnRpbmdDb2RlKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgbmV3RmlsZURpYWxvZyhraW5kKSB7XG4gICAgICAgIGxldCBib2R5ID0gJChORVdfSU5TVFJVQ1RPUl9GSUxFX0RJQUxPR19IVE1MKTtcbiAgICAgICAgbGV0IGZpbGVuYW1lID0gYm9keS5maW5kKFwiLmJsb2NrcHktaW5zdHJ1Y3Rvci1maWxlLWRpYWxvZy1maWxlbmFtZVwiKTtcbiAgICAgICAgbGV0IGZpbGV0eXBlID0gYm9keS5maW5kKFwiLmJsb2NrcHktaW5zdHJ1Y3Rvci1maWxlLWRpYWxvZy1maWxldHlwZVwiKTtcbiAgICAgICAgbGV0IG5hbWVzcGFjZSA9IGJvZHkuZmluZChcIi5ibG9ja3B5LWluc3RydWN0b3ItZmlsZS1kaWFsb2ctbmFtZXNwYWNlXCIpO1xuICAgICAgICBsZXQgZXh0ZW5zaW9uUmVnZXggPSAvKD86XFwuKFteLl0rKSk/JC87XG4gICAgICAgIGZpbGVuYW1lLm9uKFwiaW5wdXRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IGV4dGVuc2lvbiA9IGV4dGVuc2lvblJlZ2V4LmV4ZWMoZmlsZW5hbWUudmFsKCkpWzFdO1xuICAgICAgICAgICAgZXh0ZW5zaW9uID0gZXh0ZW5zaW9uID09PSB1bmRlZmluZWQgPyBcIk5vIGV4dGVuc2lvblwiIDogZXh0ZW5zaW9uO1xuICAgICAgICAgICAgLy9UT0RPOiB0aGlzLm1haW4uY29tcG9uZW50cy5lZGl0b3JzLmdldEVkaXRvckZyb21FeHRlbnNpb24oZXh0ZW5zaW9uKTtcbiAgICAgICAgICAgIGZpbGV0eXBlLnRleHQoZXh0ZW5zaW9uKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCB5ZXMgPSAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgcHJlZml4ID0gXCJcIjtcbiAgICAgICAgICAgIGlmIChraW5kID09PSBcImluc3RydWN0b3JcIikge1xuICAgICAgICAgICAgICAgIHByZWZpeCA9IG5hbWVzcGFjZS52YWwoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoa2luZCA9PT0gXCJzdGFydGluZ1wiKSB7XG4gICAgICAgICAgICAgICAgcHJlZml4ID0gXCJeXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChmaWxlbmFtZS52YWwoKSkge1xuICAgICAgICAgICAgICAgIGZpbGVuYW1lID0gcHJlZml4K2ZpbGVuYW1lLnZhbCgpO1xuICAgICAgICAgICAgICAgIHRoaXMubmV3RmlsZShmaWxlbmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGJvZHkuc3VibWl0KChlKSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB5ZXMoKTtcbiAgICAgICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLmRpYWxvZy5jbG9zZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tYWluLmNvbXBvbmVudHMuZGlhbG9nLmNvbmZpcm0oXCJNYWtlIE5ldyBGaWxlXCIsIGJvZHksIHllcywgKCk9Pnt9LCBcIkFkZFwiKTtcbiAgICB9XG5cbiAgICBsb2FkUmVtb3RlRmlsZXMoZmlsZXM9bnVsbCkge1xuICAgICAgICAvLyBDbGVhciBleGlzdGluZyByZW1vdGUgZmlsZXMgKD8pXG4gICAgICAgIC8qXG4gICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMucmVtb3RlRmlsZXNfKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5yZW1vdGVGaWxlc19bcHJvcF07XG4gICAgICAgIH0pOyovXG4gICAgICAgIGxldCBtb2RlbCA9IHRoaXMubWFpbi5tb2RlbDtcblxuICAgICAgICBjb25zdCBwcmVsb2FkRmlsZXMgPSBtb2RlbC5hc3NpZ25tZW50LnNldHRpbmdzLnByZWxvYWRGaWxlcygpIHx8IG1vZGVsLmFzc2lnbm1lbnQuc2V0dGluZ3MucHJlbG9hZEFsbEZpbGVzKCk7XG4gICAgICAgIGlmICghcHJlbG9hZEZpbGVzICYmICFmaWxlcykge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vZGVsLmFzc2lnbm1lbnQuc2V0dGluZ3MucHJlbG9hZEZpbGVzKCkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZmlsZXMgPSBKU09OLnBhcnNlKHByZWxvYWRGaWxlcyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBwcmVsb2FkIGZpbGVzLCBpbnZhbGlkIHN0cnVjdHVyZTogXCIsIGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kb3dubG9hZFJlbW90ZUZpbGVzKGZpbGVzKTtcbiAgICAgICAgfSBlbHNlIGlmIChmaWxlcykge1xuICAgICAgICAgICAgdGhpcy5kb3dubG9hZFJlbW90ZUZpbGVzKHRoaXMucmVvcmdhbml6ZUZpbGVzKGZpbGVzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1haW4uY29tcG9uZW50cy5zZXJ2ZXIubGlzdFVwbG9hZGVkRmlsZXMoKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRvd25sb2FkUmVtb3RlRmlsZXModGhpcy5yZW9yZ2FuaXplRmlsZXMoZGF0YS5maWxlcykpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW9yZ2FuaXplRmlsZXMoZmlsZXMpIHtcbiAgICAgICAgY29uc3Qgb3JnYW5pemVkID0ge307XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKGZpbGVzKS5mb3JFYWNoKChbcGxhY2VtZW50LCBwbGFjZWRGaWxlc10pID0+IHtcbiAgICAgICAgICAgIHBsYWNlZEZpbGVzLmZvckVhY2goKFtmaWxlbmFtZSwgdXJsXSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkwodXJsLCB3aW5kb3cubG9jYXRpb24ub3JpZ2luKS5zZWFyY2hQYXJhbXM7XG4gICAgICAgICAgICAgICAgY29uc3QgZGlyZWN0b3J5ID0gc2VhcmNoUGFyYW1zLmdldChcImRpcmVjdG9yeVwiKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwbGFjZW1lbnQgPSBzZWFyY2hQYXJhbXMuZ2V0KFwicGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgIGlmICghKHBsYWNlbWVudCBpbiBvcmdhbml6ZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9yZ2FuaXplZFtwbGFjZW1lbnRdID0ge307XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghKGRpcmVjdG9yeSBpbiBvcmdhbml6ZWRbcGxhY2VtZW50XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgb3JnYW5pemVkW3BsYWNlbWVudF1bZGlyZWN0b3J5XSA9IHt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvcmdhbml6ZWRbcGxhY2VtZW50XVtkaXJlY3RvcnldW2ZpbGVuYW1lXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5maWxlc1RvVXJsc1tmaWxlbmFtZV0gPSB1cmw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBvcmdhbml6ZWQ7XG4gICAgfVxuXG4gICAgZG93bmxvYWRSZW1vdGVGaWxlcyhmaWxlcykge1xuICAgICAgICBjb25zdCBvbGRSZW1haW5pbmdGaWxlcyA9IE9iamVjdC5rZXlzKHRoaXMucmVtb3RlRmlsZXNfKTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMoZmlsZXMpLmZvckVhY2goKFtwbGFjZW1lbnQsIHBsYWNlbWVudERhdGFdKSA9PiB7XG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyhwbGFjZW1lbnREYXRhKS5mb3JFYWNoKChbZGlyZWN0b3J5LCBkaXJlY3RvcnlEYXRhXSkgPT4ge1xuICAgICAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKGRpcmVjdG9yeURhdGEpLmZvckVhY2goKFtmaWxlbmFtZSwgcmVuYW1lZEZpbGVdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZW5hbWVkRmlsZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVuYW1lZEZpbGUgPSBmaWxlbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIShyZW5hbWVkRmlsZSBpbiB0aGlzLnJlbW90ZUZpbGVzXykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLnNlcnZlci5kb3dubG9hZEZpbGUocGxhY2VtZW50LCBkaXJlY3RvcnksIGZpbGVuYW1lLCAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmV3RmlsZShcImltYWdlcy5ibG9ja3B5XCIsIFwie31cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdGVGaWxlc19bcmVuYW1lZEZpbGVdID0gbWFrZU1vY2tNb2RlbEZpbGUocmVuYW1lZEZpbGUsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvbGRSZW1haW5pbmdGaWxlc1tyZW5hbWVkRmlsZV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBUT0RPOiBDbGVhbiB1cCB0aGUgb2xkIGZpbGVzIGFmdGVyIGFsbCB0aGUgbmV3IG9uZXMgYXJlIGxvYWRlZFxuICAgIH1cbn0iLCIvL1RPRE86IE1vdmUgZ2V0IGxpbmsgZG93biB0byBmb290ZXIsIHJlbW92ZSB2ZXJ0aWNhbCBiYXIgZnJvbSBxdWljay1tZW51XG5leHBvcnQgbGV0IEZPT1RFUl9IVE1MID0gYFxuPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBibG9ja3B5LXBhbmVsIGJsb2NrcHktc3RhdHVzXCI+XG4gICAgPGRpdj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiYmFkZ2VcIiBkYXRhLWJpbmQ9XCJjbGFzczogdWkuc2VydmVyLnN0YXR1cygnbG9hZEFzc2lnbm1lbnQnKVwiPkxvYWQgQXNzaWdubWVudFxuICAgICAgICAgICAgPCEtLSBrbyBpZjogZGlzcGxheS5pbnN0cnVjdG9yIC0tPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJmaWxlXCJcbiAgICAgICAgICAgIGNsYXNzPVwiYmxvY2tweS1mb3JjZS1sb2FkLWFzc2lnbm1lbnQtZmlsZSBibG9ja3B5LWhpZGRlbi1maWxlXCJcbiAgICAgICAgICAgIGFjY2VwdD1cImFwcGxpY2F0aW9uL0pTT05cIlxuICAgICAgICAgICAgZGF0YS1iaW5kPVwiZXZlbnQ6IHtjaGFuZ2U6IHVpLnNlcnZlci5mb3JjZS5sb2FkQXNzaWdubWVudH1cIj5cbiAgICAgICAgICAgIDwhLS0gL2tvIC0tPlxuICAgICAgICA8L2xhYmVsPiwgXG4gICAgICAgIDxzcGFuIGNsYXNzPVwiYmFkZ2VcIiBkYXRhLWJpbmQ9XCJjbGFzczogdWkuc2VydmVyLnN0YXR1cygnc2F2ZUFzc2lnbm1lbnQnKVwiPlNhdmUgQXNzaWdubWVudDwvc3Bhbj4sIFxuICAgICAgICA8c3BhbiBjbGFzcz1cImJhZGdlXCIgZGF0YS1iaW5kPVwiY2xhc3M6IHVpLnNlcnZlci5zdGF0dXMoJ2xvYWRGaWxlJylcIj5Mb2FkIEZpbGU8L3NwYW4+LCBcbiAgICAgICAgPHNwYW4gY2xhc3M9XCJiYWRnZVwiIGRhdGEtYmluZD1cImNsYXNzOiB1aS5zZXJ2ZXIuc3RhdHVzKCdzYXZlRmlsZScpXCI+U2F2ZSBGaWxlPC9zcGFuPiwgXG4gICAgICAgIDxzcGFuIGNsYXNzPVwiYmFkZ2VcIiBkYXRhLWJpbmQ9XCJjbGFzczogdWkuc2VydmVyLnN0YXR1cygnbG9hZERhdGFzZXQnKVwiPkxvYWQgRGF0YXNldDwvc3Bhbj4sIFxuICAgICAgICA8c3BhbiBjbGFzcz1cImJhZGdlXCIgZGF0YS1iaW5kPVwiY2xhc3M6IHVpLnNlcnZlci5zdGF0dXMoJ2xvZ0V2ZW50JylcIj5Mb2cgRXZlbnQ8L3NwYW4+LCBcbiAgICAgICAgPHNwYW4gY2xhc3M9XCJiYWRnZVwiIGRhdGEtYmluZD1cImNsYXNzOiB1aS5zZXJ2ZXIuc3RhdHVzKCd1cGRhdGVTdWJtaXNzaW9uJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IHVpLnNlcnZlci5mb3JjZS51cGRhdGVTdWJtaXNzaW9uXCI+VXBkYXRlIFN1Ym1pc3Npb248L3NwYW4+LCBcbiAgICAgICAgPHNwYW4gY2xhc3M9XCJiYWRnZVwiIGRhdGEtYmluZD1cImNsYXNzOiB1aS5zZXJ2ZXIuc3RhdHVzKCdvbkV4ZWN1dGlvbicpXCI+RXhlY3V0aW9uPC9zcGFuPlxuICAgIDwvZGl2PlxuICAgIDxkaXZcbiAgICAgICAgPHNwYW4gZGF0YS1iaW5kPVwidGV4dDogdWkuc2VydmVyLm1lc3NhZ2VzXCI+PC9zcGFuPlxuICAgIDwvZGl2PlxuICAgIDxkaXY+XG4gICAgICAgIDxzcGFuPlVzZXI6IDxzcGFuIGRhdGEtYmluZD1cInRleHQ6IHVzZXIuaWRcIj48L3NwYW4+ICg8c3BhbiBkYXRhLWJpbmQ9XCJ0ZXh0OiB1c2VyLm5hbWVcIj48L3NwYW4+LCA8c3BhbiBkYXRhLWJpbmQ9XCJ0ZXh0OiB1c2VyLnJvbGVcIj48L3NwYW4+KTwvc3Bhbj4sIFxuICAgICAgICA8c3Bhbj5Db3Vyc2U6IDxzcGFuIGRhdGEtYmluZD1cInRleHQ6IHVzZXIuY291cnNlSWRcIj48L3NwYW4+PC9zcGFuPixcbiAgICAgICAgPHNwYW4+R3JvdXA6IDxzcGFuIGRhdGEtYmluZD1cInRleHQ6IHVzZXIuZ3JvdXBJZFwiPjwvc3Bhbj48L3NwYW4+LFxuICAgICAgICA8c3Bhbj5Bc3NpZ25tZW50OiA8c3BhbiBkYXRhLWJpbmQ9XCJ0ZXh0OiBhc3NpZ25tZW50LmlkXCI+PC9zcGFuPjwvc3Bhbj4sXG4gICAgICAgIDxzcGFuPkFzc2lnbm1lbnQgVmVyc2lvbjogPHNwYW4gZGF0YS1iaW5kPVwidGV4dDogYXNzaWdubWVudC52ZXJzaW9uXCI+PC9zcGFuPjwvc3Bhbj4sXG4gICAgICAgIDxzcGFuPlN1Ym1pc3Npb246IFxuICAgICAgICAgICAgPHNwYW4gZGF0YS1iaW5kPVwidGV4dDogc3VibWlzc2lvbi5pZFwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGRhdGEtYmluZD1cImlmOiBzdWJtaXNzaW9uLm93bmVySWQoKSAhPSB1c2VyLmlkKClcIj5cbiAgICAgICAgICAgICAgICAoT3duZXIgSUQ6IDxzcGFuIGRhdGEtYmluZD1cInRleHQ6IHN1Ym1pc3Npb24ub3duZXJJZCgpXCI+PC9zcGFuPilcbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9zcGFuPiwgXG4gICAgICAgIDxzcGFuPlN1Ym1pc3Npb24gVmVyc2lvbjogPHNwYW4gZGF0YS1iaW5kPVwidGV4dDogc3VibWlzc2lvbi52ZXJzaW9uXCI+PC9zcGFuPjwvc3Bhbj4sXG4gICAgICAgIDxzcGFuPkVkaXRvciBWZXJzaW9uOiA8c3BhbiBkYXRhLWJpbmQ9XCJ0ZXh0OiBkaXNwbGF5LmVkaXRvclZlcnNpb25cIj48L3NwYW4+PC9zcGFuPlxuICAgIDwvZGl2PlxuPC9kaXY+XG5gOyIsIi8vIFRPRE86IFNob3VsZCBkaXNhYmxlIGJ1dHRvbnMgaWYgd2UgY2FuJ3QgYWN0aXZhdGUgdGhlbS5cblxuZXhwb3J0IGNvbnN0IEhJU1RPUllfVE9PTEJBUl9IVE1MID0gYFxuPGRpdiBjbGFzcz1cImJsb2NrcHktaGlzdG9yeS10b29sYmFyIGNvbC1tZC0xMlwiIGRhdGEtYmluZD1cInZpc2libGU6IGRpc3BsYXkuaGlzdG9yeU1vZGVcIj5cblxuICAgIDxmb3JtIGNsYXNzPVwiZm9ybS1pbmxpbmVcIj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJsb2NrcHktaGlzdG9yeS1zdGFydCBidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5IG1yLTJcIiB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgIGRhdGEtYmluZD1cImNsaWNrOiB1aS5lZGl0b3JzLnB5dGhvbi5oaXN0b3J5LnN0YXJ0XCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz0nZmFzIGZhLXN0ZXAtYmFja3dhcmQnPjwvc3Bhbj4gU3RhcnRcbiAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5IG1yLTJcIiB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgIGRhdGEtYmluZD1cImNsaWNrOiB1aS5lZGl0b3JzLnB5dGhvbi5oaXN0b3J5LnByZXZpb3VzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz0nZmFzIGZhLWJhY2t3YXJkJz48L3NwYW4+IFByZXZpb3VzXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8c2VsZWN0IGNsYXNzPVwiYmxvY2tweS1oaXN0b3J5LXNlbGVjdG9yIGZvcm0tY29udHJvbCBjdXN0b20tc2VsZWN0IG1yLTJcIiBhcmlhLXRpdGxlPVwiSGlzdG9yeSBTZWxlY3RvclwiPlxuICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tb3V0bGluZS1zZWNvbmRhcnkgbXItMlwiIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgZGF0YS1iaW5kPVwiY2xpY2s6IHVpLmVkaXRvcnMucHl0aG9uLmhpc3RvcnkudXNlXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz0nZmFzIGZhLWZpbGUtaW1wb3J0Jz48L3NwYW4+IFVzZVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tb3V0bGluZS1zZWNvbmRhcnkgbXItMlwiIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgZGF0YS1iaW5kPVwiY2xpY2s6IHVpLmVkaXRvcnMucHl0aG9uLmhpc3RvcnkubmV4dFwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9J2ZhcyBmYS1mb3J3YXJkJz48L3NwYW4+IE5leHRcbiAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5XCIgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICBkYXRhLWJpbmQ9XCJjbGljazogdWkuZWRpdG9ycy5weXRob24uaGlzdG9yeS5tb3N0UmVjZW50XCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz0nZmFzIGZhLXN0ZXAtZm9yd2FyZCc+PC9zcGFuPiBNb3N0IFJlY2VudFxuICAgICAgICA8L2J1dHRvbj5cbiAgICA8L2Zvcm0+XG48L2Rpdj5cbmA7XG5cbi8qKlxuICogQW4gb2JqZWN0IGZvciBkaXNwbGF5aW5nIHRoZSB1c2VyJ3MgY29kaW5nIGxvZ3MgKHRoZWlyIGhpc3RvcnkpLlxuICogQSBsaWdodHdlaWdodCBjb21wb25lbnQsIGl0cyBvbmx5IGpvYiBpcyB0byBvcGVuIGEgZGlhbG9nLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHRoaXMge0Jsb2NrUHlIaXN0b3J5fVxuICogQHBhcmFtIHtPYmplY3R9IG1haW4gLSBUaGUgbWFpbiBCbG9ja1B5IGluc3RhbmNlXG4gKi9cbmV4cG9ydCBjbGFzcyBCbG9ja1B5SGlzdG9yeSB7XG4gICAgY29uc3RydWN0b3IobWFpbiwgdGFnKSB7XG4gICAgICAgIHRoaXMubWFpbiA9IG1haW47XG4gICAgICAgIHRoaXMudGFnID0gdGFnO1xuICAgICAgICB0aGlzLmN1cnJlbnRJZCA9IG51bGw7XG4gICAgICAgIHRoaXMuaGlzdG9yeSA9IFtdO1xuICAgICAgICB0aGlzLmVkaXRFdmVudHMgPSBbXTtcbiAgICB9XG5cbiAgICBsb2FkKGhpc3RvcnkpIHtcbiAgICAgICAgdGhpcy5oaXN0b3J5ID0gaGlzdG9yeTtcbiAgICAgICAgdGhpcy5lZGl0RXZlbnRzID0gW107XG4gICAgICAgIHRoaXMuc2VsZWN0b3IgPSAkKFwiLmJsb2NrcHktaGlzdG9yeS1zZWxlY3RvclwiKS5lbXB0eSgpO1xuICAgICAgICBsZXQgZWRpdElkID0gMDtcbiAgICAgICAgaGlzdG9yeVxuICAgICAgICAgICAgLmZpbHRlcigoZW50cnkpID0+IChcbiAgICAgICAgICAgICAgICAhZW50cnkuZmlsZV9wYXRoLnN0YXJ0c1dpdGgoXCJfaW5zdHJ1Y3Rvci5cIikgJiZcbiAgICAgICAgICAgICAgICAgICAgZW50cnkuZXZlbnRfdHlwZSAhPT0gXCJDb21waWxlXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgZW50cnkuZXZlbnRfdHlwZSAhPT0gXCJJbnRlcnZlbnRpb25cIiAmJlxuICAgICAgICAgICAgICAgICAgICAoIXRoaXMubWFpbi5tb2RlbC5hc3NpZ25tZW50LmhpZGRlbigpIHx8IGVudHJ5LmV2ZW50X3R5cGUgIT09IFwiWC1TdWJtaXNzaW9uLkxNU1wiKVxuICAgICAgICAgICAgKSlcbiAgICAgICAgICAgIC5mb3JFYWNoKChlbnRyeSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZXZlbnRfdHlwZSA9IFJFTUFQX0VWRU5UX1RZUEVTW2VudHJ5LmV2ZW50X3R5cGVdIHx8IGVudHJ5LmV2ZW50X3R5cGU7XG4gICAgICAgICAgICAgICAgbGV0IGRpc3BsYXllZCA9IHByZXR0eVByaW50RGF0ZVRpbWUoZW50cnkuY2xpZW50X3RpbWVzdGFtcCkgK1wiIC0gXCIrZXZlbnRfdHlwZTtcbiAgICAgICAgICAgICAgICBsZXQgZGlzYWJsZSA9IChlbnRyeS5ldmVudF90eXBlICE9PSBcIkZpbGUuRWRpdFwiKTtcbiAgICAgICAgICAgICAgICBsZXQgb3B0aW9uID0gJChcIjxvcHRpb24+PC9vcHRpb24+XCIsIHt0ZXh0OiBkaXNwbGF5ZWQsIGRpc2FibGVkOiBkaXNhYmxlfSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNFZGl0RXZlbnQoZW50cnkpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbi5hdHRyKFwidmFsdWVcIiwgZWRpdElkKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lZGl0RXZlbnRzLnB1c2goZW50cnkpO1xuICAgICAgICAgICAgICAgICAgICBlZGl0SWQgKz0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rvci5hcHBlbmQob3B0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnZhbChNYXRoLm1heCgwLCBlZGl0SWQtMSkpO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLmNoYW5nZSgoZXZ0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUVkaXRvcigpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBtb3ZlVG9TdGFydCgpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci52YWwoMCk7XG4gICAgICAgIHRoaXMudXBkYXRlRWRpdG9yKCk7XG4gICAgfVxuXG4gICAgbW92ZVByZXZpb3VzKCkge1xuICAgICAgICBsZXQgY3VycmVudElkID0gcGFyc2VJbnQodGhpcy5zZWxlY3Rvci52YWwoKSwgMTApO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnZhbChNYXRoLm1heCgwLCBjdXJyZW50SWQtMSkpO1xuICAgICAgICB0aGlzLnVwZGF0ZUVkaXRvcigpO1xuICAgIH1cblxuICAgIG1vdmVOZXh0KCkge1xuICAgICAgICBsZXQgY3VycmVudElkID0gcGFyc2VJbnQodGhpcy5zZWxlY3Rvci52YWwoKSwgMTApO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnZhbChNYXRoLm1pbih0aGlzLmVkaXRFdmVudHMubGVuZ3RoLTEsIGN1cnJlbnRJZCsxKSk7XG4gICAgICAgIHRoaXMudXBkYXRlRWRpdG9yKCk7XG4gICAgfVxuXG4gICAgbW92ZVRvTW9zdFJlY2VudCgpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci52YWwodGhpcy5lZGl0RXZlbnRzLmxlbmd0aC0xKTtcbiAgICAgICAgdGhpcy51cGRhdGVFZGl0b3IoKTtcbiAgICB9XG5cbiAgICB1cGRhdGVFZGl0b3IoKSB7XG4gICAgICAgIGlmICh0aGlzLmVkaXRFdmVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVudElkID0gcGFyc2VJbnQodGhpcy5zZWxlY3Rvci52YWwoKSwgMTApO1xuICAgICAgICAgICAgdGhpcy5tYWluLmNvbXBvbmVudHMucHl0aG9uRWRpdG9yLmJtLnNldENvZGUodGhpcy5lZGl0RXZlbnRzW2N1cnJlbnRJZF0ubWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1c2UoKSB7XG4gICAgICAgIGlmICh0aGlzLmVkaXRFdmVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVudElkID0gcGFyc2VJbnQodGhpcy5zZWxlY3Rvci52YWwoKSwgMTApO1xuICAgICAgICAgICAgbGV0IGNvZGUgPSB0aGlzLmVkaXRFdmVudHNbY3VycmVudElkXS5tZXNzYWdlO1xuICAgICAgICAgICAgdGhpcy5tYWluLm1vZGVsLnVpLmVkaXRvcnMucHl0aG9uLnR1cm5PZmZIaXN0b3J5TW9kZSgpO1xuICAgICAgICAgICAgdGhpcy5tYWluLmNvbXBvbmVudHMucHl0aG9uRWRpdG9yLmZpbGUuaGFuZGxlKGNvZGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNFZGl0RXZlbnQoZW50cnkpIHtcbiAgICAgICAgcmV0dXJuICgoZW50cnkuZXZlbnRfdHlwZSA9PT0gXCJGaWxlLkVkaXRcIiB8fFxuICAgICAgICAgICAgICAgICBlbnRyeS5ldmVudF90eXBlID09PSBcIkZpbGUuQ3JlYXRlXCIpICYmXG4gICAgICAgICAgICAgICAgdGhpcy5tYWluLm1vZGVsLmRpc3BsYXkuZmlsZW5hbWUoKSA9PT0gZW50cnkuZmlsZV9wYXRoKTtcbiAgICB9XG5cbn1cblxuY29uc3QgUkVNQVBfRVZFTlRfVFlQRVMgPSB7XG4gICAgXCJTZXNzaW9uLlN0YXJ0XCI6IFwiQmVnYW4gc2Vzc2lvblwiLFxuICAgIFwiWC1JUC5DaGFuZ2VcIjogXCJDaGFuZ2VkIElQIGFkZHJlc3NcIixcbiAgICBcIkZpbGUuRWRpdFwiOiBcIkVkaXRlZCBjb2RlXCIsXG4gICAgXCJGaWxlLkNyZWF0ZVwiOiBcIlN0YXJ0ZWQgYXNzaWdubWVudFwiLFxuICAgIFwiUnVuLlByb2dyYW1cIjogXCJSYW4gcHJvZ3JhbVwiLFxuICAgIFwiQ29tcGlsZS5FcnJvclwiOiBcIlN5bnRheCBlcnJvclwiLFxuICAgIFwiWC1TdWJtaXNzaW9uLkxNU1wiOiBcIlVwZGF0ZWQgZ3JhZGVcIlxufTtcblxuY29uc3QgbW9udGhOYW1lcyA9IFtcbiAgICBcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLFxuICAgIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIixcbiAgICBcIkF1Z1wiLCBcIlNlcHRcIiwgXCJPY3RcIixcbiAgICBcIk5vdlwiLCBcIkRlY1wiXG5dO1xuY29uc3Qgd2Vla0RheXMgPSBbXG4gICAgXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIixcbiAgICBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLFxuICAgIFwiU2F0XCJcbl07XG5cbmZ1bmN0aW9uIGlzU2FtZURheShmaXJzdCwgc2Vjb25kKSB7XG4gICAgcmV0dXJuIGZpcnN0LmdldERhdGUoKSA9PT0gc2Vjb25kLmdldERhdGUoKSAmJlxuICAgICAgICBmaXJzdC5nZXRNb250aCgpID09PSBzZWNvbmQuZ2V0TW9udGgoKSAmJlxuICAgICAgICBmaXJzdC5nZXRGdWxsWWVhcigpID09PSBzZWNvbmQuZ2V0RnVsbFllYXIoKTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gcGFyc2UgYSBkYXRlL3RpbWUgc3RyaW5nIGFuZCByZXdyaXRlIGl0IGFzIHNvbWV0aGluZ1xuICogbW9yZSBodW1hbiByZWFkYWJsZS5cbiAqIEBwYXJhbSB7U3RyaW5nfSB0aW1lU3RyaW5nIC0gdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aW1lIChcIllZWVlNTUREIEhITU1TU1wiKVxuICogQHJldHVybnMge1N0cmluZ30gLSBBIGh1bWFuLXJlYWRhYmxlIHRpbWUgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBwcmV0dHlQcmludERhdGVUaW1lKHRpbWVTdHJpbmcpIHtcbiAgICAvKmxldCB5ZWFyID0gdGltZVN0cmluZy5zbGljZSgwLCA0KSxcbiAgICAgICAgbW9udGggPSBwYXJzZUludCh0aW1lU3RyaW5nLnNsaWNlKDQsIDYpLCAxMCktMSxcbiAgICAgICAgZGF5ID0gdGltZVN0cmluZy5zbGljZSg2LCA4KSxcbiAgICAgICAgaG91ciA9IHRpbWVTdHJpbmcuc2xpY2UoOSwgMTEpLFxuICAgICAgICBtaW51dGVzID0gdGltZVN0cmluZy5zbGljZSgxMSwgMTMpLFxuICAgICAgICBzZWNvbmRzID0gdGltZVN0cmluZy5zbGljZSgxMywgMTUpOyovXG4gICAgLy8gVE9ETzogSGFuZGxlIHRpbWV6b25lcyBjb3JyZWN0bHlcbiAgICBpZiAodGltZVN0cmluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBcIlVuZGVmaW5lZCBUaW1lXCI7XG4gICAgfVxuICAgIGxldCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIGxldCBwYXN0ID0gbmV3IERhdGUocGFyc2VJbnQodGltZVN0cmluZywgMTApKTtcbiAgICBpZiAoaXNTYW1lRGF5KG5vdywgcGFzdCkpIHtcbiAgICAgICAgcmV0dXJuIFwiVG9kYXkgYXQgXCIrcGFzdC50b0xvY2FsZVRpbWVTdHJpbmcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgZGF5U3RyID0gd2Vla0RheXNbcGFzdC5nZXREYXkoKV07XG4gICAgICAgIGxldCBtb250aFN0ciA9IG1vbnRoTmFtZXNbcGFzdC5nZXRNb250aCgpXTtcbiAgICAgICAgbGV0IGRhdGUgPSBkYXlTdHIgKyBcIiwgXCIgKyBtb250aFN0ciArIFwiIFwiICsgcGFzdC5nZXREYXRlKCk7XG4gICAgICAgIGlmIChub3cuZ2V0RnVsbFllYXIoKSA9PT0gcGFzdC5nZXRGdWxsWWVhcigpKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0ZSArIFwiIGF0IFwiK3Bhc3QudG9Mb2NhbGVUaW1lU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0ZSArIFwiLCBcIitwYXN0LmdldEZ1bGxZZWFyKCkgKyBcIiBhdCBcIitwYXN0LnRvTG9jYWxlVGltZVN0cmluZygpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cbi8qKlxuICogT3BlbnMgdGhlIGhpc3RvcnkgZGlhbG9nIGJveC4gVGhpcyByZXF1aXJlcyBhIHRyaXAgdG8gdGhlIHNlcnZlciBhbmRcbiAqIG9jY3VycyBhc3luY2hyb25vdXNseS4gVGhlIHVzZXJzJyBjb2RlIGlzIHNob3duIGluIHByZWZvcm1hdHRlZCB0ZXh0XG4gKiB0YWdzIChubyBjb2RlIGhpZ2hsaWdodGluZyBjdXJyZW50bHkpIGFsb25nIHdpdGggdGhlIHRpbWVzdGFtcC5cbiAqL1xuQmxvY2tQeUhpc3RvcnkucHJvdG90eXBlLm9wZW5EaWFsb2cgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGlhbG9nID0gdGhpcy5tYWluLmNvbXBvbmVudHMuZGlhbG9nO1xuICAgIHZhciBib2R5ID0gXCI8cHJlPmEgPSAwPC9wcmU+XCI7XG4gICAgdGhpcy5tYWluLmNvbXBvbmVudHMuc2VydmVyLmdldEhpc3RvcnkoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgYm9keSA9IGRhdGEucmV2ZXJzZSgpLnJlZHVjZShmdW5jdGlvbiAoY29tcGxldGUsIGVsZW0pIHsgXG4gICAgICAgICAgICB2YXIgY29tcGxldGVfc3RyID0gcHJldHR5UHJpbnREYXRlVGltZShlbGVtLnRpbWUpO1xuICAgICAgICAgICAgdmFyIG5ld19saW5lID0gXCI8Yj5cIitjb21wbGV0ZV9zdHIrXCI8L2I+PGJyPjxwcmU+XCIrZWxlbS5jb2RlK1wiPC9wcmU+XCI7XG4gICAgICAgICAgICByZXR1cm4gY29tcGxldGUrXCJcXG5cIituZXdfbGluZTtcbiAgICAgICAgfSwgXCJcIik7XG4gICAgICAgIGRpYWxvZy5zaG93KFwiV29yayBIaXN0b3J5XCIsIGJvZHksIGZ1bmN0aW9uKCkge30pO1xuICAgIH0pO1xufTsiLCIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgQ29udGFpbnMgbWFpbiBIVE1MIG9mIEJsb2NrUHkgaW50ZXJmYWNlLCBhbmQgaGVscGVyIGZ1bmN0aW9ucy5cbiAqIENvbWJpbmVzIGEgbG90IG9mIEhUTUwgZnJvbSBjb21wb25lbnRzLlxuICpcbiAqIEhlcmUncyB0aGUgbGF5b3V0OlxuICogIFJvdyAxOiBIZWFkZXIgYW5kIFF1aWNrIE1lbnVcbiAqICBSb3cgMjogQ29uc29sZSBhbmQgRmVlZGJhY2tcbiAqICBSb3cgMzogRmlsZSBOYXZpZ2F0aW9uXG4gKiAgUm93IDQ6IFZpZXcgUm93XG4gKiAgUm93IDU6IEZvb3RlciBSb3dcbiAqL1xuXG5pbXBvcnQge1RSQUNFX0hUTUx9IGZyb20gXCJ0cmFjZS5qc1wiO1xuaW1wb3J0IHtESUFMT0dfSFRNTH0gZnJvbSBcImRpYWxvZy5qc1wiO1xuaW1wb3J0IHtGRUVEQkFDS19IVE1MfSBmcm9tIFwiZmVlZGJhY2suanNcIjtcbmltcG9ydCB7RklMRVNfSFRNTH0gZnJvbSBcImZpbGVzLmpzXCI7XG5pbXBvcnQge0ZPT1RFUl9IVE1MfSBmcm9tIFwiZm9vdGVyLmpzXCI7XG5pbXBvcnQge0VESVRPUlNfSFRNTH0gZnJvbSBcImVkaXRvcnMuanNcIjtcbmltcG9ydCB7Q09OU09MRV9IVE1MfSBmcm9tIFwiY29uc29sZS5qc1wiO1xuXG4vKipcbiAqIFRoZSBkaWZmZXJlbnQgbGF5b3V0IG9wdGlvbnMgb2YgdGhlIHBhbmVzIGluIHRoZSBzZWNvbmQgcm93IG9mIHRoZSBsYXlvdXQuXG4gKiBAZW51bSB7U3RyaW5nfVxuICovXG5leHBvcnQgbGV0IFNlY29uZFJvd1NlY29uZFBhbmVsT3B0aW9ucyA9IHtcbiAgICBGRUVEQkFDSzogXCJmZWVkYmFja1wiLFxuICAgIFRSQUNFOiBcInRyYWNlXCIsXG4gICAgTk9ORTogXCJub25lXCJcbn07XG5cbi8qKlxuICogU2V0dXAgYW55IGFkZGl0aW9uYWwgS25vY2tvdXQgc3Vic2NyaXB0aW9ucyB0byBmaXJlIG9uIGludGVyZmFjZSBjaGFuZ2VzLlxuICogQHBhcmFtIHNlbGZcbiAqIEBwYXJhbSBtb2RlbFxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFrZUV4dHJhSW50ZXJmYWNlU3Vic2NyaXB0aW9ucyhzZWxmLCBtb2RlbCkge1xuICAgIC8vIEhpZ2hsaWdodCBNYXJrZG93biB3aGVuIGluc3RydWN0aW9ucyB1cGRhdGVcbiAgICBsZXQgaGlnaGxpZ2h0VGltZW91dCA9IG51bGw7XG4gICAgbW9kZWwudWkuaW5zdHJ1Y3Rpb25zLmN1cnJlbnQuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgaWYgKGhpZ2hsaWdodFRpbWVvdXQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChoaWdobGlnaHRUaW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgICBoaWdobGlnaHRUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBtb2RlbC5jb25maWd1cmF0aW9uLmNvbnRhaW5lci5maW5kKFwiLmJsb2NrcHktaW5zdHJ1Y3Rpb25zIHByZSBjb2RlXCIpLm1hcCggKGksIGJsb2NrKSA9PiB7XG4gICAgICAgICAgICAgICAgd2luZG93LmhsanMuaGlnaGxpZ2h0QmxvY2soYmxvY2spO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIDQwMCk7XG4gICAgfSk7XG4gICAgLy8gUHJvdmlkZSBGdWxsc2NyZWVuIHN1cHBvcnRcbiAgICBtb2RlbC5kaXNwbGF5LmZ1bGxzY3JlZW4uc3Vic2NyaWJlKChpc0Z1bGxzY3JlZW4pID0+IHtcbiAgICAgICAgc2VsZi5jb21wb25lbnRzLnNlcnZlci5sb2dFdmVudChcIlgtRGlzcGxheS5GdWxsc2NyZWVuLlJlcXVlc3RcIiwgXCJcIiwgXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0Z1bGxzY3JlZW4udG9TdHJpbmcoKSwgXCJcIik7XG4gICAgICAgIGlmIChpc0Z1bGxzY3JlZW4pIHtcbiAgICAgICAgICAgIC8vIE5PVEU6IG5hdmlnYXRpb25VSSBjb3VsZCBhbGxvdyB1cyB0byBmb3JjZSBjb250cm9scyB0byBzaG93XG4gICAgICAgICAgICBtb2RlbC5jb25maWd1cmF0aW9uLmNvbnRhaW5lci5wYXJlbnQoKVswXS5yZXF1ZXN0RnVsbHNjcmVlbigpLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSBgRXJyb3IgYXR0ZW1wdGluZyB0byBlbmFibGUgZnVsbC1zY3JlZW4gbW9kZTogJHtlcnIubWVzc2FnZX0gKCR7ZXJyLm5hbWV9KWA7XG4gICAgICAgICAgICAgICAgc2VsZi5jb21wb25lbnRzLnNlcnZlci5sb2dFdmVudChcIlgtRGlzcGxheS5GdWxsc2NyZWVuLkVycm9yXCIsIFwiXCIsIFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLCAgXCJcIik7XG4gICAgICAgICAgICAgICAgYWxlcnQobWVzc2FnZSk7XG4gICAgICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBzZWxmLmNvbXBvbmVudHMuc2VydmVyLmxvZ0V2ZW50KFwiWC1EaXNwbGF5LkZ1bGxzY3JlZW4uU3VjY2Vzc1wiLCBcIlwiLCBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcIiwgXCJcIik7XG4gICAgICAgICAgICAgICAgbW9kZWwuZGlzcGxheS5mdWxsc2NyZWVuKHRydWUpO1xuICAgICAgICAgICAgICAgIG1vZGVsLmNvbmZpZ3VyYXRpb24uY29udGFpbmVyLmNzcyhcIm92ZXJmbG93LXlcIiwgXCJhdXRvXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkb2N1bWVudC5leGl0RnVsbHNjcmVlbigpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNlbGYuY29tcG9uZW50cy5zZXJ2ZXIubG9nRXZlbnQoXCJYLURpc3BsYXkuRnVsbHNjcmVlbi5FeGl0XCIsIFwiXCIsIFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0Z1bGxzY3JlZW4udG9TdHJpbmcoKSwgXCJcIik7XG4gICAgICAgICAgICAgICAgbW9kZWwuZGlzcGxheS5mdWxsc2NyZWVuKGZhbHNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbi8vIFRPRE86IEdldCBzaGFyZWFibGUgbGluayBidXR0b25cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VJbnRlcmZhY2UobWFpbikge1xuICAgIHJldHVybiBgXG48ZGl2IGNsYXNzPSdibG9ja3B5LWNvbnRlbnQgY29udGFpbmVyLWZsdWlkJz5cblxuICAgIDwhLS0gRGlhbG9nIC0tPlxuICAgICR7RElBTE9HX0hUTUx9XG4gICAgXG4gICAgPCEtLSBIaWRkZW4gQ2FwdHVyZSBDYW52YXMgLS0+XG4gICAgPGNhbnZhcyBpZD0nY2FwdHVyZS1jYW52YXMnIGNsYXNzPSdkLW5vbmUnIHJvbGU9XCJwcmVzZW50YXRpb25cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2NhbnZhcz5cbiAgICBcbiAgICA8IS0tIFJvdyAxOiBIZWFkZXIgYW5kIFF1aWNrIE1lbnUgLS0+XG4gICAgPGRpdiBjbGFzcz0ncm93JyBkYXRhLWJpbmQ9XCJoaWRkZW46IHVpLnNtYWxsTGF5b3V0KClcIj5cbiAgICAgICAgIFxuICAgICAgICAgPCEtLSBEZXNjcmlwdGlvbiAtLT5cbiAgICAgICAgIDxkaXYgY2xhc3M9J2NvbC1tZC05IGJsb2NrcHktcGFuZWwgYmxvY2tweS1oZWFkZXInXG4gICAgICAgICAgICAgICByb2xlPSdoZWFkaW5nJyBhcmlhLWxhYmVsPSdBc3NpZ25tZW50IERlc2NyaXB0aW9uJz5cbiAgICAgICAgIFxuICAgICAgICAgICAgPCEtLSBBc3NpZ25tZW50IE5hbWUgLS0+XG4gICAgICAgICAgICA8c3BhbiByb2xlPSdoZWFkaW5nJyBhcmlhLWxldmVsPScxJ1xuICAgICAgICAgICAgICAgICAgY2xhc3M9XCJibG9ja3B5LW5hbWVcIj5cbiAgICAgICAgICAgICAgICA8c3Ryb25nPkJsb2NrUHk6IDwvc3Ryb25nPiBcbiAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLWJpbmQ9J3RleHQ6IGFzc2lnbm1lbnQubmFtZSc+PC9zcGFuPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICA8IS0tIFJlc2V0IEluc3RydWN0aW9ucyBCdXR0b24gLS0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmxvY2tweS1pbnN0cnVjdGlvbnMtcmVzZXRcIlxuICAgICAgICAgICAgICAgIGRhdGEtYmluZD1cInZpc2libGU6IHVpLmluc3RydWN0aW9ucy5pc0NoYW5nZWRcIj5cbiAgICAgICAgICAgICAgICA8YSBjbGFzcz1cImZsb2F0LXJpZ2h0XCJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS1iaW5kPVwiY2xpY2s6IHVpLmluc3RydWN0aW9ucy5yZXNldFwiXG4gICAgICAgICAgICAgICAgICAgIGhyZWY9XCJcIj5cbiAgICAgICAgICAgICAgICAgICAgUmVzZXQgaW5zdHJ1Y3Rpb25zPC9hPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDwhLS0gSW5zdHJ1Y3Rpb25zIC0tPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz0nYmxvY2tweS1pbnN0cnVjdGlvbnMnXG4gICAgICAgICAgICAgICAgIGRhdGEtYmluZD1cImh0bWw6IHVpLmluc3RydWN0aW9ucy5jdXJyZW50XCI+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIFxuICAgICAgICA8ZGl2IGNsYXNzPSdjb2wtbWQtMyBibG9ja3B5LXBhbmVsIGJsb2NrcHktcXVpY2stbWVudSdcbiAgICAgICAgICAgICByb2xlPSdtZW51YmFyJyBhcmlhLWxhYmVsPSdRdWljayBNZW51JyB0aXRsZT1cIlF1aWNrIE1lbnVcIj5cbiAgICAgICAgICAgIDwhLS0gR2V0IFNoYXJlYWJsZSBMaW5rIC0tPlxuICAgICAgICAgICAgPCEtLTxidXR0b24gY2xhc3M9XCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5IGJ0bi1zbVwiPlxuICAgICAgICAgICAgICAgIEdldCBzaGFyZWFibGUgbGluazwvYnV0dG9uPi0tPlxuICAgICAgICAgICAgPHNwYW4gZGF0YS1iaW5kPVwidmlzaWJsZTogdWkubWVudS5pc1N1Ym1pdHRlZFwiPlxuICAgICAgICAgICAgICAgIFlvdXIgc3VibWlzc2lvbiBpcyByZWFkeSB0byBiZSByZXZpZXdlZCE8L3NwYW4+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSBidG4tc21cIlxuICAgICAgICAgICAgICAgIGRhdGEtYmluZD1cInZpc2libGU6IHVpLm1lbnUuY2FuTWFya1N1Ym1pdHRlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHVpLm1lbnUudGV4dE1hcmtTdWJtaXR0ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogdWkubWVudS5jbGlja01hcmtTdWJtaXR0ZWRcIj48L2J1dHRvbj5cbiAgICAgICAgICAgIDwhLS0gVmlldyBhcyBpbnN0cnVjdG9yIC0tPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tY2hlY2tcIlxuICAgICAgICAgICAgICAgICBkYXRhLWJpbmQ9XCJ2aXNpYmxlOiB1aS5yb2xlLmlzR3JhZGVyXCI+XG4gICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiIHR5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwiXCIgaWQ9XCJibG9ja3B5LWFzLWluc3RydWN0b3JcIlxuICAgICAgICAgICAgICAgICAgICBkYXRhLWJpbmQ9XCJjaGVja2VkOiBkaXNwbGF5Lmluc3RydWN0b3JcIj5cbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCIgZm9yPVwiYmxvY2tweS1hcy1pbnN0cnVjdG9yXCI+XG4gICAgICAgICAgICAgICAgICAgIFZpZXcgYXMgaW5zdHJ1Y3RvclxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwhLS0gUmVhZG9ubHkgbW9kZSBmb3Igc3B5aW5nIC0tPlxuICAgICAgICAgICAgPGRpdiBkYXRhLWJpbmQ9XCJpZjogc3VibWlzc2lvbi5vd25lcklkKCkgIT0gdXNlci5pZCgpXCI+XG4gICAgICAgICAgICAgICAgT3duZXI6IDxzcGFuIGRhdGEtYmluZD1cInRleHQ6IHN1Ym1pc3Npb24ub3duZXJJZFwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1jaGVja1wiPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCJibG9ja3B5LXJlYWQtb25seVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWJpbmQ9XCJjaGVja2VkOiBkaXNwbGF5LnJlYWRPbmx5XCI+XG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIiBmb3I9XCJibG9ja3B5LXJlYWQtb25seVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhZG9ubHk/XG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICA8IS0tIEZ1bGxzY3JlZW4gYnV0dG9uIC0tPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tb3V0bGluZS1zZWNvbmRhcnkgYnRuLXNtXCJcbiAgICAgICAgICAgICAgICBkYXRhLWJpbmQ9XCJjbGljazogdWkubWVudS5jbGlja0Z1bGxzY3JlZW5cIlxuICAgICAgICAgICAgICAgIHRpdGxlPVwiRnVsbCBTY3JlZW5cIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nZmFzJyBkYXRhLWJpbmQ9XCJjbGFzczogdWkubWVudS50ZXh0RnVsbHNjcmVlblwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPCEtLSBFZGl0IFF1ZXVlZCBJbnB1dHMgLS0+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSBidG4tc21cIlxuICAgICAgICAgICAgICAgIGRhdGEtYmluZD1cImNsaWNrOiB1aS5tZW51LmVkaXRJbnB1dHMsIHZpc2libGU6IHVpLm1lbnUuc2hvd1F1ZXVlZElucHV0c1wiIHRpdGxlPVwiRWRpdCBJbnB1dHNcIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nZmFzIGZhLWxpc3QtYWx0Jz48L3NwYW4+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwhLS0gVG9nZ2xlIEltYWdlIFJlbmRlcmluZyAtLT5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5IGJ0bi1zbVwiXG4gICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgIGRhdGEtYmluZD1cImNsaWNrOiB1aS5tZW51LnRvZ2dsZUltYWdlc1wiIHRpdGxlPVwiVG9nZ2xlIEltYWdlc1wiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZmFzIGZhLWltYWdlc1wiPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPCEtLSBQaW5rIEJ1ZyBmb3IgYWN0dWFsIGVycm9ycyAtLT5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYmxvY2tweS1zdHVkZW50LWVycm9yIGZhcyBmYS1idWdcIj48L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBkYXRhLWJpbmQ9XCJoaWRkZW46IHVpLm1lbnUuc2hvd0Nsb2NrXCIgY2xhc3M9XCJibG9ja3B5LW1lbnUtY2xvY2tcIj48L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICAgXG4gICAgPC9kaXY+XG4gICAgXG4gICAgPCEtLSBrbyBpZjogdWkuc21hbGxMYXlvdXQoKSAtLT5cbiAgICA8IS0tIFNtYWxsIGxheW91dCBWaWV3IGFzIGluc3RydWN0b3IgLS0+XG4gICAgPGRpdiBjbGFzcz1cImZvcm0tY2hlY2tcIlxuICAgICAgICAgZGF0YS1iaW5kPVwidmlzaWJsZTogdWkucm9sZS5pc0dyYWRlclwiPlxuICAgICAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCJcIiBpZD1cImJsb2NrcHktYXMtaW5zdHJ1Y3RvclwiXG4gICAgICAgICAgICBkYXRhLWJpbmQ9XCJjaGVja2VkOiBkaXNwbGF5Lmluc3RydWN0b3JcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiIGZvcj1cImJsb2NrcHktYXMtaW5zdHJ1Y3RvclwiPlxuICAgICAgICAgICAgVmlldyBhcyBpbnN0cnVjdG9yXG4gICAgICAgIDwvbGFiZWw+XG4gICAgPC9kaXY+XG4gICAgPCEtLSBrbyBpZjogdWkuZmlsZXMudmlzaWJsZSgpIC0tPlxuICAgICR7RklMRVNfSFRNTH1cbiAgICA8IS0tIC9rbyAtLT5cbiAgICA8IS0tIC9rbyAtLT5cbiAgICBcbiAgICA8ZGl2IGNsYXNzPSdyb3cnPlxuICAgIDwhLS0gUm93IDI6IENvbnNvbGUgYW5kIEZlZWRiYWNrIC0tPlxuICAgIDwhLS0ga28gaWY6IHVpLnNlY29uZFJvdy5pc0FsbFZpc2libGUgLS0+XG4gICAgPGRpdiBkYXRhLWJpbmQ9XCJjbGFzczogdWkuc2Vjb25kUm93LndpZHRoXCI+XG4gICAgPGRpdiBjbGFzcz0ncm93Jz5cbiAgICAgICAgPCEtLSBDb25zb2xlIC0tPlxuICAgICAgICAke0NPTlNPTEVfSFRNTH1cbiAgICAgICAgPCEtLSBGZWVkYmFjayAtLT5cbiAgICAgICAgPCEtLSBrbyBpZjogdWkuc2Vjb25kUm93LmlzRmVlZGJhY2tWaXNpYmxlIC0tPlxuICAgICAgICAke0ZFRURCQUNLX0hUTUx9XG4gICAgICAgIDwhLS0gL2tvIC0tPlxuICAgICAgICA8IS0tIFRyYWNlIC0tPlxuICAgICAgICA8IS0tIGtvIGlmOiB1aS5zZWNvbmRSb3cuaXNUcmFjZVZpc2libGUgLS0+XG4gICAgICAgICR7VFJBQ0VfSFRNTH1cbiAgICAgICAgPCEtLSAva28gLS0+XG4gICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPCEtLSAva28gLS0+XG4gICAgXG4gICAgPCEtLSBSb3cgMzogRmlsZSBOYXZpZ2F0aW9uIC0tPlxuICAgIDwhLS0ga28gaWY6IHVpLmZpbGVzLnZpc2libGUoKSAmJiAhdWkuc21hbGxMYXlvdXQoKSAtLT5cbiAgICAke0ZJTEVTX0hUTUx9XG4gICAgPCEtLSAva28gLS0+XG4gICAgXG4gICAgPCEtLSBSb3cgNDogVmlldyBSb3cgLS0+XG4gICAgJHtFRElUT1JTX0hUTUx9XG4gICAgXG4gICAgPC9kaXY+XG4gICAgXG4gICAgXG4gICAgPCEtLSBSb3cgNTogRm9vdGVyIFJvdyAtLT4gICAgXG4gICAgPCEtLSBrbyBpZjogdWkuZm9vdGVyLnZpc2libGUgLS0+XG4gICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAke0ZPT1RFUl9IVE1MfVxuICAgIDwvZGl2PlxuICAgIDwhLS0gL2tvIC0tPlxuICAgIFxuPC9kaXY+XG4gICAgYDtcbn0iLCJpbXBvcnQge0xvY2FsU3RvcmFnZVdyYXBwZXJ9IGZyb20gXCIuL3N0b3JhZ2VcIjtcbmltcG9ydCB7bG9hZEFzc2lnbm1lbnRTZXR0aW5ncywgc2F2ZUFzc2lnbm1lbnRTZXR0aW5nc30gZnJvbSBcIi4vZWRpdG9yL2Fzc2lnbm1lbnRfc2V0dGluZ3NcIjtcblxuLyoqXG4gKlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGxldCBTdGF0dXNTdGF0ZSA9IHtcbiAgICBSRUFEWTogXCJyZWFkeVwiLFxuICAgIEFDVElWRTogXCJhY3RpdmVcIixcbiAgICBSRVRSWUlORzogXCJyZXRyeWluZ1wiLFxuICAgIEZBSUxFRDogXCJmYWlsZWRcIixcbiAgICBPRkZMSU5FOiBcIm9mZmxpbmVcIlxufTtcblxuLyoqXG4gKiBPYmplY3QgZm9yIGNvbW11bmljYXRpbmcgd2l0aCB0aGUgZXh0ZXJuYWwgc2VydmVycy4gVGhpcyBpbmNsdWRlcyBmdW5jdGlvbmFsaXR5IGZvclxuICogc2F2aW5nIGFuZCBsb2FkaW5nIGZpbGVzLCBsb2dnaW5nIGV2ZW50cywgc2F2aW5nIGNvbXBsZXRpb25zLCBhbmQgcmV0cmlldmluZyBoaXN0b3J5LlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHRoaXMge0Jsb2NrUHlTZXJ2ZXJ9XG4gKiBAcGFyYW0ge09iamVjdH0gbWFpbiAtIFRoZSBtYWluIEJsb2NrUHkgaW5zdGFuY2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEJsb2NrUHlTZXJ2ZXIobWFpbikge1xuICAgIHRoaXMubWFpbiA9IG1haW47XG5cbiAgICAvLyBTYXZlIFVSTHMgbG9jYWxseSBmb3IgcXVpY2tlciBhY2Nlc3NcbiAgICB0aGlzLnVybHMgPSBtYWluLm1vZGVsLmNvbmZpZ3VyYXRpb24udXJscztcblxuICAgIC8vIEFkZCB0aGUgTG9jYWxTdG9yYWdlIGNvbm5lY3Rpb25cbiAgICB0aGlzLnN0b3JhZ2UgPSBuZXcgTG9jYWxTdG9yYWdlV3JhcHBlcihcIkJMT0NLUFlcIik7XG5cbiAgICAvLyBGYXVsdFJlc2lzdGFudENhY2hlXG4gICAgdGhpcy5xdWV1ZSA9IHtcbiAgICAgICAgXCJsb2dFdmVudFwiOiBKU09OLnBhcnNlKHRoaXMuc3RvcmFnZS5nZXREZWZhdWx0KFwibG9nRXZlbnRcIiwgXCJbXVwiKSksXG4gICAgICAgIFwidXBkYXRlU3VibWlzc2lvblwiOiBKU09OLnBhcnNlKHRoaXMuc3RvcmFnZS5nZXREZWZhdWx0KFwidXBkYXRlU3VibWlzc2lvblwiLCBcIltdXCIpKVxuICAgIH07XG4gICAgdGhpcy5NQVhfUVVFVUVfU0laRSA9IHtcbiAgICAgICAgXCJsb2dFdmVudFwiOiAyMDAsXG4gICAgICAgIFwidXBkYXRlU3VibWlzc2lvblwiOiA1MFxuICAgIH07XG5cbiAgICB0aGlzLlRJTUVSX0RFTEFZID0gMTAwMDtcbiAgICB0aGlzLkZBSUxfREVMQVkgPSAyMDAwO1xuXG4gICAgdGhpcy50aW1lcnMgPSB7fTtcblxuICAgIHRoaXMub3ZlcmxheSA9IG51bGw7XG4gICAgdGhpcy5ibG9ja2luZ0F0dGVtcHRzID0gMDtcblxuICAgIHRoaXMuY2FjaGVkRmlsZW5hbWVzID0gW107XG4gICAgdGhpcy5jcmVhdGVTdWJzY3JpcHRpb25zKCk7XG4gICAgdGhpcy5jaGVja0NhY2hlcygpO1xuXG4gICAgdGhpcy5hbHRMb2dFbnRyeSA9IG51bGw7XG59XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgdGhlIElQIGFkZHJlc3MgaGFzIGNoYW5nZWQsIGxvZ2dpbmcgYW4gZXZlbnQgaWYgdGhhdCBvY2N1cnMuXG4gKiBAcGFyYW0gcmVzcG9uc2VcbiAqL1xuQmxvY2tQeVNlcnZlci5wcm90b3R5cGUuY2hlY2tJUCA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgIGlmIChyZXNwb25zZS5zdWNjZXNzKSB7XG4gICAgICAgIGlmICh0aGlzLnN0b3JhZ2UuaGFzKFwiSVBcIikpIHtcbiAgICAgICAgICAgIGxldCBvbGRJUCA9IHRoaXMuc3RvcmFnZS5nZXQoXCJJUFwiKTtcbiAgICAgICAgICAgIGlmIChvbGRJUCAhPT0gcmVzcG9uc2UuaXApIHtcbiAgICAgICAgICAgICAgICBsZXQgbWVzc2FnZSA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgXCJvbGRcIjogb2xkSVAsXG4gICAgICAgICAgICAgICAgICAgIFwibmV3XCI6IHJlc3BvbnNlLmlwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYWx0TG9nRW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbHRMb2dFbnRyeShcIlgtSVAuQ2hhbmdlXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ0V2ZW50KFwiWC1JUC5DaGFuZ2VcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnN0b3JhZ2Uuc2V0KFwiSVBcIiwgcmVzcG9uc2UuaXApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdG9yYWdlLnNldChcIklQXCIsIHJlc3BvbnNlLmlwKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGVyZSBoYXZlIGJlZW4gcHJldmlvdXMgZmFpbHVyZXMgY2FjaGVkLCBhbmQgaWYgc28gcmV0cmllcyB0aGVtLlxuICogVE9ETzogdXBkYXRlXG4gKi9cbkJsb2NrUHlTZXJ2ZXIucHJvdG90eXBlLmNoZWNrQ2FjaGVzID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnN0b3JhZ2UuaGFzKFwic2F2ZUFzc2lnbm1lbnRcIikpIHtcbiAgICAgICAgbGV0IGRhdGEgPSBKU09OLnBhcnNlKHRoaXMuc3RvcmFnZS5nZXQoXCJzYXZlQXNzaWdubWVudFwiKSk7XG4gICAgICAgIHRoaXMuX3Bvc3RMYXRlc3RSZXRyeShkYXRhLCBcImFzc2lnbm1lbnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2F2ZUFzc2lnbm1lbnRcIiwgdGhpcy5USU1FUl9ERUxBWSk7XG4gICAgfVxuICAgIHRoaXMuY2FjaGVkRmlsZW5hbWVzLmZvckVhY2goKGZpbGVuYW1lKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0b3JhZ2UuaGFzKFwic2F2ZUZpbGVcIiArIGZpbGVuYW1lKSkge1xuICAgICAgICAgICAgbGV0IGRhdGEgPSBKU09OLnBhcnNlKHRoaXMuc3RvcmFnZS5nZXQoXCJzYXZlRmlsZVwiICsgZmlsZW5hbWUpKTtcbiAgICAgICAgICAgIHRoaXMuX3Bvc3RMYXRlc3RSZXRyeShkYXRhLCBmaWxlbmFtZSwgXCJzYXZlRmlsZVwiLCB0aGlzLlRJTUVSX0RFTEFZKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHZhciBzZXJ2ZXIgPSB0aGlzO1xuICAgIE9iamVjdC5rZXlzKHRoaXMucXVldWUpLmZvckVhY2goZnVuY3Rpb24gKGVuZHBvaW50KSB7XG4gICAgICAgIChmdW5jdGlvbiBwdXNoQW55UXVldWVkKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIGlmIChzZXJ2ZXIucXVldWVbZW5kcG9pbnRdLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2Uoc2VydmVyLnF1ZXVlW2VuZHBvaW50XS5wb3AoKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBzZXJ2ZXIudXJsc1tlbmRwb2ludF07XG4gICAgICAgICAgICAgICAgICAgIHNlcnZlci5fcG9zdFJldHJ5KGRhdGEsIGVuZHBvaW50LCAxMDAwLCBwdXNoQW55UXVldWVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKHtcInN1Y2Nlc3NcIjogdHJ1ZX0pO1xuICAgIH0pO1xufTtcblxuQmxvY2tQeVNlcnZlci5wcm90b3R5cGUuY3JlYXRlRmlsZVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChtb2RlbCwgZmlsZW5hbWUpIHtcbiAgICBtb2RlbC5zdWJzY3JpYmUoKGNvbnRlbnRzKSA9PlxuICAgICAgICB0aGlzLm1haW4ubW9kZWwuZGlzcGxheS5hdXRvU2F2ZSgpID8gdGhpcy5zYXZlRmlsZShmaWxlbmFtZSwgY29udGVudHMpIDogZmFsc2UsIHRoaXMpO1xuICAgIHRoaXMuY2FjaGVkRmlsZW5hbWVzLnB1c2goZmlsZW5hbWUpO1xufTtcblxuLyoqXG4gKiBUT0RPOiBmaXhcbiAqL1xuQmxvY2tQeVNlcnZlci5wcm90b3R5cGUuY3JlYXRlU3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgbW9kZWwgPSB0aGlzLm1haW4ubW9kZWw7XG4gICAgdGhpcy5jcmVhdGVGaWxlU3Vic2NyaXB0aW9uKG1vZGVsLnN1Ym1pc3Npb24uY29kZSwgXCJhbnN3ZXIucHlcIik7XG4gICAgdGhpcy5jcmVhdGVGaWxlU3Vic2NyaXB0aW9uKG1vZGVsLmFzc2lnbm1lbnQub25SdW4sIFwiIW9uX3J1bi5weVwiKTtcbiAgICB0aGlzLmNyZWF0ZUZpbGVTdWJzY3JpcHRpb24obW9kZWwuYXNzaWdubWVudC5vbkV2YWwsIFwiIW9uX2V2YWwucHlcIik7XG4gICAgdGhpcy5jcmVhdGVGaWxlU3Vic2NyaXB0aW9uKG1vZGVsLmFzc2lnbm1lbnQub25DaGFuZ2UsIFwiIW9uX2NoYW5nZS5weVwiKTtcbiAgICB0aGlzLmNyZWF0ZUZpbGVTdWJzY3JpcHRpb24obW9kZWwuYXNzaWdubWVudC5pbnN0cnVjdGlvbnMsIFwiIWluc3RydWN0aW9ucy5tZFwiKTtcbiAgICB0aGlzLmNyZWF0ZUZpbGVTdWJzY3JpcHRpb24obW9kZWwuYXNzaWdubWVudC5zdGFydGluZ0NvZGUsIFwiXnN0YXJ0aW5nX2NvZGUucHlcIik7XG4gICAgdGhpcy5jcmVhdGVGaWxlU3Vic2NyaXB0aW9uKG1vZGVsLnVpLmZpbGVzLmV4dHJhU3R1ZGVudEZpbGVzLCBcIiNleHRyYV9zdHVkZW50X2ZpbGVzLmJsb2NrcHlcIik7XG4gICAgdGhpcy5jcmVhdGVGaWxlU3Vic2NyaXB0aW9uKG1vZGVsLnVpLmZpbGVzLmV4dHJhU3RhcnRpbmdGaWxlcywgXCIjZXh0cmFfc3RhcnRpbmdfZmlsZXMuYmxvY2tweVwiKTtcbiAgICB0aGlzLmNyZWF0ZUZpbGVTdWJzY3JpcHRpb24obW9kZWwudWkuZmlsZXMuZXh0cmFJbnN0cnVjdG9yRmlsZXMsIFwiI2V4dHJhX2luc3RydWN0b3JfZmlsZXMuYmxvY2tweVwiKTtcbn07XG5cbkJsb2NrUHlTZXJ2ZXIucHJvdG90eXBlLmNyZWF0ZUV2ZW50TG9ncyA9IGZ1bmN0aW9uKCkge1xuICAgIHdpbmRvdy5vbmJsdXIgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMubG9nRXZlbnQoXCJTZXNzaW9uLkVuZFwiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgICB9O1xuICAgIHdpbmRvdy5vbmZvY3VzID0gKCkgPT4ge1xuICAgICAgICB0aGlzLmxvZ0V2ZW50KFwiU2Vzc2lvbi5TdGFydFwiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgICB9O1xuXG4gICAgLy8gVE9ETzogQWRkIGluIGJlYWNvbj9cbn07XG5cbi8qKlxuICpcbiAqIFNvbWUgc3Vic2NyaXB0aW9ucyBoYXZlIHRvIGhhcHBlbiBhZnRlciBvdGhlciB0aGluZ3MgaGF2ZSBiZWVuIGxvYWRlZC5cbiAqIFJpZ2h0IG5vdyB0aGlzIGlzIGp1c3QgYWZ0ZXIgQ09SR0lTIGxpYnJhcmllcyBoYXZlIGJlZW4gbG9hZGVkLCBidXQgbWF5YmVcbiAqIHdlJ2xsIGFkZCBtb3JlIGxhdGVyIGFuZCB0aGlzIHdpbGwgbmVlZCB0byBiZSByZWZhY3RvcmVkLlxuICpcbiAqIFRPRE86IGZpeFxuICpcbiAqL1xuQmxvY2tQeVNlcnZlci5wcm90b3R5cGUuZmluYWxpemVTdWJzY3JpcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIC8vdGhpcy5tYWluLm1vZGVsLmFzc2lnbm1lbnQuc2V0dGluZ3MuZGF0YXNldHMuc3Vic2NyaWJlKHRoaXMuc2F2ZUFzc2lnbm1lbnQuYmluZCh0aGlzKSk7XG59O1xuXG5CbG9ja1B5U2VydmVyLnByb3RvdHlwZS5hdXRob3JpemVIZWFkZXIgPSBmdW5jdGlvbihjdXJyZW50U2V0dGluZ3MpIHtcbiAgICBpZiAoIWN1cnJlbnRTZXR0aW5ncykge1xuICAgICAgICBjdXJyZW50U2V0dGluZ3MgPSB7fTtcbiAgICB9XG4gICAgY29uc3QgYWNjZXNzVG9rZW4gPSB0aGlzLm1haW4ubW9kZWwuY29uZmlndXJhdGlvbi5hY2Nlc3NUb2tlbigpO1xuICAgIGlmIChhY2Nlc3NUb2tlbikge1xuICAgICAgICBpZiAoIWN1cnJlbnRTZXR0aW5ncy5oZWFkZXJzKSB7XG4gICAgICAgICAgICBjdXJyZW50U2V0dGluZ3MuaGVhZGVycyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRTZXR0aW5ncy5oZWFkZXJzW1wiQXV0aG9yaXphdGlvblwiXSA9IFwiQmVhcmVyIFwiICsgYWNjZXNzVG9rZW47XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50U2V0dGluZ3M7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgdGhlIGRlZmF1bHQgcGF5bG9hZCBmb3IgYW55IGNvbW11bmljYXRpb24gd2l0aCB0aGUgc2VydmVyIEFQSVxuICogQHJldHVybnMge3thc3NpZ25tZW50X2lkOiAqLCBjb3Vyc2VfaWQ6ICosIGdyb3VwX2lkOiAqLCB1c2VyX2lkOiAqLCB0aW1lem9uZTogKiwgdmVyc2lvbjogKiwgdGltZXN0YW1wOiAqfX1cbiAqL1xuQmxvY2tQeVNlcnZlci5wcm90b3R5cGUuY3JlYXRlU2VydmVyRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgYXNzaWdubWVudCA9IHRoaXMubWFpbi5tb2RlbC5hc3NpZ25tZW50O1xuICAgIGxldCB1c2VyID0gdGhpcy5tYWluLm1vZGVsLnVzZXI7XG4gICAgbGV0IHN1Ym1pc3Npb24gPSB0aGlzLm1haW4ubW9kZWwuc3VibWlzc2lvbjtcbiAgICBsZXQgZGlzcGxheSA9IHRoaXMubWFpbi5tb2RlbC5kaXNwbGF5O1xuICAgIGNvbnN0IGNvbmZpZ3VyYXRpb24gPSB0aGlzLm1haW4ubW9kZWwuY29uZmlndXJhdGlvbjtcbiAgICBsZXQgbm93ID0gbmV3IERhdGUoKTtcbiAgICBsZXQgbWljcm9zZWNvbmRzID0gbm93LmdldFRpbWUoKTtcbiAgICBsZXQgcmVzdWx0ID0ge1xuICAgICAgICBcImFzc2lnbm1lbnRfaWRcIjogYXNzaWdubWVudC5pZCgpLFxuICAgICAgICBcImFzc2lnbm1lbnRfZ3JvdXBfaWRcIjogdXNlci5ncm91cElkKCksXG4gICAgICAgIFwiY291cnNlX2lkXCI6IHVzZXIuY291cnNlSWQoKSxcbiAgICAgICAgXCJzdWJtaXNzaW9uX2lkXCI6IHN1Ym1pc3Npb24uaWQoKSxcbiAgICAgICAgXCJ1c2VyX2lkXCI6IHVzZXIuaWQoKSxcbiAgICAgICAgXCJ2ZXJzaW9uXCI6IGFzc2lnbm1lbnQudmVyc2lvbigpLFxuICAgICAgICBcInRpbWVzdGFtcFwiOiBtaWNyb3NlY29uZHMsXG4gICAgICAgIFwidGltZXpvbmVcIjogbm93LmdldFRpbWV6b25lT2Zmc2V0KCksXG4gICAgICAgIFwicGFzc2NvZGVcIjogZGlzcGxheS5wYXNzY29kZSgpLFxuICAgICAgICBcInBhcnRfaWRcIjogY29uZmlndXJhdGlvbi5wYXJ0SWQoKVxuICAgIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgc3RhdHVzIGFuZCBtZXNzYWdlIGZvciB0aGUgcmVsZXZhbnQgZW5kcG9pbnQuXG4gKiBAcGFyYW0gZW5kcG9pbnQge3N0cmluZ30gb25lIG9mIHRoZSBVUkwgZW5kcG9pbnRzXG4gKiBAcGFyYW0gc3RhdHVzIHtTdGF0dXNTdGF0ZX1cbiAqIEBwYXJhbSBtZXNzYWdlIHtzdHJpbmc/fVxuICovXG5CbG9ja1B5U2VydmVyLnByb3RvdHlwZS5zZXRTdGF0dXMgPSBmdW5jdGlvbiAoZW5kcG9pbnQsIHN0YXR1cywgbWVzc2FnZSkge1xuICAgIGlmIChlbmRwb2ludCBpbiB0aGlzLm1haW4ubW9kZWwuc3RhdHVzKSB7XG4gICAgICAgIHRoaXMubWFpbi5tb2RlbC5zdGF0dXNbZW5kcG9pbnRdKHN0YXR1cyk7XG4gICAgICAgIHRoaXMubWFpbi5tb2RlbC5zdGF0dXNbZW5kcG9pbnQgKyBcIk1lc3NhZ2VcIl0obWVzc2FnZSB8fCBcIlwiKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFJlbmRlcnMgYW4gb3ZlcmxheSBvbiB0aGUgc2NyZWVuIHRoYXQgYmxvY2tzIG9wZXJhdGlvbiB1bnRpbCB0aGUgc3lzdGVtIGlzIHJlYWR5LlxuICogVGhlIG92ZXJsYXkgZ2V0cyBwcm9ncmVzc2l2ZWx5IGRhcmtlciB0byBpbmRpY2F0ZSByZXBlYXRlZCBmYWlsdXJlcy5cbiAqL1xuQmxvY2tQeVNlcnZlci5wcm90b3R5cGUuc2hvd092ZXJsYXkgPSBmdW5jdGlvbiAoYXR0ZW1wdCkge1xuICAgIHRoaXMuYmxvY2tpbmdBdHRlbXB0cyArPSAxO1xuICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImJsb2NrcHktb3ZlcmxheVwiKS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5vdmVybGF5ID0gJCgnPGRpdiBjbGFzcz1cImJsb2NrcHktb3ZlcmxheVwiPiA8L2Rpdj4nKTtcbiAgICAgICAgdGhpcy5vdmVybGF5LmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpO1xuICAgIH1cbiAgICBzd2l0Y2ggKGF0dGVtcHQpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgdGhpcy5vdmVybGF5LmNzcyhcImJhY2tncm91bmQtY29sb3JcIiwgXCIjOTg4XCIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHRoaXMub3ZlcmxheS5jc3MoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIFwiIzY1NVwiKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICB0aGlzLm92ZXJsYXkuY3NzKFwiYmFja2dyb3VuZC1jb2xvclwiLCBcIiMzMzNcIik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRoaXMub3ZlcmxheS5jc3MoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIFwiYmxhY2tcIik7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG59O1xuXG4vKipcbiAqIFVuZG8gYSBsZXZlbCBvZiBvdmVybGF5OyBpZiB0aGlzIHdhcyB0aGUgbGFzdCBsZXZlbCwgcmVtb3ZlcyBpdCBmcm9tIHRoZSBzY3JlZW4uXG4gKi9cbkJsb2NrUHlTZXJ2ZXIucHJvdG90eXBlLmhpZGVPdmVybGF5ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYmxvY2tpbmdBdHRlbXB0cyAtPSAxO1xuICAgIGlmICh0aGlzLmJsb2NraW5nQXR0ZW1wdHMgPD0gMCkge1xuICAgICAgICB0aGlzLm92ZXJsYXkucmVtb3ZlKCk7XG4gICAgfVxufTtcblxuQmxvY2tQeVNlcnZlci5wcm90b3R5cGUuX2VucXVldWVEYXRhID0gZnVuY3Rpb24gKGNhY2hlLCBkYXRhKSB7XG4gICAgLy8gRW5zdXJlIHdlIGhhdmUgbm90IG92ZXJmaWxsZWQgdGhlIHF1ZXVlXG4gICAgbGV0IGxlbmd0aCA9IHRoaXMucXVldWVbY2FjaGVdLmxlbmd0aDtcbiAgICBsZXQgbWF4ID0gdGhpcy5NQVhfUVVFVUVfU0laRVtjYWNoZV07XG4gICAgaWYgKGxlbmd0aCA+IG1heCkge1xuICAgICAgICB0aGlzLnF1ZXVlW2NhY2hlXSA9IHRoaXMucXVldWVbY2FjaGVdLnNsaWNlKGxlbmd0aCAtIG1heCwgbWF4KTtcbiAgICB9XG4gICAgLy8gT25seSBhZGQgdGhlIGVsZW1lbnQgaWYgaXQncyBuZXdcbiAgICBsZXQga2V5ID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgbGV0IGluZGV4ID0gdGhpcy5xdWV1ZVtjYWNoZV0uaW5kZXhPZihrZXkpO1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgdGhpcy5xdWV1ZVtjYWNoZV0ucHVzaChrZXkpO1xuICAgICAgICB0aGlzLnN0b3JhZ2Uuc2V0KGNhY2hlLCBKU09OLnN0cmluZ2lmeSh0aGlzLnF1ZXVlW2NhY2hlXSkpO1xuICAgIH1cbn07XG5cbkJsb2NrUHlTZXJ2ZXIucHJvdG90eXBlLl9kZXF1ZXVlRGF0YSA9IGZ1bmN0aW9uIChjYWNoZSwgZGF0YSkge1xuICAgIGxldCBrZXkgPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICBsZXQgaW5kZXggPSB0aGlzLnF1ZXVlW2NhY2hlXS5pbmRleE9mKGtleSk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgdGhpcy5xdWV1ZVtjYWNoZV0uc3BsaWNlKGluZGV4KTtcbiAgICAgICAgdGhpcy5zdG9yYWdlLnNldChjYWNoZSwgSlNPTi5zdHJpbmdpZnkodGhpcy5xdWV1ZVtjYWNoZV0pKTtcbiAgICB9XG59O1xuXG5cbkJsb2NrUHlTZXJ2ZXIucHJvdG90eXBlLl9wb3N0UmV0cnkgPSBmdW5jdGlvbiAoZGF0YSwgZW5kcG9pbnQsIGRlbGF5LCBjYWxsYmFjaykge1xuICAgIC8vIFRyaWdnZXIgcmVxdWVzdFxuICAgIGxldCBwb3N0UmVxdWVzdCA9ICgpID0+IHtcbiAgICAgICAgLy8gTWFrZSBhIGJhY2t1cCBvZiB0aGUgY3VycmVudCBwb3N0XG4gICAgICAgIHRoaXMuX2VucXVldWVEYXRhKGVuZHBvaW50LCBkYXRhKTtcbiAgICAgICAgJC5hamF4KHt1cmw6IHRoaXMudXJsc1tlbmRwb2ludF0sIHR5cGU6IFwicG9zdFwiLCBkYXRhOiBkYXRhLCAuLi50aGlzLmF1dGhvcml6ZUhlYWRlcigpfSlcbiAgICAgICAgICAgIC5kb25lKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RlcXVldWVEYXRhKGVuZHBvaW50LCBkYXRhKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXR1cyhlbmRwb2ludCwgU3RhdHVzU3RhdGUuUkVBRFkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXR1cyhlbmRwb2ludCwgU3RhdHVzU3RhdGUuRkFJTEVELCByZXNwb25zZS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja0lQKHJlc3BvbnNlLmlwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLy8gSWYgc2VydmVyIHJlcXVlc3QgaXMgdGhlIGxhdGVzdCBvbmUsIHRoZW4gbGV0J3MgdHJ5IGl0IGFnYWluIGluIGEgYml0XG4gICAgICAgICAgICAuZmFpbCgoZXJyb3IsIHRleHRTdGF0dXMpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXR1cyhlbmRwb2ludCwgU3RhdHVzU3RhdGUuUkVUUllJTkcsIHRleHRTdGF0dXMudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcG9zdFJldHJ5KGRhdGEsIGVuZHBvaW50LCBkZWxheSArIHRoaXMuRkFJTF9ERUxBWSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcbiAgICBpZiAoZGVsYXkgPT09IG51bGwpIHtcbiAgICAgICAgcG9zdFJlcXVlc3QoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzZXRUaW1lb3V0KHBvc3RSZXF1ZXN0LCBkZWxheSk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBNYWtlIGEgQUpBWCByZXF1ZXN0IHRoYXQsIHVwb24gZmFpbHVyZSwgd2lsbCBjaGVjayB0byBzZWUgaWYgdGhpcyB3YXMgdGhlXG4gKiBsYXRlc3QgYXR0ZW1wdCBmb3IgdGhpcyBgY2FjaGVgIG1hcmtlci4gSWYgc28sIGl0IHdpbGwgYXR0ZW1wdCBhZ2FpbiB1bnRpbFxuICogc3VjY2Vzc2Z1bDsgb3RoZXJ3aXNlLCBpdCBnaXZlcyB1cCB0aGUgcmVxdWVzdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIFRoZSBBSkFYLXJlYWR5IGRhdGEgdG8gYmUgcG9zdGVkXG4gKiBAcGFyYW0ge1N0cmluZ30gZmlsZW5hbWUgLSBUaGUgdW5pcXVlIG5hbWUgZ2l2ZW4gdG8gdGhlIHJlbGV2YW50IHRpbWVyXG4gKiBAcGFyYW0ge1N0cmluZ30gZW5kcG9pbnQgLSBUaGUgdW5pcXVlIG5hbWUgZ2l2ZW4gdG8gdGhlIHJlbGV2YW50IGNhY2hlIGVudHJ5XG4gKiBAcGFyYW0ge0ludGVnZXJ9IGRlbGF5IC0gVGhlIGN1cnJlbnQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZVxuIHRyeWluZyB0aGUgcmVxdWVzdCBhZ2Fpbi5cbiAqL1xuQmxvY2tQeVNlcnZlci5wcm90b3R5cGUuX3Bvc3RMYXRlc3RSZXRyeSA9IGZ1bmN0aW9uIChkYXRhLCBmaWxlbmFtZSwgZW5kcG9pbnQsIGRlbGF5LCBmYWlsdXJlRnVuY3Rpb24sIGRvbmVGdW5jdGlvbikge1xuICAgIGxldCBjYWNoZSA9IGVuZHBvaW50ICsgZmlsZW5hbWU7XG4gICAgbGV0IHJlcXVlc3QgPSAoKSA9PiB7XG4gICAgICAgIC8vIE1ha2UgYSBiYWNrdXAgb2YgdGhlIGN1cnJlbnQgcG9zdFxuICAgICAgICB0aGlzLnN0b3JhZ2Uuc2V0KGNhY2hlLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAgICAgIGxldCB0aW1lID0gdGhpcy5zdG9yYWdlLmdldFRpbWUoY2FjaGUpO1xuICAgICAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgICAgICQuYWpheCh7dXJsOiB0aGlzLnVybHNbZW5kcG9pbnRdLCBkYXRhOiBkYXRhLCB0eXBlOiBcInBvc3RcIiwgLi4udGhpcy5hdXRob3JpemVIZWFkZXIoKX0pXG4gICAgICAgICAgICAuZG9uZSgocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrSVAocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiBzZXJ2ZXIgcmVxdWVzdCBpcyB0aGUgbGF0ZXN0IG9uZSwgY2xlYXIgaXQgZnJvbSB0aGUgY2FjaGVcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNhY2hlZFRpbWUgPSB0aGlzLnN0b3JhZ2UuZ2V0VGltZShjYWNoZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lID49IGNhY2hlZFRpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcmFnZS5yZW1vdmUoY2FjaGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdHVzKGVuZHBvaW50LCBTdGF0dXNTdGF0ZS5SRUFEWSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBjb25uZWN0ZWQgYnV0IGZhaWxlZCwgZG9uJ3QgdHJ5IGFnYWluIGJ1dCBsZXQgdGhlIHVzZXIga25vdyB3aHkuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdHVzKGVuZHBvaW50LCBTdGF0dXNTdGF0ZS5GQUlMRUQsIHJlc3BvbnNlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3VjY2VzcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHdlJ3JlIHRoZSBsYXRlc3Qgb25lLCBjbGVhciBpdCBmcm9tIHRoZSBjYWNoZVxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNhY2hlZFRpbWUgPSB0aGlzLnN0b3JhZ2UuZ2V0VGltZShjYWNoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGltZSA+PSBjYWNoZWRUaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9yYWdlLnJlbW92ZShjYWNoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmFpbHVyZUZ1bmN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbHVyZUZ1bmN0aW9uKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZmFpbCgoZXJyb3IsIHRleHRTdGF0dXMpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXR1cyhlbmRwb2ludCwgU3RhdHVzU3RhdGUuUkVUUllJTkcsIHRleHRTdGF0dXMudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgLy8gSWYgc2VydmVyIHJlcXVlc3QgaXMgdGhlIGxhdGVzdCBvbmUsIHRoZW4gbGV0J3MgdHJ5IGl0IGFnYWluIGluIGEgYml0XG4gICAgICAgICAgICAgICAgbGV0IGNhY2hlZFRpbWUgPSB0aGlzLnN0b3JhZ2UuZ2V0VGltZShjYWNoZSk7XG4gICAgICAgICAgICAgICAgaWYgKHRpbWUgPj0gY2FjaGVkVGltZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3N0TGF0ZXN0UmV0cnkoZGF0YSwgZmlsZW5hbWUsIGVuZHBvaW50LCBkZWxheSArIHRoaXMuRkFJTF9ERUxBWSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5kb25lKGRvbmVGdW5jdGlvbik7XG4gICAgfTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcnNbY2FjaGVdKTtcbiAgICBpZiAoZGVsYXkgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3QoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRpbWVyc1tjYWNoZV0gPSBzZXRUaW1lb3V0KHJlcXVlc3QsIGRlbGF5KTtcbiAgICB9XG59O1xuXG5CbG9ja1B5U2VydmVyLnByb3RvdHlwZS5fcG9zdEJsb2NraW5nID0gZnVuY3Rpb24gKGVuZHBvaW50LCBkYXRhLCBhdHRlbXB0cywgc3VjY2VzcywgZmFpbHVyZSwgZXh0cmFTZXR0aW5ncz17fSkge1xuICAgIHRoaXMuc2hvd092ZXJsYXkoYXR0ZW1wdHMpO1xuICAgIHJldHVybiAkLmFqYXgoe1xuICAgICAgICB0eXBlOiBcIlBPU1RcIixcbiAgICAgICAgdXJsOiB0aGlzLnVybHNbZW5kcG9pbnRdLFxuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAuLi50aGlzLmF1dGhvcml6ZUhlYWRlcihleHRyYVNldHRpbmdzKVxuICAgIH0pXG4gICAgICAgIC5kb25lKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5oaWRlT3ZlcmxheSgpO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0dXMoZW5kcG9pbnQsIFN0YXR1c1N0YXRlLlJFQURZKTtcbiAgICAgICAgICAgIHN1Y2Nlc3MocmVzcG9uc2UpO1xuICAgICAgICAgICAgdGhpcy5jaGVja0lQKHJlc3BvbnNlKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmZhaWwoKGUsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSA9PiB7XG4gICAgICAgICAgICBpZiAoYXR0ZW1wdHMgPD0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZU92ZXJsYXkoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXR1cyhlbmRwb2ludCwgU3RhdHVzU3RhdGUuRkFJTEVELCB0ZXh0U3RhdHVzLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgIGlmIChmYWlsdXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZhaWx1cmUoZSwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZU92ZXJsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0dXMoZW5kcG9pbnQsIFN0YXR1c1N0YXRlLlJFVFJZSU5HLCB0ZXh0U3RhdHVzLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3N0QmxvY2tpbmcoZW5kcG9pbnQsIGRhdGEsIGF0dGVtcHRzIC0gMSwgc3VjY2VzcywgZmFpbHVyZSwgZXh0cmFTZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgfSwgdGhpcy5GQUlMX0RFTEFZKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG59O1xuXG5cbkJsb2NrUHlTZXJ2ZXIucHJvdG90eXBlLmxvYWRBc3NpZ25tZW50ID0gZnVuY3Rpb24gKGFzc2lnbm1lbnRfaWQpIHtcbiAgICBsZXQgbW9kZWwgPSB0aGlzLm1haW4ubW9kZWw7XG4gICAgaWYgKG1vZGVsLnVpLnNlcnZlci5pc0VuZHBvaW50Q29ubmVjdGVkKFwibG9hZEFzc2lnbm1lbnRcIikpIHtcbiAgICAgICAgbGV0IGRhdGEgPSB0aGlzLmNyZWF0ZVNlcnZlckRhdGEoKTtcbiAgICAgICAgZGF0YVtcImFzc2lnbm1lbnRfaWRcIl0gPSBhc3NpZ25tZW50X2lkO1xuICAgICAgICB0aGlzLl9wb3N0QmxvY2tpbmcoXCJsb2FkQXNzaWdubWVudFwiLCBkYXRhLCA0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYWluLmxvYWRBc3NpZ25tZW50RGF0YV8ocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdHVzKFwibG9hZEFzc2lnbm1lbnRcIiwgU3RhdHVzU3RhdGUuRkFJTEVELCByZXNwb25zZS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYWluLmNvbXBvbmVudHMuZGlhbG9nLkVSUk9SX0xPQURJTkdfQVNTSUdOTU5FTlQocmVzcG9uc2UubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIChlLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLmRpYWxvZy5FUlJPUl9MT0FESU5HX0FTU0lHTk1ORU5UKHRleHRTdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0dXMoXCJsb2FkQXNzaWdubWVudFwiLCBTdGF0dXNTdGF0ZS5PRkZMSU5FKTtcbiAgICB9XG59O1xuXG5CbG9ja1B5U2VydmVyLnByb3RvdHlwZS5zYXZlQXNzaWdubWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgbW9kZWwgPSB0aGlzLm1haW4ubW9kZWw7XG4gICAgaWYgKG1vZGVsLnVpLnNlcnZlci5pc0VuZHBvaW50Q29ubmVjdGVkKFwic2F2ZUFzc2lnbm1lbnRcIikpIHtcbiAgICAgICAgbGV0IGRhdGEgPSB0aGlzLmNyZWF0ZVNlcnZlckRhdGEoKTtcbiAgICAgICAgZGF0YVtcImhpZGRlblwiXSA9IG1vZGVsLmFzc2lnbm1lbnQuaGlkZGVuKCk7XG4gICAgICAgIGRhdGFbXCJyZXZpZXdlZFwiXSA9IG1vZGVsLmFzc2lnbm1lbnQucmV2aWV3ZWQoKTtcbiAgICAgICAgZGF0YVtcInB1YmxpY1wiXSA9IG1vZGVsLmFzc2lnbm1lbnQucHVibGljKCk7XG4gICAgICAgIGRhdGFbXCJ1cmxcIl0gPSBtb2RlbC5hc3NpZ25tZW50LnVybCgpO1xuICAgICAgICBkYXRhW1wicG9pbnRzXCJdID0gbW9kZWwuYXNzaWdubWVudC5wb2ludHMoKTtcbiAgICAgICAgZGF0YVtcImlwX3Jhbmdlc1wiXSA9IG1vZGVsLmFzc2lnbm1lbnQuaXBSYW5nZXMoKTtcbiAgICAgICAgZGF0YVtcIm5hbWVcIl0gPSBtb2RlbC5hc3NpZ25tZW50Lm5hbWUoKTtcbiAgICAgICAgZGF0YVtcInNldHRpbmdzXCJdID0gc2F2ZUFzc2lnbm1lbnRTZXR0aW5ncyhtb2RlbCk7XG5cbiAgICAgICAgdGhpcy5fcG9zdEJsb2NraW5nKFwic2F2ZUFzc2lnbm1lbnRcIiwgZGF0YSwgMyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRQb3NzaWJsZUZvcmsuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIChlLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLmRpYWxvZy5FUlJPUl9TQVZJTkdfQVNTSUdOTU5FTlQodGV4dFN0YXR1cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldFN0YXR1cyhcInNhdmVBc3NpZ25tZW50XCIsIFN0YXR1c1N0YXRlLk9GRkxJTkUsIFwiU2VydmVyIGlzIG5vdCBjb25uZWN0ZWQhIChTYXZlIEFzc2lnbm1lbnQpXCIpO1xuICAgIH1cbn07XG5cbkJsb2NrUHlTZXJ2ZXIucHJvdG90eXBlLmxvYWRIaXN0b3J5ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgaWYgKHRoaXMubWFpbi5tb2RlbC51aS5zZXJ2ZXIuaXNFbmRwb2ludENvbm5lY3RlZChcImxvYWRIaXN0b3J5XCIpKSB7XG4gICAgICAgIGxldCBtb2RlbCA9IHRoaXMubWFpbi5tb2RlbDtcbiAgICAgICAgbGV0IGRhdGEgPSB0aGlzLmNyZWF0ZVNlcnZlckRhdGEoKTtcbiAgICAgICAgdGhpcy5fcG9zdEJsb2NraW5nKFwibG9hZEhpc3RvcnlcIiwgZGF0YSwgMiwgY2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAoZSwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1haW4uY29tcG9uZW50cy5kaWFsb2cuRVJST1JfTE9BRElOR19ISVNUT1JZKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICB9XG59O1xuXG5CbG9ja1B5U2VydmVyLnByb3RvdHlwZS5saXN0VXBsb2FkZWRGaWxlcyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIGlmICh0aGlzLm1haW4ubW9kZWwudWkuc2VydmVyLmlzRW5kcG9pbnRDb25uZWN0ZWQoXCJsaXN0VXBsb2FkZWRGaWxlc1wiKSkge1xuICAgICAgICBsZXQgbW9kZWwgPSB0aGlzLm1haW4ubW9kZWw7XG4gICAgICAgIGxldCBkYXRhID0gdGhpcy5jcmVhdGVTZXJ2ZXJEYXRhKCk7XG4gICAgICAgIHRoaXMuX3Bvc3RCbG9ja2luZyhcImxpc3RVcGxvYWRlZEZpbGVzXCIsIGRhdGEsIDIsIGNhbGxiYWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgKGUsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYWluLmNvbXBvbmVudHMuZGlhbG9nLkVSUk9SX0xJU1RJTkdfVVBMT0FERURfRklMRVModGV4dFN0YXR1cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICB9XG59O1xuXG5CbG9ja1B5U2VydmVyLnByb3RvdHlwZS51cGxvYWRGaWxlID0gZnVuY3Rpb24gKHBsYWNlbWVudCwgZGlyZWN0b3J5LCBmaWxlbmFtZSwgY29udGVudHMsIGNhbGxiYWNrLCBkZWxldGVJbnN0ZWFkPWZhbHNlKSB7XG4gICAgbGV0IG1vZGVsID0gdGhpcy5tYWluLm1vZGVsO1xuICAgIGlmIChtb2RlbC51aS5zZXJ2ZXIuaXNFbmRwb2ludENvbm5lY3RlZChcInVwbG9hZEZpbGVcIikpIHtcbiAgICAgICAgbGV0IGRhdGEgPSB0aGlzLmNyZWF0ZVNlcnZlckRhdGEoKTtcbiAgICAgICAgZGF0YVtcInBsYWNlbWVudFwiXSA9IHBsYWNlbWVudDtcbiAgICAgICAgZGF0YVtcImRpcmVjdG9yeVwiXSA9IGRpcmVjdG9yeTtcbiAgICAgICAgZGF0YVtcImZpbGVuYW1lXCJdID0gZmlsZW5hbWU7XG4gICAgICAgIGRhdGFbXCJjb250ZW50c1wiXSA9IGNvbnRlbnRzO1xuICAgICAgICBpZiAoZGVsZXRlSW5zdGVhZCkge1xuICAgICAgICAgICAgZGF0YVtcImRlbGV0ZVwiXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGZkID0gT2JqZWN0LmVudHJpZXMoZGF0YSkucmVkdWNlKChkLGUpID0+IChkLmFwcGVuZCguLi5lKSwgZCksIG5ldyBGb3JtRGF0YSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Bvc3RCbG9ja2luZyhcInVwbG9hZEZpbGVcIiwgZmQsIDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGUsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWxldGVJbnN0ZWFkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1haW4uY29tcG9uZW50cy5kaWFsb2cuRVJST1JfREVMRVRJTkdfRklMRSh0ZXh0U3RhdHVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLmRpYWxvZy5FUlJPUl9VUExPQURJTkdfRklMRSh0ZXh0U3RhdHVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7cHJvY2Vzc0RhdGE6IGZhbHNlLCBjb250ZW50VHlwZTogZmFsc2V9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldFN0YXR1cyhcInVwbG9hZEZpbGVcIiwgU3RhdHVzU3RhdGUuT0ZGTElORSwgXCJTZXJ2ZXIgaXMgbm90IGNvbm5lY3RlZCEgKFVwbG9hZCBGaWxlKVwiKTtcbiAgICB9XG59O1xuXG5CbG9ja1B5U2VydmVyLnByb3RvdHlwZS5kb3dubG9hZEZpbGUgPSBmdW5jdGlvbiAocGxhY2VtZW50LCBkaXJlY3RvcnksIGZpbGVuYW1lLCBjYWxsYmFjaykge1xuICAgIGxldCBtb2RlbCA9IHRoaXMubWFpbi5tb2RlbDtcbiAgICBpZiAobW9kZWwudWkuc2VydmVyLmlzRW5kcG9pbnRDb25uZWN0ZWQoXCJkb3dubG9hZEZpbGVcIikpIHtcbiAgICAgICAgbGV0IGRhdGEgPSB0aGlzLmNyZWF0ZVNlcnZlckRhdGEoKTtcbiAgICAgICAgZGF0YVtcInBsYWNlbWVudFwiXSA9IHBsYWNlbWVudDtcbiAgICAgICAgZGF0YVtcImRpcmVjdG9yeVwiXSA9IGRpcmVjdG9yeTtcbiAgICAgICAgZGF0YVtcImZpbGVuYW1lXCJdID0gZmlsZW5hbWU7XG4gICAgICAgIGxldCBmZCA9IE9iamVjdC5lbnRyaWVzKGRhdGEpLnJlZHVjZSgoZCxlKSA9PiAoZC5hcHBlbmQoLi4uZSksIGQpLCBuZXcgRm9ybURhdGEoKSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9wb3N0QmxvY2tpbmcoXCJkb3dubG9hZEZpbGVcIiwgZmQsIDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGUsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLmRpYWxvZy5FUlJPUl9ET1dOTE9BRElOR19GSUxFKHRleHRTdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7cHJvY2Vzc0RhdGE6IGZhbHNlLCBjb250ZW50VHlwZTogZmFsc2UsIGRhdGFUeXBlOiBcInRleHRcIn0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdHVzKFwidXBsb2FkRmlsZVwiLCBTdGF0dXNTdGF0ZS5PRkZMSU5FLCBcIlNlcnZlciBpcyBub3QgY29ubmVjdGVkISAoVXBsb2FkIEZpbGUpXCIpO1xuICAgIH1cbn07XG5cbkJsb2NrUHlTZXJ2ZXIucHJvdG90eXBlLnJlbmFtZUZpbGUgPSBmdW5jdGlvbiAocGxhY2VtZW50LCBkaXJlY3RvcnksIG9sZF9maWxlbmFtZSwgbmV3X2ZpbGVuYW1lLCBjYWxsYmFjaykge1xuICAgIGxldCBtb2RlbCA9IHRoaXMubWFpbi5tb2RlbDtcbiAgICBpZiAobW9kZWwudWkuc2VydmVyLmlzRW5kcG9pbnRDb25uZWN0ZWQoXCJyZW5hbWVGaWxlXCIpKSB7XG4gICAgICAgIGxldCBkYXRhID0gdGhpcy5jcmVhdGVTZXJ2ZXJEYXRhKCk7XG4gICAgICAgIGRhdGFbXCJwbGFjZW1lbnRcIl0gPSBwbGFjZW1lbnQ7XG4gICAgICAgIGRhdGFbXCJkaXJlY3RvcnlcIl0gPSBkaXJlY3Rvcnk7XG4gICAgICAgIGRhdGFbXCJvbGRfZmlsZW5hbWVcIl0gPSBvbGRfZmlsZW5hbWU7XG4gICAgICAgIGRhdGFbXCJuZXdfZmlsZW5hbWVcIl0gPSBuZXdfZmlsZW5hbWU7XG4gICAgICAgIGxldCBmZCA9IE9iamVjdC5lbnRyaWVzKGRhdGEpLnJlZHVjZSgoZCxlKSA9PiAoZC5hcHBlbmQoLi4uZSksIGQpLCBuZXcgRm9ybURhdGEoKSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9wb3N0QmxvY2tpbmcoXCJyZW5hbWVGaWxlXCIsIGZkLCAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1haW4uY29tcG9uZW50cy5kaWFsb2cuRVJST1JfVVBMT0FESU5HX0ZJTEUodGV4dFN0YXR1cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHtwcm9jZXNzRGF0YTogZmFsc2UsIGNvbnRlbnRUeXBlOiBmYWxzZX0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdHVzKFwicmVuYW1lRmlsZVwiLCBTdGF0dXNTdGF0ZS5PRkZMSU5FLCBcIlNlcnZlciBpcyBub3QgY29ubmVjdGVkISAoUmVuYW1lIEZpbGUpXCIpO1xuICAgIH1cbn07XG5cbkJsb2NrUHlTZXJ2ZXIucHJvdG90eXBlLmxvZ0V2ZW50ID0gZnVuY3Rpb24gKGV2ZW50X3R5cGUsIGNhdGVnb3J5LCBsYWJlbCwgbWVzc2FnZSwgZmlsZV9wYXRoKSB7XG4gICAgaWYgKHRoaXMubWFpbi5tb2RlbC5kaXNwbGF5LnJlYWRPbmx5KCkpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0dXMoXCJsb2dFdmVudFwiLCBTdGF0dXNTdGF0ZS5PRkZMSU5FKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5tYWluLm1vZGVsLnVpLnNlcnZlci5pc0VuZHBvaW50Q29ubmVjdGVkKFwibG9nRXZlbnRcIikpIHtcbiAgICAgICAgbGV0IGRhdGEgPSB0aGlzLmNyZWF0ZVNlcnZlckRhdGEoKTtcbiAgICAgICAgZGF0YVtcImV2ZW50X3R5cGVcIl0gPSBldmVudF90eXBlO1xuICAgICAgICBkYXRhW1wiY2F0ZWdvcnlcIl0gPSBjYXRlZ29yeTtcbiAgICAgICAgZGF0YVtcImxhYmVsXCJdID0gbGFiZWw7XG4gICAgICAgIGRhdGFbXCJtZXNzYWdlXCJdID0gbWVzc2FnZTtcbiAgICAgICAgZGF0YVtcImZpbGVfcGF0aFwiXSA9IGZpbGVfcGF0aDtcbiAgICAgICAgdGhpcy5zZXRTdGF0dXMoXCJsb2dFdmVudFwiLCBTdGF0dXNTdGF0ZS5BQ1RJVkUpO1xuICAgICAgICAvLyBUcmlnZ2VyIHJlcXVlc3RcbiAgICAgICAgdGhpcy5fcG9zdFJldHJ5KGRhdGEsIFwibG9nRXZlbnRcIiwgMCwgKCkgPT4ge1xuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldFN0YXR1cyhcImxvZ0V2ZW50XCIsIFN0YXR1c1N0YXRlLk9GRkxJTkUpO1xuICAgIH1cbn07XG5cbkJsb2NrUHlTZXJ2ZXIucHJvdG90eXBlLnNhdmVJbWFnZSA9IGZ1bmN0aW9uIChkaXJlY3RvcnksIGltYWdlKSB7XG4gICAgaWYgKHRoaXMubWFpbi5tb2RlbC5kaXNwbGF5LnJlYWRPbmx5KCkpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0dXMoXCJzYXZlSW1hZ2VcIiwgU3RhdHVzU3RhdGUuT0ZGTElORSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMubWFpbi5tb2RlbC51aS5zZXJ2ZXIuaXNFbmRwb2ludENvbm5lY3RlZChcInNhdmVJbWFnZVwiKSkge1xuICAgICAgICBsZXQgZGF0YSA9IHRoaXMuY3JlYXRlU2VydmVyRGF0YSgpO1xuICAgICAgICBkYXRhW1wiZGlyZWN0b3J5XCJdID0gZGlyZWN0b3J5O1xuICAgICAgICBkYXRhW1wiaW1hZ2VcIl0gPSBpbWFnZTtcbiAgICAgICAgdGhpcy5zZXRTdGF0dXMoXCJzYXZlSW1hZ2VcIiwgU3RhdHVzU3RhdGUuQUNUSVZFKTtcbiAgICAgICAgLy8gVHJpZ2dlciByZXF1ZXN0XG4gICAgICAgIHRoaXMuX3Bvc3RMYXRlc3RSZXRyeShkYXRhLCBcInR1cnRsZV9vdXRwdXRcIiwgXCJzYXZlSW1hZ2VcIiwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0dXMoXCJzYXZlSW1hZ2VcIiwgU3RhdHVzU3RhdGUuT0ZGTElORSk7XG4gICAgfVxufTtcblxuQmxvY2tQeVNlcnZlci5wcm90b3R5cGUudXBkYXRlU3VibWlzc2lvblN0YXR1cyA9IGZ1bmN0aW9uKG5ld1N0YXR1cykge1xuICAgIGlmICh0aGlzLm1haW4ubW9kZWwuZGlzcGxheS5yZWFkT25seSgpKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdHVzKFwidXBkYXRlU3VibWlzc2lvblN0YXR1c1wiLCBTdGF0dXNTdGF0ZS5PRkZMSU5FKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5tYWluLm1vZGVsLnVpLnNlcnZlci5pc0VuZHBvaW50Q29ubmVjdGVkKFwidXBkYXRlU3VibWlzc2lvblN0YXR1c1wiKSkge1xuICAgICAgICBsZXQgZGF0YSA9IHRoaXMuY3JlYXRlU2VydmVyRGF0YSgpO1xuICAgICAgICBkYXRhW1wic3RhdHVzXCJdID0gbmV3U3RhdHVzO1xuICAgICAgICBsZXQgcG9zdFN0YXR1c0NoYW5nZSA9IChkYXRhKSA9PiB7XG4gICAgICAgICAgICBpZiAoZGF0YS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYWluLm1vZGVsLnN1Ym1pc3Npb24uc3VibWlzc2lvblN0YXR1cyhuZXdTdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9wb3N0QmxvY2tpbmcoXCJ1cGRhdGVTdWJtaXNzaW9uU3RhdHVzXCIsIGRhdGEsIDIsIHBvc3RTdGF0dXNDaGFuZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAoZSwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1haW4uY29tcG9uZW50cy5kaWFsb2cuRVJST1JfVVBEQVRJTkdfU1VCTUlTU0lPTl9TVEFUVVMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgIH1cbn07XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBsb2FkIGZpbGVzIGFuZCB3ZWIgcmVzb3VyY2VzLlxuICpcbiAqIERFUFJFQ0FURURcbiAqL1xuQmxvY2tQeVNlcnZlci5wcm90b3R5cGUubG9hZEZpbGUgPSBmdW5jdGlvbiAoZmlsZW5hbWUsIHR5cGUsIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSB7XG4gICAgdmFyIG1vZGVsID0gdGhpcy5tYWluLm1vZGVsO1xuICAgIHZhciBzZXJ2ZXIgPSB0aGlzO1xuICAgIGlmIChtb2RlbC51aS5zZXJ2ZXIuaXNFbmRwb2ludENvbm5lY3RlZChcImxvYWRfZmlsZVwiKSkge1xuICAgICAgICB2YXIgZGF0YSA9IHRoaXMuY3JlYXRlU2VydmVyRGF0YSgpO1xuICAgICAgICBkYXRhW1wiZmlsZW5hbWVcIl0gPSBmaWxlbmFtZTtcbiAgICAgICAgZGF0YVtcInR5cGVcIl0gPSB0eXBlO1xuICAgICAgICB0aGlzLl9wb3N0QmxvY2tpbmcodGhpcy51cmxzLmxvYWRfZmlsZSwgZGF0YSwgNSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yQ2FsbGJhY2socmVzcG9uc2UubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZlci5zZXRTdGF0dXMoXCJsb2FkRmlsZVwiLCBTdGF0dXNTdGF0ZS5GQUlMRUQsIHJlc3BvbnNlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZSwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrKFwiU2VydmVyIGZhaWx1cmUhIFJlcG9ydCB0byBpbnN0cnVjdG9yXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3JUaHJvd24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZXJyb3JDYWxsYmFjayhcIk5vIGZpbGUgc2VydmVyIGF2YWlsYWJsZS5cIik7XG4gICAgICAgIHRoaXMuc2V0U3RhdHVzKFwibG9hZEZpbGVcIiwgU3RhdHVzU3RhdGUuT0ZGTElORSwgXCJTZXJ2ZXIgaXMgbm90IGNvbm5lY3RlZCEgKExvYWQgRmlsZSlcIik7XG4gICAgfVxufTtcblxuQmxvY2tQeVNlcnZlci5wcm90b3R5cGUuc2F2ZUZpbGUgPSBmdW5jdGlvbiAoZmlsZW5hbWUsIGNvbnRlbnRzLCBkZWxheSkge1xuICAgIGlmIChkZWxheSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGRlbGF5ID0gdGhpcy5USU1FUl9ERUxBWTtcbiAgICB9XG4gICAgbGV0IG1vZGVsID0gdGhpcy5tYWluLm1vZGVsO1xuICAgIGlmIChtb2RlbC5kaXNwbGF5LnJlYWRPbmx5KCkpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0dXMoXCJzYXZlRmlsZVwiLCBTdGF0dXNTdGF0ZS5PRkZMSU5FKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAobW9kZWwudWkuc2VydmVyLmlzRW5kcG9pbnRDb25uZWN0ZWQoXCJzYXZlRmlsZVwiKSkge1xuICAgICAgICBsZXQgZGF0YSA9IHRoaXMuY3JlYXRlU2VydmVyRGF0YSgpO1xuICAgICAgICBkYXRhW1wiZmlsZW5hbWVcIl0gPSBmaWxlbmFtZTtcbiAgICAgICAgZGF0YVtcImNvZGVcIl0gPSBjb250ZW50cztcbiAgICAgICAgdGhpcy5zZXRTdGF0dXMoXCJzYXZlRmlsZVwiLCBTdGF0dXNTdGF0ZS5BQ1RJVkUpO1xuICAgICAgICByZXR1cm4gdGhpcy5fcG9zdExhdGVzdFJldHJ5KGRhdGEsIGZpbGVuYW1lLCBcInNhdmVGaWxlXCIsIGRlbGF5LCB0aGlzLnN0YXJ0UG9zc2libGVGb3JrLmJpbmQodGhpcykpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldFN0YXR1cyhcInNhdmVGaWxlXCIsIFN0YXR1c1N0YXRlLk9GRkxJTkUpO1xuICAgIH1cbn07XG5cbkJsb2NrUHlTZXJ2ZXIucHJvdG90eXBlLnN0YXJ0UG9zc2libGVGb3JrID0gZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgaWYgKCFyZXNwb25zZS5zdWNjZXNzICYmIHJlc3BvbnNlLmZvcmthYmxlKSB7XG4gICAgICAgIHRoaXMubWFpbi5jb21wb25lbnRzLmRpYWxvZy5PRkZFUl9GT1JLKCk7XG4gICAgfVxufTtcblxuQmxvY2tQeVNlcnZlci5wcm90b3R5cGUudXBkYXRlU3VibWlzc2lvbiA9IGZ1bmN0aW9uIChzY29yZSwgY29ycmVjdCwgaGlkZGVuT3ZlcnJpZGUsIGZvcmNlVXBkYXRlKSB7XG4gICAgaWYgKHRoaXMubWFpbi5tb2RlbC5kaXNwbGF5LnJlYWRPbmx5KCkpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0dXMoXCJ1cGRhdGVTdWJtaXNzaW9uXCIsIFN0YXR1c1N0YXRlLk9GRkxJTkUpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBjYWxsYmFjayA9IHRoaXMubWFpbi5tb2RlbC5jb25maWd1cmF0aW9uLmNhbGxiYWNrcy5zdWNjZXNzO1xuICAgIGlmICh0aGlzLm1haW4ubW9kZWwudWkuc2VydmVyLmlzRW5kcG9pbnRDb25uZWN0ZWQoXCJ1cGRhdGVTdWJtaXNzaW9uXCIpKSB7XG4gICAgICAgIGxldCBkYXRhID0gdGhpcy5jcmVhdGVTZXJ2ZXJEYXRhKCk7XG4gICAgICAgIGRhdGFbXCJzY29yZVwiXSA9IHNjb3JlO1xuICAgICAgICBkYXRhW1wiY29ycmVjdFwiXSA9IGNvcnJlY3Q7XG4gICAgICAgIGRhdGFbXCJoaWRkZW5fb3ZlcnJpZGVcIl0gPSBoaWRkZW5PdmVycmlkZTtcbiAgICAgICAgZGF0YVtcImZvcmNlX3VwZGF0ZVwiXSA9IGZvcmNlVXBkYXRlO1xuICAgICAgICB0aGlzLm1haW4uY29tcG9uZW50cy5weXRob25FZGl0b3IuYm0uYmxvY2tFZGl0b3IuZ2V0UG5nRnJvbUJsb2NrcygocG5nRGF0YSwgaW1nKSA9PiB7XG4gICAgICAgICAgICBkYXRhW1wiaW1hZ2VcIl0gPSBwbmdEYXRhO1xuICAgICAgICAgICAgaWYgKGltZy5yZW1vdmUpIHtcbiAgICAgICAgICAgICAgICBpbWcucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9wb3N0UmV0cnkoZGF0YSwgXCJ1cGRhdGVTdWJtaXNzaW9uXCIsIDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXR1cyhcInVwZGF0ZVN1Ym1pc3Npb25cIiwgU3RhdHVzU3RhdGUuUkVBRFkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0dXMoXCJ1cGRhdGVTdWJtaXNzaW9uXCIsIFN0YXR1c1N0YXRlLkZBSUxFRCwgcmVzcG9uc2UubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoaWRkZW5PdmVycmlkZSAmJiBjb3JyZWN0ICYmIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhW1wiYXNzaWdubWVudF9pZFwiXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufTtcblxuQmxvY2tQeVNlcnZlci5wcm90b3R5cGUub3BlbmFpUHJveHkgPSBmdW5jdGlvbiAob3BlbmFpX2RhdGEpIHtcbiAgICB2YXIgbW9kZWwgPSB0aGlzLm1haW4ubW9kZWw7XG4gICAgdmFyIHNlcnZlciA9IHRoaXM7XG4gICAgdmFyIGRhdGEgPSB0aGlzLmNyZWF0ZVNlcnZlckRhdGEoKTtcbiAgICBkYXRhW1wib3BlbmFpX2RhdGFcIl0gPSBvcGVuYWlfZGF0YTtcbiAgICByZXR1cm4gdGhpcy5fcG9zdEJsb2NraW5nKHRoaXMudXJscy5vcGVuYWlfcHJveHksIGRhdGEpO1xufTsiLCJleHBvcnQgY29uc3QgJHNrX21vZF9jb3ZlcmFnZSA9IGBcblwiXCJcIlxuSGlkZW91cyBmaWxsLWluIHJlcGxhY2VtZW50IGZvciBDb3ZlcmFnZSwgbGV2ZXJhZ2luZyBzb21lIG1hZ2ljIGZyb20gdGhlXG5VdGlsaXR5IGZ1bmN0aW9uLiBUaGUgZGF0YSB0aGlzIHJldHVybnMgaXMgZmFsc2UgLSBpdCBkb2Vzbid0IGFjdHVhbGx5XG5kZXNjcmliZSB0aGUgbWlzc2luZyBsaW5lcyBhbmQgYWxsIGxpbmVzOyBpdCBqdXN0IGRlc2NyaWJlcyB0aGUgdHJhY2VkIGxpbmVzLlxuQnV0IHNpbmNlIFBlZGFsIGRvZXNuJ3QgbmVlZCB0aGUgb3RoZXIgdHdvLCBpdCB3b3JrcyBvdXQgZmluZSB3aGVuIHlvdSBkbzpcblxuc3RhdGVtZW50cyAtIG1pc3NpbmdcblwiXCJcIlxuXG5pbXBvcnQgdXRpbGl0eVxuXG5jbGFzcyBDb3ZlcmFnZTpcbiAgICBkZWYgc3RhcnQoc2VsZik6XG4gICAgICAgIHBhc3NcblxuICAgIGRlZiBzdG9wKHNlbGYpOlxuICAgICAgICBwYXNzXG5cbiAgICBkZWYgc2F2ZShzZWxmKTpcbiAgICAgICAgcGFzc1xuXG4gICAgZGVmIF9hbmFseXplKHNlbGYsIGZpbGVuYW1lOiBzdHIpOlxuICAgICAgICBsaW5lcyA9IHNldCh1dGlsaXR5LnRyYWNlX2xpbmVzKCkpXG4gICAgICAgICMgbGluZXMgd2lsbCBiZSB0aGUgbGluZXMgdGhhdCB3ZXJlIGFjdHVhbGx5IGV4ZWN1dGVkXG4gICAgICAgIHJldHVybiBBbmFseXNpcyhOb25lLCBsZW4obGluZXMpLCBOb25lLCBzZXQoKSwgbGluZXMpXG5cblxuY2xhc3MgTnVtYmVyczpcbiAgICBkZWYgX19pbml0X18oc2VsZiwgbl9taXNzaW5nLCBuX3N0YXRlbWVudHMsIHBjX2NvdmVyZWQpOlxuICAgICAgICBzZWxmLm5fbWlzc2luZyA9IG5fbWlzc2luZ1xuICAgICAgICBzZWxmLm5fc3RhdGVtZW50cyA9IG5fc3RhdGVtZW50c1xuICAgICAgICBzZWxmLnBjX2NvdmVyZWQgPSBwY19jb3ZlcmVkXG5cblxuY2xhc3MgQW5hbHlzaXM6XG4gICAgZGVmIF9faW5pdF9fKHNlbGYsIG5fbWlzc2luZywgbl9zdGF0ZW1lbnRzLCBwY19jb3ZlcmVkLCBtaXNzaW5nLCBzdGF0ZW1lbnRzKTpcbiAgICAgICAgc2VsZi5taXNzaW5nID0gbWlzc2luZ1xuICAgICAgICBzZWxmLnN0YXRlbWVudHMgPSBzdGF0ZW1lbnRzXG4gICAgICAgIHNlbGYubnVtYmVycyA9IE51bWJlcnMobl9taXNzaW5nLCBuX3N0YXRlbWVudHMsIHBjX2NvdmVyZWQpXG5cblxuY2xhc3MgcHl0aG9uOlxuICAgIGRlZiBnZXRfcHl0aG9uX3NvdXJjZShzZWxmKTpcbiAgICAgICAgcmV0dXJuIE5vbmVcbmA7IiwiZXhwb3J0IHZhciAkYnVpbHRpbm1vZHVsZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgbW9kLCBzYW1wbGVXcmFwcGVyO1xuICAgIG1vZCA9IHtfX25hbWVfXzogXCJpbWFnZVwifTtcblxuICAgIGlmICghU2suUElMKSB7XG4gICAgICAgIFNrLlBJTCA9IHthc3NldHM6IHt9fTtcbiAgICB9XG5cbiAgICAvLyBJbnN0YW50UHJvbWlzZSBpcyBhIHdvcmthcm91bmQgdG8gYWxsb3cgdXNhZ2Ugb2YgdGhlIGNsZWFuIHByb21pc2Utc3R5bGVcbiAgICAvLyB0aGVuL2NhdGNoIHN5bnRheCBidXQgdG8gaW5zdGFudGx5IGNhbGwgcmVzb2x2ZSB0aGUgdGhlbi9jYXRjaCBjaGFpbiBzbyB3ZVxuICAgIC8vIGNhbiBhdm9pZCBjcmVhdGluZyBTdXNwZW5zaW9ucyBpbiB1bm5lY2Vzc2FyeSBjYXNlcy4gIFRoaXMgaXMgZGVzaXJhYmxlXG4gICAgLy8gYmVjYXVzZSBTdXNwZW5zaW9ucyBoYXZlIGEgZmFpcmx5IGxhcmdlIG5lZ2F0aXZlIGltcGFjdCBvbiBvdmVyYWxsXG4gICAgLy8gcGVyZm9ybWFuY2UuICBUaGVzZSAnaW5zdGFudCBwcm9taXNlcycgY29tZSBpbnRvIHBsYXkgd2hlbiBhIHRyYWNlcigpXG4gICAgLy8gY2FsbCBpcyBtYWRlIHdpdGggYSB2YWx1ZSBvdGhlciB0aGFuIDEuICBXaGVuIHRyYWNlciBpcyAwIG9yIGdyZWF0ZXIgdGhhbiAxXG4gICAgLy8gLCB3ZSBjYW4gYnlwYXNzIHRoZSBjcmVhdGlvbiBvZiBhIFN1c3BlbnNpb24gYW5kIHByb2NlZWQgdG8gdGhlIG5leHQgbGluZSBvZlxuICAgIC8vIGNvZGUgaW1tZWRpYXRlbHkgaWYgdGhlIGN1cnJlbnQgbGluZSBpcyBub3QgZ29pbmcgdG8gaW52b2x2ZSBhIHNjcmVlblxuICAgIC8vIHVwZGF0ZS4gV2UgZGV0ZXJtaW5lIGlmIGEgcmVhbCBwcm9taXNlIG9yIEluc3RhbnRQcm9taXNlIGlzIG5lY2Vzc2FyeSBieVxuICAgIC8vIGNoZWNraW5nIEZyYW1lTWFuYWdlci53aWxsUmVuZGVyTmV4dCgpXG4gICAgZnVuY3Rpb24gSW5zdGFudFByb21pc2UoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgdGhpcy5sYXN0UmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICB0aGlzLmxhc3RFcnJvciAgPSBlcnI7XG4gICAgfVxuXG4gICAgSW5zdGFudFByb21pc2UucHJvdG90eXBlLnRoZW4gPSBmdW5jdGlvbihjYikge1xuICAgICAgICBpZiAodGhpcy5sYXN0RXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMubGFzdFJlc3VsdCA9IGNiKHRoaXMubGFzdFJlc3VsdCk7XG4gICAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAgICAgdGhpcy5sYXN0UmVzdWx0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5sYXN0RXJyb3IgID0gZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmxhc3RSZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlID8gdGhpcy5sYXN0UmVzdWx0IDogdGhpcztcbiAgICB9O1xuXG4gICAgSW5zdGFudFByb21pc2UucHJvdG90eXBlLmNhdGNoID0gZnVuY3Rpb24oY2IpIHtcbiAgICAgICAgaWYgKHRoaXMubGFzdEVycm9yKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMubGFzdFJlc3VsdCA9IGNiKHRoaXMubGFzdEVycm9yKTtcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RFcnJvciAgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RSZXN1bHQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0RXJyb3IgPSBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMubGFzdFJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UgPyB0aGlzLmxhc3RSZXN1bHQgOiB0aGlzO1xuICAgIH07XG5cbiAgICB2YXIgYnVpbGRJbWFnZSA9IGZ1bmN0aW9uKGltYWdlRGF0YSkge1xuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldEFzc2V0KG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgaWYgKFNrLlBJTC5hc3NldHNbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vcmV0dXJuIFNrLlBJTC5hc3NldHNbbmFtZV07XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShTay5QSUwuYXNzZXRzW25hbWVdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICAgICAgICAgIGltZy5jcm9zc09yaWdpbiA9IFwiQW5vbnltb3VzXCI7XG4gICAgICAgICAgICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgU2suUElMLmFzc2V0c1tuYW1lXSA9IGltZztcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShpbWcpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaW1nLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGxvYWQgYXNzZXQ6IFwiICsgbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChuYW1lKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGltZy5zcmMgPSBuYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgaW1hZ2UgPSBmdW5jdGlvbigkZ2JsLCAkbG9jKSB7XG4gICAgICAgIC8vIG9wZW4oZmlsZW5hbWUpIG9yIG9wZW4odXJsKVxuICAgICAgICAvLyBzaG93KClcblxuICAgICAgICAkbG9jLl9faW5pdF9fID0gbmV3IFNrLmJ1aWx0aW4uZnVuYyhmdW5jdGlvbiAoc2VsZiwgZmlsZV9vcl91cmwpIHtcbiAgICAgICAgICAgIFNrLmJ1aWx0aW4ucHlDaGVja0FyZ3MoXCJfX2luaXRfX1wiLCBhcmd1bWVudHMsIDIsIDIpO1xuICAgICAgICAgICAgU2suYnVpbHRpbi5weUNoZWNrVHlwZShcImZpbGVfb3JfdXJsXCIsIFwic3RyaW5nXCIsIFNrLmJ1aWx0aW4uY2hlY2tTdHJpbmcoZmlsZV9vcl91cmwpKTtcbiAgICAgICAgICAgIHNlbGYuZmlsZV9vcl91cmwgPSBmaWxlX29yX3VybDtcbiAgICAgICAgICAgIC8vIFRPRE86IENoYW5nZSB0byBzdXNwZW5zaW9uXG4gICAgICAgICAgICB2YXIgaW1hZ2VQcm9taXNlID0gZ2V0QXNzZXQoU2suZmZpLnJlbWFwVG9KcyhmaWxlX29yX3VybCkpO1xuICAgICAgICAgICAgdmFyIHN1c3AgPSBuZXcgU2subWlzY2V2YWwuU3VzcGVuc2lvbigpO1xuICAgICAgICAgICAgc2VsZi5pbWFnZSA9IFNrLmJ1aWx0aW4ubm9uZS5ub25lJDtcbiAgICAgICAgICAgIHN1c3AucmVzdW1lID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN1c3AuZGF0YVtcImVycm9yXCJdKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vdGhyb3cgbmV3IFNrLmJ1aWx0aW4uSU9FcnJvcihzdXNwLmRhdGFbXCJlcnJvclwiXS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgc3VzcC5kYXRhW1wiZXJyb3JcIl07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy9yZXR1cm4gc2VsZi5pbWFnZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc3VzcC5kYXRhID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiU2sucHJvbWlzZVwiLFxuICAgICAgICAgICAgICAgIHByb21pc2U6IGltYWdlUHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaW1hZ2UgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmNhbnZhcy53aWR0aCA9IHNlbGYuaW1hZ2Uud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY2FudmFzLmhlaWdodCA9IHNlbGYuaW1hZ2UuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIikuZHJhd0ltYWdlKHNlbGYuaW1hZ2UsIDAsIDAsIHNlbGYuaW1hZ2Uud2lkdGgsIHNlbGYuaW1hZ2UuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5waXhlbHMgPSBzZWxmLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIikuZ2V0SW1hZ2VEYXRhKDAsIDAsIHNlbGYuaW1hZ2Uud2lkdGgsIHNlbGYuaW1hZ2UuaGVpZ2h0KS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAvL3JldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5pbWFnZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgICAgICAgICAgLy9yZXR1cm4gZXJyO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gc3VzcDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJGxvYy5zaG93ID0gbmV3IFNrLmJ1aWx0aW4uZnVuYyhmdW5jdGlvbihzZWxmKSB7XG4gICAgICAgICAgICBpZiAoU2suY29uc29sZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNrLmJ1aWx0aW4uTmFtZUVycm9yKFwiQ2FuIG5vdCByZXNvbHZlIGRyYXdpbmcgYXJlYS4gU2suY29uc29sZSBpcyB1bmRlZmluZWQhXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgY29uc29sZURhdGEgPSB7XG4gICAgICAgICAgICAgICAgaW1hZ2U6IHNlbGYuaW1hZ2UsXG4gICAgICAgICAgICAgICAgZmlsZV9vcl91cmw6IHNlbGYuZmlsZV9vcl91cmxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIFNrLmNvbnNvbGUucHJpbnRQSUxJbWFnZShjb25zb2xlRGF0YSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRsb2MuZmxpcCA9IG5ldyBTay5idWlsdGluLmZ1bmMoZnVuY3Rpb24oc2VsZikge1xuICAgICAgICAgICAgc2VsZi5pbWFnZS5zdHlsZS50cmFuc2Zvcm0gPSBcInNjYWxlWCgtMSlcIjtcbiAgICAgICAgICAgIGlmIChTay5jb25zb2xlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU2suYnVpbHRpbi5OYW1lRXJyb3IoXCJDYW4gbm90IHJlc29sdmUgZHJhd2luZyBhcmVhLiBTay5jb25zb2xlIGlzIHVuZGVmaW5lZCFcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBtb2QuSW1hZ2UgPSBTay5taXNjZXZhbC5idWlsZENsYXNzKG1vZCwgaW1hZ2UsIFwiSW1hZ2VcIiwgW10pO1xuXG4gICAgcmV0dXJuIG1vZDtcbn07IiwiZXhwb3J0IGNvbnN0ICRwZWRhbF90cmFjZXIgPSBgXHJcblxyXG5cIlwiXCJcclxuV3JhcHMgdGhlIHRyYWNlciBtb2R1bGUgaW4gUGVkYWxcclxuXCJcIlwiXHJcblxyXG5pbXBvcnQgb3NcclxuaW1wb3J0IHV0aWxpdHlcclxuICAgICAgICBcclxuY2xhc3MgU2FuZGJveEJhc2ljVHJhY2VyOlxyXG4gICAgXCJcIlwiXHJcblxyXG4gICAgXCJcIlwiXHJcbiAgICBkZWYgX19pbml0X18oc2VsZik6XHJcbiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpXHJcbiAgICAgICAgc2VsZi5maWxlbmFtZSA9IFwic3R1ZGVudC5weVwiXHJcbiAgICAgICAgc2VsZi5jb2RlID0gTm9uZVxyXG5cclxuICAgIGRlZiBhc19maWxlbmFtZShzZWxmLCBmaWxlbmFtZSwgY29kZSk6XHJcbiAgICAgICAgaWYgb3MucGF0aC5pc2FicyhmaWxlbmFtZSk6XHJcbiAgICAgICAgICAgIHNlbGYuZmlsZW5hbWUgPSBmaWxlbmFtZVxyXG4gICAgICAgIGVsc2U6XHJcbiAgICAgICAgICAgIHNlbGYuZmlsZW5hbWUgPSBvcy5wYXRoLmFic3BhdGgoZmlsZW5hbWUpXHJcbiAgICAgICAgc2VsZi5jb2RlID0gY29kZVxyXG4gICAgICAgIHJldHVybiBzZWxmXHJcblxyXG4gICAgZGVmIF9fZW50ZXJfXyhzZWxmKTpcclxuICAgICAgICBwYXNzXHJcblxyXG4gICAgZGVmIF9fZXhpdF9fKHNlbGYsIGV4Y190eXBlLCBleGNfdmFsLCB0cmFjZWJhY2spOlxyXG4gICAgICAgIHBhc3NcclxuXHJcbmNsYXNzIFNhbmRib3hOYXRpdmVUcmFjZXIoU2FuZGJveEJhc2ljVHJhY2VyKTpcclxuICAgIFwiXCJcIlxyXG4gICAgVHJhY2tzIGxpbmVzIGNvdmVyZWQgYW5kIGZ1bmN0aW9uIGNhbGxzLiBQb3NzaWJseSBvdGhlciB0aGluZ3M/IFdlIGNvdWxkIHRyYWNrIHZhcmlhYmxlcywgaWYgdGhhdFxyXG4gICAgd2FzIHNvbWV0aGluZyBwZW9wbGUgd2FudGVkLlxyXG5cclxuICAgIFRPRE86IEhhbmRsZSBtdWx0aXBsZSBzdWJtaXNzaW9uIGZpbGVzP1xyXG4gICAgXCJcIlwiXHJcbiAgICBkZWYgX19pbml0X18oc2VsZik6XHJcbiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpXHJcbiAgICAgICAgI3NlbGYuY2FsbHMgPSB1dGlsaXR5LnRyYWNlX2NhbGxzKClcclxuICAgICAgICBzZWxmLmxpbmVzID0gdXRpbGl0eS50cmFjZV9saW5lcygpXHJcbiAgICAgICAgc2VsZi5zdGVwX2luZGV4ID0gbGVuKHV0aWxpdHkudHJhY2VfbGluZXMoKSlcclxuICAgIFxyXG4gICAgZGVmIGdldF9jYWxscyhzZWxmKTpcclxuICAgICAgICByZXR1cm4gdXRpbGl0eS50cmFjZV9jYWxscygpXHJcbiAgICBcclxuICAgIGNhbGxzID0gcHJvcGVydHkoZ2V0X2NhbGxzKVxyXG4gICAgXHJcbiAgICBkZWYgX19lbnRlcl9fKHNlbGYpOlxyXG4gICAgICAgIHV0aWxpdHkuc3RhcnRfdHJhY2Uoc2VsZilcclxuXHJcbiAgICBkZWYgX19leGl0X18oc2VsZiwgZXhjX3R5cGUsIGV4Y192YWwsIHRyYWNlYmFjayk6XHJcbiAgICAgICAgdXRpbGl0eS5zdG9wX3RyYWNlKHNlbGYpXHJcblxyXG5UUkFDRVJfU1RZTEVTID0ge1xyXG4gICAgJ25vbmUnOiBTYW5kYm94QmFzaWNUcmFjZXIsXHJcbiAgICAnbmF0aXZlJzogU2FuZGJveE5hdGl2ZVRyYWNlclxyXG59XHJcblxyXG5gOyIsIi8qKlxuICogU2t1bHB0IE1vZHVsZSBmb3IgaG9sZGluZyB0aGUgSW5zdHJ1Y3RvciBBUEkuXG4gKlxuICogVGhpcyBtb2R1bGUgaXMgbG9hZGVkIGluIGJ5IGdldHRpbmcgdGhlIGZ1bmN0aW9ucycgc291cmNlIGNvZGUgZnJvbSB0b1N0cmluZy5cbiAqIElzbid0IHRoYXQgY3Jhenk/XG4gKlxuICpcbiAqL1xuZXhwb3J0IGxldCAkc2tfbW9kX2luc3RydWN0b3IgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBNYWluIG1vZHVsZSBvYmplY3QgdGhhdCBnZXRzIHJldHVybmVkIGF0IHRoZSBlbmQuXG4gICAgbGV0IG1vZCA9IHt9O1xuICAgIGxldCBub25lID0gU2suYnVpbHRpbi5ub25lLm5vbmUkO1xuICAgIFxuICAgIGxldCBwcmlvciA9IG51bGw7XG4gICAgbW9kLnRpbWVpdCA9IG5ldyBTay5idWlsdGluLmZ1bmMoZnVuY3Rpb24obmFtZSkge1xuICAgICAgICBTay5idWlsdGluLnB5Q2hlY2tBcmdzKFwidGltZWl0XCIsIGFyZ3VtZW50cywgMSwgMSk7XG4gICAgICAgIGxldCBkaWZmZXJlbmNlO1xuICAgICAgICBpZiAocHJpb3IgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGRpZmZlcmVuY2UgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGlmZmVyZW5jZSA9IERhdGUubm93KCkgLSBwcmlvcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhTay5mZmkucmVtYXBUb0pzKG5hbWUpLCBkaWZmZXJlbmNlLzEwMDApO1xuICAgICAgICBwcmlvciA9IERhdGUubm93KCk7XG4gICAgfSk7XG4gICAgXG4gICAgLyoqXG4gICAgICogTG9ncyBmZWVkYmFjayB0byBqYXZhc2NyaXB0IGNvbnNvbGVcbiAgICAgKi9cbiAgICBtb2QuY29uc29sZV9sb2cgPSBuZXcgU2suYnVpbHRpbi5mdW5jKGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zb2xlLmxvZygoWy4uLmFyZ3VtZW50c10pLm1hcChTay5mZmkucmVtYXBUb0pzKSk7XG4gICAgfSk7XG4gICAgXG4gICAgLyoqXG4gICAgICogTG9ncyBkZWJ1ZyB0byBqYXZhc2NyaXB0IGNvbnNvbGVcbiAgICAgKi9cbiAgICBtb2QuY29uc29sZV9kZWJ1ZyA9IG5ldyBTay5idWlsdGluLmZ1bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGFyZ3VtZW50cyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGNvdmVydHMgdGhlIG91dHB1dCBpbiB0aGUgc3R1ZGVudCByZXBvcnQgdG8gYSBweXRob24gXG4gICAgICogbGlzdCBhbmQgcmV0dXJucyBpdC5cbiAgICAqKi9cbiAgICBtb2QuZ2V0X291dHB1dCA9IG5ldyBTay5idWlsdGluLmZ1bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgIFNrLmJ1aWx0aW4ucHlDaGVja0FyZ3MoXCJnZXRfb3V0cHV0XCIsIGFyZ3VtZW50cywgMCwgMCk7XG4gICAgICAgIGlmIChTay5leGVjdXRpb25SZXBvcnRzW1wic3R1ZGVudFwiXS5zdWNjZXNzKSB7XG4gICAgICAgICAgICBsZXQgb3V0cHV0ID0gU2suZXhlY3V0aW9uUmVwb3J0c1tcInN0dWRlbnRcIl1bXCJvdXRwdXRcIl0oKTtcbiAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dC5tYXAoZnVuY3Rpb24oaXRlbSkgeyByZXR1cm4gaXRlbS50b1NrdWxwdCgpOyB9KTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU2suYnVpbHRpbi5saXN0KG91dHB1dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNrLmJ1aWx0aW4ubGlzdChbXSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHJlc2V0cyB0aGUgb3V0cHV0LCBwYXJ0aWN1bGFybHkgdXNlZnVsIGlmIHRoZSBzdHVkZW50XG4gICAgICogY29kZSBpcyBnb2luZyB0byBiZSByZXJ1bi5cbiAgICAgKi9cbiAgICBtb2QucmVzZXRfb3V0cHV0ID0gbmV3IFNrLmJ1aWx0aW4uZnVuYyhmdW5jdGlvbigpIHtcbiAgICAgICAgU2suYnVpbHRpbi5weUNoZWNrQXJncyhcInJlc2V0X291dHB1dFwiLCBhcmd1bWVudHMsIDAsIDApO1xuICAgICAgICBpZiAoU2suZXhlY3V0aW9uUmVwb3J0c1tcInN0dWRlbnRcIl0uc3VjY2Vzcykge1xuICAgICAgICAgICAgU2suZXhlY3V0aW9uUmVwb3J0c1tcInN0dWRlbnRcIl0ub3V0cHV0LnJlbW92ZUFsbCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBTay5idWlsdGluLm5vbmUubm9uZSQ7XG4gICAgfSk7XG4gICAgXG4gICAgLyptb2QucXVldWVfaW5wdXQgPSBuZXcgU2suYnVpbHRpbi5mdW5jKGZ1bmN0aW9uKCkge1xuICAgICAgICBTay5idWlsdGluLnB5Q2hlY2tBcmdzKFwicXVldWVfaW5wdXRcIiwgYXJndW1lbnRzLCAxLCBJbmZpbml0eSk7XG4gICAgICAgIGxldCBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBmb3IgKGxldCBpID0gYXJncy5sZW5ndGgtMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGxldCBpbnB1dCA9IGFyZ3NbaV07XG4gICAgICAgICAgICBTay5idWlsdGluLnB5Q2hlY2tUeXBlKFwiaW5wdXRcIiwgXCJzdHJpbmdcIiwgU2suYnVpbHRpbi5jaGVja1N0cmluZyhpbnB1dCkpO1xuICAgICAgICAgICAgU2sucXVldWVkSW5wdXQucHVzaChTay5mZmkucmVtYXBUb0pzKGlucHV0KSk7XG4gICAgICAgIH1cbiAgICB9KTsqL1xuICAgIFxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGJ5IGluc3RydWN0b3JzIHRvIGdldCB0aGUgc3R1ZGVudHMnIGNvZGUgYXMgYSBzdHJpbmcuXG4gICAgKiovXG4gICAgbW9kLmdldF9wcm9ncmFtID0gbmV3IFNrLmJ1aWx0aW4uZnVuYyhmdW5jdGlvbigpIHtcbiAgICAgICAgU2suYnVpbHRpbi5weUNoZWNrQXJncyhcImdldF9wcm9ncmFtXCIsIGFyZ3VtZW50cywgMCwgMCk7XG4gICAgICAgIHJldHVybiBTay5mZmkucmVtYXBUb1B5KFNrLmV4ZWN1dGlvblJlcG9ydHNbXCJ2ZXJpZmllclwiXS5jb2RlKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGJ5IGluc3RydWN0b3JzIHRvIGdldCB0aGUgc3R1ZGVudHMnIGNvZGUgYXMgYSBzdHJpbmcuXG4gICAgKiovXG4gICAgbW9kLmdldF9ldmFsdWF0aW9uID0gbmV3IFNrLmJ1aWx0aW4uZnVuYyhmdW5jdGlvbigpIHtcbiAgICAgICAgU2suYnVpbHRpbi5weUNoZWNrQXJncyhcImdldF9ldmFsdWF0aW9uXCIsIGFyZ3VtZW50cywgMCwgMCk7XG4gICAgICAgIHJldHVybiBTay5mZmkucmVtYXBUb1B5KFNrLmV4ZWN1dGlvblJlcG9ydHNbXCJzdHVkZW50XCJdLmV2YWx1YXRpb24gfHwgXCJcIik7XG4gICAgfSk7XG4gICAgXG4gICAgbW9kLnRyYWNlX2xpbmVzID0gbmV3IFNrLmJ1aWx0aW4uZnVuYyhmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKFNrLmV4ZWN1dGlvblJlcG9ydHNbXCJzdHVkZW50XCJdLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIGxldCBsaW5lcyA9IFNrLmV4ZWN1dGlvblJlcG9ydHNbXCJzdHVkZW50XCJdLnJlYWxMaW5lcztcbiAgICAgICAgICAgIHJldHVybiBTay5mZmkucmVtYXBUb1B5KGxpbmVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU2suYnVpbHRpbi5saXN0KFtdKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgbW9kLnRyYWNlX2NhbGxzID0gbmV3IFNrLmJ1aWx0aW4uZnVuYyhmdW5jdGlvbigpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIi0tXCIsIFNrLmV4ZWN1dGlvblJlcG9ydHNbXCJzdHVkZW50XCJdKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIkNIRUNLSU5HIENBTExTXCIsIFNrLmV4ZWN1dGlvblJlcG9ydHNbJ3N0dWRlbnQnXS5zdWNjZXNzKTtcbiAgICAgICAgaWYgKFNrLmV4ZWN1dGlvblJlcG9ydHNbXCJzdHVkZW50XCJdLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIGxldCBjYWxscyA9IFNrLmV4ZWN1dGlvblJlcG9ydHNbXCJzdHVkZW50XCJdLmNhbGxzO1xuICAgICAgICAgICAgcmV0dXJuIFNrLmZmaS5yZW1hcFRvUHkoY2FsbHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgU2suYnVpbHRpbi5kaWN0KFtdKTtcbiAgICB9KTtcblxuICAgIG1vZC5zdGFydF90cmFjZSA9IG5ldyBTay5idWlsdGluLmZ1bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJTVEFSVC9CRUdJTlwiLCBTay5iZWZvcmVDYWxsLCBTay5leGVjdXRpb25SZXBvcnRzLnN0dWRlbnQudHJhY2luZyk7XG4gICAgICAgIGlmIChTay5iZWZvcmVDYWxsID09PSBudWxsKSB7XG4gICAgICAgICAgICBTay5iZWZvcmVDYWxsID0gU2suYmVmb3JlQ2FsbEJhY2t1cDtcbiAgICAgICAgfVxuICAgICAgICBTay5leGVjdXRpb25SZXBvcnRzW1wic3R1ZGVudFwiXS50cmFjaW5nLnB1c2godHJ1ZSk7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJTVEFSVC9FTkRcIiwgU2suYmVmb3JlQ2FsbCwgU2suZXhlY3V0aW9uUmVwb3J0cy5zdHVkZW50LnRyYWNpbmcpO1xuICAgIH0pO1xuXG4gICAgbW9kLnN0b3BfdHJhY2UgPSBuZXcgU2suYnVpbHRpbi5mdW5jKGZ1bmN0aW9uKCkge1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwiU1RPUC9CRUdJTlwiLCBTay5iZWZvcmVDYWxsLCBTay5leGVjdXRpb25SZXBvcnRzLnN0dWRlbnQudHJhY2luZyk7XG4gICAgICAgIFNrLmV4ZWN1dGlvblJlcG9ydHNbXCJzdHVkZW50XCJdLnRyYWNpbmcucG9wKCk7XG4gICAgICAgIGlmIChTay5leGVjdXRpb25SZXBvcnRzW1wic3R1ZGVudFwiXS50cmFjaW5nLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgU2suYmVmb3JlQ2FsbCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIlNUT1AvRU5EXCIsIFNrLmJlZm9yZUNhbGwsIFNrLmV4ZWN1dGlvblJlcG9ydHMuc3R1ZGVudC50cmFjaW5nKTtcbiAgICB9KTtcbiAgICBcbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIG1vZC5nZXRfc3R1ZGVudF9lcnJvciA9IG5ldyBTay5idWlsdGluLmZ1bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgIFNrLmJ1aWx0aW4ucHlDaGVja0FyZ3MoXCJnZXRfc3R1ZGVudF9lcnJvclwiLCBhcmd1bWVudHMsIDAsIDApO1xuICAgICAgICBpZiAoU2suZXhlY3V0aW9uUmVwb3J0c1tcInN0dWRlbnRcIl0uc3VjY2Vzcykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTay5idWlsdGluLnR1cGxlKFtub25lLCBub25lXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgZXJyb3IgPSBTay5leGVjdXRpb25SZXBvcnRzW1wic3R1ZGVudFwiXS5lcnJvcixcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHt9O1xuICAgICAgICAgICAgaWYgKGVycm9yICYmIGVycm9yLnRyYWNlYmFjayAmJiBlcnJvci50cmFjZWJhY2subGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uW1wibGluZVwiXSA9IGVycm9yLnRyYWNlYmFja1swXS5saW5lbm87XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVycm9yID0gbm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBvc2l0aW9uID0gU2suZmZpLnJlbWFwVG9QeShwb3NpdGlvbik7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNrLmJ1aWx0aW4udHVwbGUoW2Vycm9yLCBwb3NpdGlvbl0pO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBcbiAgICBtb2QuaGFkX2V4ZWN1dGlvbl90aW1lX2Vycm9yID0gbmV3IFNrLmJ1aWx0aW4uZnVuYyhmdW5jdGlvbigpIHtcbiAgICAgICAgU2suYnVpbHRpbi5weUNoZWNrQXJncyhcImhhZF9leGVjdXRpb25fdGltZV9lcnJvclwiLCBhcmd1bWVudHMsIDAsIDApO1xuICAgICAgICByZXR1cm4gIVNrLmV4ZWN1dGlvblJlcG9ydHNbXCJzdHVkZW50XCJdLnN1Y2Nlc3MgJiYgXG4gICAgICAgICAgICAgICAgU2suZXhlY3V0aW9uUmVwb3J0c1tcInN0dWRlbnRcIl0uZXJyb3IgJiZcbiAgICAgICAgICAgICAgICBTay5leGVjdXRpb25SZXBvcnRzW1wic3R1ZGVudFwiXS5lcnJvci50cCRuYW1lID09PSBcIlRpbWVMaW1pdEVycm9yXCI7XG4gICAgfSk7XG4gICAgXG4gICAgbGV0IGJhY2t1cFRpbWUgPSB1bmRlZmluZWQ7XG4gICAgbW9kLmxpbWl0X2V4ZWN1dGlvbl90aW1lID0gbmV3IFNrLmJ1aWx0aW4uZnVuYyhmdW5jdGlvbigpIHtcbiAgICAgICAgU2suYnVpbHRpbi5weUNoZWNrQXJncyhcImxpbWl0X2V4ZWN1dGlvbl90aW1lXCIsIGFyZ3VtZW50cywgMCwgMCk7XG4gICAgICAgIGJhY2t1cFRpbWUgPSBTay5leGVjTGltaXQ7XG4gICAgICAgIGlmIChTay5leGVjTGltaXRGdW5jdGlvbikge1xuICAgICAgICAgICAgU2suZXhlY0xpbWl0ID0gU2suZXhlY0xpbWl0RnVuY3Rpb24oKTtcbiAgICAgICAgICAgIFNrLmV4ZWNTdGFydCA9IERhdGUubm93KCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBtb2QudW5saW1pdF9leGVjdXRpb25fdGltZSA9IG5ldyBTay5idWlsdGluLmZ1bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgIFNrLmJ1aWx0aW4ucHlDaGVja0FyZ3MoXCJ1bmxpbWl0X2V4ZWN1dGlvbl90aW1lXCIsIGFyZ3VtZW50cywgMCwgMCk7XG4gICAgICAgIFNrLmV4ZWNMaW1pdCA9IGJhY2t1cFRpbWU7XG4gICAgICAgIFNrLmV4ZWNTdGFydCA9IERhdGUubm93KCk7XG4gICAgfSk7XG4gICAgXG4gICAgbW9kLnN1cHByZXNzX3Njcm9sbGluZyA9IG5ldyBTay5idWlsdGluLmZ1bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgIFNrLmJ1aWx0aW4ucHlDaGVja0FyZ3MoXCJzdXBwcmVzc19zY3JvbGxpbmdcIiwgYXJndW1lbnRzLCAwLCAwKTtcbiAgICAgICAgU2suZXhlY3V0aW9uUmVwb3J0cy5pbnN0cnVjdG9yLnNjcm9sbGluZyA9IHRydWU7XG4gICAgfSk7XG5cbiAgICBcbiAgICAvKlxuICAgIGRlZiBoaXN0KHNlbGYsIGRhdGEsICoqa3dhcmdzKTpcbiAgICAgICAgbGFiZWwgPSBrd2FyZ3MuZ2V0KCdsYWJlbCcsIE5vbmUpXG4gICAgICAgIHNlbGYuYWN0aXZlX3Bsb3RbJ2RhdGEnXS5hcHBlbmQoeyd0eXBlJzogJ0hpc3RvZ3JhbScsICd2YWx1ZXMnOiBkYXRhLCAnbGFiZWwnOiBsYWJlbH0pXG4gICAgZGVmIHBsb3Qoc2VsZiwgeHMsIHlzPU5vbmUsICoqa3dhcmdzKTpcbiAgICAgICAgbGFiZWwgPSBrd2FyZ3MuZ2V0KCdsYWJlbCcsIE5vbmUpXG4gICAgICAgIGlmIHlzID09IE5vbmU6XG4gICAgICAgICAgICBzZWxmLmFjdGl2ZV9wbG90WydkYXRhJ10uYXBwZW5kKHsndHlwZSc6ICdMaW5lJywgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4JzogcmFuZ2UobGVuKHhzKSksICd5JzogeHMsICdsYWJlbCc6IGxhYmVsfSlcbiAgICAgICAgZWxzZTpcbiAgICAgICAgICAgIHNlbGYuYWN0aXZlX3Bsb3RbJ2RhdGEnXS5hcHBlbmQoeyd0eXBlJzogJ0xpbmUnLCAneCc6IHhzLCAneSc6IHlzLCAnbGFiZWwnOiBsYWJlbH0pXG4gICAgZGVmIHNjYXR0ZXIoc2VsZiwgeHMsIHlzLCAqKmt3YXJncyk6XG4gICAgICAgIGxhYmVsID0ga3dhcmdzLmdldCgnbGFiZWwnLCBOb25lKVxuICAgICAgICBzZWxmLmFjdGl2ZV9wbG90WydkYXRhJ10uYXBwZW5kKHsndHlwZSc6ICdTY2F0dGVyJywgJ3gnOiB4cywgJ3knOiB5cywgJ2xhYmVsJzogbGFiZWx9KVxuICAgICovXG4gICAgbW9kLmdldF9wbG90cyA9IG5ldyBTay5idWlsdGluLmZ1bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgIFNrLmJ1aWx0aW4ucHlDaGVja0FyZ3MoXCJnZXRfcGxvdHNcIiwgYXJndW1lbnRzLCAwLCAwKTtcbiAgICAgICAgaWYgKFNrLmV4ZWN1dGlvblJlcG9ydHNbXCJzdHVkZW50XCJdLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIGxldCBvdXRwdXRzID0gU2suZXhlY3V0aW9uUmVwb3J0c1tcInN0dWRlbnRcIl1bXCJvdXRwdXRcIl0oKTtcbiAgICAgICAgICAgIG91dHB1dHMgPSBvdXRwdXRzLmZpbHRlcihmdW5jdGlvbihvdXRwdXQpIHsgXG4gICAgICAgICAgICAgICAgcmV0dXJuIG91dHB1dC50eXBlID09PSBcInBsb3RcIjtcbiAgICAgICAgICAgIH0pLm1hcChmdW5jdGlvbihncmFwaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XCJkYXRhXCI6IGdyYXBoLmNvbnRlbnQubWFwKGZ1bmN0aW9uKHBsb3QpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5ld1Bsb3QgPSB7IFwidHlwZVwiOiBwbG90LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiXCIgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBsb3QudHlwZSA9PT0gXCJsaW5lXCIgfHwgcGxvdC50eXBlID09PSBcInNjYXR0ZXJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3UGxvdFtcInhcIl0gPSBwbG90LmRhdGEubWFwKGZ1bmN0aW9uKHYpIHsgcmV0dXJuIHYueDsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdQbG90W1wieVwiXSA9IHBsb3QuZGF0YS5tYXAoZnVuY3Rpb24odikgeyByZXR1cm4gdi55OyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwbG90LnR5cGUgPT09IFwiaGlzdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdQbG90W1widmFsdWVzXCJdID0gcGxvdC5kYXRhO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdQbG90O1xuICAgICAgICAgICAgICAgIH0pLCBcbiAgICAgICAgICAgICAgICBcInhsYWJlbFwiOiBcIlwiLCBcInlsYWJlbFwiOiBcIlwiLCBcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiXCIsIFwibGVnZW5kXCI6IGZhbHNlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIFNrLmZmaS5yZW1hcFRvUHkob3V0cHV0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gU2suZmZpLnJlbWFwVG9QeShbXSk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIFxuICAgIC8vIFByb3ZpZGVzIGBzdHVkZW50YCBhcyBhbiBvYmplY3Qgd2l0aCBhbGwgdGhlIGRhdGEgdGhhdCB0aGUgc3R1ZGVudCBkZWNsYXJlZC5cbiAgICBtb2QuU3R1ZGVudERhdGEgPSBTay5taXNjZXZhbC5idWlsZENsYXNzKG1vZCwgZnVuY3Rpb24oJGdibCwgJGxvYykge1xuICAgICAgICAkbG9jLl9faW5pdF9fID0gbmV3IFNrLmJ1aWx0aW4uZnVuYyhmdW5jdGlvbihzZWxmKSB7XG4gICAgICAgICAgICAvL3NlbGYuZGF0YSA9IFNrLmJ1aWx0aW4uZGljdCgpO1xuICAgICAgICAgICAgbGV0IG5ld0RpY3QgPSBuZXcgU2suYnVpbHRpbi5kaWN0KCk7XG4gICAgICAgICAgICBTay5hYnN0ci5zYXR0cihzZWxmLCBuZXcgU2suYnVpbHRpbi5zdHIoXCJkYXRhXCIpLCBuZXdEaWN0LCB0cnVlKTtcbiAgICAgICAgICAgIHNlbGYubW9kdWxlID0gU2suZXhlY3V0aW9uUmVwb3J0c1tcInN0dWRlbnRcIl0ucmVzdWx0cztcbiAgICAgICAgICAgIGlmIChzZWxmLm1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5tb2R1bGUgPSBzZWxmLm1vZHVsZS4kZDtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gc2VsZi5tb2R1bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYubW9kdWxlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFNrLmFic3RyLm9iamVjdFNldEl0ZW0obmV3RGljdCwgU2suZmZpLnJlbWFwVG9QeShTay51bmZpeFJlc2VydmVkKGtleSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm1vZHVsZVtrZXldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsZi5tb2R1bGUgPSB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBTay5idWlsdGluLm5vbmUubm9uZSQ7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgY2FsbF9mID0gZnVuY3Rpb24oa3dhKSB7XG4gICAgICAgICAgICBTay5idWlsdGluLnB5Q2hlY2tBcmdzTGVuKFwiY2FsbFwiLCBhcmd1bWVudHMubGVuZ3RoLCAxLCBJbmZpbml0eSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICAgICAgICB2YXIga3dhcmdzID0gbmV3IFNrLmJ1aWx0aW5zLmRpY3Qoa3dhKTtcblxuICAgICAgICAgICAgdmFyIHNlbGYgPSBhcmdzWzBdO1xuICAgICAgICAgICAgdmFyIGZ1bmN0aW9uTmFtZSA9IGFyZ3NbMV07XG4gICAgICAgICAgICBhcmdzID0gYXJncy5zbGljZSgyKTtcblxuICAgICAgICAgICAgdmFyIGlucHV0cyA9IGt3YXJncy5tcCRsb29rdXAobmV3IFNrLmJ1aWx0aW4uc3RyKFwiaW5wdXRzXCIpKTtcbiAgICAgICAgICAgIGlmIChpbnB1dHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlucHV0cyA9IFNrLmZmaS5yZW1hcFRvSnMoaW5wdXRzKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXRzLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dHMuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBTay5xdWV1ZWRJbnB1dC5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBTay5xdWV1ZWRJbnB1dC5wdXNoKGlucHV0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBkYXRhID0gc2VsZi50cCRnZXRhdHRyKG5ldyBTay5idWlsdGluLnN0cihcImRhdGFcIikpO1xuICAgICAgICAgICAgdmFyIGZ1bmN0aW9uT2JqZWN0ID0gZGF0YS5tcCRsb29rdXAoZnVuY3Rpb25OYW1lKTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBmdW5jdGlvbk9iamVjdC50cCRjYWxsKGFyZ3MpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgICAgY2FsbF9mLmNvX2t3YXJncyA9IHRydWU7XG4gICAgICAgIC8vY2FsbF9mLmNvX3Zhcm5hbWVzID0gW1wic2VsZlwiLCBcImZ1bmN0aW9uXCJdO1xuICAgICAgICBjYWxsX2YuY29fbmFtZT0gbmV3IFNrLmJ1aWx0aW4uc3RyKFwiY2FsbFwiKTtcbiAgICAgICAgJGxvY1tcImNhbGxfJHJuJFwiXSA9IG5ldyBTay5idWlsdGluLmZ1bmMoY2FsbF9mKTtcblxuICAgICAgICAkbG9jW1wiX19yZXByX19cIl0gPSBuZXcgU2suYnVpbHRpbi5mdW5jKGZ1bmN0aW9uKHNlbGYpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU2suYnVpbHRpbi5zdHIoXCJcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRsb2MuZ2V0X25hbWVzX2J5X3R5cGUgPSBuZXcgU2suYnVpbHRpbi5mdW5jKGZ1bmN0aW9uKHNlbGYsIHR5cGUsIGV4Y2x1ZGVfYnVpbHRpbnMpIHtcbiAgICAgICAgICAgIFNrLmJ1aWx0aW4ucHlDaGVja0FyZ3MoXCJnZXRfbmFtZXNfYnlfdHlwZVwiLCBhcmd1bWVudHMsIDIsIDMpO1xuICAgICAgICAgICAgaWYgKGV4Y2x1ZGVfYnVpbHRpbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGV4Y2x1ZGVfYnVpbHRpbnMgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBTay5idWlsdGluLnB5Q2hlY2tUeXBlKFwiZXhjbHVkZV9idWlsdGluc1wiLCBcImJvb2xlYW5cIiwgU2suYnVpbHRpbi5jaGVja0Jvb2woZXhjbHVkZV9idWlsdGlucykpO1xuICAgICAgICAgICAgICAgIGV4Y2x1ZGVfYnVpbHRpbnMgPSBTay5mZmkucmVtYXBUb0pzKGV4Y2x1ZGVfYnVpbHRpbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgcHJvcGVydHkgaW4gc2VsZi5tb2R1bGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5tb2R1bGUuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLm1vZHVsZVtwcm9wZXJ0eV0udHAkbmFtZSA9PT0gdHlwZS50cCRuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGV4Y2x1ZGVfYnVpbHRpbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV4Y2x1ZGVfYnVpbHRpbnMgJiYgcHJvcGVydHkuc3RhcnRzV2l0aChcIl9fXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChTay5mZmkucmVtYXBUb1B5KFNrLnVuZml4UmVzZXJ2ZWQocHJvcGVydHkpKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNrLmJ1aWx0aW4ubGlzdChyZXN1bHQpO1xuICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgJGxvYy5nZXRfdmFsdWVzX2J5X3R5cGUgPSBuZXcgU2suYnVpbHRpbi5mdW5jKGZ1bmN0aW9uKHNlbGYsIHR5cGUsIGV4Y2x1ZGVfYnVpbHRpbnMpIHtcbiAgICAgICAgICAgIFNrLmJ1aWx0aW4ucHlDaGVja0FyZ3MoXCJnZXRfdmFsdWVzX2J5X3R5cGVcIiwgYXJndW1lbnRzLCAyLCAzKTtcbiAgICAgICAgICAgIGlmIChleGNsdWRlX2J1aWx0aW5zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBleGNsdWRlX2J1aWx0aW5zID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgU2suYnVpbHRpbi5weUNoZWNrVHlwZShcImV4Y2x1ZGVfYnVpbHRpbnNcIiwgXCJib29sZWFuXCIsIFNrLmJ1aWx0aW4uY2hlY2tCb29sKGV4Y2x1ZGVfYnVpbHRpbnMpKTtcbiAgICAgICAgICAgICAgICBleGNsdWRlX2J1aWx0aW5zID0gU2suZmZpLnJlbWFwVG9KcyhleGNsdWRlX2J1aWx0aW5zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IHByb3BlcnR5IGluIHNlbGYubW9kdWxlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYubW9kdWxlLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5tb2R1bGVbcHJvcGVydHldLnRwJG5hbWUgPT09IHR5cGUudHAkbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV4Y2x1ZGVfYnVpbHRpbnMgJiYgcHJvcGVydHkuc3RhcnRzV2l0aChcIl9fXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzZWxmLm1vZHVsZVtwcm9wZXJ0eV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTay5idWlsdGluLmxpc3QocmVzdWx0KTtcbiAgICAgICAgfSk7XG4gICAgfSwgXCJTdHVkZW50RGF0YVwiKTtcbiAgICBtb2Quc3R1ZGVudCA9IFNrLm1pc2NldmFsLmNhbGxzaW1PclN1c3BlbmQobW9kLlN0dWRlbnREYXRhKTtcbiAgICBcbiAgICBtb2QuZ2V0X3N0dWRlbnRfZGF0YSA9IG5ldyBTay5idWlsdGluLmZ1bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgIFNrLmJ1aWx0aW4ucHlDaGVja0FyZ3MoXCJnZXRfc3R1ZGVudF9kYXRhXCIsIGFyZ3VtZW50cywgMCwgMCk7XG4gICAgICAgIHJldHVybiBtb2Quc3R1ZGVudDtcbiAgICB9KTtcblxuICAgIG1vZC5zZXRfaW5zdHJ1Y3Rpb25zID0gbmV3IFNrLmJ1aWx0aW4uZnVuYyhmdW5jdGlvbihuZXdJbnN0cnVjdGlvbnMpIHtcbiAgICAgICAgU2suYnVpbHRpbi5weUNoZWNrQXJncyhcInNldF9pbnN0cnVjdGlvbnNcIiwgYXJndW1lbnRzLCAxLCAyKTtcbiAgICAgICAgbmV3SW5zdHJ1Y3Rpb25zID0gU2suZmZpLnJlbWFwVG9KcyhuZXdJbnN0cnVjdGlvbnMpO1xuICAgICAgICBTay5leGVjdXRpb25SZXBvcnRzW1wibW9kZWxcIl0uZGlzcGxheS5jaGFuZ2VkSW5zdHJ1Y3Rpb25zKG5ld0luc3RydWN0aW9ucyk7XG4gICAgfSk7XG5cbiAgICBtb2QuZ2V0X21vZGVsX2luZm8gPSBuZXcgU2suYnVpbHRpbi5mdW5jKGZ1bmN0aW9uKGtleXMpIHtcbiAgICAgICAgU2suYnVpbHRpbi5weUNoZWNrQXJncyhcImdldF9tb2RlbF9pbmZvXCIsIGFyZ3VtZW50cywgMSwgMSk7XG4gICAgICAgIGxldCBtb2RlbCA9IFNrLmV4ZWN1dGlvblJlcG9ydHNbXCJtb2RlbFwiXTtcbiAgICAgICAga2V5cyA9IFNrLmZmaS5yZW1hcFRvSnMoa2V5cykuc3BsaXQoXCIuXCIpO1xuICAgICAgICBmb3IgKHZhciBpPTA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBtb2RlbCA9IG1vZGVsW2tleXNbaV1dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBTay5mZmkucmVtYXBUb1B5KG1vZGVsKCkpO1xuICAgIH0pO1xuXG4gICAgbW9kLmNsZWFyX2V4aXN0aW5nX3N0dWRlbnRfaW1wb3J0cyA9IG5ldyBTay5idWlsdGluLmZ1bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgIFNrLmJ1aWx0aW4ucHlDaGVja0FyZ3MoXCJjbGVhcl9leGlzdGluZ19zdHVkZW50X2ltcG9ydHNcIiwgYXJndW1lbnRzLCAwLCAwKTtcbiAgICAgICAgU2suY2xlYXJFeGlzdGluZ1N0dWRlbnRJbXBvcnRzKCk7XG4gICAgfSk7XG5cbiAgICBtb2QuZG93bmxvYWRfZmlsZSA9IG5ldyBTay5idWlsdGluLmZ1bmMoZnVuY3Rpb24ocGxhY2VtZW50LCBkaXJlY3RvcnksIGZpbGVuYW1lKSB7XG4gICAgICAgIFNrLmJ1aWx0aW4ucHlDaGVja0FyZ3MoXCJkb3dubG9hZF9maWxlXCIsIGFyZ3VtZW50cywgMywgMyk7XG4gICAgICAgIGNvbnN0IGRvd25sb2FkRmlsZVVybCA9IFNrLmV4ZWN1dGlvblJlcG9ydHNbXCJtb2RlbFwiXS5jb25maWd1cmF0aW9uLnVybHNbXCJkb3dubG9hZEZpbGVcIl07XG4gICAgICAgIGNvbnN0IGNvbWJpbmVyID0gZG93bmxvYWRGaWxlVXJsLmluY2x1ZGVzKFwiP1wiKSA/IFwiJlwiIDogXCI/XCI7XG4gICAgICAgIGNvbnN0IHVybCA9IGAke2Rvd25sb2FkRmlsZVVybH0ke2NvbWJpbmVyfXBsYWNlbWVudD0ke3BsYWNlbWVudH0mZGlyZWN0b3J5PSR7ZGlyZWN0b3J5fSZmaWxlbmFtZT0ke2ZpbGVuYW1lfWA7XG4gICAgICAgIGNvbnN0IHByb20gPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBjb25zdCB4bWxodHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICAvLyBUT0RPOiBGaWd1cmUgb3V0IGlmIHRoaXMgbmVlZHMgaGVhZGVyc1xuXG4gICAgICAgICAgICB4bWxodHRwLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkZW5kXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShTay5mZmkucmVtYXBUb1B5KHhtbGh0dHAucmVzcG9uc2VUZXh0KSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgeG1saHR0cC5vcGVuKFwiR0VUXCIsIHVybCk7XG4gICAgICAgICAgICB4bWxodHRwLnNlbmQobnVsbCk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzdXNwID0gbmV3IFNrLm1pc2NldmFsLlN1c3BlbnNpb24oKTtcbiAgICAgICAgbGV0IHJlc29sdXRpb24gPSBudWxsO1xuICAgICAgICBzdXNwLnJlc3VtZSA9ICgpPT5yZXNvbHV0aW9uO1xuICAgICAgICBzdXNwLmRhdGEgPSB7XG4gICAgICAgICAgICB0eXBlOiBcIlNrLnByb21pc2VcIixcbiAgICAgICAgICAgIHByb21pc2U6IHByb20udGhlbigodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICByZXNvbHV0aW9uID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfSwgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdXRpb24gPVwiXCI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycjtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBzdXNwO1xuICAgIH0pO1xuICAgIFxuICAgIHJldHVybiBtb2Q7XG59O1xuIiwiZXhwb3J0IHZhciAkYnVpbHRpbm1vZHVsZSA9IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgIHZhciBtb2QsIHNhbXBsZVdyYXBwZXI7XHJcbiAgICBtb2QgPSB7X19uYW1lX186IFwid2Vha3JlZlwifTtcclxuXHJcbiAgICAvKm1vZC5XZWFrU2V0ID0gU2suYWJzdHIuYnVpbGROYXRpdmVDbGFzcyhcIndlYWtyZWYuV2Vha1NldFwiLCB7XHJcbiAgICAgICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIFdlYWtTZXQoKVxyXG4gICAgfSk7Ki9cclxuXHJcbiAgICB2YXIgV2Vha1NldCA9IGZ1bmN0aW9uKCRnYmwsICRsb2MpIHtcclxuICAgICAgICAkbG9jLl9faW5pdF9fID0gbmV3IFNrLmJ1aWx0aW4uZnVuYyhmdW5jdGlvbiAoc2VsZiwgZGF0YSkge1xyXG4gICAgICAgICAgICBTay5idWlsdGluLnB5Q2hlY2tBcmdzKFwiX19pbml0X19cIiwgYXJndW1lbnRzLCAyLCAyKTtcclxuICAgICAgICAgICAgU2suYnVpbHRpbi5weUNoZWNrVHlwZShcImRhdGFcIiwgXCJpdGVyYWJsZVwiLCBTay5idWlsdGluLmNoZWNrSXRlcmFibGUoZGF0YSkpO1xyXG4gICAgICAgICAgICBzZWxmLmRhdGEgPSBbXTtcclxuICAgICAgICAgICAgbGV0IGl0ZXIgPSBTay5hYnN0ci5pdGVyKGRhdGEpO1xyXG4gICAgICAgICAgICBsZXQgbmV4dDtcclxuICAgICAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICAgICAgbmV4dCA9IFNrLmFic3RyLml0ZXJuZXh0KGl0ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZGF0YS5wdXNoKG5ldyBXZWFrUmVmKG5leHQpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSB3aGlsZSAobmV4dCAhPT0gdW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgcmV0dXJuIFNrLmJ1aWx0aW4ubm9uZS5ub25lJDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJGxvYy5fX2l0ZXJfXyA9IG5ldyBTay5idWlsdGluLmZ1bmMoZnVuY3Rpb24oc2VsZikge1xyXG4gICAgICAgICAgICBjb25zdCB2aWV3T2ZEYXRhID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaSA8IHNlbGYuZGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IHNlbGYuZGF0YVtpXS5kZXJlZigpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZXdPZkRhdGEucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZWxmLmRhdGEgPSB2aWV3T2ZEYXRhO1xyXG4gICAgICAgICAgICByZXR1cm4gU2suYWJzdHIuaXRlcihuZXcgU2suYnVpbHRpbi5saXN0KHZpZXdPZkRhdGEpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLyokbG9jLm5leHQkID0gbmV3IFNrLmJ1aWx0aW4uZnVuYyhmdW5jdGlvbiAoc2VsZikge1xyXG4gICAgICAgICAgICByZXR1cm4gc2VsZi50cCRpdGVyKCk7XHJcbiAgICAgICAgfSk7Ki9cclxuXHJcbiAgICAgICAgJGxvYy5hZGQgPSBuZXcgU2suYnVpbHRpbi5mdW5jKGZ1bmN0aW9uKHNlbGYsIGl0ZW0pIHtcclxuICAgICAgICAgICAgc2VsZi5kYXRhLnB1c2gobmV3IFdlYWtSZWYoaXRlbSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIG1vZC5XZWFrU2V0ID0gU2subWlzY2V2YWwuYnVpbGRDbGFzcyhtb2QsIFdlYWtTZXQsIFwiV2Vha1NldFwiLCBbXSk7XHJcblxyXG4gICAgcmV0dXJuIG1vZDtcclxufTsiLCJsZXQgTE9DQUxfU1RPUkFHRV9SRUY7XG50cnkge1xuICAgIExPQ0FMX1NUT1JBR0VfUkVGID0gbG9jYWxTdG9yYWdlO1xuICAgIGxldCBtb2QgPSBcIkJMT0NLUFlfTE9DQUxTVE9SQUdFX1RFU1RcIjtcbiAgICBMT0NBTF9TVE9SQUdFX1JFRi5zZXRJdGVtKG1vZCwgbW9kKTtcbiAgICBMT0NBTF9TVE9SQUdFX1JFRi5yZW1vdmVJdGVtKG1vZCk7XG59IGNhdGNoKGUpIHtcbiAgICBMT0NBTF9TVE9SQUdFX1JFRiA9IHtcbiAgICAgICAgX2RhdGEgICAgICAgOiB7fSxcbiAgICAgICAgc2V0SXRlbSAgICAgOiBmdW5jdGlvbihpZCwgdmFsKSB7IHJldHVybiB0aGlzLl9kYXRhW2lkXSA9IFN0cmluZyh2YWwpOyB9LFxuICAgICAgICBnZXRJdGVtICAgICA6IGZ1bmN0aW9uKGlkKSB7IHJldHVybiB0aGlzLl9kYXRhLmhhc093blByb3BlcnR5KGlkKSA/IHRoaXMuX2RhdGFbaWRdIDogbnVsbDsgfSxcbiAgICAgICAgcmVtb3ZlSXRlbSAgOiBmdW5jdGlvbihpZCkgeyByZXR1cm4gZGVsZXRlIHRoaXMuX2RhdGFbaWRdOyB9LFxuICAgICAgICBjbGVhciAgICAgICA6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5fZGF0YSA9IHt9OyB9XG4gICAgfTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgb2JqZWN0IGZvciBpbnRlcmZhY2luZyB3aXRoIHRoZSBMb2NhbFN0b3JhZ2UuIFRoZSBMb2NhbFN0b3JhZ2VcbiAqIGJyb3dzZXIgQVBJIGFsbG93cyBmb3Igb2ZmbGluZSBzdG9yYWdlLiBUaGF0IEFQSSBpcyB2ZXJ5IHVuc29waGlzdGljYXRlZCxcbiAqIGFuZCBpcyBlc3NlbnRpYWxseSBhIGxhbWUga2V5LXZhbHVlIHN0b3JlLiBUaGlzIG9iamVjdCBzaXRzIG9uIHRvcFxuICogYW5kIHByb3ZpZGVzIGEgbnVtYmVyIG9mIHVzZWZ1bCB1dGlsaXRpZXMsIGluY2x1ZGluZyBydWRpbWVudGFyeWNhY2hlXG4gKiBjYWNoZSBleHBpcmF0aW9uLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHRoaXMge0xvY2FsU3RvcmFnZVdyYXBwZXJ9XG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlIC0gQSBuYW1lc3BhY2UgdG8gdXNlIGluIGdyb3VwaW5nIGFjY2VzcyB0byBsb2NhbHN0b3JhZ2UuIFRoaXMga2VlcHMgYWNjZXNzIGNsZWFuIGFuZCBvcmdhbml6ZWQsIHdoaWxlIGFsc28gbWFraW5nIGl0IHBvc3NpYmxlIHRvIGhhdmUgbXVsdGlwbGUgTG9jYWxTdG9yYWdlIGNvbm5lY3Rpb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gTG9jYWxTdG9yYWdlV3JhcHBlcihuYW1lc3BhY2UpIHtcbiAgICB0aGlzLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcbn1cbi8qKlxuICogQSBtZXRob2QgZm9yIGFkZGluZyBhIGtleS92YWx1ZSBwYWlyIHRvIExvY2FsU3RvcmFnZS5cbiAqIE5vdGUgdGhhdCBib3RoIHBhcmFtZXRlcnMgbXVzdCBiZSBzdHJpbmdzIChKU09OLnN0cmluZ2lmeSBpcyB5b3VyIGZyaWVuZCkuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGtleSAtIFRoZSBuYW1lIG9mIHRoZSBrZXkuXG4gKiBAcGFyYW0ge1N0cmluZ30gdmFsdWUgLSBUaGUgdmFsdWUuXG4gKi9cbkxvY2FsU3RvcmFnZVdyYXBwZXIucHJvdG90eXBlLnNldCA9ICBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgTE9DQUxfU1RPUkFHRV9SRUYuc2V0SXRlbSh0aGlzLm5hbWVzcGFjZStcIl9cIitrZXkrXCJfdmFsdWVcIiwgdmFsdWUpO1xuICAgIExPQ0FMX1NUT1JBR0VfUkVGLnNldEl0ZW0odGhpcy5uYW1lc3BhY2UrXCJfXCIra2V5K1wiX3RpbWVzdGFtcFwiLCAkLm5vdygpKTtcbn07XG5cbi8qKlxuICogQSBtZXRob2QgZm9yIHJlbW92aW5nIGEga2V5IGZyb20gTG9jYWxTdG9yYWdlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgLSBUaGUgbmFtZSBvZiB0aGUga2V5IHRvIHJlbW92ZS5cbiAqL1xuTG9jYWxTdG9yYWdlV3JhcHBlci5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgTE9DQUxfU1RPUkFHRV9SRUYucmVtb3ZlSXRlbSh0aGlzLm5hbWVzcGFjZStcIl9cIitrZXkrXCJfdmFsdWVcIik7XG4gICAgTE9DQUxfU1RPUkFHRV9SRUYucmVtb3ZlSXRlbSh0aGlzLm5hbWVzcGFjZStcIl9cIitrZXkrXCJfdGltZXN0YW1wXCIpO1xufTtcblxuLyoqXG4gKiBBIG1ldGhvZCBmb3IgcmV0cmlldmluZyB0aGUgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBnaXZlbiBrZXkuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGtleSAtIFRoZSBuYW1lIG9mIHRoZSBrZXkgdG8gcmV0cmlldmUgdGhlIHZhbHVlIGZvci5cbiAqL1xuTG9jYWxTdG9yYWdlV3JhcHBlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIExPQ0FMX1NUT1JBR0VfUkVGLmdldEl0ZW0odGhpcy5uYW1lc3BhY2UrXCJfXCIra2V5K1wiX3ZhbHVlXCIpO1xufTtcblxuLyoqXG4gKiBBIG1ldGhvZCBmb3IgcmV0cmlldmluZyB0aGUgdGltZSBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIGtleS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30ga2V5IC0gVGhlIG5hbWUgb2YgdGhlIGtleSB0byByZXRyaWV2ZSB0aGUgdGltZSBmb3IuXG4gKiBAcmV0dXJucyB7SW50ZWdlcn0gLSBUaGUgdGltZXN0YW1wIChsb2NhbCBlcG9jaCkgd2hlbiB0aGUga2V5IHdhcyBsYXN0IHNldC5cbiAqL1xuTG9jYWxTdG9yYWdlV3JhcHBlci5wcm90b3R5cGUuZ2V0VGltZSA9IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBwYXJzZUludChMT0NBTF9TVE9SQUdFX1JFRi5nZXRJdGVtKHRoaXMubmFtZXNwYWNlK1wiX1wiK2tleStcIl90aW1lc3RhbXBcIikpO1xufTtcblxuLyoqXG4gKiBBIG1ldGhvZCBmb3IgcmV0cmlldmluZyB0aGUgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBnaXZlbiBrZXkuXG4gKiBJZiB0aGUga2V5IGRvZXMgbm90IGV4aXN0LCB0aGVuIHRoZSBkZWZhdWx0IHZhbHVlIGlzIHVzZWQgaW5zdGVhZC5cbiAqIFRoaXMgZGVmYXVsdCB3aWxsIGJlIHNldC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30ga2V5IC0gVGhlIG5hbWUgb2YgdGhlIGtleSB0byByZXRyaWV2ZSB0aGUgdmFsdWUgZm9yLlxuICogQHBhcmFtIHtTdHJpbmd9IGRlZmF1bHRWYWx1ZSAtIFRoZSBkZWZhdWx0IHZhbHVlIHRvIHVzZS4gTXVzdCBiZSBhIHN0cmluZy5cbiAqL1xuTG9jYWxTdG9yYWdlV3JhcHBlci5wcm90b3R5cGUuZ2V0RGVmYXVsdCA9IGZ1bmN0aW9uKGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgaWYgKHRoaXMuaGFzKGtleSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXQoa2V5LCBkZWZhdWx0VmFsdWUpO1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgIH1cbn07XG5cbi8qKlxuICogQSB0ZXN0IGZvciB3aGV0aGVyIHRoZSBnaXZlbiBrZXkgaXMgaW4gTG9jYWxTdG9yYWdlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgLSBUaGUga2V5IHRvIHRlc3QgZXhpc3RlbmNlIGZvci5cbiAqL1xuTG9jYWxTdG9yYWdlV3JhcHBlci5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIExPQ0FMX1NUT1JBR0VfUkVGLmdldEl0ZW0odGhpcy5uYW1lc3BhY2UrXCJfXCIra2V5K1wiX3ZhbHVlXCIpICE9PSBudWxsO1xufTtcblxuLyoqXG4gKiBBIHRlc3QgZm9yIHdoZXRoZXIgdGhlIHNlcnZlciBoYXMgdGhlIG5ld2VyIHZlcnNpb24uIFRoaXMgZnVuY3Rpb25cbiAqIGFzc3VtZXMgdGhhdCB0aGUgc2VydmVyIHRyaXAgdGFrZXMgYWJvdXQgNSBzZWNvbmRzLiBUaGlzIG1ldGhvZFxuICogaXMgbGFyZ2VseSBkZXByZWNhdGVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgLSBUaGUga2V5IHRvIGNoZWNrLlxuICogQHBhcmFtIHtJbnRlZ2VyfSBzZXJ2ZXJfdGltZSAtIFRoZSBzZXJ2ZXIncyB0aW1lIGFzIGFuIGVwb2NoIChpbiBtaWxsaXNlY29uZHMpXG4gKi9cbkxvY2FsU3RvcmFnZVdyYXBwZXIucHJvdG90eXBlLmlzX25ldyA9IGZ1bmN0aW9uKGtleSwgc2VydmVyX3RpbWUpIHtcbiAgICB2YXIgc3RvcmVkX3RpbWUgPSBMT0NBTF9TVE9SQUdFX1JFRi5nZXRJdGVtKHRoaXMubmFtZXNwYWNlK1wiX1wiK2tleStcIl90aW1lc3RhbXBcIik7XG4gICAgcmV0dXJuIChzZXJ2ZXJfdGltZSA+PSBzdG9yZWRfdGltZSs1MDAwKTtcbn07XG4iLCJleHBvcnQgY29uc3QgVFJBQ0VfSFRNTCA9IGBcblxuPGRpdiBjbGFzcz1cImJsb2NrcHktdHJhY2UgY29sLW1kLTYgYmxvY2tweS1wYW5lbFwiXG4gICAgICAgICAgICByb2xlPVwicmVnaW9uXCIgYXJpYS1sYWJlbD1cIlRyYWNlXCI+XG4gICAgXG4gICAgPGRpdiBjbGFzcz1cImNsZWFyZml4XCI+XG4gICAgICAgIDxzdHJvbmc+VHJhY2U6IDwvc3Ryb25nPlxuICAgICAgICBcbiAgICAgICAgPCEtLSBGZWVkYmFjay9UcmFjZSBWaXNpYmlsaXR5IENvbnRyb2wgLS0+XG4gICAgICAgIDxidXR0b24gdHlwZT0nYnV0dG9uJ1xuICAgICAgICAgICAgICAgIGNsYXNzPSdidG4gYnRuLXNtIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSBmbG9hdC1yaWdodCBibG9ja3B5LWhpZGUtdHJhY2UnXG4gICAgICAgICAgICAgICAgZGF0YS1iaW5kPVwiY2xpY2s6IHVpLnNlY29uZFJvdy5hZHZhbmNlU3RhdGVcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdmYXMgZmEtZXllJz48L3NwYW4+IEhpZGUgVHJhY2VcbiAgICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAgbWItMyBibG9ja3B5LXRyYWNlLWNvbnRyb2xzXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cC1wcmVwZW5kXCI+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9J2J1dHRvbicgY2xhc3M9J2J0biBidG4tb3V0bGluZS1zZWNvbmRhcnknXG4gICAgICAgICAgICAgICAgZGF0YS1iaW5kPVwiY2xpY2s6IHVpLnRyYWNlLmZpcnN0XCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J2ZhcyBmYS1zdGVwLWJhY2t3YXJkJz48L3NwYW4+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT0nYnV0dG9uJyBjbGFzcz0nYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSdcbiAgICAgICAgICAgICAgICBkYXRhLWJpbmQ9XCJjbGljazogdWkudHJhY2UuYmFja3dhcmRcIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nZmFzIGZhLWJhY2t3YXJkJz48L3NwYW4+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtdGV4dFwiPlN0ZXA6PC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1iaW5kPSd0ZXh0OiBleGVjdXRpb24uc3R1ZGVudC5jdXJyZW50VHJhY2VTdGVwJz48L3NwYW4+XG4gICAgICAgICAgICAgICAgLyA8c3BhbiBkYXRhLWJpbmQ9J3RleHQ6IGV4ZWN1dGlvbi5zdHVkZW50Lmxhc3RTdGVwJz48L3NwYW4+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAtYXBwZW5kXCI+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9J2J1dHRvbicgY2xhc3M9J2J0biBidG4tb3V0bGluZS1zZWNvbmRhcnknXG4gICAgICAgICAgICAgICAgZGF0YS1iaW5kPVwiY2xpY2s6IHVpLnRyYWNlLmZvcndhcmRcIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nZmFzIGZhLWZvcndhcmQnPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzPSdidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5J1xuICAgICAgICAgICAgICAgIGRhdGEtYmluZD1cImNsaWNrOiB1aS50cmFjZS5sYXN0XCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J2ZhcyBmYS1zdGVwLWZvcndhcmQnPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1iaW5kPSd0ZXh0OiB1aS50cmFjZS5saW5lJz48L3NwYW4+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxwIGRhdGEtYmluZD1cInRleHQ6IHVpLnRyYWNlLmFzdFwiPjwvcD5cbiAgICA8cD5WYXJpYWJsZXMgYWZ0ZXIgdGhpcyBzdGVwOjwvcD5cbiAgICA8dGFibGUgY2xhc3M9J3RhYmxlIHRhYmxlLXNtIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgdGFibGUtaG92ZXInPlxuICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgICA8dHI+PHRoPk5hbWU8L3RoPjx0aD5UeXBlPC90aD48dGg+VmFsdWU8L3RoPjwvdHI+XG4gICAgICAgIDwvdGhlYWQ+XG4gICAgICAgIDx0Ym9keSBkYXRhLWJpbmQ9XCJmb3JlYWNoOiB1aS50cmFjZS5kYXRhKCkucHJvcGVydGllc1wiPlxuICAgICAgICAgICAgPHRyIGRhdGEtYmluZD1cInZpc2libGU6IG5hbWUgIT0gJ19fZmlsZV9fJyAmJiBuYW1lICE9ICdfX3BhdGhfXydcIj5cbiAgICAgICAgICAgICAgICA8dGQgZGF0YS1iaW5kPVwidGV4dDogbmFtZVwiPjwvdGQ+XG4gICAgICAgICAgICAgICAgPHRkIGRhdGEtYmluZD1cInRleHQ6IHR5cGVcIj48L3RkPlxuICAgICAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgICAgICAgPGNvZGUgZGF0YS1iaW5kPVwidGV4dDogdmFsdWVcIj48L2NvZGU+XG4gICAgICAgICAgICAgICAgICAgIDwhLS0ga28gaWY6IHR5cGUgPT0gXCJMaXN0XCIgLS0+XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiXCIgZGF0YS1iaW5kPVwiY2xpY2s6IC8vJHJvb3Qudmlld0V4YWN0VmFsdWUodHlwZSwgZXhhY3RfdmFsdWUpXCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdnbHlwaGljb24gZ2x5cGhpY29uLW5ldy13aW5kb3cnPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgICA8IS0tIC9rbyAtLT5cbiAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgPC90cj5cbiAgICAgICAgPC90Ym9keT5cbiAgICA8L3RhYmxlPlxuICAgIFxuPC9kaXY+XG5gO1xuXG5leHBvcnQgY29uc3QgQVNUX0RFU0NSSVBUSU9OUyA9IHtcbiAgICBcIkFkZFwiOiBcIkFuIGFkZGl0aW9uIG9wZXJhdG9yXCIsXG4gICAgXCJBbmRcIjogXCJBIGJvb2xlYW4gQU5EIG9wZXJhdG9yXCIsXG4gICAgXCJBbm5Bc3NpZ25cIjogXCJBbiBhbm5vdGF0ZWQgYXNzaWdubWVudFwiLFxuICAgIFwiQXNzZXJ0XCI6IFwiQW4gYXNzZXJ0IHN0YXRlbWVudFwiLFxuICAgIFwiQXNzaWduXCI6IFwiQW4gYXNzaWdubWVudCBzdGF0ZW1lbnRcIixcbiAgICBcIkFzeW5jRm9yXCI6IFwiQW4gYXN5Y2hyb25vdXMgZm9yIGxvb3BcIixcbiAgICBcIkFzeW5jRnVuY3Rpb25EZWZcIjogXCJBbiBhc3ljaHJvbm91cyBmdW5jdGlvbiBkZWZpbml0aW9uXCIsXG4gICAgXCJBc3luY1dpdGhcIjogXCJBbiBhc3ljaHJvbm91cyB3aXRoIHN0YXRlbWVudFwiLFxuICAgIFwiQXR0cmlidXRlXCI6IFwiQW4gYXR0cmlidXRlIGxvb2t1cCAoYWNjZXNzIGEgZmllbGQpXCIsXG4gICAgXCJBdWdBc3NpZ25cIjogXCJBbiBhdWdtZW50ZWQgYXNzaWdubWVudFwiLFxuICAgIFwiQXVnTG9hZFwiOiBcIkFuIGF1Z21lbnRlZCBsb2FkXCIsXG4gICAgXCJBdWdTdG9yZVwiOiBcIkFuIGF1Z21lbnRlZCBzdG9yZVwiLFxuICAgIFwiQXdhaXRcIjogXCJBbiBhd2FpdCBzdGF0ZW1lbnRcIixcbiAgICBcIkJpbk9wXCI6IFwiQSBiaW5hcnkgb3BlcmF0b3JcIixcbiAgICBcIkJpdEFuZFwiOiBcIkEgYml0d2lzZSBBTkQgb3BlcmF0b3JcIixcbiAgICBcIkJpdE9yXCI6IFwiQSBiaXR3aXNlIE9SIG9wZXJhdG9yXCIsXG4gICAgXCJCaXRYb3JcIjogXCJBIGJpdHdpc2UgWE9SIG9wZXJhdG9yXCIsXG4gICAgXCJCb29sT3BcIjogXCJBIGJvb2xlYW4gb3BlcmF0b3JcIixcbiAgICBcIkJyZWFrXCI6IFwiQSBicmVhayBzdGF0ZW1lbnRcIixcbiAgICBcIkJ5dGVzXCI6IFwiQSBsaXRlcmFsIGJ5dGVzIHN0cmluZ1wiLFxuICAgIFwiQ2FsbFwiOiBcIkEgZnVuY3Rpb24gY2FsbFwiLFxuICAgIFwiQ2xhc3NEZWZcIjogXCJBIGNsYXNzIGRlZmluaXRpb25cIixcbiAgICBcIkNvbXBhcmVcIjogXCJBIGJvb2xlYW4gY29tcGFyaXNvblwiLFxuICAgIFwiQ29uc3RhbnRcIjogXCJBIGxpdGVyYWwgdmFsdWVcIixcbiAgICBcIkNvbnRpbnVlXCI6IFwiQSBjb250aW51ZSBzdGF0ZW1lbnRcIixcbiAgICBcIkRlbFwiOiBcIkEgZGVsZXRlIHN0YXRlbWVudFwiLFxuICAgIFwiRGVsZXRlXCI6IFwiQSBkZWxldGlvblwiLFxuICAgIFwiRGljdFwiOiBcIkEgZGljdGlvbmFyeSBsaXRlcmFsXCIsXG4gICAgXCJEaWN0Q29tcFwiOiBcIkEgZGljdGlvbmFyeSBjb21wcmVoZW5zaW9uXCIsXG4gICAgXCJEaXZcIjogXCJBIGRpdmlzaW9uIG9wZXJhdG9yXCIsXG4gICAgXCJFbGxpcHNpc1wiOiBcIkFuIGVsbGlwc2lzXCIsXG4gICAgXCJFcVwiOiBcIkFuIGVxdWFsaXR5IGNvbXBhcmlzb24gb3BlcmF0b3JcIixcbiAgICBcIkV4Y2VwdEhhbmRsZXJcIjogXCJBbiBleGNlcHQgaGFuZGxlclwiLFxuICAgIFwiRXhwclwiOiBcIkFuIGV4cHJlc3Npb24gdXNlZCBhcyBhIHN0YXRlbWVudFwiLFxuICAgIFwiRXhwcmVzc2lvblwiOiBcIkFuIGV2YWx1YXRlZCBleHByZXNzaW9uXCIsXG4gICAgXCJFeHRTbGljZVwiOiBcIkEgbXVsdGktZGltZW5zaW9uYWwgc2xpY2VcIixcbiAgICBcIkZsb29yRGl2XCI6IFwiQW4gaW50ZWdlciBkaXZpc2lvbiBvcGVyYXRvclwiLFxuICAgIFwiRm9yXCI6IFwiQSBGT1IgbG9vcFwiLFxuICAgIFwiRm9ybWF0dGVkVmFsdWVcIjogXCJBIGZvcm1hdHRlZCB2YWx1ZSBpbiBhbiBmLXN0cmluZ1wiLFxuICAgIFwiRnVuY3Rpb25EZWZcIjogXCJBIGZ1bmN0aW9uIGRlZmluaXRpb25cIixcbiAgICBcIkdlbmVyYXRvckV4cFwiOiBcIkEgZ2VuZXJhdG9yIGV4cHJlc3Npb25cIixcbiAgICBcIkdsb2JhbFwiOiBcIkEgZ2xvYmFsIHN0YXRlbWVudFwiLFxuICAgIFwiR3RcIjogXCJBIGdyZWF0ZXIgdGhhbiBjb21wYXJpc29uIG9wZXJhdG9yXCIsXG4gICAgXCJHdEVcIjogXCJBIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBjb21wYXJpc29uIG9wZXJhdG9yXCIsXG4gICAgXCJJZlwiOiBcIkFuIElGIHN0YXRlbWVudFwiLFxuICAgIFwiSWZFeHBcIjogXCJBbiBJRiBleHByZXNzaW9uXCIsXG4gICAgXCJJbXBvcnRcIjogXCJBbiBpbXBvcnQgc3RhdGVtZW50XCIsXG4gICAgXCJJbXBvcnRGcm9tXCI6IFwiQW4gaW1wb3J0L2Zyb20gc3RhdGVtZW50XCIsXG4gICAgXCJJblwiOiBcIkFuIElOIG9wZXJhdG9yXCIsXG4gICAgXCJJbmRleFwiOiBcIkFuIGluZGV4XCIsXG4gICAgXCJJbnRlcmFjdGl2ZVwiOiBcIkFuIGludGVyYWN0aXZlIGV4cHJlc3Npb25cIixcbiAgICBcIkludmVydFwiOiBcIkFuIGludmVydCBvcGVyYXRvclwiLFxuICAgIFwiSXNcIjogXCJBbiBJUyBvcGVyYXRvclwiLFxuICAgIFwiSXNOb3RcIjogXCJBbiBJUyBOT1Qgb3BlcmF0b3JcIixcbiAgICBcIkpvaW5lZFN0clwiOiBcIkFuIGYtc3RyaW5nXCIsXG4gICAgXCJMU2hpZnRcIjogXCJBIGxlZnQgc2hpZnQgb3BlcmF0b3JcIixcbiAgICBcIkxhbWJkYVwiOiBcIkEgbGFtYmRhIGV4cHJlc3Npb25cIixcbiAgICBcIkxpc3RcIjogXCJBIGxpc3QgbGl0ZXJhbFwiLFxuICAgIFwiTGlzdENvbXBcIjogXCJBIGxpc3QgY29tcHJlaGVuc2lvblwiLFxuICAgIFwiTG9hZFwiOiBcIkEgbG9hZFwiLFxuICAgIFwiTHRcIjogXCJBIGxlc3MgdGhhbiBjb21wYXJpc29uIG9wZXJhdG9yXCIsXG4gICAgXCJMdEVcIjogXCJBIGxlc3MgdGhhbiBvciBlcXVhbCB0byBjb21wYXJpc29uIG9wZXJhdG9yXCIsXG4gICAgXCJNYXRNdWx0XCI6IFwiQSBtYXRyaXggbXVsdGlwbGljYXRpb24gb3BlcmF0b3JcIixcbiAgICBcIk1vZFwiOiBcIkEgbW9kdWxvIG9wZXJhdG9yXCIsXG4gICAgXCJNb2R1bGVcIjogXCJBIG1vZHVsZVwiLFxuICAgIFwiTXVsdFwiOiBcIkEgbXVsdGlwbGljYXRpb24gb3BlcmF0b3JcIixcbiAgICBcIk5hbWVcIjogXCJBIG5hbWVcIixcbiAgICBcIk5hbWVDb25zdGFudFwiOiBcIkEgbmFtZSBjb25zdGFudFwiLFxuICAgIFwiTm9ubG9jYWxcIjogXCJBIG5vbmxvY2FsIHN0YXRlbWVudFwiLFxuICAgIFwiTm90XCI6IFwiQSBub3Qgb3BlcmF0b3JcIixcbiAgICBcIk5vdEVxXCI6IFwiQSBub3QgZXF1YWwgdG8gY29tcGFyaXNvbiBvcGVyYXRvclwiLFxuICAgIFwiTm90SW5cIjogXCJBIE5PVCBJTiBvcGVyYXRvclwiLFxuICAgIFwiTnVtXCI6IFwiQSBudW1lcmljIGxpdGVyYWxcIixcbiAgICBcIk9yXCI6IFwiQSBib29sZWFuIE9SIG9wZXJhdG9yXCIsXG4gICAgXCJQYXJhbVwiOiBcIkEgcGFyYW1ldGVyXCIsXG4gICAgXCJQYXNzXCI6IFwiQSBwYXNzIHN0YXRlbWVudFwiLFxuICAgIFwiUG93XCI6IFwiQSBwb3dlciBvcGVyYXRvclwiLFxuICAgIFwiUlNoaWZ0XCI6IFwiQSByaWdodCBzaGlmdCBvcGVyYXRvclwiLFxuICAgIFwiUmFpc2VcIjogXCJBIHJhaXNlIHN0YXRlbWVudFwiLFxuICAgIFwiUmV0dXJuXCI6IFwiQSByZXR1cm4gc3RhdGVtZW50XCIsXG4gICAgXCJTZXRcIjogXCJBIHNldCBsaXRlcmFsXCIsXG4gICAgXCJTZXRDb21wXCI6IFwiQSBzZXQgY29tcHJlaGVuc2lvblwiLFxuICAgIFwiU2xpY2VcIjogXCJBIHNsaWNlXCIsXG4gICAgXCJTdGFycmVkXCI6IFwiQSBzdGFycmVkIGFyZ3VtZW50XCIsXG4gICAgXCJTdG9yZVwiOiBcIkEgc3RvcmVcIixcbiAgICBcIlN0clwiOiBcIkEgc3RyaW5nIGxpdGVyYWxcIixcbiAgICBcIlN1YlwiOiBcIkEgc3VidHJhY3Rpb24gb3BlcmF0b3JcIixcbiAgICBcIlN1YnNjcmlwdFwiOiBcIkEgc3Vic2NyaXB0XCIsXG4gICAgXCJTdWl0ZVwiOiBcIkEgc3VpdGVcIixcbiAgICBcIlRyeVwiOiBcIkEgdHJ5IHN0YXRlbWVudFwiLFxuICAgIFwiVHVwbGVcIjogXCJBIHR1cGxlIGxpdGVyYWxcIixcbiAgICBcIlR5cGVJZ25vcmVcIjogXCIgYSB0eXBlIGlnbm9yZVwiLFxuICAgIFwiVUFkZFwiOiBcIkEgdW5hcnkgYWRkaXRpb24gb3BlcmF0b3JcIixcbiAgICBcIlVTdWJcIjogXCJBIHVuYXJ5IHN1YnRyYWN0aW9uIG9wZXJhdG9yXCIsXG4gICAgXCJVbmFyeU9wXCI6IFwiQSB1bmFyeSBvcGVyYXRvclwiLFxuICAgIFwiV2hpbGVcIjogXCJBIHdoaWxlIGxvb3BcIixcbiAgICBcIldpdGhcIjogXCJBIHdpdGggc3RhdGVtZW50XCIsXG4gICAgXCJZaWVsZFwiOiBcIkEgeWllbGQgc3RhdGVtZW50XCIsXG4gICAgXCJZaWVsZEZyb21cIjogXCJBIHlpZWxkL2Zyb20gc3RhdGVtZW50XCJcbn07XG5cbmV4cG9ydCBjbGFzcyBCbG9ja1B5VHJhY2Uge1xuXG4gICAgY29uc3RydWN0b3IobWFpbiwgdGFnKSB7XG4gICAgICAgIHRoaXMubWFpbiA9IG1haW47XG4gICAgICAgIHRoaXMudGFnID0gdGFnO1xuXG4gICAgICAgIHRoaXMuSUdOT1JFRF9HTE9CQUxTID0gW1wiX19uYW1lX19cIiwgXCJfX2RvY19fXCIsIFwiX19wYWNrYWdlX19cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjbGFzc21ldGhvZFwiLCBcInByb3BlcnR5XCIsIFwic3RhdGljbWV0aG9kXCIsIFwiJGZyZWVcIiwgXCIkY2VsbFwiXTtcblxuICAgICAgICAvLyB0aGlzLnRyYWNlLmNsaWNrKHRoaXMuYnVpbGRUcmFjZVRhYmxlLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnN1bWUgYSBzZXQgb2YgdmFyaWFibGVzIHRyYWNlZCBmcm9tIHRoZSBleGVjdXRpb24gYW5kIHBhcnNlIG91dCBhbnlcbiAgICAgKiBnbG9iYWwgdmFyaWFibGVzIGFuZCBtb2R1bGVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHZhcmlhYmxlcyAtIGEgbWFwcGluZyBvZiB2YXJpYWJsZSBuYW1lcyB0byB0aGVpciBTa3VwdCB2YWx1ZS5cbiAgICAgKi9cbiAgICBwYXJzZUdsb2JhbHModmFyaWFibGVzKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgbGV0IG1vZHVsZXMgPSBbXTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyh2YXJpYWJsZXMpO1xuICAgICAgICBpZiAoIXRoaXMubWFpbi5tb2RlbC5kaXNwbGF5LnRyYWNlRXhlY3V0aW9uKCkpIHtcbiAgICAgICAgICAgIC8qaWYgKFwiJGNlbGxcIiBpbiB2YXJpYWJsZXMpIHtcbiAgICAgICAgICAgICAgICB2YXJpYWJsZXMgPSB7Li4udmFyaWFibGVzLCAuLi52YXJpYWJsZXMuJGNlbGx9O1xuICAgICAgICAgICAgfSovXG4gICAgICAgICAgICAvKmlmIChcIiRmcmVlXCIgaW4gdmFyaWFibGVzKSB7XG4gICAgICAgICAgICAgICAgdmFyaWFibGVzID0gey4uLnZhcmlhYmxlcywgLi4udmFyaWFibGVzLiRmcmVlfTtcbiAgICAgICAgICAgIH0qL1xuICAgICAgICAgICAgZm9yIChsZXQgcHJvcGVydHkgaW4gdmFyaWFibGVzKSB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gdmFyaWFibGVzW3Byb3BlcnR5XTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5JR05PUkVEX0dMT0JBTFMuaW5kZXhPZihwcm9wZXJ0eSkgPT09IC0xICYmIHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgPSBwcm9wZXJ0eS5yZXBsYWNlKFwiXyRydyRcIiwgXCJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKFwiXyRybiRcIiwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwYXJzZWQ7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWQgPSBCbG9ja1B5VHJhY2UucGFyc2VWYWx1ZShwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlZCA9IHtcIm5hbWVcIjogcHJvcGVydHksIFwidHlwZVwiOiBcIlVua25vd25cIiwgXCJ2YWx1ZVwiOiB2YWx1ZS50b1N0cmluZygpfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VkICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChwYXJzZWQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLmNvbnN0cnVjdG9yID09PSBTay5idWlsdGluLm1vZHVsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlcy5wdXNoKHZhbHVlLiRkLl9fbmFtZV9fLnYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XCJwcm9wZXJ0aWVzXCI6IHJlc3VsdCwgXCJtb2R1bGVzXCI6IG1vZHVsZXN9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IGEgU2t1bHB0IHZhbHVlIGludG8gYSBtb3JlIGVhc2lseSBwcmludGFibGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHZhbHVlIC0gdGhlIHNrdWxwdCB2YWx1ZVxuICAgICAqL1xuICAgIHN0YXRpYyBwYXJzZVZhbHVlKHByb3BlcnR5LCB2YWx1ZSwgZnVsbExlbmd0aCkge1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcIm5hbWVcIjogcHJvcGVydHksXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiVW5rbm93blwiLFxuICAgICAgICAgICAgICAgIFwidmFsdWVcIjogXCJVbmRlZmluZWRcIlxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHByb3BlcnR5KSB7XG4gICAgICAgICAgICBjYXNlIFwiZGF0YWNsYXNzXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogcHJvcGVydHksXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiRGVjb3JhdG9yXCIsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcIjxkYXRhY2xhc3MgZGVjb3JhdG9yPlwiXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHZhbHVlLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICBjYXNlIFNrLmJ1aWx0aW4uZnVuYzpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1wibmFtZVwiOiBwcm9wZXJ0eSxcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRnVuY3Rpb25cIixcbiAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgKHZhbHVlLmZ1bmNfY29kZS5jb192YXJuYW1lcyAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiBQYXJhbWV0ZXJzOiBcIit2YWx1ZS5mdW5jX2NvZGUuY29fdmFybmFtZXMuam9pbihcIiwgXCIpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiBObyBwYXJhbWV0ZXJzXCIpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgU2suYnVpbHRpbi5tb2R1bGU6IHJldHVybiBudWxsO1xuICAgICAgICAgICAgY2FzZSBTay5idWlsdGluLnN0cjpcbiAgICAgICAgICAgICAgICBpZiAoZnVsbExlbmd0aCB8fCB2YWx1ZS52Lmxlbmd0aCA8PSAzMikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1wibmFtZVwiOiBwcm9wZXJ0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiB2YWx1ZS4kcigpLnZcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1wibmFtZVwiOiBwcm9wZXJ0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIltcIit2YWx1ZS5zcSRsZW5ndGgoKStcIiBjaGFyYWN0ZXJzIG5vdCBzaG93bl1cIlxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgU2suYnVpbHRpbi5ub25lOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XCJuYW1lXCI6IHByb3BlcnR5LFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJOb25lXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidmFsdWVcIjogXCJOb25lXCJcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSBTay5idWlsdGluLmJvb2w6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcIm5hbWVcIjogcHJvcGVydHksXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIkJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiB2YWx1ZS4kcigpLnZcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSBTay5idWlsdGluLm5tYmVyOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XCJuYW1lXCI6IHByb3BlcnR5LFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRcIiA9PT0gdmFsdWUuc2tUeXBlID8gXCJJbnRlZ2VyXCI6IFwiRmxvYXRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiB2YWx1ZS4kcigpLnZcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSBTay5idWlsdGluLmludF86XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcIm5hbWVcIjogcHJvcGVydHksXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIkludGVnZXJcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiB2YWx1ZS4kcigpLnZcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSBTay5idWlsdGluLmZsb2F0XzpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1wibmFtZVwiOiBwcm9wZXJ0eSxcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRmxvYXRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiB2YWx1ZS4kcigpLnZcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSBTay5idWlsdGluLnR1cGxlOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XCJuYW1lXCI6IHByb3BlcnR5LFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJUdXBsZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IHZhbHVlLiRyKCkudlxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlIFNrLmJ1aWx0aW4ubGlzdDpcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUudi5sZW5ndGggPD0gMjApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcIm5hbWVcIjogcHJvcGVydHksXG4gICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJMaXN0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IHZhbHVlLiRyKCkudixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZXhhY3RfdmFsdWVcIjogdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1wibmFtZVwiOiBwcm9wZXJ0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIkxpc3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidmFsdWVcIjogXCJbLi4uIFwiK3ZhbHVlLnYubGVuZ3RoK1wiIGVsZW1lbnRzIC4uLl1cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZXhhY3RfdmFsdWVcIjogdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFNrLmJ1aWx0aW4uZGljdDpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1wibmFtZVwiOiBwcm9wZXJ0eSxcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGljdGlvbmFyeVwiLFxuICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IHZhbHVlLiRyKCkudlxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlIE51bWJlcjpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1wibmFtZVwiOiBwcm9wZXJ0eSxcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IHZhbHVlICUgMSA9PT0gMCA/IFwiSW50ZWdlclwiIDogXCJGbG9hdFwiLFxuICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IHZhbHVlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgU3RyaW5nOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XCJuYW1lXCI6IHByb3BlcnR5LFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiB2YWx1ZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlIEJvb2xlYW46XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcIm5hbWVcIjogcHJvcGVydHksXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIkJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiAodmFsdWUgPyBcIlRydWVcIjogXCJGYWxzZVwiKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB7XCJuYW1lXCI6IHByb3BlcnR5LFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogdmFsdWUudHAkbmFtZSA9PT0gdW5kZWZpbmVkID8gdmFsdWUgOiB2YWx1ZS50cCRuYW1lLFxuICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IHZhbHVlLiRyID09PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHZhbHVlLiRyKCkudlxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9O1xuXG5cbn1cblxuLy8gVE9ETzogdmlld0V4YWN0VmFsdWUiLCIvKipcbiAqIE1vdmUgYW4gZWxlbWVudCBmcm9tIGluZGV4IGluIGFuIGFycmF5IHRvIGEgbmV3IGluZGV4LlxuICogTyhuKVxuICogQ291cnRlc3k6XG4gKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzM4Nzc2ODAvMTcxODE1NVxuICogQHBhcmFtIGFyclxuICogQHBhcmFtIG9sZEluZGV4XG4gKiBAcGFyYW0gbmV3SW5kZXhcbiAqIEByZXR1cm5zIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXJyYXlNb3ZlKGFyciwgb2xkSW5kZXgsIG5ld0luZGV4KSB7XG4gICAgY29uc3QgbGVuZ3RoID0gYXJyLmxlbmd0aDtcbiAgICBjb25zdCBpdGVtVG9Nb3ZlID0gYXJyW29sZEluZGV4XTtcblxuICAgIGlmIChvbGRJbmRleCA9PT0gbmV3SW5kZXggfHwgb2xkSW5kZXggPiBsZW5ndGggfHwgbmV3SW5kZXggPiBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyLnJlZHVjZSgoYWNjLCBpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICBpZiAoaW5kZXggPT09IG9sZEluZGV4KSB7cmV0dXJuIGFjYzt9XG4gICAgICAgIGlmIChpbmRleCA9PT0gbmV3SW5kZXgpIHtyZXR1cm4gb2xkSW5kZXggPCBuZXdJbmRleCA/IFsuLi5hY2MsIGl0ZW0sIGl0ZW1Ub01vdmVdIDogWy4uLmFjYywgaXRlbVRvTW92ZSwgaXRlbV07fVxuICAgICAgICByZXR1cm4gWy4uLmFjYywgaXRlbV07XG4gICAgfSwgW10pO1xufVxuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGVsZW1lbnQgaXMgaW4gdGhlIGxpc3QuXG4gKiBAcGFyYW0ge2FueXRoaW5nfSBuZWVkbGUgLSBUaGUgZWxlbWVudCB0byBsb29rIGZvci5cbiAqIEBwYXJhbSB7QXJyYXl9IGhheXN0YWNrIC0gVGhlIGxpc3QgdG8gc2VhcmNoLlxuICogQHJldHVybiB7Qm9vbGVhbn0gV2hldGhlciB0aGUgZWxlbWVudCBleGlzdHNcbiAqL1xuZnVuY3Rpb24gYXJyYXlDb250YWlucyhuZWVkbGUsIGhheXN0YWNrKSB7XG4gICAgcmV0dXJuIGhheXN0YWNrLmluZGV4T2YobmVlZGxlKSA+IC0xO1xufVxuXG4vKipcbiAqIFJlbW92ZSBkdXBsaWNhdGUgdmFsdWVzIGZyb20gYW4gYXJyYXksIHByZXNlcnZpbmcgb3JkZXIuXG4gKiBDcmVhdGVzIGEgbmV3IGFycmF5LCBzbyBpcyBub24tZGVzdHJ1Y3RpdmUuXG4gKiBDb3VydGVzeTpcbiAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE1ODQzNzAvaG93LXRvLW1lcmdlLXR3by1hcnJheXMtaW4tamF2YXNjcmlwdC1hbmQtZGUtZHVwbGljYXRlLWl0ZW1zXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgLSBUaGUgYXJyYXkgdG8gdW5pcXVpZnkuIEVsZW1lbnRzIGNvbXBhcmVkIHdpdGggPT09LlxuICovXG5mdW5jdGlvbiBhcnJheVVuaXF1ZShhcnJheSkge1xuICAgIHZhciBhID0gYXJyYXkuY29uY2F0KCk7XG4gICAgZm9yKHZhciBpPTA7IGk8YS5sZW5ndGg7ICsraSkge1xuICAgICAgICBmb3IodmFyIGo9aSsxOyBqPGEubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIGlmKGFbaV0gPT09IGFbal0pIHthLnNwbGljZShqLS0sIDEpO31cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhO1xufVxuXG4vKipcbiAqIEEgaGVscGVyIGZ1bmN0aW9uIGZvciBleHRlbmRpbmcgYW4gYXJyYXkgYmFzZWRcbiAqIG9uIGFuIFwiYWRkQXJyYXlcIiBhbmQgXCJyZW1vdmVBcnJheVwiLiBBbnkgZWxlbWVudFxuICogZm91bmQgaW4gcmVtb3ZlQXJyYXkgaXMgcmVtb3ZlZCBmcm9tIHRoZSBmaXJzdCBhcnJheVxuICogYW5kIGFsbCB0aGUgZWxlbWVudHMgb2YgYWRkQXJyYXkgYXJlIGFkZGVkLlxuICogQW55IGR1cGxpY2F0ZSBpdGVtcyBhcmUgcmVtb3ZlZC5cbiAqIENyZWF0ZXMgYSBuZXcgYXJyYXksIHNvIGlzIG5vbi1kZXN0cnVjdGl2ZS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSAtIHRoZSBhcnJheSB0byBtYW5pcHVsYXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhZGRBcnJheSAtIHRoZSBlbGVtZW50cyB0byBhZGQgdG8gdGhlIGFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSByZW1vdmVBcnJheSAtIHRoZSBlbGVtZW50cyB0byByZW1vdmUgZnJvbSB0aGUgYXJyYXlcbiAqIEByZXR1cm4ge0FycmF5fSBUaGUgbW9kaWZpZWQgYXJyYXlcbiAqL1xuZnVuY3Rpb24gZXhwYW5kQXJyYXkoYXJyYXksIGFkZEFycmF5LCByZW1vdmVBcnJheSkge1xuICAgIHZhciBjb3B5QXJyYXkgPSBhcnJheS5maWx0ZXIoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICByZXR1cm4gcmVtb3ZlQXJyYXkuaW5kZXhPZihpdGVtKSA9PT0gLTE7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFycmF5VW5pcXVlKGNvcHlBcnJheS5jb25jYXQoYWRkQXJyYXkpKTtcbn1cblxuLyoqXG4gKiBEZWVwbHkgY2xvbmVzIGEgbm9kZVxuICogQHBhcmFtIHtOb2RlfSBub2RlIEEgbm9kZSB0byBjbG9uZVxuICogQHJldHVybiB7Tm9kZX0gQSBjbG9uZSBvZiB0aGUgZ2l2ZW4gbm9kZSBhbmQgYWxsIGl0cyBjaGlsZHJlblxuICovXG5mdW5jdGlvbiBjbG9uZU5vZGUobm9kZSkge1xuICAgIC8vIElmIHRoZSBub2RlIGlzIGEgdGV4dCBub2RlLCB0aGVuIHJlLWNyZWF0ZSBpdCByYXRoZXIgdGhhbiBjbG9uZSBpdFxuICAgIHZhciBjbG9uZSA9IG5vZGUubm9kZVR5cGUgPT0gMyA/IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG5vZGUubm9kZVZhbHVlKSA6IG5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcbiBcbiAgICAvLyBSZWN1cnNlICAgICBcbiAgICB2YXIgY2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgd2hpbGUoY2hpbGQpIHtcbiAgICAgICAgY2xvbmUuYXBwZW5kQ2hpbGQoY2xvbmVOb2RlKGNoaWxkKSk7XG4gICAgICAgIGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmc7XG4gICAgfVxuICAgICBcbiAgICByZXR1cm4gY2xvbmU7XG59XG5cbi8qKlxuICogSW5kZW50cyB0aGUgZ2l2ZW4gc3RyaW5nIGJ5IDQgc3BhY2VzLiBUaGlzIGNvcnJlY3RseSBoYW5kbGVzIG11bHRpLWxpbmUgc3RyaW5ncy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBiZSBtYW5pcHVsYXRlZC5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBzdHJpbmcgd2l0aCBmb3VyIHNwYWNlcyBhZGRlZCBhdCB0aGUgc3RhcnQgb2YgZXZlcnkgbmV3IGxpbmUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbmRlbnQoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eKD89LikvZ20sIFwiICAgIFwiKTtcbn1cblxuLyoqXG4gKiBUdXJucyBzcGFjZXMgaW50byB1bmRlcnNjb3JlcyBpbiB0aGUgc3RyaW5nLCBtYWtlcyBpdCBsb3dlcmNhc2UuXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIC0gdGhlIHN0cmluZyB0byBiZSBtYW5pcHVsYXRlZFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNsdWcoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXHMvZywgXCJfXCIpLnRvTG93ZXJDYXNlKCk7XG59XG5cbi8qKlxuICogQ2FwaXRhbGl6ZSB0aGUgZmlyc3QgbGV0dGVyIG9mIGEgc3RyaW5nLlxuICogQHBhcmFtIHtTdHJpbmd9IHMgLSBUaGUgc3RyaW5nIHRvIGJlIGNhcGl0YWxpemVkLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhcGl0YWxpemUocykge1xuICAgIGlmICh0eXBlb2YgcyAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgcmV0dXJuIHMuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzLnNsaWNlKDEpO1xufVxuXG4vKipcbiAqIFJldHVybiBhIHJhbmRvbSBpbnRlZ2VyIGJldHdlZW4gW2BtaW5gLCBgbWF4YF0uXG4gKiBcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gLSBUaGUgbG93ZXN0IHBvc3NpYmxlIGludGVnZXIuXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4IC0gVGhlIGhpZ2hlc3QgcG9zc2libGUgaW50ZWdlciAoaW5jbHVzaXZlKS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgcmFuZG9tIGludGVnZXIuXG4gKi9cbmZ1bmN0aW9uIHJhbmRvbUludGVnZXIobWluLG1heCkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqKG1heC1taW4rMSkrbWluKTtcbn1cblxuLyoqXG4gKiBFbmNvZGVzIHNvbWUgdGV4dCBzbyB0aGF0IGl0IGNhbiBiZSBzYWZlbHkgd3JpdHRlbiBpbnRvIGFuIEhUTUwgYm94LlxuICogVGhpcyBpbmNsdWRlcyByZXBsYWNpbmcgc3BlY2lhbCBIVE1MIGNoYXJhY3RlcnMgKCYsIDwsID4sIGV0Yy4pLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLSBUaGUgdGV4dCB0byBiZSBjb252ZXJ0ZWQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBIVE1MLXNhZmUgdGV4dC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZUhUTUwoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8mL2csIFwiJmFtcDtcIilcbiAgICAgICAgLnJlcGxhY2UoLzwvZywgXCImbHQ7XCIpXG4gICAgICAgIC5yZXBsYWNlKC8+L2csIFwiJmd0O1wiKVxuICAgICAgICAucmVwbGFjZSgvXCIvZywgXCImcXVvdDtcIilcbiAgICAgICAgLnJlcGxhY2UoLycvZywgXCImYXBvcztcIik7XG59XG5cbi8qKlxuICogU2h1ZmZsZSB0aGUgYmxvY2tzIGluIHRoZSB3b3Jrc3BhY2VcbiAqL1xuaWYgKHR5cGVvZiBCbG9ja2x5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgQmxvY2tseS5Xb3Jrc3BhY2VTdmcucHJvdG90eXBlLnNodWZmbGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG1ldHJpY3MgPSB0aGlzLmdldE1ldHJpY3MoKTtcbiAgICAgICAgdmFyIHdpZHRoID0gbWV0cmljcy52aWV3V2lkdGggLyAyLFxuICAgICAgICAgICAgaGVpZ2h0ID0gbWV0cmljcy52aWV3SGVpZ2h0O1xuICAgICAgICB2YXIgYmxvY2tzID0gdGhpcy5nZXRUb3BCbG9ja3MoZmFsc2UpO1xuICAgICAgICB2YXIgeSA9IDUsIHggPSAwLFxuICAgICAgICAgICAgbWF4aW1hbF9pbmNyZWFzZSA9IGhlaWdodC9ibG9ja3MubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2Nrcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAvLyBHZXQgYSBibG9ja1xuICAgICAgICAgICAgdmFyIGJsb2NrID0gYmxvY2tzW2ldO1xuICAgICAgICAgICAgdmFyIHByb3BlcnRpZXMgPSBibG9jay5nZXRSZWxhdGl2ZVRvU3VyZmFjZVhZKCk7XG4gICAgICAgICAgICBpZiAoaSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgeCA9IDU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHggPSAtcHJvcGVydGllcy54K3JhbmRvbUludGVnZXIoMTAsIHdpZHRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJsb2NrLm1vdmVCeSh4LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAtcHJvcGVydGllcy55K3kpO1xuICAgICAgICAgICAgeSA9IHkgKyByYW5kb21JbnRlZ2VyKDUsIG1heGltYWxfaW5jcmVhc2UpO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuLyoqXG4gKiBNb3ZlIGVsZW1lbnRzIGZyb20gb25lIGFycmF5IHRvIGFub3RoZXIgYmFzZWQgb24gYSBjb25kaXRpb25hbCBjaGVjay5cbiAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMxODg3OTY3L2phdmFzY3JpcHQtbW92ZS1vYmplY3RzLWZyb20tb25lLWFycmF5LXRvLWFub3RoZXItYmVzdC1hcHByb2FjaFxuICovXG5mdW5jdGlvbiBtb3ZlRWxlbWVudHMoc291cmNlLCB0YXJnZXQsIG1vdmVDaGVjaykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc291cmNlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gc291cmNlW2ldO1xuICAgICAgICBpZiAobW92ZUNoZWNrKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICBzb3VyY2Uuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgdGFyZ2V0LnB1c2goZWxlbWVudCk7XG4gICAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICB9IFxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBmaXJzdERlZmluZWRWYWx1ZSgpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYXJndW1lbnRzW2ldICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGNoZWNrcyBpZiB0aGUgZ2l2ZW4gb2JqZWN0IGlzIG9uZSBvZiB0aGUgU2suYnVpbHRpbiBvYmplY3RzXG4gKiBUT0RPOiBtYWtlIHRoaXMgc28gd2UgZG9uJ3QgaGF2ZSB0byBleHBsaWNpdGx5IHB1dCBvdXQgZXZlcnkgb3B0aW9uXG4gKiAgICAgICAgICBvbmUgcG9zc2libGUgdGhpbmcgd2UgY291bGQgZG8gaXMgZ2V0IGEgc3RyaW5nIHZlcnNpb24gb2YgdGhlIFxuICogICAgICAgICAgb2YgdGhlIGNvbnN0cnVjdG9yIGFuZCBsb29rIGZvciB0aGUgc3Vic3RyaW5nIFwicmV0dXJuIG5ldyBTay5idWlsdGluXCJcbiAqICAgICAgICAgIEJ1dCBJIGRvbid0IGtub3cgaG93IHJlbGlhYmxlIHRoYXQgaXMuICBSYXRoZXIsIGl0J3Mga2luZCBvZiBoYWNraXNoLlxuICogICAgICAgICAgU2hvdWxkIHRlaG9yZXRpY2FsbHkgYmVsb25nIGluIFNrLmZmaVxuICogQHBhcmFtIHtvYmplY3R9IG9iaiAtIHRoZSBvYmplY3QgdG8gYmUgZXhhbWluZWRcbiAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgdGhlIG9iamVjdCBpcyBvbmUgb2YgdGhlIFNrLmJ1aWx0aW4gdHlwZXNcbioqL1xuZnVuY3Rpb24gaXNTa0J1aWx0aW4ob2JqKXtcbiAgICByZXR1cm4gKG9iaiBpbnN0YW5jZW9mIFNrLmJ1aWx0aW4uZGljdCkgfHxcbiAgICAgICAgKG9iaiBpbnN0YW5jZW9mIFNrLmJ1aWx0aW4ubGlzdCkgfHxcbiAgICAgICAgKG9iaiBpbnN0YW5jZW9mIFNrLmJ1aWx0aW4udHVwbGUpIHx8XG4gICAgICAgIChvYmogaW5zdGFuY2VvZiBTay5idWlsdGluLmJvb2wpIHx8XG4gICAgICAgIChvYmogaW5zdGFuY2VvZiBTay5idWlsdGluLmludF8pIHx8XG4gICAgICAgIChvYmogaW5zdGFuY2VvZiBTay5idWlsdGluLmZsb2F0XykgfHxcbiAgICAgICAgKG9iaiBpbnN0YW5jZW9mIFNrLmJ1aWx0aW4uc3RyKSB8fFxuICAgICAgICAob2JqIGluc3RhbmNlb2YgU2suYnVpbHRpbi5sbmcpO1xuICAgIC8vdmFyIGNvbnNfc3RyID0gb2JqLmNvbnN0cnVjdG9yICsgXCJcIjtcbiAgICAvL3JldHVybiBjb25zX3N0ci5pbmRleE9mKFwicmV0dXJuIG5ldyBTay5idWlsdGluXCIpICE9PSAtMTtcbn1cblxuZnVuY3Rpb24gaXNBc3ROb2RlKG9iail7XG4gICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIE9iamVjdCAmJiBcIl9hc3RuYW1lXCIgaW4gb2JqO1xufVxuXG5jb25zdCBERUZBVUxUX1NFQ1RJT05fUEFUVEVSTiA9IC9eKCMjIyMjIFBhcnQgKC4rKSkkL2dtO1xuXG4vKipcbiAqIEZpbmRzIHRoZSBnaXZlbiBQYXJ0IElEIHVzaW5nIHRoZSBwYXR0ZXJuIGAjIyMjIFBhcnQgd2hhdGV2ZXJgIChvbiBpdHMgb3duIHNlcGFyYXRlIGxpbmUpLiBJZiB0aGUgcGF0dGVyblxuICogaXMgbm90IGZvdW5kLCB0aGVuIG51bGwgaXMgcmV0dXJuZWQuIElmIG5vIHBhdHRlcm4gaXMgZ2l2ZW4gKGVtcHR5IHN0cmluZyBvciBudWxsKSwgdGhlbiB0aGUgb3JpZ2luYWwgdGV4dFxuICogaXMgcmV0dXJuZWQgd2l0aG91dCBtb2RpZmljYXRpb25zLlxuICogQHBhcmFtIHRleHRcbiAqIEBwYXJhbSBwYXJ0SWRcbiAqIEByZXR1cm5zIHtudWxsfCp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0UGFydCh0ZXh0LCBwYXJ0SWQpIHtcbiAgICBpZiAocGFydElkID09PSBcIlwiIHx8IHBhcnRJZCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cbiAgICBjb25zdCBwYXJ0cyA9IHRleHQuc3BsaXQoREVGQVVMVF9TRUNUSU9OX1BBVFRFUk4pO1xuICAgIGZvciAobGV0IGk9MjsgaSA8IHBhcnRzLmxlbmd0aDsgaSs9Mykge1xuICAgICAgICAvKiAvLyBVbm5lY2Vzc2FyeSBhc3NlcnRpb24sIGJ1dCBub3QgYmFkIHRvIHRoaW5rIGFib3V0XG4gICAgICAgIGlmICghcGFydHNbaS0xXS5zdGFydHNXaXRoKFwiIyMjIyBQYXJ0IFwiKSkge1xuICAgICAgICAgICAgdGhyb3cgXCJFcnJvcjogcGFydCBmb3JtYXQgaXMgYnJva2VuIVwiO1xuICAgICAgICB9Ki9cbiAgICAgICAgaWYgKHBhcnRzW2ldID09PSBwYXJ0SWQpIHtcbiAgICAgICAgICAgIGxldCBib2R5ID0gcGFydHNbaSsxXTtcbiAgICAgICAgICAgIGlmIChib2R5ICYmIGJvZHlbMF0gPT09IFwiXFxuXCIpIHtcbiAgICAgICAgICAgICAgICBib2R5ID0gYm9keS5zbGljZSgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpICE9PSBwYXJ0cy5sZW5ndGggLSAzICYmIGJvZHkgJiYgYm9keS5zbGljZSgtMSkgPT09IFwiXFxuXCIpIHtcbiAgICAgICAgICAgICAgICBib2R5ID0gYm9keS5zbGljZSgwLCAtMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYm9keTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBTaG91bGQgdGhlb3JldGljYWxseSBiZWxvbmcgaW4gU2suZmZpLCBidXQgSSBwdXQgaXQgaGVyZSBpbnN0ZWFkIHRvIG5vdCBtZXNzIHVwIHRoZSBza3VscHQgZmlsZXNcbiAqIGxpa2UgdGhlIG5vcm1hbCBTay5mZmkucmVtYXBUb1B5LCBpdCBkb2Vzbid0IHdvcmsgZm9yIGZ1bmN0aW9ucyBvciBtb3JlIGNvbXBsZXggb2JqZWN0cywgYnV0IGl0IGhhbmRsZXNcbiAqIGNhc2VzIHdoZXJlIHRoZSB0eXBlcyBpbiBvYmogYXJlIGEgbWl4IG9mIHB5dGhvbiBTSU1QTEUgb2JqZWN0cyBhbmQgU0lNUExFIG5vcm1hbCBqYXZhc2NyaXB0IG9iamVjdHNcbiAqIEBwYXJhbSB7b2JqZWN0fSBvYmogLSB0aGUgb2JqZWN0IHRvIGJlIGNvbnZlcnRlZFxuICogQHJldHVybiB7U2suYnVpbHRpbi4/Pz99IC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyBweXRob24gb2JqZWN0LCBkcm9wcGluZyBhbGwgZnVuY3Rpb25zIGFuZCB0aGluZ3MgaXQgY2FuJ3QgY29udmVydFxuKiovXG5mdW5jdGlvbiBtaXhlZFJlbWFwVG9QeShvYmope1xuICAgIHZhciBrO1xuICAgIHZhciBrdnM7XG4gICAgdmFyIGk7XG4gICAgdmFyIGFycjtcbiAgICAvL0BUT0RPOiBzaG91bGQgdGhlb3JldGljYWxseSBjaGVjayBpZiB0aGUgb2JqZWN0IGlzIGEgcHlob24gZGljdCBvciBhcnJheSB3aXRoIGpzIG9iamVjdHNcbiAgICBpZiAoaXNTa0J1aWx0aW4ob2JqKSl7XG4gICAgICAgIC8vb2JqZWN0IGlzIGFscmVhZHkgcHl0aG9uIHJlYWR5XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSBlbHNlIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gXCJbb2JqZWN0IEFycmF5XVwiKSB7XG4gICAgICAgIC8vb2JqZWN0IGlzIGFjdHVhbGx5IGEgamF2YXNjcmlwdCBhcnJheVxuICAgICAgICBhcnIgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG9iai5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgLy9mb3IgZWFjaCBvYmplY3QsIGNvbnZlcnQgaXQgdG8gYSBweXRob24gb2JqZWN0IGlmIGl0IGlzbid0IG9uZSBhbHJlYWR5XG4gICAgICAgICAgICB2YXIgc3VidmFsID0gb2JqW2ldO1xuICAgICAgICAgICAgaWYoIWlzU2tCdWlsdGluKHN1YnZhbCkpe1xuICAgICAgICAgICAgICAgIGFyci5wdXNoKG1peGVkUmVtYXBUb1B5KHN1YnZhbCkpO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgYXJyLnB1c2goc3VidmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFNrLmJ1aWx0aW4ubGlzdChhcnIpO1xuICAgIH0gZWxzZSBpZiAob2JqID09PSBudWxsKSB7Ly9udWxsIG9iamVjdFxuICAgICAgICByZXR1cm4gU2suYnVpbHRpbi5ub25lLm5vbmUkO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBpZighaXNTa0J1aWx0aW4ob2JqKSl7XG4gICAgICAgICAgICAvL2Fzc3VtaW5nIGl0J3MgYSBzdGFuZGFyZCBkaWN0aW9uYXJ5XG4gICAgICAgICAgICBrdnMgPSBbXTsvL1NrLmJ1aWx0aW4uZGljdCB1c2VzIGFuIGFycmF5IG9mIGtleS12YWx1ZSxrZXktdmFsdWUuLi5cbiAgICAgICAgICAgIGZvciAoayBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICAvL2NvbnZlcnQgdGhlIGtleSBpZiBpdCBuZWVkcyB0byBiZSBjb252ZXJ0ZWRcbiAgICAgICAgICAgICAgICBrdnMucHVzaChtaXhlZFJlbWFwVG9QeShrKSk7XG4gICAgICAgICAgICAgICAgLy9jb3ZlcnQgY29ycmVzcG9uZGluZyB2YWx1ZSBpZiBpdCBuZWVkcyB0byBiZSBjb252ZXJ0ZWRcbiAgICAgICAgICAgICAgICBrdnMucHVzaChtaXhlZFJlbWFwVG9QeShvYmpba10pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vY3JlYXRlIHRoZSBuZXcgZGljdGlvbmFyeVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTay5idWlsdGluLmRpY3Qoa3ZzKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2suYnVpbHRpbi5zdHIob2JqKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIFNrLmJ1aWx0aW4uYXNzayQob2JqKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2suYnVpbHRpbi5ib29sKG9iaik7XG4gICAgfSBlbHNlIGlmKHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gbmV3IFNrLmJ1aWx0aW4uc3RyKG9iai5uYW1lKTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEN1cnJlbnRUaW1lKCkge1xuICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICBsZXQgaCA9IE1hdGguZmxvb3IodG9kYXkuZ2V0SG91cnMoKSUxMik7XG4gICAgbGV0IG0gPSB0b2RheS5nZXRNaW51dGVzKCk7XG4gICAgLy9sZXQgcyA9IHRvZGF5LmdldFNlY29uZHMoKTtcbiAgICBpZiAobSA8IDEwKSB7bSA9IFwiMFwiICsgbTt9XG4gICAgLy9pZiAocyA8IDEwKSB7cyA9IFwiMFwiICsgczt9XG4gICAgbGV0IHAgPSBcImFtXCI7XG4gICAgaWYgKHRvZGF5LmdldEhvdXJzKCk+PTEyKSB7XG4gICAgICAgIHAgPSBcInBtXCI7XG4gICAgfVxuICAgIHJldHVybiBgJHtofToke219JHtwfWA7XG59XG5cbmV4cG9ydCBjb25zdCBweUludCA9IFNrLmJ1aWx0aW4uaW50XztcbmV4cG9ydCBjb25zdCBweU5vbmUgPSBTay5idWlsdGluLm5vbmUubm9uZSQ7XG5leHBvcnQgY29uc3QgcHlTdHIgPSBTay5idWlsdGluLnN0cjtcbmV4cG9ydCBjb25zdCBweVR1cGxlID0gU2suYnVpbHRpbi50dXBsZTtcbmV4cG9ydCBjb25zdCBweUNhbGxPclN1c3BlbmQgPSBTay5taXNjZXZhbC5jYWxsc2ltT3JTdXNwZW5kQXJyYXk7XG5cbmV4cG9ydCBjb25zdCB7IGlzVHJ1ZSwgcmljaENvbXBhcmVCb29sLCBjaGFpbiB9ID0gU2subWlzY2V2YWw7XG5leHBvcnQgY29uc3QgeyB0eXBlTmFtZSwgc2V0VXBNb2R1bGVNZXRob2RzLCBidWlsZE5hdGl2ZUNsYXNzIH0gPSBTay5hYnN0cjtcbmV4cG9ydCBjb25zdCB7IFR5cGVFcnJvciwgVmFsdWVFcnJvciwgS2V5RXJyb3IsIEluZGV4RXJyb3IsIGNoZWNrU3RyaW5nLCBhc251bSQgfSA9IFNrLmJ1aWx0aW47XG5leHBvcnQgY29uc3QgeyByZW1hcFRvUHksIHJlbWFwVG9KcyB9ID0gU2suZmZpO1xuZXhwb3J0IGNvbnN0IHsgZ2V0QXR0ciwgc2V0QXR0ciB9ID0gU2suZ2VuZXJpYztcbmV4cG9ydCBjb25zdCBjaGFpbk9yU3VzcGVuZCA9IGNoYWluOyIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9maWxlcG9uZF9fOyIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9qcXVlcnlfXzsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfa25vY2tvdXRfXzsiXSwic291cmNlUm9vdCI6IiJ9